import React, { useState, useRef, useEffect } from 'react';
import styled from 'styled-components';
import { 
  Heart, 
  MessageCircle, 
  Share2, 
  Calendar, 
  ShoppingBag, 
  Wrench, 
  Search, 
  X, 
  UserMinus, 
  MapPin,
  Package
} from 'lucide-react';

// Styled Components - Adapted for WelcomePage theme
const FeedContainer = styled.div`
  width: 100%;
  max-width: 1200px;
  margin: 0 auto;
`;

const FeedHeader = styled.div`
  margin-bottom: 2rem;
`;

const HeaderTop = styled.div`
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 1.5rem;
  flex-wrap: wrap;
  gap: 1rem;
`;

const HeaderTitle = styled.div`
  h1 {
    font-size: 1.8rem;
    font-family: ${props => props.theme?.fonts?.heading || "'Impact', sans-serif"};
    background: ${props => props.theme?.colors?.accentGradient || 'linear-gradient(45deg, #800000, #4A0404)'};
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
    margin-bottom: 0.5rem;
    
    @media (min-width: 768px) {
      font-size: 2.5rem;
    }
  }
  
  p {
    color: ${props => `${props.theme?.colors?.text || '#FFFFFF'}CC`};
    font-size: 0.9rem;
    
    @media (min-width: 768px) {
      font-size: 1rem;
    }
  }
`;

const FollowingButton = styled.button`
  background: ${props => `${props.theme?.colors?.surface || 'rgba(255, 255, 255, 0.05)'}80`};
  border: 1px solid ${props => `${props.theme?.colors?.accent || '#800000'}30`};
  color: ${props => props.theme?.colors?.text || '#FFFFFF'};
  padding: 0.75rem 1.25rem;
  border-radius: 25px;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.3s ease;
  display: flex;
  align-items: center;
  gap: 0.5rem;
  font-size: 0.9rem;
  
  &:hover {
    background: ${props => `${props.theme?.colors?.accent || '#800000'}20`};
    border-color: ${props => props.theme?.colors?.accent || '#800000'};
    transform: translateY(-2px);
  }
  
  &:active {
    transform: translateY(0);
  }
`;

const SearchBar = styled.div`
  position: relative;
  margin-bottom: 1rem;
  
  input {
    width: 100%;
    background: ${props => `${props.theme?.colors?.surface || 'rgba(255, 255, 255, 0.05)'}80`};
    border: 1px solid ${props => `${props.theme?.colors?.accent || '#800000'}30`};
    border-radius: 25px;
    padding: 0.75rem 3rem;
    color: ${props => props.theme?.colors?.text || '#FFFFFF'};
    font-size: 1rem;
    transition: all 0.3s ease;
    
    &:focus {
      outline: none;
      border-color: ${props => props.theme?.colors?.accent || '#800000'};
      background: ${props => `${props.theme?.colors?.surface || 'rgba(255, 255, 255, 0.05)'}CC`};
    }
    
    &::placeholder {
      color: ${props => `${props.theme?.colors?.text || '#FFFFFF'}60`};
    }
  }
  
  .search-icon {
    position: absolute;
    left: 1rem;
    top: 50%;
    transform: translateY(-50%);
    color: ${props => `${props.theme?.colors?.text || '#FFFFFF'}60`};
  }
  
  .clear-button {
    position: absolute;
    right: 1rem;
    top: 50%;
    transform: translateY(-50%);
    background: transparent;
    border: none;
    color: ${props => `${props.theme?.colors?.text || '#FFFFFF'}60`};
    cursor: pointer;
    padding: 0.25rem;
    display: flex;
    align-items: center;
    transition: color 0.2s;
    
    &:hover {
      color: ${props => props.theme?.colors?.accent || '#800000'};
    }
  }
`;

const FilterButtons = styled.div`
  display: flex;
  gap: 0.5rem;
  overflow-x: auto;
  padding: 0.5rem 0;
  -webkit-overflow-scrolling: touch;
  
  &::-webkit-scrollbar {
    height: 4px;
  }
  
  &::-webkit-scrollbar-track {
    background: transparent;
  }
  
  &::-webkit-scrollbar-thumb {
    background: ${props => props.theme?.colors?.accent || '#800000'};
    border-radius: 2px;
  }
`;

const FilterButton = styled.button`
  background: ${props => props.active ? 
    props.theme?.colors?.accent || '#800000' : 
    `${props.theme?.colors?.surface || 'rgba(255, 255, 255, 0.05)'}80`};
  border: 1px solid ${props => props.active ?
    props.theme?.colors?.accent || '#800000' :
    `${props.theme?.colors?.accent || '#800000'}30`};
  color: ${props => props.active ? 
    '#FFFFFF' : 
    props.theme?.colors?.text || '#FFFFFF'};
  padding: 0.6rem 1rem;
  border-radius: 20px;
  cursor: pointer;
  transition: all 0.3s;
  text-transform: uppercase;
  letter-spacing: 0.5px;
  font-weight: 500;
  font-size: 0.8rem;
  white-space: nowrap;
  display: flex;
  align-items: center;
  gap: 0.5rem;
  
  &:hover {
    background: ${props => props.active ?
      props.theme?.colors?.primary || '#4A0404' :
      `${props.theme?.colors?.accent || '#800000'}20`};
  }
  
  svg {
    width: 14px;
    height: 14px;
  }
`;

const PostCard = styled.div`
  background: ${props => `${props.theme?.colors?.surface || 'rgba(255, 255, 255, 0.05)'}90`};
  border-radius: 12px;
  overflow: hidden;
  border: 1px solid ${props => `${props.theme?.colors?.accent || '#800000'}30`};
  margin-bottom: 1.5rem;
  transition: all 0.3s ease;
  
  &:hover {
    transform: translateY(-2px);
    border-color: ${props => props.theme?.colors?.accent || '#800000'};
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
  }
`;

const PostHeader = styled.div`
  padding: 1rem;
  display: flex;
  justify-content: space-between;
  align-items: center;
`;

const ShopInfo = styled.div`
  display: flex;
  align-items: center;
  gap: 0.75rem;
  cursor: pointer;
  
  .avatar {
    width: 48px;
    height: 48px;
    border-radius: 50%;
    background: ${props => props.theme?.colors?.accentGradient || 'linear-gradient(45deg, #800000, #4A0404)'};
    display: flex;
    align-items: center;
    justify-content: center;
    color: white;
    font-weight: bold;
    font-size: 1.1rem;
    transition: transform 0.3s ease;
    
    &:hover {
      transform: scale(1.05);
    }
  }
  
  .info {
    h3 {
      font-size: 1rem;
      font-weight: 600;
      color: ${props => props.theme?.colors?.text || '#FFFFFF'};
      margin: 0 0 0.25rem 0;
      transition: color 0.3s ease;
      
      &:hover {
        color: ${props => props.theme?.colors?.accent || '#800000'};
      }
    }
    
    p {
      font-size: 0.85rem;
      color: ${props => `${props.theme?.colors?.text || '#FFFFFF'}80`};
      margin: 0;
    }
  }
`;

const PostTypeBadge = styled.div`
  padding: 0.4rem 0.8rem;
  border-radius: 15px;
  font-size: 0.75rem;
  font-weight: 600;
  text-transform: uppercase;
  letter-spacing: 0.5px;
  display: flex;
  align-items: center;
  gap: 0.4rem;
  
  &.item {
    background: ${props => `${props.theme?.colors?.accent || '#800000'}20`};
    color: ${props => props.theme?.colors?.accent || '#800000'};
  }
  
  &.service {
    background: rgba(147, 51, 234, 0.2);
    color: #9333ea;
  }
  
  &.calendar {
    background: rgba(34, 197, 94, 0.2);
    color: #22c55e;
  }
`;

const PostContent = styled.div`
  padding: 0 1rem 1rem 1rem;
  
  p {
    color: ${props => `${props.theme?.colors?.text || '#FFFFFF'}E6`};
    font-size: 0.95rem;
    line-height: 1.6;
    margin: 0;
  }
`;

const ItemDisplay = styled.div`
  padding: 0 1rem 1rem 1rem;
  
  img {
    width: 100%;
    height: 250px;
    object-fit: cover;
    border-radius: 8px;
    margin-bottom: 1rem;
    cursor: pointer;
    transition: transform 0.2s;
    
    &:hover {
      transform: scale(1.02);
    }
  }
  
  .item-info {
    display: flex;
    justify-content: space-between;
    align-items: center;
    
    .item-name {
      font-weight: 600;
      font-size: 1rem;
      color: ${props => props.theme?.colors?.text || '#FFFFFF'};
    }
    
    .item-price {
      font-size: 1.2rem;
      font-weight: bold;
      color: ${props => props.theme?.colors?.accent || '#800000'};
    }
  }
`;

const ServiceDisplay = styled.div`
  padding: 0 1rem 1rem 1rem;
  
  .service-card {
    background: rgba(147, 51, 234, 0.1);
    border: 1px solid rgba(147, 51, 234, 0.3);
    border-radius: 8px;
    padding: 1rem;
    display: flex;
    justify-content: space-between;
    align-items: center;
    transition: all 0.3s ease;
    cursor: pointer;
    
    &:hover {
      background: rgba(147, 51, 234, 0.15);
    }
    
    .service-name {
      font-weight: 600;
      font-size: 1rem;
      color: ${props => props.theme?.colors?.text || '#FFFFFF'};
    }
    
    .service-price {
      font-size: 1.2rem;
      font-weight: bold;
      color: #9333ea;
    }
  }
`;

const CalendarDisplay = styled.div`
  padding: 0 1rem 1rem 1rem;
  
  .event-card {
    background: rgba(34, 197, 94, 0.1);
    border: 1px solid rgba(34, 197, 94, 0.3);
    border-radius: 8px;
    padding: 1rem;
    transition: all 0.3s ease;
    cursor: pointer;
    
    &:hover {
      background: rgba(34, 197, 94, 0.15);
    }
    
    .event-date {
      display: flex;
      align-items: center;
      gap: 0.5rem;
      font-weight: 600;
      font-size: 1rem;
      color: ${props => props.theme?.colors?.text || '#FFFFFF'};
      margin-bottom: 0.5rem;
      
      svg {
        color: #22c55e;
      }
    }
    
    .event-time {
      color: ${props => `${props.theme?.colors?.text || '#FFFFFF'}CC`};
      font-size: 0.9rem;
      margin-bottom: 0.5rem;
    }
    
    .event-slots {
      font-size: 0.85rem;
      font-weight: 600;
      color: #22c55e;
    }
  }
`;

const PostActions = styled.div`
  border-top: 1px solid ${props => `${props.theme?.colors?.accent || '#800000'}20`};
  padding: 0.75rem 1rem;
  display: flex;
  justify-content: space-between;
  align-items: center;
`;

const ActionButton = styled.button`
  background: transparent;
  border: none;
  color: ${props => `${props.theme?.colors?.text || '#FFFFFF'}99`};
  cursor: pointer;
  display: flex;
  align-items: center;
  gap: 0.5rem;
  padding: 0.5rem;
  border-radius: 8px;
  transition: all 0.3s ease;
  font-size: 0.9rem;
  font-weight: 500;
  
  &:hover {
    background: ${props => `${props.theme?.colors?.accent || '#800000'}10`};
    color: ${props => props.theme?.colors?.text || '#FFFFFF'};
  }
  
  &.liked {
    color: #ef4444;
    
    svg {
      fill: #ef4444;
    }
  }
  
  svg {
    width: 18px;
    height: 18px;
  }
`;

const EmptyState = styled.div`
  text-align: center;
  padding: 3rem 1rem;
  
  svg {
    width: 64px;
    height: 64px;
    color: ${props => `${props.theme?.colors?.text || '#FFFFFF'}40`};
    margin-bottom: 1rem;
  }
  
  h3 {
    font-size: 1.2rem;
    color: ${props => props.theme?.colors?.text || '#FFFFFF'};
    margin-bottom: 0.5rem;
  }
  
  p {
    color: ${props => `${props.theme?.colors?.text || '#FFFFFF'}80`};
    font-size: 0.9rem;
    margin-bottom: 1rem;
  }
  
  button {
    background: ${props => props.theme?.colors?.accent || '#800000'};
    color: white;
    border: none;
    padding: 0.75rem 1.5rem;
    border-radius: 25px;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s ease;
    
    &:hover {
      background: ${props => props.theme?.colors?.primary || '#4A0404'};
      transform: translateY(-2px);
    }
  }
`;

// Main MediaFeed Component
const MediaFeed = ({ theme }) => {
  const [searchTerm, setSearchTerm] = useState('');
  const [activeFilter, setActiveFilter] = useState('all');

  // Sample posts data
  const [posts, setPosts] = useState([
    {
      id: 1,
      shopId: 1,
      shopName: "AutoCare Pro",
      shopAvatar: "AP",
      postType: "item",
      timestamp: "2 hours ago",
      content: "New inventory alert! Premium brake pads now in stock. Perfect for high-performance vehicles.",
      itemName: "Ceramic Brake Pad Set",
      itemPrice: "$129.99",
      itemImage: "https://images.unsplash.com/photo-1486262715619-67b85e0b08d3?w=400&h=300&fit=crop",
      likes: 24,
      comments: 5,
      isLiked: false
    },
    {
      id: 2,
      shopId: 2,
      shopName: "Precision Motors",
      shopAvatar: "PM",
      postType: "service",
      timestamp: "5 hours ago",
      content: "Introducing our new comprehensive vehicle inspection service! Complete diagnostics in under 1 hour.",
      serviceName: "Full Vehicle Diagnostic",
      servicePrice: "$89.99",
      likes: 18,
      comments: 3,
      isLiked: true
    },
    {
      id: 3,
      shopId: 3,
      shopName: "QuickFix Garage",
      shopAvatar: "QG",
      postType: "calendar",
      timestamp: "1 day ago",
      content: "We have availability this weekend! Book your slot for premium detailing service.",
      eventDate: "Oct 12, 2025",
      eventTime: "9:00 AM - 5:00 PM",
      availableSlots: 3,
      likes: 12,
      comments: 7,
      isLiked: false
    }
  ]);

  // Filter options
  const filterOptions = [
    { value: 'all', label: 'All Posts', icon: null },
    { value: 'item', label: 'Items', icon: <ShoppingBag /> },
    { value: 'service', label: 'Services', icon: <Wrench /> },
    { value: 'calendar', label: 'Events', icon: <Calendar /> }
  ];

  // Filtered posts
  const filteredPosts = posts.filter(post => {
    const matchesSearch = searchTerm === '' || 
      post.shopName.toLowerCase().includes(searchTerm.toLowerCase()) ||
      post.content.toLowerCase().includes(searchTerm.toLowerCase()) ||
      (post.itemName && post.itemName.toLowerCase().includes(searchTerm.toLowerCase()));
    
    const matchesFilter = activeFilter === 'all' || post.postType === activeFilter;
    
    return matchesSearch && matchesFilter;
  });

  const toggleLike = (postId) => {
    setPosts(posts.map(post => {
      if (post.id === postId) {
        return {
          ...post,
          isLiked: !post.isLiked,
          likes: post.isLiked ? post.likes - 1 : post.likes + 1
        };
      }
      return post;
    }));
  };

  const getPostTypeIcon = (type) => {
    switch(type) {
      case 'item':
        return <ShoppingBag size={14} />;
      case 'service':
        return <Wrench size={14} />;
      case 'calendar':
        return <Calendar size={14} />;
      default:
        return null;
    }
  };

  return (
    <FeedContainer theme={theme}>
      <FeedHeader theme={theme}>
        <HeaderTop>
          <HeaderTitle theme={theme}>
            <h1>Media Feed</h1>
            <p>Latest updates from shops you follow</p>
          </HeaderTitle>
          <FollowingButton theme={theme}>
            Following (4)
          </FollowingButton>
        </HeaderTop>

        {/* Search Bar */}
        <SearchBar theme={theme}>
          <Search size={18} className="search-icon" />
          <input
            type="text"
            placeholder="Search posts, shops, items..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
          />
          {searchTerm && (
            <button 
              className="clear-button"
              onClick={() => setSearchTerm('')}
            >
              <X size={18} />
            </button>
          )}
        </SearchBar>

        {/* Filter Buttons */}
        <FilterButtons theme={theme}>
          {filterOptions.map(option => (
            <FilterButton
              key={option.value}
              theme={theme}
              active={activeFilter === option.value}
              onClick={() => setActiveFilter(option.value)}
            >
              {option.icon}
              {option.label}
            </FilterButton>
          ))}
        </FilterButtons>
      </FeedHeader>

      {/* Posts Feed */}
      {filteredPosts.length === 0 ? (
        <EmptyState theme={theme}>
          <Search />
          <h3>No posts found</h3>
          <p>
            {searchTerm 
              ? `No results for "${searchTerm}"`
              : `No ${activeFilter === 'all' ? '' : activeFilter} posts available`}
          </p>
          {searchTerm && (
            <button onClick={() => setSearchTerm('')}>
              Clear Search
            </button>
          )}
        </EmptyState>
      ) : (
        <>
          {filteredPosts.map((post) => (
            <PostCard key={post.id} theme={theme}>
              {/* Post Header */}
              <PostHeader>
                <ShopInfo theme={theme}>
                  <div className="avatar">{post.shopAvatar}</div>
                  <div className="info">
                    <h3>{post.shopName}</h3>
                    <p>{post.timestamp}</p>
                  </div>
                </ShopInfo>
                <PostTypeBadge 
                  theme={theme}
                  className={post.postType}
                >
                  {getPostTypeIcon(post.postType)}
                  {post.postType === 'item' && 'New Item'}
                  {post.postType === 'service' && 'Service'}
                  {post.postType === 'calendar' && 'Event'}
                </PostTypeBadge>
              </PostHeader>

              {/* Post Content */}
              <PostContent theme={theme}>
                <p>{post.content}</p>
              </PostContent>

              {/* Post Type Specific Content */}
              {post.postType === 'item' && post.itemImage && (
                <ItemDisplay theme={theme}>
                  <img 
                    src={post.itemImage} 
                    alt={post.itemName}
                  />
                  <div className="item-info">
                    <span className="item-name">{post.itemName}</span>
                    <span className="item-price">{post.itemPrice}</span>
                  </div>
                </ItemDisplay>
              )}

              {post.postType === 'service' && (
                <ServiceDisplay theme={theme}>
                  <div className="service-card">
                    <span className="service-name">{post.serviceName}</span>
                    <span className="service-price">{post.servicePrice}</span>
                  </div>
                </ServiceDisplay>
              )}

              {post.postType === 'calendar' && (
                <CalendarDisplay theme={theme}>
                  <div className="event-card">
                    <div className="event-date">
                      <Calendar size={18} />
                      {post.eventDate}
                    </div>
                    <div className="event-time">{post.eventTime}</div>
                    <div className="event-slots">
                      {post.availableSlots} slots available
                    </div>
                  </div>
                </CalendarDisplay>
              )}

              {/* Post Actions */}
              <PostActions theme={theme}>
                <div style={{ display: 'flex', gap: '1rem' }}>
                  <ActionButton
                    theme={theme}
                    className={post.isLiked ? 'liked' : ''}
                    onClick={() => toggleLike(post.id)}
                  >
                    <Heart size={18} />
                    {post.likes}
                  </ActionButton>
                  <ActionButton theme={theme}>
                    <MessageCircle size={18} />
                    {post.comments}
                  </ActionButton>
                </div>
                <ActionButton theme={theme}>
                  <Share2 size={18} />
                </ActionButton>
              </PostActions>
            </PostCard>
          ))}
        </>
      )}
    </FeedContainer>
  );
};

export default MediaFeed;