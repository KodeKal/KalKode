{
    "sourceFile": "src/pages/WelcomePage.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 25,
            "patches": [
                {
                    "date": 1736990195768,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1736991402408,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -306,13 +306,9 @@\n           <h1>Welcome to KalKode</h1>\n           <p>Join the underground marketplace where local creators thrive. </p>\n           <p>Build your empire and discover unique treasures.</p>\n           <div style={{ display: 'flex', gap: '1rem', justifyContent: 'center', marginTop: '2rem' }}>\n-            <ActionButton onClick={handleOpenShop}>Open Up Shop</ActionButton>\n-            <ActionButton onClick={handleOpenShop}>Open Up Shop</ActionButton>\n-            <DiscoverButton onClick={() => navigate('/discover')}>\n-              Discover Shops\n-            </DiscoverButton>\n+            <ActionButton onClick={handleOpenShop}>Open Up Shop</ActionButton>            \n           </div>\n         </WelcomeSection>\n \n         <TabContainer>\n"
                },
                {
                    "date": 1736991438226,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -306,9 +306,19 @@\n           <h1>Welcome to KalKode</h1>\n           <p>Join the underground marketplace where local creators thrive. </p>\n           <p>Build your empire and discover unique treasures.</p>\n           <div style={{ display: 'flex', gap: '1rem', justifyContent: 'center', marginTop: '2rem' }}>\n-            <ActionButton onClick={handleOpenShop}>Open Up Shop</ActionButton>            \n+            <ActionButton onClick={handleOpenShop}>Open Up Shop</ActionButton>\n+            <ActionButton \n+              onClick={handleLogin}\n+              style={{ \n+                background: 'transparent',\n+                border: '2px solid #800000',\n+                color: '#800000'\n+              }}\n+            >\n+              Sign In\n+            </ActionButton>\n           </div>\n         </WelcomeSection>\n \n         <TabContainer>\n"
                },
                {
                    "date": 1736991504331,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,337 @@\n+// src/pages/WelcomePage.js\n+\n+import React, { useState } from 'react';\n+import styled from 'styled-components';\n+import { Package, Users } from 'lucide-react';\n+import { useNavigate } from 'react-router-dom'; // New import\n+\n+const PageContainer = styled.div.attrs({ className: 'page-container' })`\n+  min-height: 100vh;\n+  background: #000000;\n+  color: #FFFFFF;\n+  position: relative;\n+  overflow: hidden;\n+\n+  &::before {\n+    content: '';\n+    position: absolute;\n+    width: 100%;\n+    height: 100%;\n+    background: \n+      radial-gradient(circle at 20% 30%, rgba(128, 0, 0, 0.2) 0%, transparent 50%),\n+      radial-gradient(circle at 80% 70%, rgba(128, 0, 0, 0.15) 0%, transparent 50%);\n+    opacity: 0.8;\n+    animation: galaxySwirl 30s linear infinite;\n+  }\n+\n+  &::after {\n+    content: '';\n+    position: absolute;\n+    width: 100%;\n+    height: 100%;\n+    background-image: \n+      radial-gradient(circle 1px, #FFF 1px, transparent 1px),\n+      radial-gradient(circle 2px, #800000 1px, transparent 2px);\n+    background-size: 200px 200px, 300px 300px;\n+    background-position: 0 0;\n+    opacity: 0.1;\n+    animation: twinkle 4s infinite alternate;\n+  }\n+\n+  .ping {\n+    position: absolute;\n+    width: 2px;\n+    height: 2px;\n+    border-radius: 50%;\n+    background: #800000;\n+    pointer-events: none;\n+  }\n+\n+  .ping::before {\n+    content: '';\n+    position: absolute;\n+    top: 50%;\n+    left: 50%;\n+    width: 100px;\n+    height: 100px;\n+    transform: translate(-50%, -50%);\n+    border-radius: 50%;\n+    background: radial-gradient(circle, rgba(128, 0, 0, 0.4) 0%, transparent 70%);\n+    animation: ping 2s ease-out forwards;\n+  }\n+\n+  @keyframes galaxySwirl {\n+    0% { transform: rotate(0deg); }\n+    100% { transform: rotate(360deg); }\n+  }\n+\n+  @keyframes twinkle {\n+    0%, 100% { opacity: 0.05; }\n+    50% { opacity: 0.1; }\n+  }\n+\n+  @keyframes ping {\n+    0% {\n+      width: 0px;\n+      height: 0px;\n+      opacity: 1;\n+    }\n+    100% {\n+      width: 200px;\n+      height: 200px;\n+      opacity: 0;\n+    }\n+  }\n+`;\n+\n+const Header = styled.header`\n+  width: 100%;\n+  height: 80px; // Fixed height\n+  padding: 0 2rem; // Changed padding\n+  display: flex;\n+  justify-content: space-between;\n+  align-items: center;\n+  background: rgba(0, 0, 0, 0.9);\n+  backdrop-filter: blur(10px);\n+  border-bottom: 1px solid rgba(128, 0, 0, 0.3);\n+  position: fixed; // Changed from sticky\n+  top: 0;\n+  z-index: 10;\n+`;\n+\n+const Logo = styled.div`\n+  color: #800000;\n+  font-family: 'Impact', 'Arial Black', sans-serif;\n+  font-size: 2rem;\n+  letter-spacing: 2px;\n+  transform: skew(-5deg);\n+`;\n+\n+const MainContent = styled.main`\n+  max-width: 1200px;\n+  margin: 0 auto;\n+  padding: 6rem 2rem 2rem 2rem; // Added top padding\n+  position: relative;\n+  z-index: 1;\n+`;\n+\n+const LoginButton = styled.button`\n+  background: transparent;\n+  border: 2px solid #800000;\n+  color: #800000;\n+  padding: 0.8rem 2rem;\n+  border-radius: 30px;\n+  font-weight: 500;\n+  cursor: pointer;\n+  transition: all 0.3s;\n+  letter-spacing: 1px;\n+  font-size: 1rem;\n+  text-transform: uppercase;\n+  display: flex;\n+  align-items: center;\n+  gap: 0.5rem;\n+\n+  &:hover {\n+    background: rgba(128, 0, 0, 0.1);\n+    transform: translateY(-2px);\n+    box-shadow: 0 2px 10px rgba(128, 0, 0, 0.2);\n+  }\n+`;\n+\n+const WelcomeSection = styled.section`\n+  text-align: center;\n+  margin: 4rem 0;\n+  position: relative;\n+\n+  h1 {\n+    font-family: 'Impact', sans-serif;\n+    font-size: 4.5rem;\n+    margin-bottom: 1rem;\n+    background: linear-gradient(45deg, #800000, #4A0404);\n+    -webkit-background-clip: text;\n+    -webkit-text-fill-color: transparent;\n+    text-shadow: 0 0 30px rgba(128, 0, 0, 0.3);\n+    letter-spacing: 2px;\n+    transform: skew(-5deg);\n+  }\n+\n+  p {\n+    font-size: 1.2rem;\n+    line-height: 1.6;\n+    max-width: 800px;\n+    margin: 0 auto;\n+    color: rgba(255, 255, 255, 0.8);\n+    font-weight: 300;\n+  }\n+`;\n+\n+const ActionButton = styled.button`\n+  background: linear-gradient(45deg, #800000, #4A0404);\n+  border: none;\n+  padding: 1rem 2.5rem;\n+  border-radius: 30px;\n+  color: white;\n+  font-weight: bold;\n+  cursor: pointer;\n+  transition: all 0.3s;\n+  text-transform: uppercase;\n+  letter-spacing: 2px;\n+  margin-top: 2rem;\n+\n+  &:hover {\n+    transform: translateY(-2px);\n+    box-shadow: 0 5px 15px rgba(128, 0, 0, 0.3);\n+  }\n+`;\n+\n+const TabContainer = styled.div`\n+  display: flex;\n+  justify-content: center;\n+  gap: 1rem;\n+  margin: 3rem 0;\n+`;\n+\n+const Tab = styled.button`\n+  background: ${props => props.active ? 'rgba(128, 0, 0, 0.2)' : 'transparent'};\n+  border: 1px solid ${props => props.active ? '#800000' : 'rgba(128, 0, 0, 0.3)'};\n+  color: ${props => props.active ? '#FFFFFF' : 'rgba(255, 255, 255, 0.6)'};\n+  padding: 0.8rem 1.5rem;\n+  border-radius: 20px;\n+  cursor: pointer;\n+  transition: all 0.3s;\n+  text-transform: uppercase;\n+  letter-spacing: 1px;\n+  font-weight: 500;\n+  font-family: 'Impact', sans-serif;\n+\n+  &:hover {\n+    background: rgba(128, 0, 0, 0.2);\n+    border-color: #800000;\n+    color: #FFFFFF;\n+  }\n+`;\n+\n+const GridContainer = styled.div`\n+  display: grid;\n+  grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));\n+  gap: 2rem;\n+  margin-top: 2rem;\n+`;\n+\n+const WelcomePage = () => {\n+  const navigate = useNavigate(); // New\n+  const [activeTab, setActiveTab] = useState('featured');\n+  const handleOpenShop = () => {\n+    navigate('/shop/create/template');\n+  };\n+\n+  const handleLogin = () => {\n+    navigate('/auth', { \n+      state: { \n+        mode: 'login',\n+        from: window.location.pathname\n+      }\n+    });\n+  };\n+\n+  React.useEffect(() => {\n+    const container = document.querySelector('.page-container');\n+    if (!container) return; // Add this check\n+  \n+    const createPing = () => {\n+      const ping = document.createElement('div');\n+      ping.className = 'ping';\n+      \n+      ping.style.left = `${Math.random() * 100}%`;\n+      ping.style.top = `${Math.random() * 100}%`;\n+      \n+      container.appendChild(ping);\n+      \n+      setTimeout(() => {\n+        if (ping && ping.parentNode) { // Add this check\n+          ping.remove();\n+        }\n+      }, 2000);\n+    };\n+  \n+    const createPingGroup = (count) => {\n+      for (let i = 0; i < count; i++) {\n+        setTimeout(() => {\n+          createPing();\n+        }, i * 200);\n+      }\n+    };\n+  \n+    const pingCounts = [10, 30, 20];\n+    let currentIndex = 0;\n+  \n+    const interval = setInterval(() => {\n+      const count = pingCounts[currentIndex];\n+      createPingGroup(count);\n+      currentIndex = (currentIndex + 1) % pingCounts.length;\n+    }, 3000);\n+  \n+    // Cleanup function\n+    return () => {\n+      clearInterval(interval);\n+      // Remove any remaining pings\n+      const pings = container.getElementsByClassName('ping');\n+      while (pings.length > 0) {\n+        pings[0].remove();\n+      }\n+    };\n+  }, []); // Empty dependency array\n+\n+  return (\n+    <PageContainer className=\"page-container\">\n+      <Header>\n+        <Logo onClick={() => navigate('/')}>KALKODE</Logo>\n+        <LoginButton onClick={handleLogin}>\n+          Login\n+        </LoginButton>\n+      </Header>\n+\n+      <MainContent>\n+        <WelcomeSection>\n+          <h1>Welcome to KalKode</h1>\n+          <p>Join the underground marketplace where local creators thrive. </p>\n+          <p>Build your empire and discover unique treasures.</p>\n+          <div style={{ display: 'flex', gap: '1rem', justifyContent: 'center', marginTop: '2rem' }}>\n+            <ActionButton onClick={handleOpenShop}>Open Up Shop</ActionButton>\n+            <ActionButton \n+              onClick={handleLogin}\n+              style={{ \n+                background: 'transparent',\n+                border: '2px solid #800000',\n+                color: '#800000'\n+              }}\n+            >\n+              Sign In\n+            </ActionButton>\n+          </div>\n+        </WelcomeSection>\n+\n+        <TabContainer>\n+          <Tab \n+            active={activeTab === 'featured'} \n+            onClick={() => setActiveTab('featured')}\n+          >\n+            Featured Items\n+          </Tab>\n+          <Tab \n+            active={activeTab === 'social'} \n+            onClick={() => setActiveTab('social')}\n+          >\n+            Community\n+          </Tab>\n+        </TabContainer>\n+\n+        <GridContainer>\n+          {/* Content will be added later */}\n+        </GridContainer>\n+      </MainContent>\n+    </PageContainer>\n+  );\n+};\n+\n+export default WelcomePage;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1738039001254,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,8 +3,11 @@\n import React, { useState } from 'react';\n import styled from 'styled-components';\n import { Package, Users } from 'lucide-react';\n import { useNavigate } from 'react-router-dom'; // New import\n+import { useEffect, useState } from 'react';\n+import { getFeaturedItems } from '../firebase/firebaseService';\n+import FeaturedItem from './components/shop/FeaturedItem';\n \n const PageContainer = styled.div.attrs({ className: 'page-container' })`\n   min-height: 100vh;\n   background: #000000;\n@@ -220,8 +223,10 @@\n \n const WelcomePage = () => {\n   const navigate = useNavigate(); // New\n   const [activeTab, setActiveTab] = useState('featured');\n+  const [featuredItems, setFeaturedItems] = useState([]);\n+  const [loading, setLoading] = useState(true);\n   const handleOpenShop = () => {\n     navigate('/shop/create/template');\n   };\n \n@@ -233,8 +238,25 @@\n       }\n     });\n   };\n \n+  useEffect(() => {\n+    const loadFeaturedItems = async () => {\n+      try {\n+        const items = await getFeaturedItems(6); // Get 6 featured items\n+        setFeaturedItems(items);\n+      } catch (error) {\n+        console.error('Error loading featured items:', error);\n+      } finally {\n+        setLoading(false);\n+      }\n+    };\n+  \n+    if (activeTab === 'featured') {\n+      loadFeaturedItems();\n+    }\n+  }, [activeTab]);\n+\n   React.useEffect(() => {\n     const container = document.querySelector('.page-container');\n     if (!container) return; // Add this check\n   \n@@ -326,9 +348,21 @@\n           </Tab>\n         </TabContainer>\n \n         <GridContainer>\n-          {/* Content will be added later */}\n+          {loading ? (\n+            <div style={{ textAlign: 'center', gridColumn: '1/-1' }}>\n+              Loading featured items...\n+            </div>\n+          ) : featuredItems.length > 0 ? (\n+            featuredItems.map(item => (\n+              <FeaturedItem key={item.id} item={item} />\n+            ))\n+          ) : (\n+            <div style={{ textAlign: 'center', gridColumn: '1/-1' }}>\n+              No featured items available yet.\n+            </div>\n+          )}\n         </GridContainer>\n       </MainContent>\n     </PageContainer>\n   );\n"
                },
                {
                    "date": 1738039819451,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,11 +1,10 @@\n // src/pages/WelcomePage.js\n-\n-import React, { useState } from 'react';\n+import React from 'react';  // Keep only one React import\n+import { useState, useEffect } from 'react';  // Combine useState imports\n import styled from 'styled-components';\n import { Package, Users } from 'lucide-react';\n import { useNavigate } from 'react-router-dom'; // New import\n-import { useEffect, useState } from 'react';\n import { getFeaturedItems } from '../firebase/firebaseService';\n import FeaturedItem from './components/shop/FeaturedItem';\n \n const PageContainer = styled.div.attrs({ className: 'page-container' })`\n"
                },
                {
                    "date": 1738039839539,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,8 +3,9 @@\n import { useState, useEffect } from 'react';  // Combine useState imports\n import styled from 'styled-components';\n import { Package, Users } from 'lucide-react';\n import { useNavigate } from 'react-router-dom'; // New import\n+import { useEffect, useState } from 'react';\n import { getFeaturedItems } from '../firebase/firebaseService';\n import FeaturedItem from './components/shop/FeaturedItem';\n \n const PageContainer = styled.div.attrs({ className: 'page-container' })`\n"
                },
                {
                    "date": 1738039873081,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,6 @@\n // src/pages/WelcomePage.js\n import React from 'react';  // Keep only one React import\n-import { useState, useEffect } from 'react';  // Combine useState imports\n import styled from 'styled-components';\n import { Package, Users } from 'lucide-react';\n import { useNavigate } from 'react-router-dom'; // New import\n import { useEffect, useState } from 'react';\n"
                },
                {
                    "date": 1738040250896,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,386 @@\n+// src/pages/WelcomePage.js\n+import React from 'react';  // Keep only one React import\n+import styled from 'styled-components';\n+import { Package, Users } from 'lucide-react';\n+import { useNavigate } from 'react-router-dom'; // New import\n+import { useEffect, useState } from 'react';\n+import { getFeaturedItems } from '../firebase/firebaseService';\n+import FeaturedItem from './components/shop/FeaturedItem';\n+\n+const PageContainer = styled.div.attrs({ className: 'page-container' })`\n+  min-height: 100vh;\n+  background: #000000;\n+  color: #FFFFFF;\n+  position: relative;\n+  overflow: hidden;\n+\n+  &::before {\n+    content: '';\n+    position: absolute;\n+    width: 100%;\n+    height: 100%;\n+    background: \n+      radial-gradient(circle at 20% 30%, rgba(128, 0, 0, 0.2) 0%, transparent 50%),\n+      radial-gradient(circle at 80% 70%, rgba(128, 0, 0, 0.15) 0%, transparent 50%);\n+    opacity: 0.8;\n+    animation: galaxySwirl 30s linear infinite;\n+  }\n+\n+  &::after {\n+    content: '';\n+    position: absolute;\n+    width: 100%;\n+    height: 100%;\n+    background-image: \n+      radial-gradient(circle 1px, #FFF 1px, transparent 1px),\n+      radial-gradient(circle 2px, #800000 1px, transparent 2px);\n+    background-size: 200px 200px, 300px 300px;\n+    background-position: 0 0;\n+    opacity: 0.1;\n+    animation: twinkle 4s infinite alternate;\n+  }\n+\n+  .ping {\n+    position: absolute;\n+    width: 2px;\n+    height: 2px;\n+    border-radius: 50%;\n+    background: #800000;\n+    pointer-events: none;\n+  }\n+\n+  .ping::before {\n+    content: '';\n+    position: absolute;\n+    top: 50%;\n+    left: 50%;\n+    width: 100px;\n+    height: 100px;\n+    transform: translate(-50%, -50%);\n+    border-radius: 50%;\n+    background: radial-gradient(circle, rgba(128, 0, 0, 0.4) 0%, transparent 70%);\n+    animation: ping 2s ease-out forwards;\n+  }\n+\n+  @keyframes galaxySwirl {\n+    0% { transform: rotate(0deg); }\n+    100% { transform: rotate(360deg); }\n+  }\n+\n+  @keyframes twinkle {\n+    0%, 100% { opacity: 0.05; }\n+    50% { opacity: 0.1; }\n+  }\n+\n+  @keyframes ping {\n+    0% {\n+      width: 0px;\n+      height: 0px;\n+      opacity: 1;\n+    }\n+    100% {\n+      width: 200px;\n+      height: 200px;\n+      opacity: 0;\n+    }\n+  }\n+`;\n+\n+const Header = styled.header`\n+  width: 100%;\n+  height: 80px; // Fixed height\n+  padding: 0 2rem; // Changed padding\n+  display: flex;\n+  justify-content: space-between;\n+  align-items: center;\n+  background: rgba(0, 0, 0, 0.9);\n+  backdrop-filter: blur(10px);\n+  border-bottom: 1px solid rgba(128, 0, 0, 0.3);\n+  position: fixed; // Changed from sticky\n+  top: 0;\n+  z-index: 10;\n+`;\n+\n+const Logo = styled.div`\n+  color: #800000;\n+  font-family: 'Impact', 'Arial Black', sans-serif;\n+  font-size: 2rem;\n+  letter-spacing: 2px;\n+  transform: skew(-5deg);\n+`;\n+\n+const MainContent = styled.main`\n+  max-width: 1200px;\n+  margin: 0 auto;\n+  padding: 6rem 2rem 2rem 2rem; // Added top padding\n+  position: relative;\n+  z-index: 1;\n+`;\n+\n+const LoginButton = styled.button`\n+  background: transparent;\n+  border: 2px solid #800000;\n+  color: #800000;\n+  padding: 0.8rem 2rem;\n+  border-radius: 30px;\n+  font-weight: 500;\n+  cursor: pointer;\n+  transition: all 0.3s;\n+  letter-spacing: 1px;\n+  font-size: 1rem;\n+  text-transform: uppercase;\n+  display: flex;\n+  align-items: center;\n+  gap: 0.5rem;\n+\n+  &:hover {\n+    background: rgba(128, 0, 0, 0.1);\n+    transform: translateY(-2px);\n+    box-shadow: 0 2px 10px rgba(128, 0, 0, 0.2);\n+  }\n+`;\n+\n+const WelcomeSection = styled.section`\n+  text-align: center;\n+  margin: 4rem 0;\n+  position: relative;\n+\n+  h1 {\n+    font-family: 'Impact', sans-serif;\n+    font-size: 4.5rem;\n+    margin-bottom: 1rem;\n+    background: linear-gradient(45deg, #800000, #4A0404);\n+    -webkit-background-clip: text;\n+    -webkit-text-fill-color: transparent;\n+    text-shadow: 0 0 30px rgba(128, 0, 0, 0.3);\n+    letter-spacing: 2px;\n+    transform: skew(-5deg);\n+  }\n+\n+  p {\n+    font-size: 1.2rem;\n+    line-height: 1.6;\n+    max-width: 800px;\n+    margin: 0 auto;\n+    color: rgba(255, 255, 255, 0.8);\n+    font-weight: 300;\n+  }\n+`;\n+\n+const ActionButton = styled.button`\n+  background: linear-gradient(45deg, #800000, #4A0404);\n+  border: none;\n+  padding: 1rem 2.5rem;\n+  border-radius: 30px;\n+  color: white;\n+  font-weight: bold;\n+  cursor: pointer;\n+  transition: all 0.3s;\n+  text-transform: uppercase;\n+  letter-spacing: 2px;\n+  margin-top: 2rem;\n+\n+  &:hover {\n+    transform: translateY(-2px);\n+    box-shadow: 0 5px 15px rgba(128, 0, 0, 0.3);\n+  }\n+`;\n+\n+const TabContainer = styled.div`\n+  display: flex;\n+  justify-content: center;\n+  gap: 1rem;\n+  margin: 3rem 0;\n+`;\n+\n+const Tab = styled.button`\n+  background: ${props => props.active ? 'rgba(128, 0, 0, 0.2)' : 'transparent'};\n+  border: 1px solid ${props => props.active ? '#800000' : 'rgba(128, 0, 0, 0.3)'};\n+  color: ${props => props.active ? '#FFFFFF' : 'rgba(255, 255, 255, 0.6)'};\n+  padding: 0.8rem 1.5rem;\n+  border-radius: 20px;\n+  cursor: pointer;\n+  transition: all 0.3s;\n+  text-transform: uppercase;\n+  letter-spacing: 1px;\n+  font-weight: 500;\n+  font-family: 'Impact', sans-serif;\n+\n+  &:hover {\n+    background: rgba(128, 0, 0, 0.2);\n+    border-color: #800000;\n+    color: #FFFFFF;\n+  }\n+`;\n+\n+const GridContainer = styled.div`\n+  display: grid;\n+  grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));\n+  gap: 2rem;\n+  margin-top: 2rem;\n+`;\n+\n+const WelcomePage = () => {\n+  const navigate = useNavigate(); // New\n+  const [activeTab, setActiveTab] = useState('featured');\n+  const [featuredItems, setFeaturedItems] = useState([]);\n+  const [loading, setLoading] = useState(true);\n+  const [error, setError] = useState(null);\n+  const handleOpenShop = () => {\n+    navigate('/shop/create/template');\n+  };\n+\n+  const handleLogin = () => {\n+    navigate('/auth', { \n+      state: { \n+        mode: 'login',\n+        from: window.location.pathname\n+      }\n+    });\n+  };\n+\n+  useEffect(() => {\n+    const loadFeaturedItems = async () => {\n+      try {\n+        setLoading(true);\n+        setError(null);\n+        const items = await getFeaturedItems(6);\n+        setFeaturedItems(items);\n+      } catch (error) {\n+        console.error('Error loading featured items:', error);\n+        setError('Failed to load featured items. Please try again later.');\n+      } finally {\n+        setLoading(false);\n+      }\n+    };\n+  \n+    if (activeTab === 'featured') {\n+      loadFeaturedItems();\n+    }\n+  }, [activeTab]);\n+\n+  React.useEffect(() => {\n+    const container = document.querySelector('.page-container');\n+    if (!container) return; // Add this check\n+  \n+    const createPing = () => {\n+      const ping = document.createElement('div');\n+      ping.className = 'ping';\n+      \n+      ping.style.left = `${Math.random() * 100}%`;\n+      ping.style.top = `${Math.random() * 100}%`;\n+      \n+      container.appendChild(ping);\n+      \n+      setTimeout(() => {\n+        if (ping && ping.parentNode) { // Add this check\n+          ping.remove();\n+        }\n+      }, 2000);\n+    };\n+  \n+    const createPingGroup = (count) => {\n+      for (let i = 0; i < count; i++) {\n+        setTimeout(() => {\n+          createPing();\n+        }, i * 200);\n+      }\n+    };\n+  \n+    const pingCounts = [10, 30, 20];\n+    let currentIndex = 0;\n+  \n+    const interval = setInterval(() => {\n+      const count = pingCounts[currentIndex];\n+      createPingGroup(count);\n+      currentIndex = (currentIndex + 1) % pingCounts.length;\n+    }, 3000);\n+  \n+    // Cleanup function\n+    return () => {\n+      clearInterval(interval);\n+      // Remove any remaining pings\n+      const pings = container.getElementsByClassName('ping');\n+      while (pings.length > 0) {\n+        pings[0].remove();\n+      }\n+    };\n+  }, []); // Empty dependency array\n+\n+  return (\n+    <PageContainer className=\"page-container\">\n+      <Header>\n+        <Logo onClick={() => navigate('/')}>KALKODE</Logo>\n+        <LoginButton onClick={handleLogin}>\n+          Login\n+        </LoginButton>\n+      </Header>\n+\n+      <MainContent>\n+        <WelcomeSection>\n+          <h1>Welcome to KalKode</h1>\n+          <p>Join the underground marketplace where local creators thrive. </p>\n+          <p>Build your empire and discover unique treasures.</p>\n+          <div style={{ display: 'flex', gap: '1rem', justifyContent: 'center', marginTop: '2rem' }}>\n+            <ActionButton onClick={handleOpenShop}>Open Up Shop</ActionButton>\n+            <ActionButton \n+              onClick={handleLogin}\n+              style={{ \n+                background: 'transparent',\n+                border: '2px solid #800000',\n+                color: '#800000'\n+              }}\n+            >\n+              Sign In\n+            </ActionButton>\n+          </div>\n+        </WelcomeSection>\n+\n+        <TabContainer>\n+          <Tab \n+            active={activeTab === 'featured'} \n+            onClick={() => setActiveTab('featured')}\n+          >\n+            Featured Items\n+          </Tab>\n+          <Tab \n+            active={activeTab === 'social'} \n+            onClick={() => setActiveTab('social')}\n+          >\n+            Community\n+          </Tab>\n+        </TabContainer>\n+\n+        <GridContainer>\n+          {error ? (\n+            <div style={{ textAlign: 'center', gridColumn: '1/-1', color: '#ff4444' }}>\n+              {error}\n+            </div>\n+          ) : loading ? (\n+            <div style={{ textAlign: 'center', gridColumn: '1/-1' }}>\n+              <LoadingSpinner />\n+            </div>\n+          ) : featuredItems.length > 0 ? (\n+            featuredItems.map(item => (\n+              <FeaturedItem \n+                key={`${item.shopId}-${item.id}`} \n+                item={item} \n+              />\n+            ))\n+          ) : (\n+            <div style={{ \n+              textAlign: 'center', \n+              gridColumn: '1/-1',\n+              padding: '4rem',\n+              color: 'rgba(255, 255, 255, 0.7)'\n+            }}>\n+              No featured items available yet.\n+            </div>\n+          )}\n+        </GridContainer>\n+      </MainContent>\n+    </PageContainer>\n+  );\n+};\n+\n+export default WelcomePage;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1738040308108,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -100,8 +100,24 @@\n   top: 0;\n   z-index: 10;\n `;\n \n+const LoadingSpinner = styled.div`\n+  width: 40px;\n+  height: 40px;\n+  margin: 2rem auto;\n+  border: 3px solid rgba(128, 0, 0, 0.1);\n+  border-radius: 50%;\n+  border-top-color: #800000;\n+  animation: spin 1s linear infinite;\n+\n+  @keyframes spin {\n+    to {\n+      transform: rotate(360deg);\n+    }\n+  }\n+`;\n+\n const Logo = styled.div`\n   color: #800000;\n   font-family: 'Impact', 'Arial Black', sans-serif;\n   font-size: 2rem;\n"
                },
                {
                    "date": 1738040448345,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -398,722 +398,5 @@\n     </PageContainer>\n   );\n };\n \n-export default WelcomePage;\n-// src/pages/WelcomePage.js\n-import React from 'react';  // Keep only one React import\n-import styled from 'styled-components';\n-import { Package, Users } from 'lucide-react';\n-import { useNavigate } from 'react-router-dom'; // New import\n-import { useEffect, useState } from 'react';\n-import { getFeaturedItems } from '../firebase/firebaseService';\n-import FeaturedItem from './components/shop/FeaturedItem';\n-\n-const PageContainer = styled.div.attrs({ className: 'page-container' })`\n-  min-height: 100vh;\n-  background: #000000;\n-  color: #FFFFFF;\n-  position: relative;\n-  overflow: hidden;\n-\n-  &::before {\n-    content: '';\n-    position: absolute;\n-    width: 100%;\n-    height: 100%;\n-    background: \n-      radial-gradient(circle at 20% 30%, rgba(128, 0, 0, 0.2) 0%, transparent 50%),\n-      radial-gradient(circle at 80% 70%, rgba(128, 0, 0, 0.15) 0%, transparent 50%);\n-    opacity: 0.8;\n-    animation: galaxySwirl 30s linear infinite;\n-  }\n-\n-  &::after {\n-    content: '';\n-    position: absolute;\n-    width: 100%;\n-    height: 100%;\n-    background-image: \n-      radial-gradient(circle 1px, #FFF 1px, transparent 1px),\n-      radial-gradient(circle 2px, #800000 1px, transparent 2px);\n-    background-size: 200px 200px, 300px 300px;\n-    background-position: 0 0;\n-    opacity: 0.1;\n-    animation: twinkle 4s infinite alternate;\n-  }\n-\n-  .ping {\n-    position: absolute;\n-    width: 2px;\n-    height: 2px;\n-    border-radius: 50%;\n-    background: #800000;\n-    pointer-events: none;\n-  }\n-\n-  .ping::before {\n-    content: '';\n-    position: absolute;\n-    top: 50%;\n-    left: 50%;\n-    width: 100px;\n-    height: 100px;\n-    transform: translate(-50%, -50%);\n-    border-radius: 50%;\n-    background: radial-gradient(circle, rgba(128, 0, 0, 0.4) 0%, transparent 70%);\n-    animation: ping 2s ease-out forwards;\n-  }\n-\n-  @keyframes galaxySwirl {\n-    0% { transform: rotate(0deg); }\n-    100% { transform: rotate(360deg); }\n-  }\n-\n-  @keyframes twinkle {\n-    0%, 100% { opacity: 0.05; }\n-    50% { opacity: 0.1; }\n-  }\n-\n-  @keyframes ping {\n-    0% {\n-      width: 0px;\n-      height: 0px;\n-      opacity: 1;\n-    }\n-    100% {\n-      width: 200px;\n-      height: 200px;\n-      opacity: 0;\n-    }\n-  }\n-`;\n-\n-const Header = styled.header`\n-  width: 100%;\n-  height: 80px; // Fixed height\n-  padding: 0 2rem; // Changed padding\n-  display: flex;\n-  justify-content: space-between;\n-  align-items: center;\n-  background: rgba(0, 0, 0, 0.9);\n-  backdrop-filter: blur(10px);\n-  border-bottom: 1px solid rgba(128, 0, 0, 0.3);\n-  position: fixed; // Changed from sticky\n-  top: 0;\n-  z-index: 10;\n-`;\n-\n-const Logo = styled.div`\n-  color: #800000;\n-  font-family: 'Impact', 'Arial Black', sans-serif;\n-  font-size: 2rem;\n-  letter-spacing: 2px;\n-  transform: skew(-5deg);\n-`;\n-\n-const MainContent = styled.main`\n-  max-width: 1200px;\n-  margin: 0 auto;\n-  padding: 6rem 2rem 2rem 2rem; // Added top padding\n-  position: relative;\n-  z-index: 1;\n-`;\n-\n-const LoginButton = styled.button`\n-  background: transparent;\n-  border: 2px solid #800000;\n-  color: #800000;\n-  padding: 0.8rem 2rem;\n-  border-radius: 30px;\n-  font-weight: 500;\n-  cursor: pointer;\n-  transition: all 0.3s;\n-  letter-spacing: 1px;\n-  font-size: 1rem;\n-  text-transform: uppercase;\n-  display: flex;\n-  align-items: center;\n-  gap: 0.5rem;\n-\n-  &:hover {\n-    background: rgba(128, 0, 0, 0.1);\n-    transform: translateY(-2px);\n-    box-shadow: 0 2px 10px rgba(128, 0, 0, 0.2);\n-  }\n-`;\n-\n-const WelcomeSection = styled.section`\n-  text-align: center;\n-  margin: 4rem 0;\n-  position: relative;\n-\n-  h1 {\n-    font-family: 'Impact', sans-serif;\n-    font-size: 4.5rem;\n-    margin-bottom: 1rem;\n-    background: linear-gradient(45deg, #800000, #4A0404);\n-    -webkit-background-clip: text;\n-    -webkit-text-fill-color: transparent;\n-    text-shadow: 0 0 30px rgba(128, 0, 0, 0.3);\n-    letter-spacing: 2px;\n-    transform: skew(-5deg);\n-  }\n-\n-  p {\n-    font-size: 1.2rem;\n-    line-height: 1.6;\n-    max-width: 800px;\n-    margin: 0 auto;\n-    color: rgba(255, 255, 255, 0.8);\n-    font-weight: 300;\n-  }\n-`;\n-\n-const ActionButton = styled.button`\n-  background: linear-gradient(45deg, #800000, #4A0404);\n-  border: none;\n-  padding: 1rem 2.5rem;\n-  border-radius: 30px;\n-  color: white;\n-  font-weight: bold;\n-  cursor: pointer;\n-  transition: all 0.3s;\n-  text-transform: uppercase;\n-  letter-spacing: 2px;\n-  margin-top: 2rem;\n-\n-  &:hover {\n-    transform: translateY(-2px);\n-    box-shadow: 0 5px 15px rgba(128, 0, 0, 0.3);\n-  }\n-`;\n-\n-const TabContainer = styled.div`\n-  display: flex;\n-  justify-content: center;\n-  gap: 1rem;\n-  margin: 3rem 0;\n-`;\n-\n-const Tab = styled.button`\n-  background: ${props => props.active ? 'rgba(128, 0, 0, 0.2)' : 'transparent'};\n-  border: 1px solid ${props => props.active ? '#800000' : 'rgba(128, 0, 0, 0.3)'};\n-  color: ${props => props.active ? '#FFFFFF' : 'rgba(255, 255, 255, 0.6)'};\n-  padding: 0.8rem 1.5rem;\n-  border-radius: 20px;\n-  cursor: pointer;\n-  transition: all 0.3s;\n-  text-transform: uppercase;\n-  letter-spacing: 1px;\n-  font-weight: 500;\n-  font-family: 'Impact', sans-serif;\n-\n-  &:hover {\n-    background: rgba(128, 0, 0, 0.2);\n-    border-color: #800000;\n-    color: #FFFFFF;\n-  }\n-`;\n-\n-const GridContainer = styled.div`\n-  display: grid;\n-  grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));\n-  gap: 2rem;\n-  margin-top: 2rem;\n-`;\n-\n-const WelcomePage = () => {\n-  const navigate = useNavigate(); // New\n-  const [activeTab, setActiveTab] = useState('featured');\n-  const [featuredItems, setFeaturedItems] = useState([]);\n-  const [loading, setLoading] = useState(true);\n-  const handleOpenShop = () => {\n-    navigate('/shop/create/template');\n-  };\n-\n-  const handleLogin = () => {\n-    navigate('/auth', { \n-      state: { \n-        mode: 'login',\n-        from: window.location.pathname\n-      }\n-    });\n-  };\n-\n-  useEffect(() => {\n-    const loadFeaturedItems = async () => {\n-      try {\n-        const items = await getFeaturedItems(6); // Get 6 featured items\n-        setFeaturedItems(items);\n-      } catch (error) {\n-        console.error('Error loading featured items:', error);\n-      } finally {\n-        setLoading(false);\n-      }\n-    };\n-  \n-    if (activeTab === 'featured') {\n-      loadFeaturedItems();\n-    }\n-  }, [activeTab]);\n-\n-  React.useEffect(() => {\n-    const container = document.querySelector('.page-container');\n-    if (!container) return; // Add this check\n-  \n-    const createPing = () => {\n-      const ping = document.createElement('div');\n-      ping.className = 'ping';\n-      \n-      ping.style.left = `${Math.random() * 100}%`;\n-      ping.style.top = `${Math.random() * 100}%`;\n-      \n-      container.appendChild(ping);\n-      \n-      setTimeout(() => {\n-        if (ping && ping.parentNode) { // Add this check\n-          ping.remove();\n-        }\n-      }, 2000);\n-    };\n-  \n-    const createPingGroup = (count) => {\n-      for (let i = 0; i < count; i++) {\n-        setTimeout(() => {\n-          createPing();\n-        }, i * 200);\n-      }\n-    };\n-  \n-    const pingCounts = [10, 30, 20];\n-    let currentIndex = 0;\n-  \n-    const interval = setInterval(() => {\n-      const count = pingCounts[currentIndex];\n-      createPingGroup(count);\n-      currentIndex = (currentIndex + 1) % pingCounts.length;\n-    }, 3000);\n-  \n-    // Cleanup function\n-    return () => {\n-      clearInterval(interval);\n-      // Remove any remaining pings\n-      const pings = container.getElementsByClassName('ping');\n-      while (pings.length > 0) {\n-        pings[0].remove();\n-      }\n-    };\n-  }, []); // Empty dependency array\n-\n-  return (\n-    <PageContainer className=\"page-container\">\n-      <Header>\n-        <Logo onClick={() => navigate('/')}>KALKODE</Logo>\n-        <LoginButton onClick={handleLogin}>\n-          Login\n-        </LoginButton>\n-      </Header>\n-\n-      <MainContent>\n-        <WelcomeSection>\n-          <h1>Welcome to KalKode</h1>\n-          <p>Join the underground marketplace where local creators thrive. </p>\n-          <p>Build your empire and discover unique treasures.</p>\n-          <div style={{ display: 'flex', gap: '1rem', justifyContent: 'center', marginTop: '2rem' }}>\n-            <ActionButton onClick={handleOpenShop}>Open Up Shop</ActionButton>\n-            <ActionButton \n-              onClick={handleLogin}\n-              style={{ \n-                background: 'transparent',\n-                border: '2px solid #800000',\n-                color: '#800000'\n-              }}\n-            >\n-              Sign In\n-            </ActionButton>\n-          </div>\n-        </WelcomeSection>\n-\n-        <TabContainer>\n-          <Tab \n-            active={activeTab === 'featured'} \n-            onClick={() => setActiveTab('featured')}\n-          >\n-            Featured Items\n-          </Tab>\n-          <Tab \n-            active={activeTab === 'social'} \n-            onClick={() => setActiveTab('social')}\n-          >\n-            Community\n-          </Tab>\n-        </TabContainer>\n-\n-        <GridContainer>\n-          {loading ? (\n-            <div style={{ textAlign: 'center', gridColumn: '1/-1' }}>\n-              Loading featured items...\n-            </div>\n-          ) : featuredItems.length > 0 ? (\n-            featuredItems.map(item => (\n-              <FeaturedItem key={item.id} item={item} />\n-            ))\n-          ) : (\n-            <div style={{ textAlign: 'center', gridColumn: '1/-1' }}>\n-              No featured items available yet.\n-            </div>\n-          )}\n-        </GridContainer>\n-      </MainContent>\n-    </PageContainer>\n-  );\n-};\n-\n-export default WelcomePage;\n-// src/pages/WelcomePage.js\n-\n-import React, { useState } from 'react';\n-import styled from 'styled-components';\n-import { Package, Users } from 'lucide-react';\n-import { useNavigate } from 'react-router-dom'; // New import\n-\n-const PageContainer = styled.div.attrs({ className: 'page-container' })`\n-  min-height: 100vh;\n-  background: #000000;\n-  color: #FFFFFF;\n-  position: relative;\n-  overflow: hidden;\n-\n-  &::before {\n-    content: '';\n-    position: absolute;\n-    width: 100%;\n-    height: 100%;\n-    background: \n-      radial-gradient(circle at 20% 30%, rgba(128, 0, 0, 0.2) 0%, transparent 50%),\n-      radial-gradient(circle at 80% 70%, rgba(128, 0, 0, 0.15) 0%, transparent 50%);\n-    opacity: 0.8;\n-    animation: galaxySwirl 30s linear infinite;\n-  }\n-\n-  &::after {\n-    content: '';\n-    position: absolute;\n-    width: 100%;\n-    height: 100%;\n-    background-image: \n-      radial-gradient(circle 1px, #FFF 1px, transparent 1px),\n-      radial-gradient(circle 2px, #800000 1px, transparent 2px);\n-    background-size: 200px 200px, 300px 300px;\n-    background-position: 0 0;\n-    opacity: 0.1;\n-    animation: twinkle 4s infinite alternate;\n-  }\n-\n-  .ping {\n-    position: absolute;\n-    width: 2px;\n-    height: 2px;\n-    border-radius: 50%;\n-    background: #800000;\n-    pointer-events: none;\n-  }\n-\n-  .ping::before {\n-    content: '';\n-    position: absolute;\n-    top: 50%;\n-    left: 50%;\n-    width: 100px;\n-    height: 100px;\n-    transform: translate(-50%, -50%);\n-    border-radius: 50%;\n-    background: radial-gradient(circle, rgba(128, 0, 0, 0.4) 0%, transparent 70%);\n-    animation: ping 2s ease-out forwards;\n-  }\n-\n-  @keyframes galaxySwirl {\n-    0% { transform: rotate(0deg); }\n-    100% { transform: rotate(360deg); }\n-  }\n-\n-  @keyframes twinkle {\n-    0%, 100% { opacity: 0.05; }\n-    50% { opacity: 0.1; }\n-  }\n-\n-  @keyframes ping {\n-    0% {\n-      width: 0px;\n-      height: 0px;\n-      opacity: 1;\n-    }\n-    100% {\n-      width: 200px;\n-      height: 200px;\n-      opacity: 0;\n-    }\n-  }\n-`;\n-\n-const DiscoverButton = styled(ActionButton)`\n-  background: transparent;\n-  border: 2px solid #800000;\n-  color: #800000;\n-\n-  &:hover {\n-    background: rgba(128, 0, 0, 0.1);\n-  }\n-`;\n-\n-const Header = styled.header`\n-  width: 100%;\n-  height: 80px; // Fixed height\n-  padding: 0 2rem; // Changed padding\n-  display: flex;\n-  justify-content: space-between;\n-  align-items: center;\n-  background: rgba(0, 0, 0, 0.9);\n-  backdrop-filter: blur(10px);\n-  border-bottom: 1px solid rgba(128, 0, 0, 0.3);\n-  position: fixed; // Changed from sticky\n-  top: 0;\n-  z-index: 10;\n-`;\n-\n-const Logo = styled.div`\n-  color: #800000;\n-  font-family: 'Impact', 'Arial Black', sans-serif;\n-  font-size: 2rem;\n-  letter-spacing: 2px;\n-  transform: skew(-5deg);\n-`;\n-\n-const MainContent = styled.main`\n-  max-width: 1200px;\n-  margin: 0 auto;\n-  padding: 6rem 2rem 2rem 2rem; // Added top padding\n-  position: relative;\n-  z-index: 1;\n-`;\n-\n-const LoginButton = styled.button`\n-  background: transparent;\n-  border: 2px solid #800000;\n-  color: #800000;\n-  padding: 0.8rem 2rem;\n-  border-radius: 30px;\n-  font-weight: 500;\n-  cursor: pointer;\n-  transition: all 0.3s;\n-  letter-spacing: 1px;\n-  font-size: 1rem;\n-  text-transform: uppercase;\n-  display: flex;\n-  align-items: center;\n-  gap: 0.5rem;\n-\n-  &:hover {\n-    background: rgba(128, 0, 0, 0.1);\n-    transform: translateY(-2px);\n-    box-shadow: 0 2px 10px rgba(128, 0, 0, 0.2);\n-  }\n-`;\n-\n-const WelcomeSection = styled.section`\n-  text-align: center;\n-  margin: 4rem 0;\n-  position: relative;\n-\n-  h1 {\n-    font-family: 'Impact', sans-serif;\n-    font-size: 4.5rem;\n-    margin-bottom: 1rem;\n-    background: linear-gradient(45deg, #800000, #4A0404);\n-    -webkit-background-clip: text;\n-    -webkit-text-fill-color: transparent;\n-    text-shadow: 0 0 30px rgba(128, 0, 0, 0.3);\n-    letter-spacing: 2px;\n-    transform: skew(-5deg);\n-  }\n-\n-  p {\n-    font-size: 1.2rem;\n-    line-height: 1.6;\n-    max-width: 800px;\n-    margin: 0 auto;\n-    color: rgba(255, 255, 255, 0.8);\n-    font-weight: 300;\n-  }\n-`;\n-\n-const ActionButton = styled.button`\n-  background: linear-gradient(45deg, #800000, #4A0404);\n-  border: none;\n-  padding: 1rem 2.5rem;\n-  border-radius: 30px;\n-  color: white;\n-  font-weight: bold;\n-  cursor: pointer;\n-  transition: all 0.3s;\n-  text-transform: uppercase;\n-  letter-spacing: 2px;\n-  margin-top: 2rem;\n-\n-  &:hover {\n-    transform: translateY(-2px);\n-    box-shadow: 0 5px 15px rgba(128, 0, 0, 0.3);\n-  }\n-`;\n-\n-const TabContainer = styled.div`\n-  display: flex;\n-  justify-content: center;\n-  gap: 1rem;\n-  margin: 3rem 0;\n-`;\n-\n-const Tab = styled.button`\n-  background: ${props => props.active ? 'rgba(128, 0, 0, 0.2)' : 'transparent'};\n-  border: 1px solid ${props => props.active ? '#800000' : 'rgba(128, 0, 0, 0.3)'};\n-  color: ${props => props.active ? '#FFFFFF' : 'rgba(255, 255, 255, 0.6)'};\n-  padding: 0.8rem 1.5rem;\n-  border-radius: 20px;\n-  cursor: pointer;\n-  transition: all 0.3s;\n-  text-transform: uppercase;\n-  letter-spacing: 1px;\n-  font-weight: 500;\n-  font-family: 'Impact', sans-serif;\n-\n-  &:hover {\n-    background: rgba(128, 0, 0, 0.2);\n-    border-color: #800000;\n-    color: #FFFFFF;\n-  }\n-`;\n-\n-const GridContainer = styled.div`\n-  display: grid;\n-  grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));\n-  gap: 2rem;\n-  margin-top: 2rem;\n-`;\n-\n-const WelcomePage = () => {\n-  const navigate = useNavigate(); // New\n-  const [activeTab, setActiveTab] = useState('featured');\n-  const handleOpenShop = () => {\n-    navigate('/shop/create/template');\n-  };\n-\n-  const handleLogin = () => {\n-    navigate('/auth', { \n-      state: { \n-        mode: 'login',\n-        from: window.location.pathname\n-      }\n-    });\n-  };\n-\n-  React.useEffect(() => {\n-    const container = document.querySelector('.page-container');\n-    if (!container) return; // Add this check\n-  \n-    const createPing = () => {\n-      const ping = document.createElement('div');\n-      ping.className = 'ping';\n-      \n-      ping.style.left = `${Math.random() * 100}%`;\n-      ping.style.top = `${Math.random() * 100}%`;\n-      \n-      container.appendChild(ping);\n-      \n-      setTimeout(() => {\n-        if (ping && ping.parentNode) { // Add this check\n-          ping.remove();\n-        }\n-      }, 2000);\n-    };\n-  \n-    const createPingGroup = (count) => {\n-      for (let i = 0; i < count; i++) {\n-        setTimeout(() => {\n-          createPing();\n-        }, i * 200);\n-      }\n-    };\n-  \n-    const pingCounts = [10, 30, 20];\n-    let currentIndex = 0;\n-  \n-    const interval = setInterval(() => {\n-      const count = pingCounts[currentIndex];\n-      createPingGroup(count);\n-      currentIndex = (currentIndex + 1) % pingCounts.length;\n-    }, 3000);\n-  \n-    // Cleanup function\n-    return () => {\n-      clearInterval(interval);\n-      // Remove any remaining pings\n-      const pings = container.getElementsByClassName('ping');\n-      while (pings.length > 0) {\n-        pings[0].remove();\n-      }\n-    };\n-  }, []); // Empty dependency array\n-\n-  return (\n-    <PageContainer className=\"page-container\">\n-      <Header>\n-        <Logo onClick={() => navigate('/')}>KALKODE</Logo>\n-        <LoginButton onClick={handleLogin}>\n-          Login\n-        </LoginButton>\n-      </Header>\n-\n-      <MainContent>\n-        <WelcomeSection>\n-          <h1>Welcome to KalKode</h1>\n-          <p>Join the underground marketplace where local creators thrive. </p>\n-          <p>Build your empire and discover unique treasures.</p>\n-          <div style={{ display: 'flex', gap: '1rem', justifyContent: 'center', marginTop: '2rem' }}>\n-            <ActionButton onClick={handleOpenShop}>Open Up Shop</ActionButton>\n-            <ActionButton \n-              onClick={handleLogin}\n-              style={{ \n-                background: 'transparent',\n-                border: '2px solid #800000',\n-                color: '#800000'\n-              }}\n-            >\n-              Sign In\n-            </ActionButton>\n-          </div>\n-        </WelcomeSection>\n-\n-        <TabContainer>\n-          <Tab \n-            active={activeTab === 'featured'} \n-            onClick={() => setActiveTab('featured')}\n-          >\n-            Featured Items\n-          </Tab>\n-          <Tab \n-            active={activeTab === 'social'} \n-            onClick={() => setActiveTab('social')}\n-          >\n-            Community\n-          </Tab>\n-        </TabContainer>\n-\n-        <GridContainer>\n-          {/* Content will be added later */}\n-        </GridContainer>\n-      </MainContent>\n-    </PageContainer>\n-  );\n-};\n-\n export default WelcomePage;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1738040522609,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,9 @@\n import { Package, Users } from 'lucide-react';\n import { useNavigate } from 'react-router-dom'; // New import\n import { useEffect, useState } from 'react';\n import { getFeaturedItems } from '../firebase/firebaseService';\n-import FeaturedItem from './components/shop/FeaturedItem';\n+import FeaturedItem from '..//components/shop/FeaturedItem';\n \n const PageContainer = styled.div.attrs({ className: 'page-container' })`\n   min-height: 100vh;\n   background: #000000;\n"
                },
                {
                    "date": 1759889463002,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,402 +1,3624 @@\n-// src/pages/WelcomePage.js\n-import React from 'react';  // Keep only one React import\n-import styled from 'styled-components';\n-import { Package, Users } from 'lucide-react';\n-import { useNavigate } from 'react-router-dom'; // New import\n-import { useEffect, useState } from 'react';\n-import { getFeaturedItems } from '../firebase/firebaseService';\n-import FeaturedItem from '..//components/shop/FeaturedItem';\n-\n-const PageContainer = styled.div.attrs({ className: 'page-container' })`\n-  min-height: 100vh;\n-  background: #000000;\n-  color: #FFFFFF;\n-  position: relative;\n-  overflow: hidden;\n-\n-  &::before {\n-    content: '';\n-    position: absolute;\n-    width: 100%;\n-    height: 100%;\n-    background: \n-      radial-gradient(circle at 20% 30%, rgba(128, 0, 0, 0.2) 0%, transparent 50%),\n-      radial-gradient(circle at 80% 70%, rgba(128, 0, 0, 0.15) 0%, transparent 50%);\n-    opacity: 0.8;\n-    animation: galaxySwirl 30s linear infinite;\n-  }\n-\n-  &::after {\n-    content: '';\n-    position: absolute;\n-    width: 100%;\n-    height: 100%;\n-    background-image: \n-      radial-gradient(circle 1px, #FFF 1px, transparent 1px),\n-      radial-gradient(circle 2px, #800000 1px, transparent 2px);\n-    background-size: 200px 200px, 300px 300px;\n-    background-position: 0 0;\n-    opacity: 0.1;\n-    animation: twinkle 4s infinite alternate;\n-  }\n-\n-  .ping {\n-    position: absolute;\n-    width: 2px;\n-    height: 2px;\n-    border-radius: 50%;\n-    background: #800000;\n-    pointer-events: none;\n-  }\n-\n-  .ping::before {\n-    content: '';\n-    position: absolute;\n-    top: 50%;\n-    left: 50%;\n-    width: 100px;\n-    height: 100px;\n-    transform: translate(-50%, -50%);\n-    border-radius: 50%;\n-    background: radial-gradient(circle, rgba(128, 0, 0, 0.4) 0%, transparent 70%);\n-    animation: ping 2s ease-out forwards;\n-  }\n-\n-  @keyframes galaxySwirl {\n-    0% { transform: rotate(0deg); }\n-    100% { transform: rotate(360deg); }\n-  }\n-\n-  @keyframes twinkle {\n-    0%, 100% { opacity: 0.05; }\n-    50% { opacity: 0.1; }\n-  }\n-\n-  @keyframes ping {\n-    0% {\n-      width: 0px;\n-      height: 0px;\n-      opacity: 1;\n-    }\n-    100% {\n-      width: 200px;\n-      height: 200px;\n-      opacity: 0;\n-    }\n-  }\n-`;\n-\n-const Header = styled.header`\n-  width: 100%;\n-  height: 80px; // Fixed height\n-  padding: 0 2rem; // Changed padding\n-  display: flex;\n-  justify-content: space-between;\n-  align-items: center;\n-  background: rgba(0, 0, 0, 0.9);\n-  backdrop-filter: blur(10px);\n-  border-bottom: 1px solid rgba(128, 0, 0, 0.3);\n-  position: fixed; // Changed from sticky\n-  top: 0;\n-  z-index: 10;\n-`;\n-\n-const LoadingSpinner = styled.div`\n-  width: 40px;\n-  height: 40px;\n-  margin: 2rem auto;\n-  border: 3px solid rgba(128, 0, 0, 0.1);\n-  border-radius: 50%;\n-  border-top-color: #800000;\n-  animation: spin 1s linear infinite;\n-\n-  @keyframes spin {\n-    to {\n-      transform: rotate(360deg);\n-    }\n-  }\n-`;\n-\n-const Logo = styled.div`\n-  color: #800000;\n-  font-family: 'Impact', 'Arial Black', sans-serif;\n-  font-size: 2rem;\n-  letter-spacing: 2px;\n-  transform: skew(-5deg);\n-`;\n-\n-const MainContent = styled.main`\n-  max-width: 1200px;\n-  margin: 0 auto;\n-  padding: 6rem 2rem 2rem 2rem; // Added top padding\n-  position: relative;\n-  z-index: 1;\n-`;\n-\n-const LoginButton = styled.button`\n-  background: transparent;\n-  border: 2px solid #800000;\n-  color: #800000;\n-  padding: 0.8rem 2rem;\n-  border-radius: 30px;\n-  font-weight: 500;\n-  cursor: pointer;\n-  transition: all 0.3s;\n-  letter-spacing: 1px;\n-  font-size: 1rem;\n-  text-transform: uppercase;\n-  display: flex;\n-  align-items: center;\n-  gap: 0.5rem;\n-\n-  &:hover {\n-    background: rgba(128, 0, 0, 0.1);\n-    transform: translateY(-2px);\n-    box-shadow: 0 2px 10px rgba(128, 0, 0, 0.2);\n-  }\n-`;\n-\n-const WelcomeSection = styled.section`\n-  text-align: center;\n-  margin: 4rem 0;\n-  position: relative;\n-\n-  h1 {\n-    font-family: 'Impact', sans-serif;\n-    font-size: 4.5rem;\n-    margin-bottom: 1rem;\n-    background: linear-gradient(45deg, #800000, #4A0404);\n-    -webkit-background-clip: text;\n-    -webkit-text-fill-color: transparent;\n-    text-shadow: 0 0 30px rgba(128, 0, 0, 0.3);\n-    letter-spacing: 2px;\n-    transform: skew(-5deg);\n-  }\n-\n-  p {\n-    font-size: 1.2rem;\n-    line-height: 1.6;\n-    max-width: 800px;\n-    margin: 0 auto;\n-    color: rgba(255, 255, 255, 0.8);\n-    font-weight: 300;\n-  }\n-`;\n-\n-const ActionButton = styled.button`\n-  background: linear-gradient(45deg, #800000, #4A0404);\n-  border: none;\n-  padding: 1rem 2.5rem;\n-  border-radius: 30px;\n-  color: white;\n-  font-weight: bold;\n-  cursor: pointer;\n-  transition: all 0.3s;\n-  text-transform: uppercase;\n-  letter-spacing: 2px;\n-  margin-top: 2rem;\n-\n-  &:hover {\n-    transform: translateY(-2px);\n-    box-shadow: 0 5px 15px rgba(128, 0, 0, 0.3);\n-  }\n-`;\n-\n-const TabContainer = styled.div`\n-  display: flex;\n-  justify-content: center;\n-  gap: 1rem;\n-  margin: 3rem 0;\n-`;\n-\n-const Tab = styled.button`\n-  background: ${props => props.active ? 'rgba(128, 0, 0, 0.2)' : 'transparent'};\n-  border: 1px solid ${props => props.active ? '#800000' : 'rgba(128, 0, 0, 0.3)'};\n-  color: ${props => props.active ? '#FFFFFF' : 'rgba(255, 255, 255, 0.6)'};\n-  padding: 0.8rem 1.5rem;\n-  border-radius: 20px;\n-  cursor: pointer;\n-  transition: all 0.3s;\n-  text-transform: uppercase;\n-  letter-spacing: 1px;\n-  font-weight: 500;\n-  font-family: 'Impact', sans-serif;\n-\n-  &:hover {\n-    background: rgba(128, 0, 0, 0.2);\n-    border-color: #800000;\n-    color: #FFFFFF;\n-  }\n-`;\n-\n-const GridContainer = styled.div`\n-  display: grid;\n-  grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));\n-  gap: 2rem;\n-  margin-top: 2rem;\n-`;\n-\n-const WelcomePage = () => {\n-  const navigate = useNavigate(); // New\n-  const [activeTab, setActiveTab] = useState('featured');\n-  const [featuredItems, setFeaturedItems] = useState([]);\n-  const [loading, setLoading] = useState(true);\n-  const [error, setError] = useState(null);\n-  const handleOpenShop = () => {\n-    navigate('/shop/create/template');\n-  };\n-\n-  const handleLogin = () => {\n-    navigate('/auth', { \n-      state: { \n-        mode: 'login',\n-        from: window.location.pathname\n-      }\n-    });\n-  };\n-\n-  useEffect(() => {\n-    const loadFeaturedItems = async () => {\n-      try {\n-        setLoading(true);\n-        setError(null);\n-        const items = await getFeaturedItems(6);\n-        setFeaturedItems(items);\n-      } catch (error) {\n-        console.error('Error loading featured items:', error);\n-        setError('Failed to load featured items. Please try again later.');\n-      } finally {\n-        setLoading(false);\n-      }\n-    };\n-  \n-    if (activeTab === 'featured') {\n-      loadFeaturedItems();\n-    }\n-  }, [activeTab]);\n-\n-  React.useEffect(() => {\n-    const container = document.querySelector('.page-container');\n-    if (!container) return; // Add this check\n-  \n-    const createPing = () => {\n-      const ping = document.createElement('div');\n-      ping.className = 'ping';\n-      \n-      ping.style.left = `${Math.random() * 100}%`;\n-      ping.style.top = `${Math.random() * 100}%`;\n-      \n-      container.appendChild(ping);\n-      \n-      setTimeout(() => {\n-        if (ping && ping.parentNode) { // Add this check\n-          ping.remove();\n-        }\n-      }, 2000);\n-    };\n-  \n-    const createPingGroup = (count) => {\n-      for (let i = 0; i < count; i++) {\n-        setTimeout(() => {\n-          createPing();\n-        }, i * 200);\n-      }\n-    };\n-  \n-    const pingCounts = [10, 30, 20];\n-    let currentIndex = 0;\n-  \n-    const interval = setInterval(() => {\n-      const count = pingCounts[currentIndex];\n-      createPingGroup(count);\n-      currentIndex = (currentIndex + 1) % pingCounts.length;\n-    }, 3000);\n-  \n-    // Cleanup function\n-    return () => {\n-      clearInterval(interval);\n-      // Remove any remaining pings\n-      const pings = container.getElementsByClassName('ping');\n-      while (pings.length > 0) {\n-        pings[0].remove();\n-      }\n-    };\n-  }, []); // Empty dependency array\n-\n-  return (\n-    <PageContainer className=\"page-container\">\n-      <Header>\n-        <Logo onClick={() => navigate('/')}>KALKODE</Logo>\n-        <LoginButton onClick={handleLogin}>\n-          Login\n-        </LoginButton>\n-      </Header>\n-\n-      <MainContent>\n-        <WelcomeSection>\n-          <h1>Welcome to KalKode</h1>\n-          <p>Join the underground marketplace where local creators thrive. </p>\n-          <p>Build your empire and discover unique treasures.</p>\n-          <div style={{ display: 'flex', gap: '1rem', justifyContent: 'center', marginTop: '2rem' }}>\n-            <ActionButton onClick={handleOpenShop}>Open Up Shop</ActionButton>\n-            <ActionButton \n-              onClick={handleLogin}\n-              style={{ \n-                background: 'transparent',\n-                border: '2px solid #800000',\n-                color: '#800000'\n-              }}\n-            >\n-              Sign In\n-            </ActionButton>\n-          </div>\n-        </WelcomeSection>\n-\n-        <TabContainer>\n-          <Tab \n-            active={activeTab === 'featured'} \n-            onClick={() => setActiveTab('featured')}\n-          >\n-            Featured Items\n-          </Tab>\n-          <Tab \n-            active={activeTab === 'social'} \n-            onClick={() => setActiveTab('social')}\n-          >\n-            Community\n-          </Tab>\n-        </TabContainer>\n-\n-        <GridContainer>\n-          {error ? (\n-            <div style={{ textAlign: 'center', gridColumn: '1/-1', color: '#ff4444' }}>\n-              {error}\n-            </div>\n-          ) : loading ? (\n-            <div style={{ textAlign: 'center', gridColumn: '1/-1' }}>\n-              <LoadingSpinner />\n-            </div>\n-          ) : featuredItems.length > 0 ? (\n-            featuredItems.map(item => (\n-              <FeaturedItem \n-                key={`${item.shopId}-${item.id}`} \n-                item={item} \n-              />\n-            ))\n-          ) : (\n-            <div style={{ \n-              textAlign: 'center', \n-              gridColumn: '1/-1',\n-              padding: '4rem',\n-              color: 'rgba(255, 255, 255, 0.7)'\n-            }}>\n-              No featured items available yet.\n-            </div>\n-          )}\n-        </GridContainer>\n-      </MainContent>\n-    </PageContainer>\n-  );\n-};\n-\n+// src/pages/WelcomePage.js - Mobile-Optimized Version\r\n+import React from 'react';\r\n+import styled from 'styled-components';\r\n+import { useNavigate } from 'react-router-dom';\r\n+import { useEffect, useState, useRef } from 'react';\r\n+import { getFeaturedItems } from '../firebase/firebaseService';\r\n+import FeaturedItem from '../components/shop/FeaturedItem';\r\n+import { Search, Package, Navigation, Film, Filter, Store, Plus, Minus, Pin, ChevronLeft, ChevronRight, X, MessageCircle, ShoppingCart, RefreshCw, LogOut } from 'lucide-react';\r\n+import { getDistance } from 'geolib';\r\n+import OrderChat from '../components/Chat/OrderChat';\r\n+import { collection, getDocs } from 'firebase/firestore';\r\n+import { db, auth } from '../firebase/config';\r\n+import { WELCOME_STYLES } from '../theme/welcomeStyles';\r\n+import { getShopData } from '../firebase/firebaseService';\r\n+import { useAuth } from '../contexts/AuthContext';\r\n+import { useLocation } from '../contexts/LocationContext';\r\n+import LocationDialog from '../components/LocationDialog';\r\n+import ThemeDecorations from '../components/ThemeDecorations';\r\n+import { TransactionService } from '../services/TransactionService';\r\n+import { signOut } from 'firebase/auth';\r\n+\r\n+// Mobile-first styled components\r\n+const PageContainer = styled.div.attrs({ className: 'page-container' })`\r\n+  min-height: 100vh;\r\n+  background: ${props => props.theme?.colors?.background || '#000000'};\r\n+  color: ${props => props.theme?.colors?.text || '#FFFFFF'};\r\n+  position: relative;\r\n+  overflow: hidden;\r\n+  \r\n+  /* Mobile-optimized background effects */\r\n+  &::before {\r\n+    content: '';\r\n+    position: absolute;\r\n+    width: 100%;\r\n+    height: 100%;\r\n+    background: ${props => props.theme?.colors?.backgroundGradient || 'radial-gradient(circle at 20% 30%, rgba(128, 0, 0, 0.2) 0%, transparent 50%)'};\r\n+    opacity: 0.8;\r\n+    animation: ${props => props.theme?.animations?.backgroundAnimation || 'galaxySwirl 30s linear infinite'};\r\n+  }\r\n+\r\n+  /* Simplified stars for mobile performance */\r\n+  &::after {\r\n+    content: '';\r\n+    position: absolute;\r\n+    width: 100%;\r\n+    height: 100%;\r\n+    background-image: radial-gradient(circle 1px, ${props => props.theme?.colors?.text || '#FFF'} 1px, transparent 1px);\r\n+    background-size: 100px 100px;\r\n+    opacity: 0.05;\r\n+    \r\n+    @media (min-width: 768px) {\r\n+      background-size: 200px 200px;\r\n+      opacity: 0.1;\r\n+    }\r\n+  }\r\n+\r\n+  /* Reduced ping animations on mobile for performance */\r\n+  .ping {\r\n+    display: none;\r\n+    \r\n+    @media (min-width: 768px) {\r\n+      display: block;\r\n+      position: absolute;\r\n+      width: 2px;\r\n+      height: 2px;\r\n+      border-radius: 50%;\r\n+      background: ${props => props.theme?.colors?.accent || '#800000'};\r\n+      pointer-events: none;\r\n+      z-index: 0;\r\n+    }\r\n+  }\r\n+\r\n+  @keyframes galaxySwirl {\r\n+    0% { transform: rotate(0deg); }\r\n+    100% { transform: rotate(360deg); }\r\n+  }\r\n+`;\r\n+\r\n+// Simplified header with just logo and right-side controls\r\n+const Header = styled.header`\r\n+  width: 100%;\r\n+  height: 60px;\r\n+  padding: 0 1rem;\r\n+  display: flex;\r\n+  align-items: center;\r\n+  justify-content: space-between;\r\n+  background: ${props => `${props.theme?.colors?.headerBg || 'rgba(0, 0, 0, 0.9)'}F5`};\r\n+  backdrop-filter: blur(10px);\r\n+  border-bottom: 1px solid ${props => `${props.theme?.colors?.accent}4D` || 'rgba(128, 0, 0, 0.3)'};\r\n+  position: fixed;\r\n+  top: 0;\r\n+  z-index: 100;\r\n+\r\n+  @media (min-width: 768px) {\r\n+    height: 80px;\r\n+    padding: 0 2rem;\r\n+  }\r\n+`;\r\n+\r\n+const Logo = styled.div`\r\n+  color: ${props => props.theme?.colors?.accent || '#800000'};\r\n+  font-family: ${props => props.theme?.fonts?.heading || \"'Impact', sans-serif\"};\r\n+  font-size: 1.4rem;\r\n+  letter-spacing: 1px;\r\n+  transform: skew(-5deg);\r\n+  cursor: pointer;\r\n+  flex-shrink: 0;\r\n+\r\n+  @media (min-width: 768px) {\r\n+    font-size: 2rem;\r\n+    letter-spacing: 2px;\r\n+  }\r\n+`;\r\n+\r\n+const LocationIndicator2 = styled.div`\r\n+  display: flex;\r\n+  align-items: center;\r\n+  justify-content: center;\r\n+  gap: 0.75rem;\r\n+  background: ${props => `${props.theme?.colors?.surface || 'rgba(0, 0, 0, 0.4)'}CC`};\r\n+  backdrop-filter: blur(10px);\r\n+  padding: 0.75rem 1.5rem;\r\n+  border-radius: 25px;\r\n+  border: 1px solid ${props => `${props.theme?.colors?.accent}40` || 'rgba(128, 0, 0, 0.4)'};\r\n+  margin: 1.5rem auto;\r\n+  max-width: 500px;\r\n+  width: 90%;\r\n+  transition: all 0.3s ease;\r\n+  position: relative;\r\n+  \r\n+  @media (max-width: 768px) {\r\n+    width: 95%;\r\n+    padding: 0.6rem 1rem;\r\n+    gap: 0.5rem;\r\n+  }\r\n+  \r\n+  .location-icon-btn {\r\n+    background: transparent;\r\n+    border: none;\r\n+    color: ${props => props.theme?.colors?.accent || '#800000'};\r\n+    cursor: pointer;\r\n+    display: flex;\r\n+    align-items: center;\r\n+    justify-content: center;\r\n+    padding: 0.25rem;\r\n+    border-radius: 50%;\r\n+    transition: all 0.2s ease;\r\n+    flex-shrink: 0;\r\n+    \r\n+    &:hover {\r\n+      background: ${props => `${props.theme?.colors?.accent}20` || 'rgba(128, 0, 0, 0.2)'};\r\n+    }\r\n+    \r\n+    &:active {\r\n+      transform: scale(0.9);\r\n+    }\r\n+    \r\n+    &:disabled {\r\n+      opacity: 0.5;\r\n+      cursor: not-allowed;\r\n+    }\r\n+    \r\n+    svg {\r\n+      width: 20px;\r\n+      height: 20px;\r\n+      \r\n+      @media (max-width: 768px) {\r\n+        width: 18px;\r\n+        height: 18px;\r\n+      }\r\n+    }\r\n+  }\r\n+  \r\n+  .location-input {\r\n+    flex: 1;\r\n+    background: transparent;\r\n+    border: none;\r\n+    color: ${props => props.theme?.colors?.text || '#FFFFFF'};\r\n+    font-size: 0.95rem;\r\n+    outline: none;\r\n+    text-align: center;\r\n+    cursor: default;\r\n+    min-width: 0; /* Allow text to shrink */\r\n+    \r\n+    &::placeholder {\r\n+      color: ${props => `${props.theme?.colors?.text}50` || 'rgba(255, 255, 255, 0.5)'};\r\n+      font-style: italic;\r\n+    }\r\n+    \r\n+    @media (max-width: 768px) {\r\n+      font-size: 0.85rem;\r\n+    }\r\n+  }\r\n+  \r\n+  .updating-spinner {\r\n+    width: 16px;\r\n+    height: 16px;\r\n+    border: 2px solid ${props => `${props.theme?.colors?.accent}30` || 'rgba(128, 0, 0, 0.3)'};\r\n+    border-radius: 50%;\r\n+    border-top-color: ${props => props.theme?.colors?.accent || '#800000'};\r\n+    animation: spin 1s linear infinite;\r\n+  }\r\n+  \r\n+  .pin-icon-btn {\r\n+    background: transparent;\r\n+    border: none;\r\n+    color: ${props => props.theme?.colors?.accent || '#800000'};\r\n+    cursor: pointer;\r\n+    display: flex;\r\n+    align-items: center;\r\n+    justify-content: center;\r\n+    padding: 0.25rem;\r\n+    border-radius: 50%;\r\n+    transition: all 0.2s ease;\r\n+    opacity: ${props => props.isPinned ? 1 : 0.5};\r\n+    flex-shrink: 0;\r\n+    \r\n+    &:hover:not(:disabled) {\r\n+      background: ${props => `${props.theme?.colors?.accent}20` || 'rgba(128, 0, 0, 0.2)'};\r\n+      opacity: 1;\r\n+    }\r\n+    \r\n+    &:active:not(:disabled) {\r\n+      transform: scale(0.9);\r\n+    }\r\n+    \r\n+    &:disabled {\r\n+      opacity: 0.3;\r\n+      cursor: not-allowed;\r\n+    }\r\n+    \r\n+    svg {\r\n+      width: 18px;\r\n+      height: 18px;\r\n+      \r\n+      @media (max-width: 768px) {\r\n+        width: 16px;\r\n+        height: 16px;\r\n+      }\r\n+    }\r\n+  }\r\n+  \r\n+  @keyframes spin {\r\n+    to {\r\n+      transform: rotate(360deg);\r\n+    }\r\n+  }\r\n+`;\r\n+\r\n+const HeaderControls = styled.div`\r\n+  display: flex;\r\n+  align-items: center;\r\n+  gap: 0.75rem;\r\n+`;\r\n+\r\n+const HeaderButton = styled.button`\r\n+  background: transparent;\r\n+  border: none;\r\n+  color: ${props => props.theme?.colors?.accent || '#800000'};\r\n+  padding: 0.5rem;\r\n+  cursor: pointer;\r\n+  display: flex;\r\n+  align-items: center;\r\n+  justify-content: center;\r\n+  border-radius: 50%;\r\n+  transition: all 0.3s ease;\r\n+  opacity: 0.8;\r\n+  \r\n+  &:active {\r\n+    transform: scale(0.9);\r\n+    opacity: 1;\r\n+  }\r\n+  \r\n+  @media (hover: hover) {\r\n+    &:hover {\r\n+      opacity: 1;\r\n+      background: ${props => `${props.theme?.colors?.accent}10` || 'rgba(128, 0, 0, 0.1)'};\r\n+    }\r\n+  }\r\n+  \r\n+  &.pinned {\r\n+    color: ${props => props.theme?.colors?.accent || '#800000'};\r\n+    opacity: 1;\r\n+  }\r\n+  \r\n+  svg {\r\n+    width: 20px;\r\n+    height: 20px;\r\n+    \r\n+    @media (min-width: 768px) {\r\n+      width: 22px;\r\n+      height: 22px;\r\n+    }\r\n+  }\r\n+`;\r\n+\r\n+// Improved mobile main content with better spacing\r\n+const MainContent = styled.main`\r\n+  max-width: 1200px;\r\n+  margin: 0 auto;\r\n+  padding: 80px 1rem 100px 1rem;\r\n+  position: relative;\r\n+  z-index: 1;\r\n+  \r\n+  @media (min-width: 768px) {\r\n+    padding: 6rem 2rem 2rem 2rem;\r\n+  }\r\n+`;\r\n+\r\n+// Mobile-optimized welcome section\r\n+const WelcomeSection = styled.section`\r\n+  text-align: center;\r\n+  margin: 2rem 0;\r\n+  position: relative;\r\n+\r\n+  h1 {\r\n+    font-family: ${props => props.theme?.fonts?.heading || \"'Impact', sans-serif\"};\r\n+    font-size: 2.5rem;\r\n+    margin-bottom: 1rem;\r\n+    background: ${props => props.theme?.colors?.accentGradient || 'linear-gradient(45deg, #800000, #4A0404)'};\r\n+    -webkit-background-clip: text;\r\n+    -webkit-text-fill-color: transparent;\r\n+    letter-spacing: 1px;\r\n+    line-height: 1.2;\r\n+    \r\n+    @media (min-width: 768px) {\r\n+      font-size: 4.5rem;\r\n+      letter-spacing: 2px;\r\n+    }\r\n+  }\r\n+\r\n+  p {\r\n+    font-size: 1rem;\r\n+    line-height: 1.5;\r\n+    max-width: 600px;\r\n+    margin: 0 auto;\r\n+    color: ${props => `${props.theme?.colors?.text}CC` || 'rgba(255, 255, 255, 0.8)'};\r\n+    padding: 0 1rem;\r\n+    \r\n+    @media (min-width: 768px) {\r\n+      font-size: 1.2rem;\r\n+      line-height: 1.6;\r\n+      max-width: 800px;\r\n+    }\r\n+  }\r\n+`;\r\n+\r\n+// Completely redesigned ZoomOverlay - Responsive to zoom level\r\n+const ZoomOverlay = styled.div`\r\n+  position: fixed;\r\n+  top: 0;\r\n+  left: 0;\r\n+  right: 0;\r\n+  bottom: 0;\r\n+  background: ${props => `${props.theme?.colors?.background || 'rgba(0, 0, 0, 0.95)'}F5`};\r\n+  z-index: 10000;\r\n+  backdrop-filter: blur(10px);\r\n+  display: flex;\r\n+  align-items: center;\r\n+  justify-content: center;\r\n+  padding: 2rem;\r\n+  overflow: hidden;\r\n+  \r\n+  @media (max-width: 768px) {\r\n+    padding: 1rem;\r\n+  }\r\n+  \r\n+  @media (max-width: 480px) {\r\n+    padding: 0.5rem;\r\n+  }\r\n+`;\r\n+\r\n+// Redesigned ZoomContainer - 2:5 aspect ratio card, centered with ample space\r\n+const ZoomContainer = styled.div`\r\n+  position: relative;\r\n+  width: 100%;\r\n+  max-width: 500px;\r\n+  aspect-ratio: 2 / 5;\r\n+  max-height: 85vh;\r\n+  background: ${props => props.theme?.colors?.background || '#000000'};\r\n+  border-radius: 16px;\r\n+  overflow: hidden;\r\n+  border: 2px solid ${props => props.theme?.colors?.accent || '#800000'};\r\n+  box-shadow: 0 20px 60px rgba(0, 0, 0, 0.8);\r\n+  display: flex;\r\n+  flex-direction: column;\r\n+  \r\n+  @media (max-width: 768px) {\r\n+    max-width: 420px;\r\n+    border-radius: 12px;\r\n+  }\r\n+  \r\n+  @media (max-width: 480px) {\r\n+    max-width: 95%;\r\n+    border-radius: 10px;\r\n+  }\r\n+`;\r\n+\r\n+// Image section - 70% of card height\r\n+const ImageCarousel = styled.div`\r\n+  position: relative;\r\n+  width: 100%;\r\n+  height: 70%;\r\n+  background: ${props => `${props.theme?.colors?.background || '#000000'}80`};\r\n+  overflow: hidden;\r\n+  flex-shrink: 0;\r\n+  \r\n+  .image-track {\r\n+    display: flex;\r\n+    height: 100%;\r\n+    transition: transform 0.3s ease;\r\n+    transform: translateX(${props => props.currentIndex * -100}%);\r\n+  }\r\n+  \r\n+  .image-slide {\r\n+    min-width: 100%;\r\n+    height: 100%;\r\n+    display: flex;\r\n+    align-items: center;\r\n+    justify-content: center;\r\n+    \r\n+    img {\r\n+      width: 100%;\r\n+      height: 100%;\r\n+      object-fit: cover;\r\n+      background: ${props => `${props.theme?.colors?.background || '#000000'}40`};\r\n+    }\r\n+    \r\n+    .no-image {\r\n+      display: flex;\r\n+      flex-direction: column;\r\n+      align-items: center;\r\n+      gap: 0.75rem;\r\n+      color: ${props => props.theme?.colors?.text || '#FFFFFF'};\r\n+      opacity: 0.3;\r\n+      \r\n+      p {\r\n+        margin: 0;\r\n+        font-size: 0.85rem;\r\n+      }\r\n+    }\r\n+  }\r\n+  \r\n+  .carousel-dots {\r\n+    position: absolute;\r\n+    bottom: 1rem;\r\n+    left: 50%;\r\n+    transform: translateX(-50%);\r\n+    display: flex;\r\n+    gap: 0.4rem;\r\n+    z-index: 2;\r\n+    padding: 0.4rem 0.75rem;\r\n+    background: ${props => `${props.theme?.colors?.background || 'rgba(0, 0, 0, 0.6)'}CC`};\r\n+    border-radius: 20px;\r\n+    backdrop-filter: blur(8px);\r\n+  }\r\n+  \r\n+  .dot {\r\n+    width: 6px;\r\n+    height: 6px;\r\n+    border-radius: 50%;\r\n+    background: ${props => props.theme?.colors?.text || '#FFFFFF'};\r\n+    border: none;\r\n+    padding: 0;\r\n+    cursor: pointer;\r\n+    transition: all 0.2s ease;\r\n+    \r\n+    &:hover {\r\n+      transform: scale(1.2);\r\n+    }\r\n+  }\r\n+  \r\n+  .carousel-button {\r\n+    position: absolute;\r\n+    top: 50%;\r\n+    transform: translateY(-50%);\r\n+    background: ${props => `${props.theme?.colors?.background || 'rgba(0, 0, 0, 0.7)'}DD`};\r\n+    border: 1px solid ${props => `${props.theme?.colors?.accent}40` || 'rgba(255, 255, 255, 0.2)'};\r\n+    border-radius: 50%;\r\n+    width: 40px;\r\n+    height: 40px;\r\n+    display: flex;\r\n+    align-items: center;\r\n+    justify-content: center;\r\n+    color: ${props => props.theme?.colors?.text || 'white'};\r\n+    cursor: pointer;\r\n+    opacity: 0;\r\n+    transition: all 0.3s ease;\r\n+    z-index: 2;\r\n+    \r\n+    &:hover {\r\n+      opacity: 1 !important;\r\n+      background: ${props => props.theme?.colors?.accent || '#800000'};\r\n+      transform: translateY(-50%) scale(1.1);\r\n+    }\r\n+    \r\n+    &.prev {\r\n+      left: 1rem;\r\n+    }\r\n+    \r\n+    &.next {\r\n+      right: 1rem;\r\n+    }\r\n+    \r\n+    &:disabled {\r\n+      opacity: 0 !important;\r\n+      cursor: not-allowed;\r\n+    }\r\n+    \r\n+    @media (max-width: 480px) {\r\n+      width: 32px;\r\n+      height: 32px;\r\n+      \r\n+      &.prev {\r\n+        left: 0.5rem;\r\n+      }\r\n+      \r\n+      &.next {\r\n+        right: 0.5rem;\r\n+      }\r\n+      \r\n+      svg {\r\n+        width: 16px;\r\n+        height: 16px;\r\n+      }\r\n+    }\r\n+  }\r\n+  \r\n+  &:hover .carousel-button {\r\n+    opacity: 0.7;\r\n+  }\r\n+  \r\n+  .close-overlay-button {\r\n+    position: absolute;\r\n+    top: 1rem;\r\n+    right: 1rem;\r\n+    background: ${props => `${props.theme?.colors?.background || 'rgba(0, 0, 0, 0.8)'}DD`};\r\n+    border: 1px solid ${props => `${props.theme?.colors?.accent}60` || 'rgba(255, 255, 255, 0.3)'};\r\n+    border-radius: 50%;\r\n+    width: 40px;\r\n+    height: 40px;\r\n+    display: flex;\r\n+    align-items: center;\r\n+    justify-content: center;\r\n+    color: white;\r\n+    cursor: pointer;\r\n+    transition: all 0.2s ease;\r\n+    backdrop-filter: blur(8px);\r\n+    z-index: 3;\r\n+    opacity: 0.8;\r\n+    \r\n+    &:hover {\r\n+      opacity: 1;\r\n+      background: ${props => props.theme?.colors?.accent || '#800000'};\r\n+      border-color: ${props => props.theme?.colors?.accent || '#800000'};\r\n+      transform: scale(1.1);\r\n+    }\r\n+    \r\n+    &:active {\r\n+      transform: scale(0.95);\r\n+    }\r\n+    \r\n+    @media (max-width: 480px) {\r\n+      width: 32px;\r\n+      height: 32px;\r\n+      top: 0.75rem;\r\n+      right: 0.75rem;\r\n+      \r\n+      svg {\r\n+        width: 16px;\r\n+        height: 16px;\r\n+      }\r\n+    }\r\n+  }\r\n+`;\r\n+\r\n+// Details section - 30% of card height\r\n+const ZoomContent = styled.div`\r\n+  height: 30%;\r\n+  overflow-y: auto;\r\n+  overflow-x: hidden;\r\n+  padding: 1rem;\r\n+  -webkit-overflow-scrolling: touch;\r\n+  display: flex;\r\n+  flex-direction: column;\r\n+  gap: 0.75rem;\r\n+  background: ${props => props.theme?.colors?.background || '#000000'};\r\n+  \r\n+  /* Custom scrollbar */\r\n+  &::-webkit-scrollbar {\r\n+    width: 4px;\r\n+  }\r\n+  \r\n+  &::-webkit-scrollbar-track {\r\n+    background: transparent;\r\n+  }\r\n+  \r\n+  &::-webkit-scrollbar-thumb {\r\n+    background: ${props => `${props.theme?.colors?.accent || '#800000'}60`};\r\n+    border-radius: 2px;\r\n+    \r\n+    &:hover {\r\n+      background: ${props => props.theme?.colors?.accent || '#800000'};\r\n+    }\r\n+  }\r\n+  \r\n+  @media (max-width: 480px) {\r\n+    padding: 0.875rem;\r\n+    gap: 0.625rem;\r\n+  }\r\n+`;\r\n+\r\n+\r\n+// Update ZoomHeader - Remove it entirely or hide it\r\n+const ZoomHeader = styled.div`\r\n+  display: none; // Hide the header completely\r\n+`;\r\n+\r\n+// Mobile-optimized profile section\r\n+const ProfileSection = styled.div`\r\n+  display: flex;\r\n+  flex-direction: column;\r\n+  align-items: center;\r\n+  margin-bottom: 1.5rem;\r\n+`;\r\n+\r\n+const ProfileImage = styled.div`\r\n+  width: 120px;\r\n+  height: 120px;\r\n+  border-radius: 50%;\r\n+  overflow: hidden;\r\n+  margin-bottom: 1rem;\r\n+  border: 4px solid ${props => props.theme?.colors?.accent || '#800000'};\r\n+  box-shadow: 0 0 20px ${props => `${props.theme?.colors?.accent}40` || 'rgba(128, 0, 0, 0.25)'};\r\n+  \r\n+  @media (min-width: 768px) {\r\n+    width: 200px;\r\n+    height: 189px;\r\n+    border: 6px solid ${props => props.theme?.colors?.accent || '#800000'};\r\n+  }\r\n+  \r\n+  img {\r\n+    width: 100%;\r\n+    height: 100%;\r\n+    object-fit: cover;\r\n+  }\r\n+`;\r\n+\r\n+// Add to styled components section in WelcomePage.js\r\n+const LocationIndicator = styled.div`\r\n+  position: fixed;\r\n+  top: 90px;\r\n+  left: 2rem;\r\n+  display: flex;\r\n+  align-items: center;\r\n+  background: rgba(0, 0, 0, 0.7);\r\n+  padding: 0.5rem 1rem;\r\n+  border-radius: 20px;\r\n+  border: 1px solid ${props => `${props.theme?.colors?.accent}30` || 'rgba(128, 0, 0, 0.3)'};\r\n+  backdrop-filter: blur(4px);\r\n+  color: ${props => props.theme?.colors?.text || '#FFFFFF'};\r\n+  font-size: 0.9rem;\r\n+  z-index: 10;\r\n+  cursor: pointer;\r\n+  transition: all 0.3s ease;\r\n+  max-width: 300px;\r\n+  \r\n+  /* Hide on mobile, show only on desktop for debugging */\r\n+  @media (max-width: 768px) {\r\n+  width: auto;\r\n+    padding: 1rem 2.5rem;\r\n+    font-size: 1rem;\r\n+  } \r\n+  \r\n+  &:hover {\r\n+    background: rgba(0, 0, 0, 0.8);\r\n+    transform: translateY(-2px);\r\n+  }\r\n+  \r\n+  .location-icon {\r\n+    color: ${props => props.theme?.colors?.accent || '#800000'};\r\n+    margin-right: 0.75rem;\r\n+  }\r\n+  \r\n+  .location-text {\r\n+    white-space: nowrap;\r\n+    overflow: hidden;\r\n+    text-overflow: ellipsis;\r\n+  }\r\n+  \r\n+  .updating {\r\n+    margin-left: 0.5rem;\r\n+    width: 16px;\r\n+    height: 16px;\r\n+    border: 2px solid rgba(128, 0, 0, 0.2);\r\n+    border-radius: 50%;\r\n+    border-top-color: ${props => props.theme?.colors?.accent || '#800000'};\r\n+    animation: spin 1s linear infinite;\r\n+  }\r\n+`;\r\n+\r\n+const ShopName = styled.h2`\r\n+  font-family: ${props => props.theme?.fonts?.heading || \"'Impact', sans-serif\"};\r\n+  font-size: 2.5rem;\r\n+  background: ${props => props.theme?.colors?.accentGradient || 'linear-gradient(45deg, #800000, #4A0404)'};\r\n+  -webkit-background-clip: text;\r\n+  -webkit-text-fill-color: transparent;\r\n+  margin: 0 0 0.5rem 0;\r\n+  line-height: 1.2;\r\n+  \r\n+  @media (min-width: 768px) {\r\n+    font-size: 5.4rem;\r\n+    margin: 0 0 1rem 0;\r\n+  }\r\n+`;\r\n+\r\n+// Mobile-friendly action buttons\r\n+const ActionButtonContainer = styled.div`\r\n+  display: flex;\r\n+  flex-direction: column;\r\n+  gap: 1rem;\r\n+  width: 100%;\r\n+  max-width: 300px;\r\n+  margin: 2rem auto;\r\n+  \r\n+  @media (min-width: 480px) {\r\n+    flex-direction: row;\r\n+    justify-content: center;\r\n+    max-width: none;\r\n+  }\r\n+`;\r\n+\r\n+const ActionButton = styled.button`\r\n+  background: ${props => props.variant === 'outline' ? 'transparent' : \r\n+    props.theme?.colors?.accentGradient || 'linear-gradient(45deg, #800000, #4A0404)'};\r\n+  border: ${props => props.variant === 'outline' ? \r\n+    `2px solid ${props.theme?.colors?.accent || '#800000'}` : 'none'};\r\n+  padding: 1rem 1.5rem;\r\n+  border-radius: 30px;\r\n+  color: ${props => props.variant === 'outline' ? \r\n+    props.theme?.colors?.accent || '#800000' : 'white'};\r\n+  font-weight: bold;\r\n+  cursor: pointer;\r\n+  transition: all 0.3s;\r\n+  text-transform: uppercase;\r\n+  letter-spacing: 1px;\r\n+  font-size: 0.9rem;\r\n+  width: 100%;\r\n+  \r\n+  @media (min-width: 480px) {\r\n+    width: auto;\r\n+    padding: 1rem 2.5rem;\r\n+    font-size: 1rem;\r\n+  }\r\n+\r\n+  &:active {\r\n+    transform: scale(0.98);\r\n+  }\r\n+\r\n+  @media (hover: hover) {\r\n+    &:hover {\r\n+      transform: translateY(-2px);\r\n+      box-shadow: 0 5px 15px ${props => `${props.theme?.colors?.accent}4D` || 'rgba(128, 0, 0, 0.3)'};\r\n+    }\r\n+  }\r\n+`;\r\n+\r\n+// Mobile-optimized tab container with horizontal scroll\r\n+const TabContainer = styled.div`\r\n+  display: flex;\r\n+  gap: 0.5rem;\r\n+  margin: 2rem 0;\r\n+  overflow-x: auto;\r\n+  padding: 0.5rem 0;\r\n+  -webkit-overflow-scrolling: touch;\r\n+  \r\n+  &::-webkit-scrollbar {\r\n+    height: 4px;\r\n+  }\r\n+  \r\n+  &::-webkit-scrollbar-track {\r\n+    background: transparent;\r\n+  }\r\n+  \r\n+  &::-webkit-scrollbar-thumb {\r\n+    background: ${props => props.theme?.colors?.accent || '#800000'};\r\n+    border-radius: 2px;\r\n+  }\r\n+  \r\n+  @media (min-width: 768px) {\r\n+    justify-content: center;\r\n+    gap: 1rem;\r\n+    overflow-x: visible;\r\n+  }\r\n+`;\r\n+\r\n+const Tab = styled.button`\r\n+  background: ${props => props.active ? \r\n+    props.theme?.colors?.tabActiveBg || 'rgba(128, 0, 0, 0.2)' : 'transparent'};\r\n+  border: 1px solid ${props => props.active ? \r\n+    props.theme?.colors?.tabBorder || '#800000' : \r\n+    `${props.theme?.colors?.accent}4D` || 'rgba(128, 0, 0, 0.3)'};\r\n+  color: ${props => props.active ? \r\n+    props.theme?.colors?.text || '#FFFFFF' : \r\n+    `${props.theme?.colors?.text}99` || 'rgba(255, 255, 255, 0.6)'};\r\n+  padding: 0.6rem 1rem;\r\n+  border-radius: 20px;\r\n+  cursor: pointer;\r\n+  transition: all 0.3s;\r\n+  text-transform: uppercase;\r\n+  letter-spacing: 0.5px;\r\n+  font-weight: 500;\r\n+  font-size: 0.8rem;\r\n+  white-space: nowrap;\r\n+  display: flex;\r\n+  align-items: center;\r\n+  gap: 0.3rem;\r\n+  flex-shrink: 0;\r\n+  \r\n+  @media (min-width: 768px) {\r\n+    padding: 0.8rem 1.5rem;\r\n+    font-size: 0.9rem;\r\n+    letter-spacing: 1px;\r\n+    gap: 0.5rem;\r\n+  }\r\n+\r\n+  &:active {\r\n+    transform: scale(0.98);\r\n+  }\r\n+\r\n+  svg {\r\n+    width: 14px;\r\n+    height: 14px;\r\n+    \r\n+    @media (min-width: 768px) {\r\n+      width: 16px;\r\n+      height: 16px;\r\n+    }\r\n+  }\r\n+`;\r\n+\r\n+// Mobile-optimized grid with better touch targets\r\n+const GridContainer = styled.div`\r\n+  display: grid;\r\n+  grid-template-columns: repeat(2, 1fr);\r\n+  gap: 0.75rem;\r\n+  margin-top: 1.5rem;\r\n+  padding: 0 0.25rem;\r\n+  \r\n+  @media (min-width: 480px) {\r\n+    gap: 1rem;\r\n+    padding: 0;\r\n+  }\r\n+  \r\n+  @media (min-width: 768px) {\r\n+    grid-template-columns: repeat(auto-fill, minmax(220px, 1fr));\r\n+    gap: 1.5rem;\r\n+  }\r\n+  \r\n+  @media (min-width: 1024px) {\r\n+    grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));\r\n+    gap: 2rem;\r\n+  }\r\n+`;\r\n+\r\n+// Mobile search with better UX\r\n+const SearchContainer = styled.div`\r\n+  display: flex;\r\n+  flex-direction: column;\r\n+  gap: 0.75rem;\r\n+  width: 100%;\r\n+  padding: 0 0.5rem;\r\n+  \r\n+  @media (min-width: 600px) {\r\n+    flex-direction: row;\r\n+    align-items: center;\r\n+    max-width: 800px;\r\n+    margin: 0 auto;\r\n+    padding: 0;\r\n+  }\r\n+`;\r\n+\r\n+const SearchInput = styled.input`\r\n+  width: 100%;\r\n+  background: rgba(255, 255, 255, 0.05);\r\n+  border: 1px solid rgba(128, 0, 0, 0.2);\r\n+  border-radius: 25px;\r\n+  padding: 0.8rem 1rem;\r\n+  color: white;\r\n+  font-size: 1rem;\r\n+  -webkit-appearance: none;\r\n+  \r\n+  &:focus {\r\n+    outline: none;\r\n+    border-color: rgba(128, 0, 0, 0.4);\r\n+    background: rgba(255, 255, 255, 0.08);\r\n+  }\r\n+\r\n+  &::placeholder {\r\n+    color: rgba(255, 255, 255, 0.4);\r\n+  }\r\n+  \r\n+  @media (min-width: 600px) {\r\n+    flex: 1;\r\n+  }\r\n+`;\r\n+\r\n+const SearchButtonGroup = styled.div`\r\n+  display: flex;\r\n+  gap: 0.5rem;\r\n+  width: 100%;\r\n+  \r\n+  @media (min-width: 600px) {\r\n+    width: auto;\r\n+  }\r\n+`;\r\n+\r\n+const SearchButton = styled.button`\r\n+  flex: 1;\r\n+  background: ${props => props.variant === 'live' ? 'transparent' : 'rgba(128, 0, 0, 0.2)'};\r\n+  border: 1px solid rgba(128, 0, 0, 0.3);\r\n+  padding: 0.8rem 1rem;\r\n+  border-radius: 25px;\r\n+  color: white;\r\n+  font-size: 0.9rem;\r\n+  display: flex;\r\n+  align-items: center;\r\n+  justify-content: center;\r\n+  gap: 0.4rem;\r\n+  cursor: pointer;\r\n+  transition: all 0.2s ease;\r\n+  white-space: nowrap;\r\n+  -webkit-tap-highlight-color: transparent;\r\n+  \r\n+  @media (min-width: 600px) {\r\n+    flex: unset;\r\n+    padding: 0.8rem 1.2rem;\r\n+  }\r\n+\r\n+  &:active {\r\n+    transform: scale(0.98);\r\n+    background: rgba(128, 0, 0, 0.3);\r\n+  }\r\n+\r\n+  &:disabled {\r\n+    opacity: 0.5;\r\n+    cursor: not-allowed;\r\n+  }\r\n+\r\n+  svg {\r\n+    width: 16px;\r\n+    height: 16px;\r\n+  }\r\n+`;\r\n+\r\n+// Mobile-friendly slider with native scroll\r\n+const SliderContainer = styled.div`\r\n+  width: 100%;\r\n+  overflow-x: auto;\r\n+  overflow-y: hidden;\r\n+  position: relative;\r\n+  margin: 1.5rem 0;\r\n+  -webkit-overflow-scrolling: touch;\r\n+  scroll-snap-type: x mandatory;\r\n+  scroll-behavior: smooth;\r\n+  \r\n+  &::-webkit-scrollbar {\r\n+    height: 4px;\r\n+  }\r\n+  \r\n+  &::-webkit-scrollbar-track {\r\n+    background: ${props => `${props.theme?.colors?.background || '#000000'}80`};\r\n+    border-radius: 10px;\r\n+  }\r\n+  \r\n+  &::-webkit-scrollbar-thumb {\r\n+    background: ${props => props.theme?.colors?.accent || '#800000'};\r\n+    border-radius: 10px;\r\n+  }\r\n+  \r\n+  /* Hide scroll buttons on mobile */\r\n+  .scroll-button {\r\n+    display: none;\r\n+    \r\n+    @media (min-width: 768px) {\r\n+      display: flex;\r\n+    }\r\n+  }\r\n+`;\r\n+\r\n+const Slider = styled.div`\r\n+  display: flex;\r\n+  width: fit-content;\r\n+  padding: 0.5rem 0;\r\n+`;\r\n+\r\n+const SlideItem = styled.div`\r\n+  flex: 0 0 160px;\r\n+  margin-right: 0.75rem;\r\n+  scroll-snap-align: start;\r\n+  \r\n+  @media (min-width: 480px) {\r\n+    flex: 0 0 200px;\r\n+    margin-right: 1rem;\r\n+  }\r\n+  \r\n+  @media (min-width: 768px) {\r\n+    flex: 0 0 250px;\r\n+    margin-right: 1.5rem;\r\n+  }\r\n+  \r\n+  @media (min-width: 1024px) {\r\n+    flex: 0 0 300px;\r\n+    margin-right: 2rem;\r\n+  }\r\n+`;\r\n+\r\n+// Add styles for better item display\r\n+const ItemDetailsSection = styled.div`\r\n+  margin-bottom: 1.5rem;\r\n+`;\r\n+\r\n+const ItemHeader = styled.div`\r\n+  margin-bottom: 1.5rem;\r\n+  \r\n+  h3 {\r\n+    font-size: 1.5rem;\r\n+    margin: 0 0 0.5rem 0;\r\n+    font-family: ${props => props.theme?.fonts?.heading || 'inherit'};\r\n+    color: ${props => props.theme?.colors?.text || '#FFFFFF'};\r\n+    \r\n+    @media (min-width: 768px) {\r\n+      font-size: 1.8rem;\r\n+    }\r\n+  }\r\n+\r\n+  .price {\r\n+    font-size: 1.3rem;\r\n+    font-weight: bold;\r\n+    color: ${props => props.theme?.colors?.accent || '#800000'};\r\n+    margin-bottom: 1rem;\r\n+    \r\n+    @media (min-width: 768px) {\r\n+      font-size: 1.5rem;\r\n+    }\r\n+  }\r\n+`;\r\n+\r\n+const CategoryBadge = styled.div`\r\n+  display: inline-block;\r\n+  background: ${props => `${props.theme?.colors?.accent || '#800000'}20`};\r\n+  color: ${props => props.theme?.colors?.accent || '#800000'};\r\n+  padding: 0.25rem 0.75rem;\r\n+  border-radius: 12px;\r\n+  font-size: 0.75rem;\r\n+  font-weight: 500;\r\n+  text-transform: uppercase;\r\n+  letter-spacing: 0.5px;\r\n+  margin-bottom: 1rem;\r\n+`;\r\n+\r\n+const StockStatus = styled.div`\r\n+  display: flex;\r\n+  align-items: center;\r\n+  gap: 0.5rem;\r\n+  margin-bottom: 1rem;\r\n+  font-size: 0.9rem;\r\n+  \r\n+  .stock-indicator {\r\n+    width: 8px;\r\n+    height: 8px;\r\n+    border-radius: 50%;\r\n+    background: ${props => props.inStock ? '#4CAF50' : '#FF5252'};\r\n+  }\r\n+  \r\n+  .stock-text {\r\n+    color: ${props => props.inStock ? '#4CAF50' : '#FF5252'};\r\n+    font-weight: 500;\r\n+  }\r\n+`;\r\n+\r\n+const ItemDescription = styled.div`\r\n+  font-size: 0.95rem;\r\n+  opacity: 0.9;\r\n+  margin-bottom: 1.5rem;\r\n+  line-height: 1.6;\r\n+  color: ${props => props.theme?.colors?.text || '#FFFFFF'};\r\n+`;\r\n+\r\n+const ItemLocation = styled.div`\r\n+  display: flex;\r\n+  align-items: center;\r\n+  gap: 0.5rem;\r\n+  font-size: 0.9rem;\r\n+  opacity: 0.8;\r\n+  margin-bottom: 1.5rem;\r\n+  color: ${props => props.theme?.colors?.text || '#FFFFFF'};\r\n+`;\r\n+\r\n+const ShopInfo = styled.div`\r\n+  padding: 0.75rem;\r\n+  background: ${props => `${props.theme?.colors?.surface || 'rgba(255, 255, 255, 0.05)'}50`};\r\n+  border-radius: 8px;\r\n+  margin-bottom: 1.5rem;\r\n+  font-size: 0.9rem;\r\n+  color: ${props => props.theme?.colors?.text || '#FFFFFF'};\r\n+  \r\n+  strong {\r\n+    color: ${props => props.theme?.colors?.accent || '#800000'};\r\n+  }\r\n+`;\r\n+\r\n+// Add after imports in WelcomePage.js\r\n+\r\n+const getIPBasedLocation = async () => {\r\n+  try {\r\n+    const response = await fetch('https://ipapi.co/json/');\r\n+    const data = await response.json();\r\n+    return {\r\n+      latitude: data.latitude,\r\n+      longitude: data.longitude,\r\n+      city: data.city,\r\n+      region: data.region,\r\n+      country: data.country_name,\r\n+      isIPBased: true\r\n+    };\r\n+  } catch (error) {\r\n+    console.error('Error getting IP location:', error);\r\n+    return null;\r\n+  }\r\n+};\r\n+\r\n+// Update ActionButtons to only show Order button\r\n+const ActionButtons = styled.div`\r\n+  display: flex;\r\n+  gap: 0.75rem;\r\n+  margin-top: 1.5rem;\r\n+  \r\n+  button {\r\n+    flex: 1;\r\n+    padding: 0.75rem;\r\n+    border: none;\r\n+    border-radius: 8px;\r\n+    font-weight: bold;\r\n+    cursor: pointer;\r\n+    transition: all 0.3s;\r\n+    display: flex;\r\n+    align-items: center;\r\n+    justify-content: center;\r\n+    gap: 0.5rem;\r\n+    font-size: 0.9rem;\r\n+    \r\n+    @media (min-width: 768px) {\r\n+      padding: 1rem;\r\n+      font-size: 1rem;\r\n+    }\r\n+    \r\n+    &.order {\r\n+      background: ${props => props.theme?.colors?.accent || '#800000'};\r\n+      color: white;\r\n+      \r\n+      &:hover:not(:disabled) {\r\n+        background: ${props => props.theme?.colors?.primary || '#4A0404'};\r\n+        transform: translateY(-2px);\r\n+      }\r\n+      \r\n+      &:disabled {\r\n+        opacity: 0.5;\r\n+        cursor: not-allowed;\r\n+        transform: none;\r\n+      }\r\n+    }\r\n+    \r\n+    svg {\r\n+      width: 16px;\r\n+      height: 16px;\r\n+    }\r\n+  }\r\n+`;\r\n+\r\n+// Mobile-friendly floating controls - removed since they're now in header\r\n+const StyleIndicator = styled.div`\r\n+  position: fixed;\r\n+  bottom: 1rem;\r\n+  right: 1rem;\r\n+  background: ${props => `${props.theme?.colors?.background || '#000000'}E5`};\r\n+  backdrop-filter: blur(10px);\r\n+  color: white;\r\n+  padding: 0.5rem 1rem;\r\n+  border-radius: 20px;\r\n+  font-size: 0.8rem;\r\n+  display: flex;\r\n+  align-items: center;\r\n+  gap: 0.5rem;\r\n+  border: 1px solid ${props => `${props.theme?.colors?.accent}40` || 'rgba(128, 0, 0, 0.4)'};\r\n+  z-index: 90;\r\n+  \r\n+  @media (min-width: 768px) {\r\n+    font-size: 0.9rem;\r\n+  }\r\n+  \r\n+  .style-number {\r\n+    font-weight: bold;\r\n+    font-size: 1rem;\r\n+    color: ${props => props.theme?.colors?.accent || '#800000'};\r\n+    \r\n+    @media (min-width: 768px) {\r\n+      font-size: 1.2rem;\r\n+    }\r\n+  }\r\n+`;\r\n+\r\n+// Quantity selector optimized for mobile\r\n+const QuantitySelector = styled.div`\r\n+  display: flex;\r\n+  align-items: center;\r\n+  justify-content: space-between;\r\n+  background: ${props => `${props.theme?.colors?.surface || 'rgba(255, 255, 255, 0.05)'}50`};\r\n+  border-radius: 12px;\r\n+  padding: 1rem;\r\n+  margin: 1rem 0;\r\n+  \r\n+  .quantity-label {\r\n+    font-weight: bold;\r\n+    color: ${props => props.theme?.colors?.text || '#FFFFFF'};\r\n+    font-size: 0.9rem;\r\n+  }\r\n+  \r\n+  .quantity-controls {\r\n+    display: flex;\r\n+    align-items: center;\r\n+    gap: 1rem;\r\n+    \r\n+    .quantity-btn {\r\n+      width: 40px;\r\n+      height: 40px;\r\n+      border-radius: 50%;\r\n+      border: 2px solid ${props => props.theme?.colors?.accent || '#800000'};\r\n+      background: transparent;\r\n+      color: ${props => props.theme?.colors?.accent || '#800000'};\r\n+      display: flex;\r\n+      align-items: center;\r\n+      justify-content: center;\r\n+      cursor: pointer;\r\n+      transition: all 0.3s;\r\n+      -webkit-tap-highlight-color: transparent;\r\n+      \r\n+      &:active:not(:disabled) {\r\n+        transform: scale(0.9);\r\n+        background: ${props => props.theme?.colors?.accent || '#800000'};\r\n+        color: white;\r\n+      }\r\n+      \r\n+      &:disabled {\r\n+        opacity: 0.3;\r\n+        cursor: not-allowed;\r\n+      }\r\n+      \r\n+      svg {\r\n+        width: 18px;\r\n+        height: 18px;\r\n+      }\r\n+    }\r\n+    \r\n+    .quantity-display {\r\n+      font-size: 1.3rem;\r\n+      font-weight: bold;\r\n+      color: ${props => props.theme?.colors?.text || 'white'};\r\n+      min-width: 40px;\r\n+      text-align: center;\r\n+    }\r\n+  }\r\n+`;\r\n+\r\n+// Other styled components remain the same but with mobile optimizations...\r\n+const LoadingSpinner = styled.div`\r\n+  width: 40px;\r\n+  height: 40px;\r\n+  margin: 2rem auto;\r\n+  border: 3px solid rgba(128, 0, 0, 0.1);\r\n+  border-radius: 50%;\r\n+  border-top-color: #800000;\r\n+  animation: spin 1s linear infinite;\r\n+\r\n+  @keyframes spin {\r\n+    to {\r\n+      transform: rotate(360deg);\r\n+    }\r\n+  }\r\n+`;\r\n+\r\n+const EmptyGridMessage = styled.div`\r\n+  text-align: center;\r\n+  padding: 2rem 1rem;\r\n+  background: rgba(0, 0, 0, 0.2);\r\n+  border-radius: 12px;\r\n+  border: 1px solid rgba(128, 0, 0, 0.1);\r\n+  color: rgba(255, 255, 255, 0.7);\r\n+  grid-column: 1/-1;\r\n+\r\n+  h3 {\r\n+    font-size: 1.1rem;\r\n+    margin-bottom: 0.5rem;\r\n+    color: rgba(255, 255, 255, 0.9);\r\n+  }\r\n+\r\n+  p {\r\n+    font-size: 0.9rem;\r\n+    line-height: 1.5;\r\n+  }\r\n+`;\r\n+\r\n+const MotivationalMessage = styled.p`\r\n+  font-size: 1.1rem;\r\n+  line-height: 1.5;\r\n+  max-width: 600px;\r\n+  margin: 2rem auto 0;\r\n+  color: ${props => props.theme?.colors?.text || '#FFFFFF'};\r\n+  font-weight: 400;\r\n+  text-align: center;\r\n+  padding: 1rem 1.5rem;\r\n+  letter-spacing: 0.3px;\r\n+  position: relative;\r\n+  \r\n+  @media (min-width: 768px) {\r\n+    font-size: 1.4rem;\r\n+    line-height: 1.6;\r\n+    max-width: 800px;\r\n+    margin: 3rem auto 0;\r\n+    padding: 1.5rem 2rem;\r\n+    letter-spacing: 0.5px;\r\n+  }\r\n+  \r\n+  &::before, &::after {\r\n+    content: '\"';\r\n+    font-family: ${props => props.theme?.fonts?.heading || \"'Georgia', serif\"};\r\n+    font-size: 2rem;\r\n+    position: absolute;\r\n+    opacity: 0.2;\r\n+    color: ${props => props.theme?.colors?.accent || '#800000'};\r\n+    \r\n+    @media (min-width: 768px) {\r\n+      font-size: 3rem;\r\n+    }\r\n+  }\r\n+  \r\n+  &::before {\r\n+    top: -0.5rem;\r\n+    left: 0.5rem;\r\n+    \r\n+    @media (min-width: 768px) {\r\n+      top: -1.5rem;\r\n+      left: -1rem;\r\n+    }\r\n+  }\r\n+  \r\n+  &::after {\r\n+    bottom: -1.5rem;\r\n+    right: 0.5rem;\r\n+    \r\n+    @media (min-width: 768px) {\r\n+      bottom: -2.5rem;\r\n+      right: -1rem;\r\n+    }\r\n+  }\r\n+`;\r\n+\r\n+// 1. Replace the CategoryGrid styled component with these two new components:\r\n+\r\n+const CategoryGridWrapper = styled.div`\r\n+  margin-bottom: 2rem;\r\n+  \r\n+  /* Desktop: Regular grid */\r\n+  @media (min-width: 769px) {\r\n+    display: grid;\r\n+    grid-template-columns: repeat(5, 1fr);\r\n+    gap: 1rem;\r\n+  }\r\n+  \r\n+  @media (max-width: 1200px) and (min-width: 769px) {\r\n+    grid-template-columns: repeat(4, 1fr);\r\n+  }\r\n+  \r\n+  @media (max-width: 900px) and (min-width: 769px) {\r\n+    grid-template-columns: repeat(3, 1fr);\r\n+  }\r\n+  \r\n+  /* Mobile: Scrollable rows */\r\n+  @media (max-width: 768px) {\r\n+    display: flex;\r\n+    flex-direction: column;\r\n+    gap: 1rem;\r\n+  }\r\n+`;\r\n+\r\n+// Replace the CategoryScrollableGrid styled component with this corrected version:\r\n+\r\n+const CategoryScrollableGrid = styled.div`\r\n+  display: none;\r\n+  \r\n+  @media (max-width: 768px) {\r\n+    display: grid;\r\n+    grid-auto-flow: column;\r\n+    grid-template-rows: repeat(2, 1fr);\r\n+    grid-template-columns: repeat(5, minmax(280px, 1fr)); /* Increased from 200px */\r\n+    gap: 1rem; /* Increased from 0.75rem */\r\n+    overflow-x: auto;\r\n+    overflow-y: hidden;\r\n+    padding-bottom: 0.5rem;\r\n+    scroll-snap-type: x mandatory;\r\n+    -webkit-overflow-scrolling: touch;\r\n+    min-height: 85vh; /* Add minimum height to stretch vertically */\r\n+    \r\n+    &::-webkit-scrollbar {\r\n+      height: 4px;\r\n+    }\r\n+    \r\n+    &::-webkit-scrollbar-track {\r\n+      background: ${props => `${props.theme?.colors?.background || '#000000'}80`};\r\n+      border-radius: 10px;\r\n+    }\r\n+    \r\n+    &::-webkit-scrollbar-thumb {\r\n+      background: ${props => props.theme?.colors?.accent || '#800000'};\r\n+      border-radius: 10px;\r\n+    }\r\n+    \r\n+    > * {\r\n+      scroll-snap-align: start;\r\n+      min-width: 0;\r\n+      height: 100%; /* Make items stretch to full height */\r\n+    }\r\n+  }\r\n+  \r\n+  @media (max-width: 480px) {\r\n+    grid-template-columns: repeat(5, minmax(240px, 1fr)); /* Increased from 160px */\r\n+    gap: 0.75rem;\r\n+  }\r\n+`;\r\n+\r\n+// 4. Add this CSS to handle responsive display (add to your styled components section):\r\n+const GlobalStyle = styled.div`\r\n+  @media (min-width: 769px) {\r\n+    .mobile-only {\r\n+      display: none !important;\r\n+    }\r\n+  }\r\n+  \r\n+  @media (max-width: 768px) {\r\n+    .desktop-only {\r\n+      display: none !important;\r\n+    }\r\n+  }\r\n+`;\r\n+\r\n+const CategoryHeader = styled.div`\r\n+  display: flex;\r\n+  justify-content: space-between;\r\n+  align-items: center;\r\n+  margin-bottom: 0.75rem;\r\n+  padding: 0 0.5rem;\r\n+  \r\n+  @media (min-width: 768px) {\r\n+    margin-bottom: 1rem;\r\n+    padding: 0;\r\n+  }\r\n+  \r\n+  h2 {\r\n+    font-family: ${props => props.theme?.fonts?.heading || 'inherit'};\r\n+    font-size: 1.3rem;\r\n+    color: ${props => props.theme?.colors?.accent || '#800000'};\r\n+    margin: 0;\r\n+    \r\n+    @media (min-width: 768px) {\r\n+      font-size: 1.8rem;\r\n+    }\r\n+  }\r\n+  \r\n+  .view-all {\r\n+    font-size: 0.8rem;\r\n+    color: ${props => props.theme?.colors?.accent || '#800000'};\r\n+    opacity: 0.8;\r\n+    cursor: pointer;\r\n+    display: flex;\r\n+    align-items: center;\r\n+    gap: 0.3rem;\r\n+    transition: all 0.3s ease;\r\n+    \r\n+    @media (min-width: 768px) {\r\n+      font-size: 0.9rem;\r\n+      gap: 0.5rem;\r\n+    }\r\n+    \r\n+    &:active {\r\n+      opacity: 1;\r\n+      transform: translateX(3px);\r\n+    }\r\n+  }\r\n+`;\r\n+\r\n+const ChatOverlay = styled.div`\r\n+  position: fixed;\r\n+  top: 0;\r\n+  left: 0;\r\n+  right: 0;\r\n+  bottom: 0;\r\n+  background: rgba(0, 0, 0, 0.5);\r\n+  z-index: 999;\r\n+  opacity: ${props => props.isOpen ? 1 : 0};\r\n+  pointer-events: ${props => props.isOpen ? 'auto' : 'none'};\r\n+  transition: opacity 0.3s ease;\r\n+`;\r\n+\r\n+// Add these styled components after StyleIndicator\r\n+\r\n+const SortContainer = styled.div`\r\n+  position: relative;\r\n+  display: inline-block;\r\n+`;\r\n+\r\n+const SortDropdown = styled.div`\r\n+  position: absolute;\r\n+  top: calc(100% + 0.5rem);\r\n+  right: 0;\r\n+  background: ${props => props.theme?.colors?.background || '#000000'};\r\n+  border: 2px solid ${props => props.theme?.colors?.accent || '#800000'};\r\n+  border-radius: 12px;\r\n+  padding: 0.75rem;\r\n+  min-width: 220px;\r\n+  z-index: 1000;\r\n+  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.8),\r\n+              0 0 20px ${props => `${props.theme?.colors?.accent}40` || 'rgba(128, 0, 0, 0.25)'};\r\n+  opacity: ${props => props.isOpen ? 1 : 0};\r\n+  visibility: ${props => props.isOpen ? 'visible' : 'hidden'};\r\n+  transform: ${props => props.isOpen ? 'translateY(0)' : 'translateY(-10px)'};\r\n+  transition: all 0.3s ease;\r\n+  \r\n+  @media (max-width: 768px) {\r\n+    min-width: 200px;\r\n+    right: 0;\r\n+  }\r\n+`;\r\n+\r\n+const SortOption = styled.button`\r\n+  width: 100%;\r\n+  padding: 0.75rem 1rem;\r\n+  background: ${props => props.active ? \r\n+    props.theme?.colors?.accent || '#800000' : \r\n+    'transparent'};\r\n+  border: none;\r\n+  border-radius: 8px;\r\n+  color: ${props => props.active ? \r\n+    '#FFFFFF' : \r\n+    props.theme?.colors?.text || '#FFFFFF'};\r\n+  font-size: 0.95rem;\r\n+  font-weight: ${props => props.active ? '600' : '500'};\r\n+  text-align: left;\r\n+  cursor: pointer;\r\n+  transition: all 0.2s ease;\r\n+  display: flex;\r\n+  align-items: center;\r\n+  gap: 0.75rem;\r\n+  font-family: ${props => props.theme?.fonts?.body || 'inherit'};\r\n+  min-height: 50px; /* Added for two-line content */\r\n+  \r\n+  &:hover {\r\n+    background: ${props => props.active ?\r\n+      props.theme?.colors?.primary || '#4A0404' :\r\n+      `${props.theme?.colors?.accent}20` || 'rgba(128, 0, 0, 0.2)'};\r\n+    transform: translateX(2px);\r\n+  }\r\n+  \r\n+  &:active {\r\n+    transform: scale(0.98);\r\n+  }\r\n+  \r\n+  svg {\r\n+    width: 16px;\r\n+    height: 16px;\r\n+    flex-shrink: 0;\r\n+    align-self: flex-start; /* Align icon to top when two lines */\r\n+    margin-top: 2px;\r\n+  }\r\n+  \r\n+  @media (max-width: 768px) {\r\n+    padding: 0.65rem 0.85rem;\r\n+    font-size: 0.9rem;\r\n+    min-height: 46px;\r\n+    \r\n+    svg {\r\n+      width: 14px;\r\n+      height: 14px;\r\n+    }\r\n+  }\r\n+`;\r\n+\r\n+const SortHeader = styled.div`\r\n+  display: flex;\r\n+  justify-content: space-between;\r\n+  align-items: center;\r\n+  margin-bottom: 1rem;\r\n+  \r\n+  @media (max-width: 768px) {\r\n+    flex-direction: column;\r\n+    align-items: flex-start;\r\n+    gap: 0.75rem;\r\n+  }\r\n+`;\r\n+\r\n+// Motivational messages\r\n+const MOTIVATIONAL_MESSAGES = [\r\n+  \"Build your vision, Elevate humanity.\",\r\n+  \"Create greatness, Inspire progress.\",\r\n+  \"Master your craft, Serve with passion.\",\r\n+  \"Own your success, Empower those around you.\",\r\n+  \"Rule with wisdom, Lead with heart.\",\r\n+  \"Shape your future, Change lives along the way.\",\r\n+  \"Rise above, Lift others higher.\",\r\n+  \"Conquer your dreams, Build a better world.\",\r\n+  \"Lead by example, Serve with strength.\",\r\n+  \"Pursue greatness, Give back in abundance.\"\r\n+];\r\n+\r\n+const WelcomePage = () => {\r\n+  const navigate = useNavigate();\r\n+  const [motivationalMessage, setMotivationalMessage] = useState(\"\");\r\n+  const [activeTab, setActiveTab] = useState('featured');\r\n+  const [featuredItems, setFeaturedItems] = useState([]);\r\n+  const [loading, setLoading] = useState(true);\r\n+  const [error, setError] = useState(null);\r\n+  const [nearbyItems, setNearbyItems] = useState([]);\r\n+  const [featuredMedia, setFeaturedMedia] = useState([]);\r\n+  const [hasSearched, setHasSearched] = useState(false);\r\n+  const [searchAddress, setSearchAddress] = useState('');\r\n+  const [searching, setSearching] = useState(false);\r\n+  const [locationChecked, setLocationChecked] = useState(false);\r\n+  const [showLocationPrompt, setShowLocationPrompt] = useState(false);\r\n+  const [currentZipCode, setCurrentZipCode] = useState(null);\r\n+  const [currentPage, setCurrentPage] = useState(1);\r\n+  const [totalItems, setTotalItems] = useState(0);\r\n+  const [currentStyle, setCurrentStyle] = useState(null);\r\n+  const itemsPerPage = 6;\r\n+  const [isPinned, setIsPinned] = useState(false);\r\n+  const [isRefreshing, setIsRefreshing] = useState(false);\r\n+  const [orderQuantity, setOrderQuantity] = useState(1);\r\n+  const [sortBy, setSortBy] = useState('recent'); // 'recent', 'proximity', 'price-low', 'price-high'\r\n+  const [sortMenuOpen, setSortMenuOpen] = useState(false);\r\n+\r\n+\r\n+  \r\n+  const { user, isAuthenticated } = useAuth();\r\n+  const [shopData, setShopData] = useState(null);\r\n+  const [currentMessageIndex, setCurrentMessageIndex] = useState(0);\r\n+  const [isMessageVisible, setIsMessageVisible] = useState(true);\r\n+  const [isSliderPaused, setIsSliderPaused] = useState(false);\r\n+  const [sliderPosition, setSliderPosition] = useState(0);\r\n+  const sliderRef = useRef(null);\r\n+  const sliderAnimationRef = useRef(null);\r\n+  const [zoomedItem, setZoomedItem] = useState(null);\r\n+  const [chatOpen, setChatOpen] = useState(false);\r\n+  const [selectedChatItem, setSelectedChatItem] = useState(null);\r\n+  const [currentImageIndex, setCurrentImageIndex] = useState(0);\r\n+  const { userLocation, locationPermission, requestLocation } = useLocation();\r\n+  const [updatingLocation, setUpdatingLocation] = useState(false);\r\n+  const [featuredSearchTerm, setFeaturedSearchTerm] = useState('');\r\n+  const [searchResults, setSearchResults] = useState([]);\r\n+  const [isSearching, setIsSearching] = useState(false);\r\n+  const [hasSearchResults, setHasSearchResults] = useState(false);\r\n+  const [categories, setCategories] = useState({\r\n+    'Electronics & Tech': [],\r\n+    'Clothing & Accessories': [],\r\n+    'Home & Garden': [],\r\n+    'Sports & Outdoors': [],\r\n+    'Books & Media': [],\r\n+    'Toys & Games': [],\r\n+    'Health & Beauty': [],\r\n+    'Automotive': [],\r\n+    'Collectibles & Art': [],\r\n+    'Food & Beverages': [],\r\n+    'Other': []\r\n+  });\r\n+// Replace the existing state variables related to ZIP with city/region states\r\n+const [cityRegion, setCityRegion] = useState('');\r\n+const [isCityPinned, setIsCityPinned] = useState(false);\r\n+const [isConvertingToCity, setIsConvertingToCity] = useState(false);\r\n+const [cityInputValue, setCityInputValue] = useState('');\r\n+const [effectiveLocation, setEffectiveLocation] = useState(null);\r\n+const [isIPLocation, setIsIPLocation] = useState(false);\r\n+\r\n+// Add useEffect to handle IP-based location\r\n+useEffect(() => {\r\n+  const initializeLocation = async () => {\r\n+    if (userLocation) {\r\n+      // User has shared precise location\r\n+      setEffectiveLocation(userLocation);\r\n+      setIsIPLocation(false);\r\n+    } else {\r\n+      // Use IP-based location\r\n+      const ipLocation = await getIPBasedLocation();\r\n+      if (ipLocation) {\r\n+        setEffectiveLocation(ipLocation);\r\n+        setIsIPLocation(true);\r\n+      }\r\n+    }\r\n+  };\r\n+  \r\n+  initializeLocation();\r\n+}, [userLocation]);\r\n+\r\n+// Update loadCategorizedItems to use effectiveLocation\r\n+const loadCategorizedItems = async () => {\r\n+  try {\r\n+    setLoading(true);\r\n+    setError(null);\r\n+\r\n+    const allItems = await getFeaturedItems(48);\r\n+    const currentUserId = user?.uid;\r\n+    \r\n+    const filteredItems = allItems.filter(item => {\r\n+      const isNotCurrentUser = item.shopId !== currentUserId;\r\n+      const hasImages = item.images && item.images.length > 0 && item.images.some(img => img);\r\n+      const hasValidPrice = item.price && !isNaN(parseFloat(item.price)) && parseFloat(item.price) > 0;\r\n+      const hasStock = !item.deleted && (!item.quantity || parseInt(item.quantity) > 0);\r\n+      \r\n+      return isNotCurrentUser && hasImages && hasValidPrice && hasStock;\r\n+    });\r\n+\r\n+    let itemsWithDistance = filteredItems;\r\n+    \r\n+    // USE effectiveLocation instead of userLocation\r\n+    if (effectiveLocation) {\r\n+      itemsWithDistance = filteredItems.map(item => {\r\n+        let itemCoords = item.coordinates;\r\n+        if (!itemCoords && item.address) {\r\n+          const coordsMatch = item.address.match(/^(-?\\d+\\.?\\d*),\\s*(-?\\d+\\.?\\d*)$/);\r\n+          if (coordsMatch) {\r\n+            itemCoords = {\r\n+              lat: parseFloat(coordsMatch[1]),\r\n+              lng: parseFloat(coordsMatch[2])\r\n+            };\r\n+          }\r\n+        }\r\n+\r\n+        if (itemCoords?.lat && itemCoords?.lng) {\r\n+          try {\r\n+            const distanceInMeters = getDistance(\r\n+              { latitude: effectiveLocation.latitude, longitude: effectiveLocation.longitude },\r\n+              { latitude: itemCoords.lat, longitude: itemCoords.lng }\r\n+            );\r\n+            const distanceInMiles = (distanceInMeters / 1609.34).toFixed(1);\r\n+\r\n+            return {\r\n+              ...item,\r\n+              coordinates: itemCoords,\r\n+              distance: distanceInMeters,\r\n+              distanceInMiles,\r\n+              formattedDistance: `${distanceInMiles} mi`\r\n+            };\r\n+          } catch (e) {\r\n+            console.warn('Error calculating distance for item:', e);\r\n+            return item;\r\n+          }\r\n+        }\r\n+        return item;\r\n+      });\r\n+    }\r\n+\r\n+    const sortedItems = applySorting(itemsWithDistance, sortBy);\r\n+    \r\n+    // Rest of function stays the same...\r\n+  } catch (error) {\r\n+    console.error('Error loading categorized items:', error);\r\n+    setError('Failed to load items. Please try again later.');\r\n+    setLoading(false);\r\n+  }\r\n+};\r\n+\r\n+// Add this useEffect with other effects\r\n+\r\n+useEffect(() => {\r\n+  const handleClickOutside = (event) => {\r\n+    if (sortMenuOpen && !event.target.closest('.sort-container')) {\r\n+      setSortMenuOpen(false);\r\n+    }\r\n+  };\r\n+\r\n+  document.addEventListener('mousedown', handleClickOutside);\r\n+  return () => document.removeEventListener('mousedown', handleClickOutside);\r\n+}, [sortMenuOpen]);\r\n+\r\n+// Add this function before the return statement in WelcomePage component\r\n+\r\n+// Replace the applySorting function with this updated version:\r\n+\r\n+const applySorting = (items, sortType) => {\r\n+  let sortedItems = [...items];\r\n+  \r\n+  switch (sortType) {\r\n+    case 'proximity':\r\n+      if (!userLocation) {\r\n+        // If no location, request it\r\n+        requestLocation();\r\n+        return sortedItems;\r\n+      }\r\n+      // Sort by distance (closest first) - no distance filter\r\n+      sortedItems.sort((a, b) => {\r\n+        const distA = a.distance || Infinity;\r\n+        const distB = b.distance || Infinity;\r\n+        return distA - distB;\r\n+      });\r\n+      break;\r\n+      \r\n+    case 'price-low':\r\n+      // Filter items within 30 miles, then sort by price (low to high)\r\n+      if (userLocation) {\r\n+        sortedItems = sortedItems.filter(item => {\r\n+          if (!item.distance) return false;\r\n+          const distanceInMiles = item.distance / 1609.34;\r\n+          return distanceInMiles <= 30;\r\n+        });\r\n+      }\r\n+      sortedItems.sort((a, b) => {\r\n+        const priceA = parseFloat(a.price) || 0;\r\n+        const priceB = parseFloat(b.price) || 0;\r\n+        return priceA - priceB;\r\n+      });\r\n+      break;\r\n+      \r\n+    case 'price-high':\r\n+      // Filter items within 30 miles, then sort by price (high to low)\r\n+      if (userLocation) {\r\n+        sortedItems = sortedItems.filter(item => {\r\n+          if (!item.distance) return false;\r\n+          const distanceInMiles = item.distance / 1609.34;\r\n+          return distanceInMiles <= 30;\r\n+        });\r\n+      }\r\n+      sortedItems.sort((a, b) => {\r\n+        const priceA = parseFloat(a.price) || 0;\r\n+        const priceB = parseFloat(b.price) || 0;\r\n+        return priceB - priceA;\r\n+      });\r\n+      break;\r\n+      \r\n+    case 'recent':\r\n+    default:\r\n+      // Filter items within 30 miles, then sort by most recent\r\n+      if (userLocation) {\r\n+        sortedItems = sortedItems.filter(item => {\r\n+          if (!item.distance) return false;\r\n+          const distanceInMiles = item.distance / 1609.34;\r\n+          return distanceInMiles <= 30;\r\n+        });\r\n+      }\r\n+      sortedItems.sort((a, b) => {\r\n+        const dateA = a.createdAt ? new Date(a.createdAt) : new Date(0);\r\n+        const dateB = b.createdAt ? new Date(b.createdAt) : new Date(0);\r\n+        return dateB - dateA;\r\n+      });\r\n+      break;\r\n+  }\r\n+  \r\n+  return sortedItems;\r\n+};\r\n+\r\n+const getSortLabel = (sortType) => {\r\n+  switch (sortType) {\r\n+    case 'proximity': return 'Closest First';\r\n+    case 'price-low': return 'Price: Low to High';\r\n+    case 'price-high': return 'Price: High to Low';\r\n+    case 'recent':\r\n+    default: return 'Most Recent';\r\n+  }\r\n+};\r\n+\r\n+// Replace convertCoordsToZip with this new function\r\n+const convertCoordsToCity = async (lat, lon) => {\r\n+  try {\r\n+    setIsConvertingToCity(true);\r\n+    setError(null);\r\n+    \r\n+    const response = await fetch(\r\n+      `https://nominatim.openstreetmap.org/reverse?lat=${lat}&lon=${lon}&format=json&zoom=10&addressdetails=1`,\r\n+      {\r\n+        headers: {\r\n+          'Accept': 'application/json',\r\n+          'User-Agent': 'KalKode Marketplace'\r\n+        }\r\n+      }\r\n+    );\r\n+    \r\n+    if (!response.ok) {\r\n+      throw new Error('Failed to fetch location data');\r\n+    }\r\n+    \r\n+    const data = await response.json();\r\n+    console.log('Nominatim response:', data);\r\n+    \r\n+    if (!data || !data.address) {\r\n+      setCityRegion('Not available');\r\n+      setCityInputValue('');\r\n+      return null;\r\n+    }\r\n+    \r\n+    const address = data.address;\r\n+    const city = address.city || address.town || address.village || address.county;\r\n+    const state = address.state;\r\n+    \r\n+    // Major cities list (you can expand this)\r\n+    const majorCities = [\r\n+      'Houston', 'Dallas', 'Austin', 'San Antonio', 'Fort Worth',\r\n+      'Los Angeles', 'New York', 'Chicago', 'Phoenix', 'Philadelphia',\r\n+      'San Diego', 'San Jose', 'Jacksonville', 'Columbus', 'Charlotte'\r\n+    ];\r\n+    \r\n+    let locationString = '';\r\n+    \r\n+    if (city && majorCities.some(major => city.includes(major))) {\r\n+      // For major cities, determine direction from city center\r\n+      const cityName = majorCities.find(major => city.includes(major));\r\n+      \r\n+      // Get city center coordinates (you could make this more precise with a lookup table)\r\n+      const cityCenterResponse = await fetch(\r\n+        `https://nominatim.openstreetmap.org/search?city=${cityName}&state=${state}&format=json&limit=1`,\r\n+        {\r\n+          headers: {\r\n+            'Accept': 'application/json',\r\n+            'User-Agent': 'KalKode Marketplace'\r\n+          }\r\n+        }\r\n+      );\r\n+      \r\n+      const cityCenterData = await cityCenterResponse.json();\r\n+      \r\n+      if (cityCenterData && cityCenterData[0]) {\r\n+        const centerLat = parseFloat(cityCenterData[0].lat);\r\n+        const centerLon = parseFloat(cityCenterData[0].lon);\r\n+        \r\n+        // Calculate direction\r\n+        const direction = getDirection(lat, lon, centerLat, centerLon);\r\n+        locationString = `${direction} ${cityName}, ${getStateAbbreviation(state)}`;\r\n+      } else {\r\n+        locationString = `${cityName}, ${getStateAbbreviation(state)}`;\r\n+      }\r\n+    } else if (state) {\r\n+      // For non-major cities, use state with direction\r\n+      // Get state center (approximate)\r\n+      const stateCenterResponse = await fetch(\r\n+        `https://nominatim.openstreetmap.org/search?state=${state}&country=USA&format=json&limit=1`,\r\n+        {\r\n+          headers: {\r\n+            'Accept': 'application/json',\r\n+            'User-Agent': 'KalKode Marketplace'\r\n+          }\r\n+        }\r\n+      );\r\n+      \r\n+      const stateCenterData = await stateCenterResponse.json();\r\n+      \r\n+      if (stateCenterData && stateCenterData[0]) {\r\n+        const centerLat = parseFloat(stateCenterData[0].lat);\r\n+        const centerLon = parseFloat(stateCenterData[0].lon);\r\n+        \r\n+        const direction = getDirection(lat, lon, centerLat, centerLon);\r\n+        locationString = city ? \r\n+          `${city}, ${direction} ${getStateAbbreviation(state)}` :\r\n+          `${direction} ${getStateAbbreviation(state)}`;\r\n+      } else {\r\n+        locationString = city ? \r\n+          `${city}, ${getStateAbbreviation(state)}` :\r\n+          getStateAbbreviation(state);\r\n+      }\r\n+    } else {\r\n+      locationString = city || 'Unknown Location';\r\n+    }\r\n+    \r\n+    setCityRegion(locationString);\r\n+    setCityInputValue(locationString);\r\n+    \r\n+    console.log(`Coordinates ${lat}, ${lon} → ${locationString}`);\r\n+    \r\n+    return locationString;\r\n+    \r\n+  } catch (error) {\r\n+    console.error('Error converting coordinates to city:', error);\r\n+    setCityRegion('Error');\r\n+    setCityInputValue('');\r\n+    setError('Failed to get location information');\r\n+    return null;\r\n+  } finally {\r\n+    setIsConvertingToCity(false);\r\n+  }\r\n+};\r\n+\r\n+// Helper function to determine direction (N, S, E, W, NE, NW, SE, SW)\r\n+const getDirection = (lat1, lon1, lat2, lon2) => {\r\n+  const latDiff = lat1 - lat2;\r\n+  const lonDiff = lon1 - lon2;\r\n+  \r\n+  const absLatDiff = Math.abs(latDiff);\r\n+  const absLonDiff = Math.abs(lonDiff);\r\n+  \r\n+  // If differences are very small, consider it center\r\n+  if (absLatDiff < 0.1 && absLonDiff < 0.1) {\r\n+    return '';\r\n+  }\r\n+  \r\n+  // Determine primary direction\r\n+  let direction = '';\r\n+  \r\n+  // North/South\r\n+  if (absLatDiff > absLonDiff * 0.5) {\r\n+    direction += latDiff > 0 ? 'N' : 'S';\r\n+  }\r\n+  \r\n+  // East/West\r\n+  if (absLonDiff > absLatDiff * 0.5) {\r\n+    direction += lonDiff > 0 ? 'E' : 'W';\r\n+  }\r\n+  \r\n+  return direction || 'Central';\r\n+};\r\n+\r\n+// Helper function to get state abbreviations\r\n+const getStateAbbreviation = (stateName) => {\r\n+  const stateMap = {\r\n+    'Alabama': 'AL', 'Alaska': 'AK', 'Arizona': 'AZ', 'Arkansas': 'AR',\r\n+    'California': 'CA', 'Colorado': 'CO', 'Connecticut': 'CT', 'Delaware': 'DE',\r\n+    'Florida': 'FL', 'Georgia': 'GA', 'Hawaii': 'HI', 'Idaho': 'ID',\r\n+    'Illinois': 'IL', 'Indiana': 'IN', 'Iowa': 'IA', 'Kansas': 'KS',\r\n+    'Kentucky': 'KY', 'Louisiana': 'LA', 'Maine': 'ME', 'Maryland': 'MD',\r\n+    'Massachusetts': 'MA', 'Michigan': 'MI', 'Minnesota': 'MN', 'Mississippi': 'MS',\r\n+    'Missouri': 'MO', 'Montana': 'MT', 'Nebraska': 'NE', 'Nevada': 'NV',\r\n+    'New Hampshire': 'NH', 'New Jersey': 'NJ', 'New Mexico': 'NM', 'New York': 'NY',\r\n+    'North Carolina': 'NC', 'North Dakota': 'ND', 'Ohio': 'OH', 'Oklahoma': 'OK',\r\n+    'Oregon': 'OR', 'Pennsylvania': 'PA', 'Rhode Island': 'RI', 'South Carolina': 'SC',\r\n+    'South Dakota': 'SD', 'Tennessee': 'TN', 'Texas': 'TX', 'Utah': 'UT',\r\n+    'Vermont': 'VT', 'Virginia': 'VA', 'Washington': 'WA', 'West Virginia': 'WV',\r\n+    'Wisconsin': 'WI', 'Wyoming': 'WY'\r\n+  };\r\n+  \r\n+  return stateMap[stateName] || stateName;\r\n+};\r\n+\r\n+// Replace handleLocationToZip with handleLocationToCity\r\n+const handleLocationToCity = async () => {\r\n+  try {\r\n+    setIsConvertingToCity(true);\r\n+    setError(null);\r\n+    \r\n+    // Request fresh location from browser\r\n+    const freshLocation = await new Promise((resolve, reject) => {\r\n+      if (!navigator.geolocation) {\r\n+        reject(new Error('Geolocation not supported'));\r\n+        return;\r\n+      }\r\n+      \r\n+      navigator.geolocation.getCurrentPosition(\r\n+        (position) => {\r\n+          resolve({\r\n+            latitude: position.coords.latitude,\r\n+            longitude: position.coords.longitude\r\n+          });\r\n+        },\r\n+        (error) => {\r\n+          reject(error);\r\n+        },\r\n+        {\r\n+          enableHighAccuracy: true,\r\n+          timeout: 10000,\r\n+          maximumAge: 0\r\n+        }\r\n+      );\r\n+    });\r\n+    \r\n+    // Convert fresh coordinates to city/region\r\n+    await convertCoordsToCity(freshLocation.latitude, freshLocation.longitude);\r\n+    \r\n+  } catch (error) {\r\n+    console.error('Error getting fresh location:', error);\r\n+    \r\n+    // Fallback: use stored location if available\r\n+    if (userLocation) {\r\n+      console.log('Using stored location as fallback');\r\n+      await convertCoordsToCity(userLocation.latitude, userLocation.longitude);\r\n+    } else {\r\n+      setError('Location not available. Please enable location services.');\r\n+    }\r\n+  } finally {\r\n+    setIsConvertingToCity(false);\r\n+  }\r\n+};\r\n+\r\n+// Replace handleToggleZipPin with handleToggleCityPin\r\n+const handleToggleCityPin = () => {\r\n+  if (isCityPinned) {\r\n+    localStorage.removeItem('pinnedCityRegion');\r\n+    setIsCityPinned(false);\r\n+    setCityRegion('');\r\n+    setCityInputValue('');\r\n+  } else {\r\n+    if (cityRegion && cityRegion !== 'Not available' && cityRegion !== 'Error') {\r\n+      localStorage.setItem('pinnedCityRegion', cityRegion);\r\n+      setIsCityPinned(true);\r\n+    }\r\n+  }\r\n+};\r\n+\r\n+// Update the useEffect that loads pinned location on mount\r\n+useEffect(() => {\r\n+  const pinnedCity = localStorage.getItem('pinnedCityRegion');\r\n+  if (pinnedCity) {\r\n+    setCityRegion(pinnedCity);\r\n+    setCityInputValue(pinnedCity);\r\n+    setIsCityPinned(true);\r\n+  }\r\n+}, []);\r\n+\r\n+\r\n+  // Handle opening shop\r\n+  const handleOpenShop = () => {\r\n+    navigate('/shop/create/template');\r\n+  };\r\n+\r\n+  // Refresh theme\r\n+  const refreshTheme = () => {\r\n+    if (isRefreshing) return;\r\n+    \r\n+    setIsRefreshing(true);\r\n+    const styles = Object.values(WELCOME_STYLES);\r\n+    const otherStyles = styles.filter(style => style.id !== currentStyle.id);\r\n+    \r\n+    if (otherStyles.length > 0) {\r\n+      const randomStyle = otherStyles[Math.floor(Math.random() * otherStyles.length)];\r\n+      setCurrentStyle(randomStyle);\r\n+      \r\n+      if (isPinned) {\r\n+        localStorage.removeItem('pinnedStyleId');\r\n+        setIsPinned(false);\r\n+      }\r\n+    }\r\n+    \r\n+    setTimeout(() => setIsRefreshing(false), 500);\r\n+  };\r\n+\r\n+  // Toggle pin style\r\n+  const togglePinStyle = () => {\r\n+    if (isPinned) {\r\n+      localStorage.removeItem('pinnedStyleId');\r\n+      setIsPinned(false);\r\n+      \r\n+      const styles = Object.values(WELCOME_STYLES).filter(\r\n+        style => style.id !== currentStyle.id\r\n+      );\r\n+      \r\n+      if (styles.length > 0) {\r\n+        const randomStyle = styles[Math.floor(Math.random() * styles.length)];\r\n+        setCurrentStyle(randomStyle);\r\n+      }\r\n+    } else {\r\n+      localStorage.setItem('pinnedStyleId', currentStyle.id.toString());\r\n+      setIsPinned(true);\r\n+    }\r\n+  };\r\n+\r\n+  // Handle location update\r\n+  const handleLocationUpdate = () => {\r\n+    setUpdatingLocation(true);\r\n+    requestLocation();\r\n+  };\r\n+\r\n+  // Get location display text\r\n+  const getLocationDisplayText = () => {\r\n+    if (!userLocation) {\r\n+      return \"Location: Not available\";\r\n+    }\r\n+    return `Location: ${userLocation.latitude.toFixed(4)}, ${userLocation.longitude.toFixed(4)}`;\r\n+  };\r\n+\r\n+  // Search featured items\r\n+  const searchFeaturedItems = async (searchTerm) => {\r\n+    if (!searchTerm.trim()) {\r\n+      setSearchResults([]);\r\n+      setHasSearchResults(false);\r\n+      return;\r\n+    }\r\n+  \r\n+    try {\r\n+      setIsSearching(true);\r\n+      setError(null);\r\n+    \r\n+      const shopsRef = collection(db, 'shops');\r\n+      const snapshot = await getDocs(shopsRef);\r\n+      \r\n+      let allMatchingItems = [];\r\n+      const currentUserId = user?.uid;\r\n+      \r\n+      snapshot.docs.forEach(doc => {\r\n+        const shopData = doc.data();\r\n+        \r\n+        if (doc.id === currentUserId) {\r\n+          return;\r\n+        }\r\n+        \r\n+        if (shopData?.items && Array.isArray(shopData.items)) {\r\n+          shopData.items\r\n+            .filter(item => !item.deleted)\r\n+            .forEach(item => {\r\n+              const itemName = (item.name || '').toLowerCase();\r\n+              const itemDescription = (item.description || '').toLowerCase();\r\n+              const searchLower = searchTerm.toLowerCase();\r\n+              \r\n+              if (itemName.includes(searchLower) || itemDescription.includes(searchLower)) {\r\n+                allMatchingItems.push({\r\n+                  ...item,\r\n+                  shopId: doc.id,\r\n+                  shopName: shopData.name || 'Unknown Shop',\r\n+                  shopTheme: shopData.theme\r\n+                });\r\n+              }\r\n+            });\r\n+        }\r\n+      });\r\n+    \r\n+      if (userLocation) {\r\n+        allMatchingItems = allMatchingItems.map(item => {\r\n+          if (item.coordinates && item.coordinates.lat && item.coordinates.lng) {\r\n+            try {\r\n+              const distanceInMeters = getDistance(\r\n+                { latitude: userLocation.latitude, longitude: userLocation.longitude },\r\n+                { latitude: item.coordinates.lat, longitude: item.coordinates.lng }\r\n+              );\r\n+              const distanceInMiles = (distanceInMeters / 1609.34).toFixed(1);\r\n+              \r\n+              return {\r\n+                ...item,\r\n+                distance: distanceInMeters,\r\n+                distanceInMiles,\r\n+                formattedDistance: `${distanceInMiles} mi`\r\n+              };\r\n+            } catch (e) {\r\n+              console.warn('Error calculating distance for item:', e);\r\n+              return item;\r\n+            }\r\n+          }\r\n+          return item;\r\n+        });\r\n+      }\r\n+    \r\n+      setSearchResults(allMatchingItems);\r\n+      setHasSearchResults(true);\r\n+      \r\n+      if (allMatchingItems.length === 0) {\r\n+        setError(`No items found matching \"${searchTerm}\"`);\r\n+      }\r\n+    } catch (error) {\r\n+      console.error('Error searching items:', error);\r\n+      setError('Failed to search items. Please try again later.');\r\n+    } finally {\r\n+      setIsSearching(false);\r\n+    }\r\n+  };\r\n+\r\n+\r\n+  // Handle featured search\r\n+  const handleFeaturedSearch = () => {\r\n+    if (featuredSearchTerm.trim()) {\r\n+      searchFeaturedItems(featuredSearchTerm);\r\n+    }\r\n+  };\r\n+\r\n+  const handleRowScroll = (categoryName, rowNumber, scrollLeft) => {\r\n+  const row1Id = `${categoryName}-row1`;\r\n+  const row2Id = `${categoryName}-row2`;\r\n+  \r\n+  const row1Element = document.getElementById(row1Id);\r\n+  const row2Element = document.getElementById(row2Id);\r\n+  \r\n+  if (rowNumber === 1 && row2Element) {\r\n+    row2Element.scrollLeft = scrollLeft;\r\n+  } else if (rowNumber === 2 && row1Element) {\r\n+    row1Element.scrollLeft = scrollLeft;\r\n+  }\r\n+};\r\n+\r\n+  const handleClearFeaturedSearch = () => {\r\n+    setFeaturedSearchTerm('');\r\n+    setSearchResults([]);\r\n+    setHasSearchResults(false);\r\n+    setError(null);\r\n+  };\r\n+\r\n+  // Fetch nearby items\r\n+  const fetchNearbyItems = async () => {\r\n+    if (!userLocation) {\r\n+      setError('Location information is not available');\r\n+      setSearching(false);\r\n+      return;\r\n+    }\r\n+  \r\n+    try {\r\n+      setLoading(true);\r\n+      const shopsRef = collection(db, 'shops');\r\n+      const snapshot = await getDocs(shopsRef);\r\n+      \r\n+      let itemsInRadius = [];\r\n+      const currentUserId = user?.uid;\r\n+      \r\n+      snapshot.docs.forEach(doc => {\r\n+        const shopData = doc.data();\r\n+        \r\n+        if (doc.id === currentUserId) {\r\n+          return;\r\n+        }\r\n+        \r\n+        if (shopData?.items && Array.isArray(shopData.items)) {\r\n+          shopData.items\r\n+            .filter(item => !item.deleted)\r\n+            .forEach(item => {\r\n+              let itemCoords = item.coordinates;\r\n+              if (!itemCoords && item.address) {\r\n+                const coordsMatch = item.address.match(/^(-?\\d+\\.?\\d*),\\s*(-?\\d+\\.?\\d*)$/);\r\n+                if (coordsMatch) {\r\n+                  itemCoords = {\r\n+                    lat: parseFloat(coordsMatch[1]),\r\n+                    lng: parseFloat(coordsMatch[2])\r\n+                  };\r\n+                }\r\n+              }\r\n+  \r\n+              if (itemCoords?.lat && itemCoords?.lng) {\r\n+                try {\r\n+                  const distanceInMeters = getDistance(\r\n+                    { latitude: userLocation.latitude, longitude: userLocation.longitude },\r\n+                    { latitude: itemCoords.lat, longitude: itemCoords.lng }\r\n+                  );\r\n+  \r\n+                  const distanceInMiles = (distanceInMeters / 1609.34).toFixed(1);\r\n+                  \r\n+                  itemsInRadius.push({\r\n+                    ...item,\r\n+                    shopId: doc.id,\r\n+                    shopName: shopData.name || 'Unknown Shop',\r\n+                    coordinates: itemCoords,\r\n+                    distance: distanceInMeters,\r\n+                    distanceInMiles,\r\n+                    formattedDistance: `${distanceInMiles} mi`,\r\n+                    theme: shopData.theme\r\n+                  });\r\n+                } catch (e) {\r\n+                  console.warn('Error calculating distance for item:', e);\r\n+                }\r\n+              }\r\n+            });\r\n+        }\r\n+      });\r\n+  \r\n+      itemsInRadius.sort((a, b) => a.distance - b.distance);\r\n+      itemsInRadius = itemsInRadius.slice(0, 10);\r\n+  \r\n+      setNearbyItems(itemsInRadius);\r\n+      setHasSearched(true);\r\n+      \r\n+      if (itemsInRadius.length === 0) {\r\n+        setError('No items found in your area');\r\n+      }\r\n+    } catch (error) {\r\n+      console.error('Error fetching nearby items:', error);\r\n+      setError('Failed to load nearby items. Please try again later.');\r\n+    } finally {\r\n+      setLoading(false);\r\n+      setSearching(false);\r\n+    }\r\n+  };\r\n+\r\n+  // Handle live location\r\n+  const handleLiveLocation = () => {\r\n+    setSearching(true);\r\n+    setError(null);\r\n+    \r\n+    if (userLocation) {\r\n+      fetchNearbyItems();\r\n+      setHasSearched(true);\r\n+    } else {\r\n+      requestLocation();\r\n+    }\r\n+  };\r\n+\r\n+  // Handle address search\r\n+  const handleAddressSearch = async () => {\r\n+    if (!searchAddress.trim()) {\r\n+      setError('Please enter an address');\r\n+      return;\r\n+    }\r\n+  \r\n+    setSearching(true);\r\n+    setError(null);\r\n+    setHasSearched(true);\r\n+    \r\n+    try {\r\n+      const encodedAddress = encodeURIComponent(searchAddress);\r\n+      const response = await fetch(\r\n+        `https://nominatim.openstreetmap.org/search?q=${encodedAddress}&format=json&limit=1`,\r\n+        {\r\n+          headers: {\r\n+            'Accept': 'application/json',\r\n+            'User-Agent': 'KalKode Marketplace'\r\n+          }\r\n+        }\r\n+      );\r\n+      \r\n+      const data = await response.json();\r\n+  \r\n+      if (data && data[0]) {\r\n+        const coordinates = {\r\n+          latitude: parseFloat(data[0].lat),\r\n+          longitude: parseFloat(data[0].lon)\r\n+        };\r\n+        \r\n+        await fetchNearbyItems(coordinates);\r\n+      } else {\r\n+        throw new Error('Location not found. Please try a different address.');\r\n+      }\r\n+  \r\n+    } catch (error) {\r\n+      console.error('Error searching address:', error);\r\n+      setError(error.message || 'Unable to search this location. Please try again.');\r\n+    } finally {\r\n+      setSearching(false);\r\n+    }\r\n+  };\r\n+\r\n+  // Handle item click\r\n+  const handleItemClick = (item) => {\r\n+    setZoomedItem(item);\r\n+    setOrderQuantity(1);\r\n+    setCurrentImageIndex(0); // Reset image index\r\n+    \r\n+    const scrollY = window.scrollY;\r\n+    document.body.style.position = 'fixed';\r\n+    document.body.style.top = `-${scrollY}px`;\r\n+    document.body.style.width = '100%';\r\n+    document.body.style.overflow = 'hidden';\r\n+    \r\n+    document.body.setAttribute('data-scroll-y', scrollY);\r\n+  };\r\n+\r\n+  // Handle close zoom\r\n+  const handleCloseZoom = () => {\r\n+    setZoomedItem(null);\r\n+    setCurrentImageIndex(0);\r\n+    \r\n+    const scrollY = document.body.getAttribute('data-scroll-y') || '0';\r\n+    document.body.style.position = '';\r\n+    document.body.style.top = '';\r\n+    document.body.style.width = '';\r\n+    document.body.style.overflow = '';\r\n+    document.body.removeAttribute('data-scroll-y');\r\n+    \r\n+    window.scrollTo(0, parseInt(scrollY));\r\n+  };\r\n+\r\n+  // Adjust quantity\r\n+  const adjustQuantity = (delta) => {\r\n+    const maxQuantity = parseInt(zoomedItem?.quantity) || 1;\r\n+    const newQuantity = Math.max(1, Math.min(maxQuantity, orderQuantity + delta));\r\n+    setOrderQuantity(newQuantity);\r\n+  };\r\n+\r\n+  // Handle direct order\r\n+  const handleDirectOrder = async () => {\r\n+    if (!zoomedItem) return;\r\n+    \r\n+    if (!isAuthenticated) {\r\n+       navigate('/auth', { \r\n+        state: { \r\n+          mode: 'login',\r\n+          from: window.location.pathname\r\n+        }\r\n+      });\r\n+       return;\r\n+     }\r\n+    \r\n+    try {\r\n+      const result = await TransactionService.initiateQuantityTransaction(\r\n+        zoomedItem.id,\r\n+        zoomedItem.shopId,\r\n+        parseFloat(zoomedItem.price),\r\n+        orderQuantity,\r\n+        'inperson'\r\n+      );\r\n+      \r\n+      if (result.transactionId) {\r\n+        handleCloseZoom();\r\n+        navigate(`/messages?chat=${result.transactionId}`);\r\n+      }\r\n+    } catch (error) {\r\n+      console.error('Error placing order:', error);\r\n+      alert('Error placing order: ' + error.message);\r\n+    }\r\n+  };\r\n+\r\n+  // Handle order click\r\n+  const handleOrderClick = (item) => {\r\n+    setSelectedChatItem(item);\r\n+    setChatOpen(true);\r\n+    \r\n+    if (zoomedItem) {\r\n+      setZoomedItem(null);\r\n+      const scrollY = document.body.getAttribute('data-scroll-y') || '0';\r\n+      document.body.style.position = '';\r\n+      document.body.style.top = '';\r\n+      document.body.style.width = '';\r\n+      document.body.style.overflow = '';\r\n+      document.body.removeAttribute('data-scroll-y');\r\n+      window.scrollTo(0, parseInt(scrollY));\r\n+    }\r\n+  };\r\n+\r\n+  // Handle close chat\r\n+  const handleCloseChat = () => {\r\n+    setChatOpen(false);\r\n+    setSelectedChatItem(null);\r\n+    \r\n+    document.body.style.position = '';\r\n+    document.body.style.top = '';\r\n+    document.body.style.width = '';\r\n+    document.body.style.overflow = '';\r\n+    document.body.removeAttribute('data-scroll-y');\r\n+  };\r\n+\r\n+  // Handle inquire click\r\n+  const handleInquireClick = () => {\r\n+    alert('Inquiry feature coming soon!');\r\n+  };\r\n+\r\n+  // Handle logout\r\n+  const handleLogout = async () => {\r\n+    try {\r\n+      await signOut(auth);\r\n+      navigate('/');\r\n+    } catch (error) {\r\n+      console.error('Error signing out:', error);\r\n+    }\r\n+  };\r\n+\r\n+  // Handle login\r\n+  const handleLogin = () => {\r\n+    navigate('/auth', { \r\n+      state: { \r\n+        mode: 'login',\r\n+        from: window.location.pathname\r\n+      }\r\n+    });\r\n+  };\r\n+\r\n+  // Effects\r\n+  useEffect(() => {\r\n+    const fetchShopData = async () => {\r\n+      if (user && user.uid) {\r\n+        try {\r\n+          const data = await getShopData(user.uid);\r\n+          setShopData(data);\r\n+        } catch (error) {\r\n+          console.error('Error fetching shop data:', error);\r\n+        }\r\n+      }\r\n+    };\r\n+    \r\n+    if (isAuthenticated) {\r\n+      fetchShopData();\r\n+    }\r\n+  }, [user, isAuthenticated]);\r\n+\r\n+  useEffect(() => {\r\n+    if (isAuthenticated) {\r\n+      const randomIndex = Math.floor(Math.random() * MOTIVATIONAL_MESSAGES.length);\r\n+      setMotivationalMessage(MOTIVATIONAL_MESSAGES[randomIndex]);\r\n+    }\r\n+  }, [isAuthenticated]);\r\n+\r\n+  useEffect(() => {\r\n+    const pinnedStyleId = localStorage.getItem('pinnedStyleId');\r\n+    \r\n+    if (pinnedStyleId) {\r\n+      const pinnedStyle = Object.values(WELCOME_STYLES).find(\r\n+        style => style.id.toString() === pinnedStyleId\r\n+      );\r\n+      \r\n+      if (pinnedStyle) {\r\n+        setCurrentStyle(pinnedStyle);\r\n+        setIsPinned(true);\r\n+        return;\r\n+      }\r\n+    }\r\n+    \r\n+    const styles = Object.values(WELCOME_STYLES);\r\n+    const randomStyle = styles[Math.floor(Math.random() * styles.length)];\r\n+    setCurrentStyle(randomStyle);\r\n+  }, []);\r\n+\r\n+  useEffect(() => {\r\n+    if (activeTab === 'nearby' && userLocation) {\r\n+      fetchNearbyItems();\r\n+      setHasSearched(true);\r\n+    }\r\n+  }, [activeTab, userLocation]);\r\n+\r\n+  useEffect(() => {\r\n+    if (locationPermission === 'pending') {\r\n+      requestLocation();\r\n+    }\r\n+  }, []);\r\n+\r\n+  useEffect(() => {\r\n+    if (userLocation) {\r\n+      if (activeTab === 'nearby') {\r\n+        fetchNearbyItems();\r\n+        setHasSearched(true);\r\n+      }\r\n+      \r\n+      if (activeTab === 'featured') {\r\n+        loadCategorizedItems();\r\n+      }\r\n+      \r\n+      setUpdatingLocation(false);\r\n+    }\r\n+  }, [userLocation, activeTab]);\r\n+\r\n+  useEffect(() => {\r\n+  const loadTabContent = async () => {\r\n+    console.log('📑 Loading tab content...', { activeTab, effectiveLocation });\r\n+    \r\n+    try {\r\n+      setLoading(true);\r\n+      setError(null);\r\n+  \r\n+      switch (activeTab) {\r\n+        case 'featured':\r\n+          // ✅ Wait for effectiveLocation before loading items\r\n+          if (effectiveLocation) {\r\n+            console.log('📦 Loading featured items...');\r\n+            await loadCategorizedItems();\r\n+          } else {\r\n+            console.log('⏳ Waiting for location...');\r\n+            setLoading(false);\r\n+          }\r\n+          return;\r\n+        case 'nearby':\r\n+          setLoading(false);\r\n+          break;\r\n+        case 'media':\r\n+          setLoading(false);\r\n+          break;\r\n+        default:\r\n+          setLoading(false);\r\n+      }\r\n+    } catch (error) {\r\n+      console.error('Error loading content:', error);\r\n+      setError('Failed to load content. Please try again later.');\r\n+      setLoading(false);\r\n+    }\r\n+  };\r\n+\r\n+  loadTabContent();\r\n+}, [activeTab, user?.uid, effectiveLocation]); // ✅ Added effectiveLocation dependency\r\n+\r\n+  useEffect(() => {\r\n+    if (activeTab === 'featured') {\r\n+      loadCategorizedItems();\r\n+    }\r\n+    \r\n+    const refreshInterval = setInterval(() => {\r\n+      if (activeTab === 'featured') {\r\n+        loadCategorizedItems();\r\n+      }\r\n+    }, 300000);\r\n+\r\n+    return () => clearInterval(refreshInterval);\r\n+  }, [activeTab, currentPage]);\r\n+\r\n+  // Ping animation effect (disabled on mobile for performance)\r\n+  useEffect(() => {\r\n+    if (window.innerWidth < 768) return;\r\n+    \r\n+    const container = document.querySelector('.page-container');\r\n+    if (!container) return;\r\n+\r\n+    const createPing = () => {\r\n+      const ping = document.createElement('div');\r\n+      ping.className = 'ping';\r\n+      \r\n+      ping.style.left = `${Math.random() * 100}%`;\r\n+      ping.style.top = `${Math.random() * 100}%`;\r\n+      ping.style.zIndex = '0';\r\n+      \r\n+      container.appendChild(ping);\r\n+      \r\n+      setTimeout(() => {\r\n+        if (ping && ping.parentNode) {\r\n+          ping.remove();\r\n+        }\r\n+      }, 3000);\r\n+    };\r\n+\r\n+    const createPingGroup = (count) => {\r\n+      for (let i = 0; i < count; i++) {\r\n+        setTimeout(() => {\r\n+          createPing();\r\n+        }, i * 200);\r\n+      }\r\n+    };\r\n+\r\n+    const pingCounts = [10, 30, 20];\r\n+    let currentIndex = 0;\r\n+\r\n+    const interval = setInterval(() => {\r\n+      const count = pingCounts[currentIndex];\r\n+      createPingGroup(count);\r\n+      currentIndex = (currentIndex + 1) % pingCounts.length;\r\n+    }, 3000);\r\n+    \r\n+    return () => {\r\n+      clearInterval(interval);\r\n+      const pings = container.getElementsByClassName('ping');\r\n+      while (pings.length > 0) {\r\n+        pings[0].remove();\r\n+      }\r\n+    };\r\n+  }, []);\r\n+\r\n+  // Cleanup on unmount\r\n+  useEffect(() => {\r\n+    return () => {\r\n+      document.body.style.position = '';\r\n+      document.body.style.top = '';\r\n+      document.body.style.width = '';\r\n+      document.body.style.overflow = '';\r\n+      document.body.removeAttribute('data-scroll-y');\r\n+      \r\n+      if (sliderAnimationRef.current) {\r\n+        cancelAnimationFrame(sliderAnimationRef.current);\r\n+      }\r\n+    };\r\n+  }, []);\r\n+\r\n+  if (!currentStyle) return null;\r\n+\r\n+  return (\r\n+    <PageContainer className=\"page-container\" theme={currentStyle}>\r\n+      <ThemeDecorations theme={currentStyle} />\r\n+      <Header theme={currentStyle}>\r\n+        <Logo onClick={() => navigate('/')} theme={currentStyle}>\r\n+          KALKODE\r\n+        </Logo>\r\n+\r\n+        <HeaderControls>\r\n+          <HeaderButton \r\n+            onClick={refreshTheme}\r\n+            theme={currentStyle}\r\n+            title=\"Random theme\"\r\n+          >\r\n+            <RefreshCw size={20} className={isRefreshing ? \"spinning\" : \"\"} />\r\n+          </HeaderButton>\r\n+          \r\n+          <HeaderButton \r\n+            onClick={togglePinStyle} \r\n+            theme={currentStyle}\r\n+            className={isPinned ? \"pinned\" : \"\"}\r\n+            title={isPinned ? \"Unpin theme\" : \"Pin theme\"}\r\n+          >\r\n+            <Pin size={20} fill={isPinned ? currentStyle.colors.accent : \"none\"} />\r\n+          </HeaderButton>\r\n+          \r\n+          {isAuthenticated && (\r\n+            <HeaderButton \r\n+              onClick={handleLogout}\r\n+              theme={currentStyle}\r\n+              title=\"Logout\"\r\n+            >\r\n+              <LogOut size={20} />\r\n+            </HeaderButton>\r\n+          )}\r\n+        </HeaderControls>\r\n+      </Header>\r\n+\r\n+      <MainContent isAuthenticated={isAuthenticated}>\r\n+        <WelcomeSection theme={currentStyle}>\r\n+          {isAuthenticated && shopData ? (\r\n+            <>\r\n+              <ProfileSection>\r\n+                <ProfileImage theme={currentStyle}>\r\n+                  {shopData.profile ? (\r\n+                    <img src={shopData.profile} alt={shopData.name || 'Shop Profile'} />\r\n+                  ) : (\r\n+                    <div style={{ \r\n+                      width: '100%', \r\n+                      height: '100%', \r\n+                      background: currentStyle?.colors?.accent || '#800000',\r\n+                      display: 'flex',\r\n+                      alignItems: 'center',\r\n+                      justifyContent: 'center',\r\n+                      color: '#fff',\r\n+                      fontSize: '2rem'\r\n+                    }}>\r\n+                      {(shopData.name?.charAt(0) || user.email?.charAt(0) || 'S').toUpperCase()}\r\n+                    </div>\r\n+                  )}\r\n+                </ProfileImage>\r\n+                <ShopName theme={currentStyle}>{shopData.name || 'My Shop'}</ShopName>\r\n+              </ProfileSection>         \r\n+\r\n+              <MotivationalMessage theme={currentStyle}>\r\n+                {motivationalMessage}\r\n+              </MotivationalMessage>\r\n+            </>\r\n+          ) : (\r\n+            <>\r\n+              <h1>Welcome to KalKode</h1>\r\n+              <p>Trade With Your Community.</p>\r\n+\r\n+              <ActionButtonContainer>\r\n+                <ActionButton theme={currentStyle} onClick={handleOpenShop}>\r\n+                  Open Up Shop\r\n+                </ActionButton>\r\n+                <ActionButton \r\n+                  theme={currentStyle}\r\n+                  onClick={handleLogin}\r\n+                  variant=\"outline\"\r\n+                >\r\n+                  Sign In\r\n+                </ActionButton>\r\n+              </ActionButtonContainer>\r\n+            </>\r\n+          )}\r\n+\r\n+\r\n+        </WelcomeSection>\r\n+\r\n+        <TabContainer>\r\n+          <Tab \r\n+            theme={currentStyle}\r\n+            active={activeTab === 'featured'} \r\n+            onClick={() => setActiveTab('featured')}\r\n+          >\r\n+            <Package size={16} />\r\n+            Featured\r\n+          </Tab>\r\n+          <Tab\r\n+            theme={currentStyle} \r\n+            active={activeTab === 'nearby'} \r\n+            onClick={() => setActiveTab('nearby')}\r\n+          >\r\n+            <Navigation size={16} />\r\n+            Nearby\r\n+          </Tab>\r\n+          <Tab\r\n+            theme={currentStyle} \r\n+            active={activeTab === 'media'} \r\n+            onClick={() => setActiveTab('media')}\r\n+          >\r\n+            <Film size={16} />\r\n+            Media\r\n+          </Tab>\r\n+        </TabContainer>\r\n+\r\n+\r\n+        <LocationIndicator2 theme={currentStyle} isPinned={isCityPinned}>\r\n+          <button \r\n+            className=\"location-icon-btn\"\r\n+            onClick={handleLocationToCity}\r\n+            disabled={isConvertingToCity}\r\n+            title=\"Get region from current location\"\r\n+          >\r\n+            {isConvertingToCity ? (\r\n+              <div className=\"updating-spinner\" />\r\n+            ) : (\r\n+              <Navigation size={20} />\r\n+            )}\r\n+          </button>\r\n+          \r\n+          <input\r\n+            type=\"text\"\r\n+            className=\"location-input\"\r\n+            value={cityInputValue}\r\n+            onChange={(e) => setCityInputValue(e.target.value)}\r\n+            placeholder={\r\n+              isIPLocation ? \r\n+                `${effectiveLocation?.city || 'Location'} (IP-based)` : \r\n+                cityRegion ? cityRegion : \"Click location icon to share\"\r\n+            }\r\n+            readOnly\r\n+          />\r\n+\r\n+          <button\r\n+            className=\"pin-icon-btn\"\r\n+            onClick={handleToggleCityPin}\r\n+            disabled={!cityRegion || cityRegion === 'Not available' || cityRegion === 'Error'}\r\n+            title={isCityPinned ? \"Unpin location\" : \"Pin location\"}\r\n+          >\r\n+            <Pin \r\n+              size={18} \r\n+              fill={isCityPinned ? currentStyle.colors.accent : \"none\"}\r\n+            />\r\n+          </button>\r\n+        </LocationIndicator2>\r\n+\r\n+\r\n+        {/* Nearby Items Tab */}\r\n+        {activeTab === 'nearby' && (\r\n+          <>\r\n+            <SearchContainer>\r\n+              <SearchInput\r\n+                type=\"text\"\r\n+                placeholder=\"Enter address or ZIP code...\"\r\n+                value={searchAddress}\r\n+                onChange={(e) => setSearchAddress(e.target.value)}\r\n+                onKeyPress={(e) => e.key === 'Enter' && handleAddressSearch()}\r\n+              />\r\n+              <SearchButtonGroup>\r\n+                <SearchButton \r\n+                  onClick={handleAddressSearch}\r\n+                  disabled={searching || !searchAddress.trim()}\r\n+                >\r\n+                  <Navigation size={16} />\r\n+                  Search\r\n+                </SearchButton>\r\n+                <SearchButton \r\n+                  onClick={handleLiveLocation}\r\n+                  disabled={searching}\r\n+                  variant=\"live\"\r\n+                >\r\n+                  <Navigation size={16} />\r\n+                  Current\r\n+                </SearchButton>\r\n+              </SearchButtonGroup>\r\n+            </SearchContainer>\r\n+\r\n+            <GridContainer>\r\n+              {error ? (\r\n+                <EmptyGridMessage>\r\n+                  <h3>Oops!</h3>\r\n+                  <p>{error}</p>\r\n+                </EmptyGridMessage>\r\n+              ) : loading ? (\r\n+                <div style={{ textAlign: 'center', gridColumn: '1/-1' }}>\r\n+                  <LoadingSpinner />\r\n+                </div>\r\n+              ) : !hasSearched ? (\r\n+                <EmptyGridMessage>\r\n+                  <h3>Find Items Near You</h3>\r\n+                  <p>Enter your address or use current location to discover items in your area</p>\r\n+                </EmptyGridMessage>\r\n+              ) : nearbyItems.length === 0 ? (\r\n+                <EmptyGridMessage>\r\n+                  <h3>No Items Found</h3>\r\n+                  <p>No items found in this location. Try searching a different area.</p>\r\n+                </EmptyGridMessage>\r\n+              ) : (              \r\n+                nearbyItems.map(item => (\r\n+                  <FeaturedItem \r\n+                    key={`${item.shopId}-${item.id}`} \r\n+                    item={{\r\n+                      ...item,\r\n+                      location: item.formattedDistance\r\n+                    }}\r\n+                    showDistance={true}\r\n+                    theme={currentStyle}\r\n+                    onItemClick={handleItemClick}\r\n+                  />\r\n+                ))\r\n+              )}\r\n+            </GridContainer>\r\n+          </>\r\n+        )}\r\n+\r\n+        {/* Featured Items Tab */}\r\n+        {activeTab === 'featured' && (\r\n+          <>\r\n+            {/* Search container with Filter */}\r\n+            <SearchContainer>\r\n+              <SearchInput\r\n+                type=\"text\"\r\n+                placeholder=\"Search for items...\"\r\n+                value={featuredSearchTerm}\r\n+                onChange={(e) => setFeaturedSearchTerm(e.target.value)}\r\n+                onKeyPress={(e) => e.key === 'Enter' && handleFeaturedSearch()}\r\n+              />\r\n+              <SearchButtonGroup>\r\n+                <SearchButton \r\n+                  onClick={handleFeaturedSearch}\r\n+                  disabled={isSearching || !featuredSearchTerm.trim()}\r\n+                >\r\n+                  <Search size={16} />\r\n+                  Search\r\n+                </SearchButton>\r\n+                {hasSearchResults && (\r\n+                  <SearchButton onClick={handleClearFeaturedSearch} variant=\"live\">\r\n+                    <X size={16} />\r\n+                    Clear\r\n+                  </SearchButton>\r\n+                )}\r\n+\r\n+                {/* Filter Button */}\r\n+                <SortContainer className=\"sort-container\">\r\n+                  <SearchButton \r\n+                    onClick={() => setSortMenuOpen(!sortMenuOpen)}\r\n+                    style={{ position: 'relative' }}\r\n+                  >\r\n+                    <Filter size={16} />\r\n+                    {sortBy !== 'recent' && (\r\n+                      <div style={{\r\n+                        position: 'absolute',\r\n+                        top: '4px',\r\n+                        right: '4px',\r\n+                        width: '6px',\r\n+                        height: '6px',\r\n+                        borderRadius: '50%',\r\n+                        background: currentStyle?.colors?.accent || '#800000'\r\n+                      }} />\r\n+                    )}\r\n+                  </SearchButton>\r\n+                  \r\n+                  <SortDropdown theme={currentStyle} isOpen={sortMenuOpen}>\r\n+                    <div style={{\r\n+                      padding: '0.5rem 1rem 0.75rem',\r\n+                      fontSize: '0.75rem',\r\n+                      fontWeight: '700',\r\n+                      textTransform: 'uppercase',\r\n+                      letterSpacing: '1px',\r\n+                      color: currentStyle?.colors?.accent || '#800000',\r\n+                      borderBottom: `2px solid ${currentStyle?.colors?.accent || '#800000'}`,\r\n+                      marginBottom: '0.75rem',\r\n+                      fontFamily: currentStyle?.fonts?.heading || 'inherit'\r\n+                    }}>\r\n+                      Sort By\r\n+                    </div>\r\n+\r\n+                    <SortOption \r\n+                      theme={currentStyle}\r\n+                      active={sortBy === 'recent'}\r\n+                      onClick={() => {\r\n+                        if (!userLocation) {\r\n+                          requestLocation();\r\n+                          return;\r\n+                        }\r\n+                        setSortBy('recent');\r\n+                        setSortMenuOpen(false);\r\n+                        loadCategorizedItems();\r\n+                      }}\r\n+                    >\r\n+                      <Package size={16} />\r\n+                      <div style={{ display: 'flex', flexDirection: 'column', flex: 1 }}>\r\n+                        <span>Most Recent</span>\r\n+                        <span style={{ \r\n+                          fontSize: '0.7rem', \r\n+                          opacity: 0.7,\r\n+                          fontWeight: '400'\r\n+                        }}>\r\n+                          Within 30 miles\r\n+                        </span>\r\n+                      </div>\r\n+                      {!userLocation && (\r\n+                        <span style={{ \r\n+                          fontSize: '0.65rem', \r\n+                          opacity: 0.6,\r\n+                          marginLeft: 'auto',\r\n+                          fontStyle: 'italic'\r\n+                        }}>\r\n+                          (needs location)\r\n+                        </span>\r\n+                      )}\r\n+                    </SortOption>\r\n+                    \r\n+                    <SortOption \r\n+                      theme={currentStyle}\r\n+                      active={sortBy === 'proximity'}\r\n+                      onClick={() => {\r\n+                        if (!userLocation) {\r\n+                          requestLocation();\r\n+                        }\r\n+                        setSortBy('proximity');\r\n+                        setSortMenuOpen(false);\r\n+                        loadCategorizedItems();\r\n+                      }}\r\n+                    >\r\n+                      <Navigation size={16} />\r\n+                      <div style={{ display: 'flex', flexDirection: 'column', flex: 1 }}>\r\n+                        <span>Closest First</span>\r\n+                        <span style={{ \r\n+                          fontSize: '0.7rem', \r\n+                          opacity: 0.7,\r\n+                          fontWeight: '400'\r\n+                        }}>\r\n+                          No distance limit\r\n+                        </span>\r\n+                      </div>\r\n+                      {!userLocation && (\r\n+                        <span style={{ \r\n+                          fontSize: '0.65rem', \r\n+                          opacity: 0.6,\r\n+                          marginLeft: 'auto',\r\n+                          fontStyle: 'italic'\r\n+                        }}>\r\n+                          (needs location)\r\n+                        </span>\r\n+                      )}\r\n+                    </SortOption>\r\n+                    \r\n+                    <SortOption \r\n+                      theme={currentStyle}\r\n+                      active={sortBy === 'price-low'}\r\n+                      onClick={() => {\r\n+                        if (!userLocation) {\r\n+                          requestLocation();\r\n+                          return;\r\n+                        }\r\n+                        setSortBy('price-low');\r\n+                        setSortMenuOpen(false);\r\n+                        loadCategorizedItems();\r\n+                      }}\r\n+                    >\r\n+                      <span style={{ fontSize: '1rem', fontWeight: '600' }}>$</span>\r\n+                      <div style={{ display: 'flex', flexDirection: 'column', flex: 1 }}>\r\n+                        <span>Price: Low to High</span>\r\n+                        <span style={{ \r\n+                          fontSize: '0.7rem', \r\n+                          opacity: 0.7,\r\n+                          fontWeight: '400'\r\n+                        }}>\r\n+                          Within 30 miles\r\n+                        </span>\r\n+                      </div>\r\n+                      {!userLocation && (\r\n+                        <span style={{ \r\n+                          fontSize: '0.65rem', \r\n+                          opacity: 0.6,\r\n+                          marginLeft: 'auto',\r\n+                          fontStyle: 'italic'\r\n+                        }}>\r\n+                          (needs location)\r\n+                        </span>\r\n+                      )}\r\n+                    </SortOption>\r\n+                    \r\n+                    <SortOption \r\n+                      theme={currentStyle}\r\n+                      active={sortBy === 'price-high'}\r\n+                      onClick={() => {\r\n+                        if (!userLocation) {\r\n+                          requestLocation();\r\n+                          return;\r\n+                        }\r\n+                        setSortBy('price-high');\r\n+                        setSortMenuOpen(false);\r\n+                        loadCategorizedItems();\r\n+                      }}\r\n+                    >\r\n+                      <span style={{ fontSize: '1rem', fontWeight: '600' }}>$$$</span>\r\n+                      <div style={{ display: 'flex', flexDirection: 'column', flex: 1 }}>\r\n+                        <span>Price: High to Low</span>\r\n+                        <span style={{ \r\n+                          fontSize: '0.7rem', \r\n+                          opacity: 0.7,\r\n+                          fontWeight: '400'\r\n+                        }}>\r\n+                          Within 30 miles\r\n+                        </span>\r\n+                      </div>\r\n+                      {!userLocation && (\r\n+                        <span style={{ \r\n+                          fontSize: '0.65rem', \r\n+                          opacity: 0.6,\r\n+                          marginLeft: 'auto',\r\n+                          fontStyle: 'italic'\r\n+                        }}>\r\n+                          (needs location)\r\n+                        </span>\r\n+                      )}\r\n+                    </SortOption>\r\n+                  </SortDropdown>\r\n+                </SortContainer>\r\n+              </SearchButtonGroup>\r\n+            </SearchContainer>\r\n+\r\n+            {/* Show search results or default categorized view */}\r\n+            {hasSearchResults ? (\r\n+              <div>\r\n+                <CategoryHeader theme={currentStyle}>\r\n+                  <h2>Search Results ({searchResults.length})</h2>\r\n+                </CategoryHeader>\r\n+\r\n+                {error ? (\r\n+                  <EmptyGridMessage>\r\n+                    <h3>No Results Found</h3>\r\n+                    <p>{error}</p>\r\n+                  </EmptyGridMessage>\r\n+                ) : isSearching ? (\r\n+                  <div style={{ textAlign: 'center', padding: '2rem' }}>\r\n+                    <LoadingSpinner />\r\n+                  </div>\r\n+                ) : searchResults.length === 0 ? (\r\n+                  <EmptyGridMessage>\r\n+                    <h3>No Items Found</h3>\r\n+                    <p>No items match your search criteria.</p>\r\n+                  </EmptyGridMessage>\r\n+                ) : (\r\n+                  <GridContainer>\r\n+                    {searchResults.map(item => (\r\n+                      <FeaturedItem \r\n+                        key={`search-${item.shopId}-${item.id}`} \r\n+                        item={item}\r\n+                        theme={currentStyle}\r\n+                        onItemClick={handleItemClick}\r\n+                        showDistance={true}\r\n+                      />\r\n+                    ))}\r\n+                  </GridContainer>\r\n+                )}\r\n+              </div>\r\n+            ) : (\r\n+              <div>\r\n+                {/* Featured Items Slider */}\r\n+                <CategoryHeader theme={currentStyle}>\r\n+                  <h2>Featured Items</h2>\r\n+                  <span className=\"view-all\">\r\n+                    {featuredItems.length} items\r\n+                  </span>\r\n+                </CategoryHeader>\r\n+\r\n+                <CategoryGridWrapper>\r\n+                {/* Desktop: Show all items in grid */}\r\n+                <div className=\"desktop-grid\" style={{ display: 'contents' }}>\r\n+                  {featuredItems.map(item => (\r\n+                    <div key={`featured-${item.shopId}-${item.id}`} className=\"desktop-only\" \r\n+                         style={{ display: window.innerWidth > 768 ? 'block' : 'none' }}>\r\n+                      <FeaturedItem\r\n+                        item={item}\r\n+                        theme={currentStyle}\r\n+                        onItemClick={handleItemClick}\r\n+                        showDistance={true}\r\n+                      />\r\n+                    </div>\r\n+                  ))}\r\n+                </div>\r\n+                \r\n+                {/* Mobile: Show all 10 items in a 2-row scrollable grid */}\r\n+                <CategoryScrollableGrid theme={currentStyle} className=\"mobile-only\">\r\n+                  {featuredItems.map(item => (\r\n+                    <FeaturedItem\r\n+                      key={`featured-mobile-${item.shopId}-${item.id}`}\r\n+                      item={item}\r\n+                      theme={currentStyle}\r\n+                      onItemClick={handleItemClick}\r\n+                      showDistance={true}\r\n+                    />\r\n+                  ))}\r\n+                </CategoryScrollableGrid>\r\n+              </CategoryGridWrapper>\r\n+                \r\n+              {Object.entries(categories).map(([categoryName, items]) => {\r\n+          if (items.length === 0) return null;\r\n+                      \r\n+          return (\r\n+            <div key={categoryName} style={{ marginTop: '3rem' }}>\r\n+              <CategoryHeader theme={currentStyle}>\r\n+                <h2>{categoryName}</h2>\r\n+                <span className=\"view-all\">\r\n+                  {items.length} items\r\n+                </span>\r\n+              </CategoryHeader>\r\n+          \r\n+              <CategoryGridWrapper>\r\n+                {/* Desktop: Show all items in grid */}\r\n+                <div className=\"desktop-grid\" style={{ display: 'contents' }}>\r\n+                  {items.map(item => (\r\n+                    <div key={`${categoryName}-${item.shopId}-${item.id}`} className=\"desktop-only\"\r\n+                         style={{ display: window.innerWidth > 768 ? 'block' : 'none' }}>\r\n+                      <FeaturedItem\r\n+                        item={item}\r\n+                        theme={currentStyle}\r\n+                        onItemClick={handleItemClick}\r\n+                        showDistance={true}\r\n+                      />\r\n+                    </div>\r\n+                  ))}\r\n+                </div>\r\n+                \r\n+                {/* Mobile: Show all items in a scrollable grid (1 or 2 rows based on count) */}\r\n+                <CategoryScrollableGrid theme={currentStyle} className=\"mobile-only\" itemCount={items.length}>\r\n+                  {items.map(item => (\r\n+                    <FeaturedItem\r\n+                      key={`${categoryName}-mobile-${item.shopId}-${item.id}`}\r\n+                      item={item}\r\n+                      theme={currentStyle}\r\n+                      onItemClick={handleItemClick}\r\n+                      showDistance={true}\r\n+                    />\r\n+                  ))}\r\n+                </CategoryScrollableGrid>\r\n+              </CategoryGridWrapper>\r\n+            </div>\r\n+          );\r\n+        })}\r\n+              </div>\r\n+            )}\r\n+          </>\r\n+        )}\r\n+\r\n+        {/* Media Tab */}\r\n+        {activeTab === 'media' && (\r\n+          <EmptyGridMessage>\r\n+            <h3>Featured Media</h3>\r\n+            <p>Coming soon! Discover videos and content from local creators.</p>\r\n+          </EmptyGridMessage>\r\n+        )}\r\n+      </MainContent>\r\n+\r\n+      {/* Style Indicator Only */}\r\n+      <StyleIndicator theme={currentStyle}>\r\n+        <span className=\"style-number\">{currentStyle.id}</span>\r\n+        <span>{currentStyle.name}</span>\r\n+      </StyleIndicator>\r\n+\r\n+      {/* Zoomed Item View - Updated to match ShopPublicView */}\r\n+      {/* Zoomed Item View - 75/25 Split */}\r\n+      {/* Zoomed Item View - 70/30 Split with 2:5 Card */}\r\n+      {zoomedItem && (\r\n+        <ZoomOverlay onClick={handleCloseZoom} theme={currentStyle}>\r\n+          <ZoomContainer \r\n+            theme={currentStyle}\r\n+            onClick={(e) => e.stopPropagation()}\r\n+          >\r\n+            {/* 70% - Image Carousel */}\r\n+            <ImageCarousel \r\n+              theme={currentStyle} \r\n+              currentIndex={currentImageIndex}\r\n+            >\r\n+              {/* Close button */}\r\n+              <button \r\n+                className=\"close-overlay-button\"\r\n+                onClick={handleCloseZoom}\r\n+                aria-label=\"Close\"\r\n+              >\r\n+                <X size={20} />\r\n+              </button>\r\n+            \r\n+              <div className=\"image-track\">\r\n+                {zoomedItem.images && zoomedItem.images.filter(Boolean).length > 0 ? (\r\n+                  zoomedItem.images.filter(Boolean).map((image, index) => (\r\n+                    <div key={index} className=\"image-slide\">\r\n+                      <img src={image} alt={`${zoomedItem.name} ${index + 1}`} />\r\n+                    </div>\r\n+                  ))\r\n+                ) : (\r\n+                  <div className=\"image-slide\">\r\n+                    <div className=\"no-image\">\r\n+                      <Package size={40} />\r\n+                      <p>No image</p>\r\n+                    </div>\r\n+                  </div>\r\n+                )}\r\n+              </div>\r\n+              \r\n+              {/* Navigation */}\r\n+              {zoomedItem.images && zoomedItem.images.filter(Boolean).length > 1 && (\r\n+                <>\r\n+                  <button \r\n+                    className=\"carousel-button prev\"\r\n+                    onClick={() => setCurrentImageIndex(prev => \r\n+                      prev === 0 ? zoomedItem.images.filter(Boolean).length - 1 : prev - 1\r\n+                    )}\r\n+                    aria-label=\"Previous\"\r\n+                  >\r\n+                    <ChevronLeft size={20} />\r\n+                  </button>\r\n+                  <button \r\n+                    className=\"carousel-button next\"\r\n+                    onClick={() => setCurrentImageIndex(prev => \r\n+                      prev === zoomedItem.images.filter(Boolean).length - 1 ? 0 : prev + 1\r\n+                    )}\r\n+                    aria-label=\"Next\"\r\n+                  >\r\n+                    <ChevronRight size={20} />\r\n+                  </button>\r\n+                  \r\n+                  <div className=\"carousel-dots\">\r\n+                    {zoomedItem.images.filter(Boolean).map((_, index) => (\r\n+                      <button\r\n+                        key={index}\r\n+                        className=\"dot\"\r\n+                        style={{ opacity: index === currentImageIndex ? 1 : 0.3 }}\r\n+                        onClick={() => setCurrentImageIndex(index)}\r\n+                        aria-label={`Image ${index + 1}`}\r\n+                      />\r\n+                    ))}\r\n+                  </div>\r\n+                </>\r\n+              )}\r\n+            </ImageCarousel>\r\n+            \r\n+            {/* 30% - Compact Details */}\r\n+            <ZoomContent theme={currentStyle}>\r\n+              {/* Name & Price Row */}\r\n+              <div style={{ \r\n+                display: 'flex', \r\n+                justifyContent: 'space-between', \r\n+                alignItems: 'baseline',\r\n+                gap: '0.75rem'\r\n+              }}>\r\n+                <h3 style={{\r\n+                  fontSize: '1.1rem',\r\n+                  margin: 0,\r\n+                  fontWeight: '600',\r\n+                  color: currentStyle?.colors?.text || '#FFFFFF',\r\n+                  flex: 1,\r\n+                  overflow: 'hidden',\r\n+                  textOverflow: 'ellipsis',\r\n+                  whiteSpace: 'nowrap'\r\n+                }}>\r\n+                  {zoomedItem.name}\r\n+                </h3>\r\n+                \r\n+                <div style={{\r\n+                  fontSize: '1.2rem',\r\n+                  fontWeight: 'bold',\r\n+                  color: currentStyle?.colors?.accent || '#800000',\r\n+                  whiteSpace: 'nowrap'\r\n+                }}>\r\n+                  ${parseFloat(zoomedItem.price || 0).toFixed(2)}\r\n+                </div>\r\n+              </div>\r\n+              \r\n+              {/* Info Row: Distance • Shop • Stock */}\r\n+              <div style={{\r\n+                display: 'flex',\r\n+                alignItems: 'center',\r\n+                gap: '0.75rem',\r\n+                fontSize: '0.75rem',\r\n+                flexWrap: 'wrap',\r\n+                color: currentStyle?.colors?.text || '#FFFFFF',\r\n+                opacity: 0.8\r\n+              }}>\r\n+                {zoomedItem.formattedDistance && (\r\n+                  <>\r\n+                    <div style={{ display: 'flex', alignItems: 'center', gap: '0.25rem' }}>\r\n+                      <Navigation size={11} />\r\n+                      <span>{zoomedItem.formattedDistance}</span>\r\n+                    </div>\r\n+                    <span>•</span>\r\n+                  </>\r\n+                )}\r\n+                \r\n+                {zoomedItem.shopName && (\r\n+                  <>\r\n+                    <div \r\n+                      style={{ \r\n+                        display: 'flex', \r\n+                        alignItems: 'center', \r\n+                        gap: '0.25rem',\r\n+                        cursor: 'pointer',\r\n+                        textDecoration: 'underline'\r\n+                      }}\r\n+                      onClick={(e) => {\r\n+                        e.stopPropagation();\r\n+                        navigate(`/shop/${zoomedItem.shopId}/view`);\r\n+                      }}\r\n+                    >\r\n+                      <Store size={11} />\r\n+                      <span>{zoomedItem.shopName}</span>\r\n+                    </div>\r\n+                    <span>•</span>\r\n+                  </>\r\n+                )}\r\n+                \r\n+                {zoomedItem.quantity !== undefined && (\r\n+                  <div style={{ display: 'flex', alignItems: 'center', gap: '0.25rem' }}>\r\n+                    <div style={{\r\n+                      width: '5px',\r\n+                      height: '5px',\r\n+                      borderRadius: '50%',\r\n+                      background: parseInt(zoomedItem.quantity) > 0 ? '#4CAF50' : '#FF5252'\r\n+                    }} />\r\n+                    <span style={{\r\n+                      color: parseInt(zoomedItem.quantity) > 0 ? '#4CAF50' : '#FF5252',\r\n+                      fontWeight: '500'\r\n+                    }}>\r\n+                      {parseInt(zoomedItem.quantity) > 0 ? \r\n+                        `${zoomedItem.quantity} in stock` : \r\n+                        'Out of stock'\r\n+                      }\r\n+                    </span>\r\n+                  </div>\r\n+                )}\r\n+              </div>\r\n+              \r\n+              {/* Quantity Selector */}\r\n+              <div style={{\r\n+                display: 'flex',\r\n+                alignItems: 'center',\r\n+                justifyContent: 'space-between',\r\n+                background: `${currentStyle?.colors?.surface || 'rgba(255, 255, 255, 0.05)'}20`,\r\n+                borderRadius: '6px',\r\n+                padding: '0.5rem 0.75rem'\r\n+              }}>\r\n+                <span style={{\r\n+                  fontSize: '0.8rem',\r\n+                  fontWeight: '600',\r\n+                  color: currentStyle?.colors?.text || '#FFFFFF'\r\n+                }}>\r\n+                  Qty\r\n+                </span>\r\n+                \r\n+                <div style={{ display: 'flex', alignItems: 'center', gap: '0.75rem' }}>\r\n+                  <button \r\n+                    onClick={() => adjustQuantity(-1)}\r\n+                    disabled={orderQuantity <= 1}\r\n+                    style={{\r\n+                      width: '24px',\r\n+                      height: '24px',\r\n+                      borderRadius: '50%',\r\n+                      border: `1.5px solid ${currentStyle?.colors?.accent || '#800000'}`,\r\n+                      background: 'transparent',\r\n+                      color: currentStyle?.colors?.accent || '#800000',\r\n+                      display: 'flex',\r\n+                      alignItems: 'center',\r\n+                      justifyContent: 'center',\r\n+                      cursor: orderQuantity <= 1 ? 'not-allowed' : 'pointer',\r\n+                      opacity: orderQuantity <= 1 ? 0.3 : 1\r\n+                    }}\r\n+                  >\r\n+                    <Minus size={12} />\r\n+                  </button>\r\n+                  \r\n+                  <div style={{\r\n+                    fontSize: '1rem',\r\n+                    fontWeight: 'bold',\r\n+                    color: currentStyle?.colors?.text || 'white',\r\n+                    minWidth: '24px',\r\n+                    textAlign: 'center'\r\n+                  }}>\r\n+                    {orderQuantity}\r\n+                  </div>\r\n+                \r\n+                  <button \r\n+                    onClick={() => adjustQuantity(1)}\r\n+                    disabled={orderQuantity >= parseInt(zoomedItem.quantity || 1)}\r\n+                    style={{\r\n+                      width: '24px',\r\n+                      height: '24px',\r\n+                      borderRadius: '50%',\r\n+                      border: `1.5px solid ${currentStyle?.colors?.accent || '#800000'}`,\r\n+                      background: 'transparent',\r\n+                      color: currentStyle?.colors?.accent || '#800000',\r\n+                      display: 'flex',\r\n+                      alignItems: 'center',\r\n+                      justifyContent: 'center',\r\n+                      cursor: orderQuantity >= parseInt(zoomedItem.quantity || 1) ? 'not-allowed' : 'pointer',\r\n+                      opacity: orderQuantity >= parseInt(zoomedItem.quantity || 1) ? 0.3 : 1\r\n+                    }}\r\n+                  >\r\n+                    <Plus size={12} />\r\n+                  </button>\r\n+                </div>\r\n+              </div>\r\n+                  \r\n+              {/* Order Button */}\r\n+              <button \r\n+                onClick={handleDirectOrder}\r\n+                disabled={parseInt(zoomedItem.quantity || 0) < 1 || orderQuantity > parseInt(zoomedItem.quantity || 0)}\r\n+                style={{\r\n+                  width: '100%',\r\n+                  padding: '0.75rem',\r\n+                  borderRadius: '8px',\r\n+                  border: 'none',\r\n+                  background: parseInt(zoomedItem.quantity || 0) < 1 ? \r\n+                    `${currentStyle?.colors?.accent || '#800000'}40` : \r\n+                    currentStyle?.colors?.accent || '#800000',\r\n+                  color: 'white',\r\n+                  fontSize: '0.9rem',\r\n+                  fontWeight: '600',\r\n+                  display: 'flex',\r\n+                  alignItems: 'center',\r\n+                  justifyContent: 'center',\r\n+                  gap: '0.5rem',\r\n+                  cursor: parseInt(zoomedItem.quantity || 0) < 1 ? 'not-allowed' : 'pointer',\r\n+                  transition: 'all 0.3s'\r\n+                }}\r\n+              >\r\n+                {parseInt(zoomedItem.quantity || 0) < 1 ? (\r\n+                  <>\r\n+                    <X size={16} />\r\n+                    Out of Stock\r\n+                  </>\r\n+                ) : (\r\n+                  <>\r\n+                    <ShoppingCart size={16} />\r\n+                    Order {orderQuantity > 1 && `${orderQuantity} `}· ${(parseFloat(zoomedItem.price || 0) * orderQuantity).toFixed(2)}\r\n+                  </>\r\n+                )}\r\n+              </button>\r\n+            </ZoomContent>\r\n+          </ZoomContainer>\r\n+        </ZoomOverlay>\r\n+      )}\r\n+\r\n+      {/* Chat Overlay */}\r\n+      <ChatOverlay isOpen={chatOpen} onClick={handleCloseChat} />\r\n+      \r\n+      {selectedChatItem && (\r\n+        <OrderChat \r\n+          isOpen={chatOpen} \r\n+          onClose={handleCloseChat} \r\n+          item={selectedChatItem}\r\n+          shopId={selectedChatItem.shopId}\r\n+          shopName={selectedChatItem.shopName}\r\n+          theme={currentStyle}\r\n+        />\r\n+      )}\r\n+    </PageContainer>\r\n+  );\r\n+};\r\n+\r\n export default WelcomePage;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1759889504123,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1706,30 +1706,40 @@\n   \r\n   initializeLocation();\r\n }, [userLocation]);\r\n \r\n-// Update loadCategorizedItems to use effectiveLocation\r\n const loadCategorizedItems = async () => {\r\n+  console.log('🔄 loadCategorizedItems called');\r\n+  console.log('effectiveLocation:', effectiveLocation);\r\n+  console.log('sortBy:', sortBy);\r\n+  \r\n   try {\r\n     setLoading(true);\r\n     setError(null);\r\n \r\n+    console.log('📡 Fetching items from Firebase...');\r\n     const allItems = await getFeaturedItems(48);\r\n+    console.log('✅ Fetched items:', allItems.length);\r\n+    \r\n     const currentUserId = user?.uid;\r\n     \r\n+    // Filter out current user's items AND invalid items\r\n     const filteredItems = allItems.filter(item => {\r\n       const isNotCurrentUser = item.shopId !== currentUserId;\r\n       const hasImages = item.images && item.images.length > 0 && item.images.some(img => img);\r\n       const hasValidPrice = item.price && !isNaN(parseFloat(item.price)) && parseFloat(item.price) > 0;\r\n       const hasStock = !item.deleted && (!item.quantity || parseInt(item.quantity) > 0);\r\n       \r\n       return isNotCurrentUser && hasImages && hasValidPrice && hasStock;\r\n     });\r\n+    \r\n+    console.log('✅ Filtered items:', filteredItems.length);\r\n \r\n     let itemsWithDistance = filteredItems;\r\n     \r\n-    // USE effectiveLocation instead of userLocation\r\n+    // Calculate distances if we have location\r\n     if (effectiveLocation) {\r\n+      console.log('📍 Calculating distances...');\r\n       itemsWithDistance = filteredItems.map(item => {\r\n         let itemCoords = item.coordinates;\r\n         if (!itemCoords && item.address) {\r\n           const coordsMatch = item.address.match(/^(-?\\d+\\.?\\d*),\\s*(-?\\d+\\.?\\d*)$/);\r\n@@ -1762,15 +1772,53 @@\n           }\r\n         }\r\n         return item;\r\n       });\r\n+    } else {\r\n+      console.warn('⚠️ No effectiveLocation available for distance calculation');\r\n     }\r\n \r\n+    // Apply sorting\r\n+    console.log('🔄 Applying sort:', sortBy);\r\n     const sortedItems = applySorting(itemsWithDistance, sortBy);\r\n-    \r\n-    // Rest of function stays the same...\r\n+    console.log('✅ Sorted items:', sortedItems.length);\r\n+\r\n+    // Categorize items\r\n+    const categorizedItems = {\r\n+      'Electronics & Tech': [],\r\n+      'Clothing & Accessories': [],\r\n+      'Home & Garden': [],\r\n+      'Sports & Outdoors': [],\r\n+      'Books & Media': [],\r\n+      'Toys & Games': [],\r\n+      'Health & Beauty': [],\r\n+      'Automotive': [],\r\n+      'Collectibles & Art': [],\r\n+      'Food & Beverages': [],\r\n+      'Other': []\r\n+    };\r\n+\r\n+    sortedItems.forEach(item => {\r\n+      const category = item.category || 'Other';\r\n+      if (categorizedItems[category]) {\r\n+        categorizedItems[category].push(item);\r\n+      } else {\r\n+        categorizedItems['Other'].push(item);\r\n+      }\r\n+    });\r\n+\r\n+    Object.keys(categorizedItems).forEach(category => {\r\n+      categorizedItems[category] = categorizedItems[category].slice(0, 10);\r\n+    });\r\n+\r\n+    console.log('✅ Setting categories:', Object.keys(categorizedItems).map(k => `${k}: ${categorizedItems[k].length}`));\r\n+    setCategories(categorizedItems);\r\n+    setFeaturedItems(sortedItems.slice(0, 10));\r\n+    setTotalItems(filteredItems.length);\r\n+\r\n+    setLoading(false);\r\n   } catch (error) {\r\n-    console.error('Error loading categorized items:', error);\r\n+    console.error('❌ Error loading categorized items:', error);\r\n     setError('Failed to load items. Please try again later.');\r\n     setLoading(false);\r\n   }\r\n };\r\n"
                },
                {
                    "date": 1759889585607,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1686,21 +1686,30 @@\n const [cityInputValue, setCityInputValue] = useState('');\r\n const [effectiveLocation, setEffectiveLocation] = useState(null);\r\n const [isIPLocation, setIsIPLocation] = useState(false);\r\n \r\n-// Add useEffect to handle IP-based location\r\n useEffect(() => {\r\n   const initializeLocation = async () => {\r\n+    console.log('🔍 Initializing location...');\r\n+    console.log('userLocation:', userLocation);\r\n+    \r\n     if (userLocation) {\r\n       // User has shared precise location\r\n+      console.log('✅ Using GPS location:', userLocation);\r\n       setEffectiveLocation(userLocation);\r\n       setIsIPLocation(false);\r\n     } else {\r\n       // Use IP-based location\r\n+      console.log('🌐 Fetching IP-based location...');\r\n       const ipLocation = await getIPBasedLocation();\r\n+      console.log('IP Location result:', ipLocation);\r\n+      \r\n       if (ipLocation) {\r\n+        console.log('✅ Using IP location:', ipLocation);\r\n         setEffectiveLocation(ipLocation);\r\n         setIsIPLocation(true);\r\n+      } else {\r\n+        console.error('❌ Failed to get IP location');\r\n       }\r\n     }\r\n   };\r\n   \r\n"
                },
                {
                    "date": 1759889598617,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1715,8 +1715,18 @@\n   \r\n   initializeLocation();\r\n }, [userLocation]);\r\n \r\n+useEffect(() => {\r\n+  console.log('🔄 effectiveLocation changed:', effectiveLocation);\r\n+  console.log('activeTab:', activeTab);\r\n+  \r\n+  if (activeTab === 'featured' && effectiveLocation) {\r\n+    console.log('📦 Loading items with location...');\r\n+    loadCategorizedItems();\r\n+  }\r\n+}, [effectiveLocation, activeTab]);\r\n+\r\n const loadCategorizedItems = async () => {\r\n   console.log('🔄 loadCategorizedItems called');\r\n   console.log('effectiveLocation:', effectiveLocation);\r\n   console.log('sortBy:', sortBy);\r\n"
                },
                {
                    "date": 1759889682784,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1109,28 +1109,8 @@\n     color: ${props => props.theme?.colors?.accent || '#800000'};\r\n   }\r\n `;\r\n \r\n-// Add after imports in WelcomePage.js\r\n-\r\n-const getIPBasedLocation = async () => {\r\n-  try {\r\n-    const response = await fetch('https://ipapi.co/json/');\r\n-    const data = await response.json();\r\n-    return {\r\n-      latitude: data.latitude,\r\n-      longitude: data.longitude,\r\n-      city: data.city,\r\n-      region: data.region,\r\n-      country: data.country_name,\r\n-      isIPBased: true\r\n-    };\r\n-  } catch (error) {\r\n-    console.error('Error getting IP location:', error);\r\n-    return null;\r\n-  }\r\n-};\r\n-\r\n // Update ActionButtons to only show Order button\r\n const ActionButtons = styled.div`\r\n   display: flex;\r\n   gap: 0.75rem;\r\n"
                },
                {
                    "date": 1759889692061,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,3673 @@\n+// src/pages/WelcomePage.js - Mobile-Optimized Version\r\n+import React from 'react';\r\n+import styled from 'styled-components';\r\n+import { useNavigate } from 'react-router-dom';\r\n+import { useEffect, useState, useRef } from 'react';\r\n+import { getFeaturedItems } from '../firebase/firebaseService';\r\n+import FeaturedItem from '../components/shop/FeaturedItem';\r\n+import { Search, Package, Navigation, Film, Filter, Store, Plus, Minus, Pin, ChevronLeft, ChevronRight, X, MessageCircle, ShoppingCart, RefreshCw, LogOut } from 'lucide-react';\r\n+import { getDistance } from 'geolib';\r\n+import OrderChat from '../components/Chat/OrderChat';\r\n+import { collection, getDocs } from 'firebase/firestore';\r\n+import { db, auth } from '../firebase/config';\r\n+import { WELCOME_STYLES } from '../theme/welcomeStyles';\r\n+import { getShopData } from '../firebase/firebaseService';\r\n+import { useAuth } from '../contexts/AuthContext';\r\n+import { useLocation } from '../contexts/LocationContext';\r\n+import LocationDialog from '../components/LocationDialog';\r\n+import ThemeDecorations from '../components/ThemeDecorations';\r\n+import { TransactionService } from '../services/TransactionService';\r\n+import { signOut } from 'firebase/auth';\r\n+\r\n+\r\n+\r\n+// Mobile-first styled components\r\n+const PageContainer = styled.div.attrs({ className: 'page-container' })`\r\n+  min-height: 100vh;\r\n+  background: ${props => props.theme?.colors?.background || '#000000'};\r\n+  color: ${props => props.theme?.colors?.text || '#FFFFFF'};\r\n+  position: relative;\r\n+  overflow: hidden;\r\n+  \r\n+  /* Mobile-optimized background effects */\r\n+  &::before {\r\n+    content: '';\r\n+    position: absolute;\r\n+    width: 100%;\r\n+    height: 100%;\r\n+    background: ${props => props.theme?.colors?.backgroundGradient || 'radial-gradient(circle at 20% 30%, rgba(128, 0, 0, 0.2) 0%, transparent 50%)'};\r\n+    opacity: 0.8;\r\n+    animation: ${props => props.theme?.animations?.backgroundAnimation || 'galaxySwirl 30s linear infinite'};\r\n+  }\r\n+\r\n+  /* Simplified stars for mobile performance */\r\n+  &::after {\r\n+    content: '';\r\n+    position: absolute;\r\n+    width: 100%;\r\n+    height: 100%;\r\n+    background-image: radial-gradient(circle 1px, ${props => props.theme?.colors?.text || '#FFF'} 1px, transparent 1px);\r\n+    background-size: 100px 100px;\r\n+    opacity: 0.05;\r\n+    \r\n+    @media (min-width: 768px) {\r\n+      background-size: 200px 200px;\r\n+      opacity: 0.1;\r\n+    }\r\n+  }\r\n+\r\n+  /* Reduced ping animations on mobile for performance */\r\n+  .ping {\r\n+    display: none;\r\n+    \r\n+    @media (min-width: 768px) {\r\n+      display: block;\r\n+      position: absolute;\r\n+      width: 2px;\r\n+      height: 2px;\r\n+      border-radius: 50%;\r\n+      background: ${props => props.theme?.colors?.accent || '#800000'};\r\n+      pointer-events: none;\r\n+      z-index: 0;\r\n+    }\r\n+  }\r\n+\r\n+  @keyframes galaxySwirl {\r\n+    0% { transform: rotate(0deg); }\r\n+    100% { transform: rotate(360deg); }\r\n+  }\r\n+`;\r\n+\r\n+// Simplified header with just logo and right-side controls\r\n+const Header = styled.header`\r\n+  width: 100%;\r\n+  height: 60px;\r\n+  padding: 0 1rem;\r\n+  display: flex;\r\n+  align-items: center;\r\n+  justify-content: space-between;\r\n+  background: ${props => `${props.theme?.colors?.headerBg || 'rgba(0, 0, 0, 0.9)'}F5`};\r\n+  backdrop-filter: blur(10px);\r\n+  border-bottom: 1px solid ${props => `${props.theme?.colors?.accent}4D` || 'rgba(128, 0, 0, 0.3)'};\r\n+  position: fixed;\r\n+  top: 0;\r\n+  z-index: 100;\r\n+\r\n+  @media (min-width: 768px) {\r\n+    height: 80px;\r\n+    padding: 0 2rem;\r\n+  }\r\n+`;\r\n+\r\n+const Logo = styled.div`\r\n+  color: ${props => props.theme?.colors?.accent || '#800000'};\r\n+  font-family: ${props => props.theme?.fonts?.heading || \"'Impact', sans-serif\"};\r\n+  font-size: 1.4rem;\r\n+  letter-spacing: 1px;\r\n+  transform: skew(-5deg);\r\n+  cursor: pointer;\r\n+  flex-shrink: 0;\r\n+\r\n+  @media (min-width: 768px) {\r\n+    font-size: 2rem;\r\n+    letter-spacing: 2px;\r\n+  }\r\n+`;\r\n+\r\n+const LocationIndicator2 = styled.div`\r\n+  display: flex;\r\n+  align-items: center;\r\n+  justify-content: center;\r\n+  gap: 0.75rem;\r\n+  background: ${props => `${props.theme?.colors?.surface || 'rgba(0, 0, 0, 0.4)'}CC`};\r\n+  backdrop-filter: blur(10px);\r\n+  padding: 0.75rem 1.5rem;\r\n+  border-radius: 25px;\r\n+  border: 1px solid ${props => `${props.theme?.colors?.accent}40` || 'rgba(128, 0, 0, 0.4)'};\r\n+  margin: 1.5rem auto;\r\n+  max-width: 500px;\r\n+  width: 90%;\r\n+  transition: all 0.3s ease;\r\n+  position: relative;\r\n+  \r\n+  @media (max-width: 768px) {\r\n+    width: 95%;\r\n+    padding: 0.6rem 1rem;\r\n+    gap: 0.5rem;\r\n+  }\r\n+  \r\n+  .location-icon-btn {\r\n+    background: transparent;\r\n+    border: none;\r\n+    color: ${props => props.theme?.colors?.accent || '#800000'};\r\n+    cursor: pointer;\r\n+    display: flex;\r\n+    align-items: center;\r\n+    justify-content: center;\r\n+    padding: 0.25rem;\r\n+    border-radius: 50%;\r\n+    transition: all 0.2s ease;\r\n+    flex-shrink: 0;\r\n+    \r\n+    &:hover {\r\n+      background: ${props => `${props.theme?.colors?.accent}20` || 'rgba(128, 0, 0, 0.2)'};\r\n+    }\r\n+    \r\n+    &:active {\r\n+      transform: scale(0.9);\r\n+    }\r\n+    \r\n+    &:disabled {\r\n+      opacity: 0.5;\r\n+      cursor: not-allowed;\r\n+    }\r\n+    \r\n+    svg {\r\n+      width: 20px;\r\n+      height: 20px;\r\n+      \r\n+      @media (max-width: 768px) {\r\n+        width: 18px;\r\n+        height: 18px;\r\n+      }\r\n+    }\r\n+  }\r\n+  \r\n+  .location-input {\r\n+    flex: 1;\r\n+    background: transparent;\r\n+    border: none;\r\n+    color: ${props => props.theme?.colors?.text || '#FFFFFF'};\r\n+    font-size: 0.95rem;\r\n+    outline: none;\r\n+    text-align: center;\r\n+    cursor: default;\r\n+    min-width: 0; /* Allow text to shrink */\r\n+    \r\n+    &::placeholder {\r\n+      color: ${props => `${props.theme?.colors?.text}50` || 'rgba(255, 255, 255, 0.5)'};\r\n+      font-style: italic;\r\n+    }\r\n+    \r\n+    @media (max-width: 768px) {\r\n+      font-size: 0.85rem;\r\n+    }\r\n+  }\r\n+  \r\n+  .updating-spinner {\r\n+    width: 16px;\r\n+    height: 16px;\r\n+    border: 2px solid ${props => `${props.theme?.colors?.accent}30` || 'rgba(128, 0, 0, 0.3)'};\r\n+    border-radius: 50%;\r\n+    border-top-color: ${props => props.theme?.colors?.accent || '#800000'};\r\n+    animation: spin 1s linear infinite;\r\n+  }\r\n+  \r\n+  .pin-icon-btn {\r\n+    background: transparent;\r\n+    border: none;\r\n+    color: ${props => props.theme?.colors?.accent || '#800000'};\r\n+    cursor: pointer;\r\n+    display: flex;\r\n+    align-items: center;\r\n+    justify-content: center;\r\n+    padding: 0.25rem;\r\n+    border-radius: 50%;\r\n+    transition: all 0.2s ease;\r\n+    opacity: ${props => props.isPinned ? 1 : 0.5};\r\n+    flex-shrink: 0;\r\n+    \r\n+    &:hover:not(:disabled) {\r\n+      background: ${props => `${props.theme?.colors?.accent}20` || 'rgba(128, 0, 0, 0.2)'};\r\n+      opacity: 1;\r\n+    }\r\n+    \r\n+    &:active:not(:disabled) {\r\n+      transform: scale(0.9);\r\n+    }\r\n+    \r\n+    &:disabled {\r\n+      opacity: 0.3;\r\n+      cursor: not-allowed;\r\n+    }\r\n+    \r\n+    svg {\r\n+      width: 18px;\r\n+      height: 18px;\r\n+      \r\n+      @media (max-width: 768px) {\r\n+        width: 16px;\r\n+        height: 16px;\r\n+      }\r\n+    }\r\n+  }\r\n+  \r\n+  @keyframes spin {\r\n+    to {\r\n+      transform: rotate(360deg);\r\n+    }\r\n+  }\r\n+`;\r\n+\r\n+const HeaderControls = styled.div`\r\n+  display: flex;\r\n+  align-items: center;\r\n+  gap: 0.75rem;\r\n+`;\r\n+\r\n+const HeaderButton = styled.button`\r\n+  background: transparent;\r\n+  border: none;\r\n+  color: ${props => props.theme?.colors?.accent || '#800000'};\r\n+  padding: 0.5rem;\r\n+  cursor: pointer;\r\n+  display: flex;\r\n+  align-items: center;\r\n+  justify-content: center;\r\n+  border-radius: 50%;\r\n+  transition: all 0.3s ease;\r\n+  opacity: 0.8;\r\n+  \r\n+  &:active {\r\n+    transform: scale(0.9);\r\n+    opacity: 1;\r\n+  }\r\n+  \r\n+  @media (hover: hover) {\r\n+    &:hover {\r\n+      opacity: 1;\r\n+      background: ${props => `${props.theme?.colors?.accent}10` || 'rgba(128, 0, 0, 0.1)'};\r\n+    }\r\n+  }\r\n+  \r\n+  &.pinned {\r\n+    color: ${props => props.theme?.colors?.accent || '#800000'};\r\n+    opacity: 1;\r\n+  }\r\n+  \r\n+  svg {\r\n+    width: 20px;\r\n+    height: 20px;\r\n+    \r\n+    @media (min-width: 768px) {\r\n+      width: 22px;\r\n+      height: 22px;\r\n+    }\r\n+  }\r\n+`;\r\n+\r\n+// Improved mobile main content with better spacing\r\n+const MainContent = styled.main`\r\n+  max-width: 1200px;\r\n+  margin: 0 auto;\r\n+  padding: 80px 1rem 100px 1rem;\r\n+  position: relative;\r\n+  z-index: 1;\r\n+  \r\n+  @media (min-width: 768px) {\r\n+    padding: 6rem 2rem 2rem 2rem;\r\n+  }\r\n+`;\r\n+\r\n+// Mobile-optimized welcome section\r\n+const WelcomeSection = styled.section`\r\n+  text-align: center;\r\n+  margin: 2rem 0;\r\n+  position: relative;\r\n+\r\n+  h1 {\r\n+    font-family: ${props => props.theme?.fonts?.heading || \"'Impact', sans-serif\"};\r\n+    font-size: 2.5rem;\r\n+    margin-bottom: 1rem;\r\n+    background: ${props => props.theme?.colors?.accentGradient || 'linear-gradient(45deg, #800000, #4A0404)'};\r\n+    -webkit-background-clip: text;\r\n+    -webkit-text-fill-color: transparent;\r\n+    letter-spacing: 1px;\r\n+    line-height: 1.2;\r\n+    \r\n+    @media (min-width: 768px) {\r\n+      font-size: 4.5rem;\r\n+      letter-spacing: 2px;\r\n+    }\r\n+  }\r\n+\r\n+  p {\r\n+    font-size: 1rem;\r\n+    line-height: 1.5;\r\n+    max-width: 600px;\r\n+    margin: 0 auto;\r\n+    color: ${props => `${props.theme?.colors?.text}CC` || 'rgba(255, 255, 255, 0.8)'};\r\n+    padding: 0 1rem;\r\n+    \r\n+    @media (min-width: 768px) {\r\n+      font-size: 1.2rem;\r\n+      line-height: 1.6;\r\n+      max-width: 800px;\r\n+    }\r\n+  }\r\n+`;\r\n+\r\n+// Completely redesigned ZoomOverlay - Responsive to zoom level\r\n+const ZoomOverlay = styled.div`\r\n+  position: fixed;\r\n+  top: 0;\r\n+  left: 0;\r\n+  right: 0;\r\n+  bottom: 0;\r\n+  background: ${props => `${props.theme?.colors?.background || 'rgba(0, 0, 0, 0.95)'}F5`};\r\n+  z-index: 10000;\r\n+  backdrop-filter: blur(10px);\r\n+  display: flex;\r\n+  align-items: center;\r\n+  justify-content: center;\r\n+  padding: 2rem;\r\n+  overflow: hidden;\r\n+  \r\n+  @media (max-width: 768px) {\r\n+    padding: 1rem;\r\n+  }\r\n+  \r\n+  @media (max-width: 480px) {\r\n+    padding: 0.5rem;\r\n+  }\r\n+`;\r\n+\r\n+// Redesigned ZoomContainer - 2:5 aspect ratio card, centered with ample space\r\n+const ZoomContainer = styled.div`\r\n+  position: relative;\r\n+  width: 100%;\r\n+  max-width: 500px;\r\n+  aspect-ratio: 2 / 5;\r\n+  max-height: 85vh;\r\n+  background: ${props => props.theme?.colors?.background || '#000000'};\r\n+  border-radius: 16px;\r\n+  overflow: hidden;\r\n+  border: 2px solid ${props => props.theme?.colors?.accent || '#800000'};\r\n+  box-shadow: 0 20px 60px rgba(0, 0, 0, 0.8);\r\n+  display: flex;\r\n+  flex-direction: column;\r\n+  \r\n+  @media (max-width: 768px) {\r\n+    max-width: 420px;\r\n+    border-radius: 12px;\r\n+  }\r\n+  \r\n+  @media (max-width: 480px) {\r\n+    max-width: 95%;\r\n+    border-radius: 10px;\r\n+  }\r\n+`;\r\n+\r\n+// Image section - 70% of card height\r\n+const ImageCarousel = styled.div`\r\n+  position: relative;\r\n+  width: 100%;\r\n+  height: 70%;\r\n+  background: ${props => `${props.theme?.colors?.background || '#000000'}80`};\r\n+  overflow: hidden;\r\n+  flex-shrink: 0;\r\n+  \r\n+  .image-track {\r\n+    display: flex;\r\n+    height: 100%;\r\n+    transition: transform 0.3s ease;\r\n+    transform: translateX(${props => props.currentIndex * -100}%);\r\n+  }\r\n+  \r\n+  .image-slide {\r\n+    min-width: 100%;\r\n+    height: 100%;\r\n+    display: flex;\r\n+    align-items: center;\r\n+    justify-content: center;\r\n+    \r\n+    img {\r\n+      width: 100%;\r\n+      height: 100%;\r\n+      object-fit: cover;\r\n+      background: ${props => `${props.theme?.colors?.background || '#000000'}40`};\r\n+    }\r\n+    \r\n+    .no-image {\r\n+      display: flex;\r\n+      flex-direction: column;\r\n+      align-items: center;\r\n+      gap: 0.75rem;\r\n+      color: ${props => props.theme?.colors?.text || '#FFFFFF'};\r\n+      opacity: 0.3;\r\n+      \r\n+      p {\r\n+        margin: 0;\r\n+        font-size: 0.85rem;\r\n+      }\r\n+    }\r\n+  }\r\n+  \r\n+  .carousel-dots {\r\n+    position: absolute;\r\n+    bottom: 1rem;\r\n+    left: 50%;\r\n+    transform: translateX(-50%);\r\n+    display: flex;\r\n+    gap: 0.4rem;\r\n+    z-index: 2;\r\n+    padding: 0.4rem 0.75rem;\r\n+    background: ${props => `${props.theme?.colors?.background || 'rgba(0, 0, 0, 0.6)'}CC`};\r\n+    border-radius: 20px;\r\n+    backdrop-filter: blur(8px);\r\n+  }\r\n+  \r\n+  .dot {\r\n+    width: 6px;\r\n+    height: 6px;\r\n+    border-radius: 50%;\r\n+    background: ${props => props.theme?.colors?.text || '#FFFFFF'};\r\n+    border: none;\r\n+    padding: 0;\r\n+    cursor: pointer;\r\n+    transition: all 0.2s ease;\r\n+    \r\n+    &:hover {\r\n+      transform: scale(1.2);\r\n+    }\r\n+  }\r\n+  \r\n+  .carousel-button {\r\n+    position: absolute;\r\n+    top: 50%;\r\n+    transform: translateY(-50%);\r\n+    background: ${props => `${props.theme?.colors?.background || 'rgba(0, 0, 0, 0.7)'}DD`};\r\n+    border: 1px solid ${props => `${props.theme?.colors?.accent}40` || 'rgba(255, 255, 255, 0.2)'};\r\n+    border-radius: 50%;\r\n+    width: 40px;\r\n+    height: 40px;\r\n+    display: flex;\r\n+    align-items: center;\r\n+    justify-content: center;\r\n+    color: ${props => props.theme?.colors?.text || 'white'};\r\n+    cursor: pointer;\r\n+    opacity: 0;\r\n+    transition: all 0.3s ease;\r\n+    z-index: 2;\r\n+    \r\n+    &:hover {\r\n+      opacity: 1 !important;\r\n+      background: ${props => props.theme?.colors?.accent || '#800000'};\r\n+      transform: translateY(-50%) scale(1.1);\r\n+    }\r\n+    \r\n+    &.prev {\r\n+      left: 1rem;\r\n+    }\r\n+    \r\n+    &.next {\r\n+      right: 1rem;\r\n+    }\r\n+    \r\n+    &:disabled {\r\n+      opacity: 0 !important;\r\n+      cursor: not-allowed;\r\n+    }\r\n+    \r\n+    @media (max-width: 480px) {\r\n+      width: 32px;\r\n+      height: 32px;\r\n+      \r\n+      &.prev {\r\n+        left: 0.5rem;\r\n+      }\r\n+      \r\n+      &.next {\r\n+        right: 0.5rem;\r\n+      }\r\n+      \r\n+      svg {\r\n+        width: 16px;\r\n+        height: 16px;\r\n+      }\r\n+    }\r\n+  }\r\n+  \r\n+  &:hover .carousel-button {\r\n+    opacity: 0.7;\r\n+  }\r\n+  \r\n+  .close-overlay-button {\r\n+    position: absolute;\r\n+    top: 1rem;\r\n+    right: 1rem;\r\n+    background: ${props => `${props.theme?.colors?.background || 'rgba(0, 0, 0, 0.8)'}DD`};\r\n+    border: 1px solid ${props => `${props.theme?.colors?.accent}60` || 'rgba(255, 255, 255, 0.3)'};\r\n+    border-radius: 50%;\r\n+    width: 40px;\r\n+    height: 40px;\r\n+    display: flex;\r\n+    align-items: center;\r\n+    justify-content: center;\r\n+    color: white;\r\n+    cursor: pointer;\r\n+    transition: all 0.2s ease;\r\n+    backdrop-filter: blur(8px);\r\n+    z-index: 3;\r\n+    opacity: 0.8;\r\n+    \r\n+    &:hover {\r\n+      opacity: 1;\r\n+      background: ${props => props.theme?.colors?.accent || '#800000'};\r\n+      border-color: ${props => props.theme?.colors?.accent || '#800000'};\r\n+      transform: scale(1.1);\r\n+    }\r\n+    \r\n+    &:active {\r\n+      transform: scale(0.95);\r\n+    }\r\n+    \r\n+    @media (max-width: 480px) {\r\n+      width: 32px;\r\n+      height: 32px;\r\n+      top: 0.75rem;\r\n+      right: 0.75rem;\r\n+      \r\n+      svg {\r\n+        width: 16px;\r\n+        height: 16px;\r\n+      }\r\n+    }\r\n+  }\r\n+`;\r\n+\r\n+// Details section - 30% of card height\r\n+const ZoomContent = styled.div`\r\n+  height: 30%;\r\n+  overflow-y: auto;\r\n+  overflow-x: hidden;\r\n+  padding: 1rem;\r\n+  -webkit-overflow-scrolling: touch;\r\n+  display: flex;\r\n+  flex-direction: column;\r\n+  gap: 0.75rem;\r\n+  background: ${props => props.theme?.colors?.background || '#000000'};\r\n+  \r\n+  /* Custom scrollbar */\r\n+  &::-webkit-scrollbar {\r\n+    width: 4px;\r\n+  }\r\n+  \r\n+  &::-webkit-scrollbar-track {\r\n+    background: transparent;\r\n+  }\r\n+  \r\n+  &::-webkit-scrollbar-thumb {\r\n+    background: ${props => `${props.theme?.colors?.accent || '#800000'}60`};\r\n+    border-radius: 2px;\r\n+    \r\n+    &:hover {\r\n+      background: ${props => props.theme?.colors?.accent || '#800000'};\r\n+    }\r\n+  }\r\n+  \r\n+  @media (max-width: 480px) {\r\n+    padding: 0.875rem;\r\n+    gap: 0.625rem;\r\n+  }\r\n+`;\r\n+\r\n+\r\n+// Update ZoomHeader - Remove it entirely or hide it\r\n+const ZoomHeader = styled.div`\r\n+  display: none; // Hide the header completely\r\n+`;\r\n+\r\n+// Mobile-optimized profile section\r\n+const ProfileSection = styled.div`\r\n+  display: flex;\r\n+  flex-direction: column;\r\n+  align-items: center;\r\n+  margin-bottom: 1.5rem;\r\n+`;\r\n+\r\n+const ProfileImage = styled.div`\r\n+  width: 120px;\r\n+  height: 120px;\r\n+  border-radius: 50%;\r\n+  overflow: hidden;\r\n+  margin-bottom: 1rem;\r\n+  border: 4px solid ${props => props.theme?.colors?.accent || '#800000'};\r\n+  box-shadow: 0 0 20px ${props => `${props.theme?.colors?.accent}40` || 'rgba(128, 0, 0, 0.25)'};\r\n+  \r\n+  @media (min-width: 768px) {\r\n+    width: 200px;\r\n+    height: 189px;\r\n+    border: 6px solid ${props => props.theme?.colors?.accent || '#800000'};\r\n+  }\r\n+  \r\n+  img {\r\n+    width: 100%;\r\n+    height: 100%;\r\n+    object-fit: cover;\r\n+  }\r\n+`;\r\n+\r\n+// Add to styled components section in WelcomePage.js\r\n+const LocationIndicator = styled.div`\r\n+  position: fixed;\r\n+  top: 90px;\r\n+  left: 2rem;\r\n+  display: flex;\r\n+  align-items: center;\r\n+  background: rgba(0, 0, 0, 0.7);\r\n+  padding: 0.5rem 1rem;\r\n+  border-radius: 20px;\r\n+  border: 1px solid ${props => `${props.theme?.colors?.accent}30` || 'rgba(128, 0, 0, 0.3)'};\r\n+  backdrop-filter: blur(4px);\r\n+  color: ${props => props.theme?.colors?.text || '#FFFFFF'};\r\n+  font-size: 0.9rem;\r\n+  z-index: 10;\r\n+  cursor: pointer;\r\n+  transition: all 0.3s ease;\r\n+  max-width: 300px;\r\n+  \r\n+  /* Hide on mobile, show only on desktop for debugging */\r\n+  @media (max-width: 768px) {\r\n+  width: auto;\r\n+    padding: 1rem 2.5rem;\r\n+    font-size: 1rem;\r\n+  } \r\n+  \r\n+  &:hover {\r\n+    background: rgba(0, 0, 0, 0.8);\r\n+    transform: translateY(-2px);\r\n+  }\r\n+  \r\n+  .location-icon {\r\n+    color: ${props => props.theme?.colors?.accent || '#800000'};\r\n+    margin-right: 0.75rem;\r\n+  }\r\n+  \r\n+  .location-text {\r\n+    white-space: nowrap;\r\n+    overflow: hidden;\r\n+    text-overflow: ellipsis;\r\n+  }\r\n+  \r\n+  .updating {\r\n+    margin-left: 0.5rem;\r\n+    width: 16px;\r\n+    height: 16px;\r\n+    border: 2px solid rgba(128, 0, 0, 0.2);\r\n+    border-radius: 50%;\r\n+    border-top-color: ${props => props.theme?.colors?.accent || '#800000'};\r\n+    animation: spin 1s linear infinite;\r\n+  }\r\n+`;\r\n+\r\n+const ShopName = styled.h2`\r\n+  font-family: ${props => props.theme?.fonts?.heading || \"'Impact', sans-serif\"};\r\n+  font-size: 2.5rem;\r\n+  background: ${props => props.theme?.colors?.accentGradient || 'linear-gradient(45deg, #800000, #4A0404)'};\r\n+  -webkit-background-clip: text;\r\n+  -webkit-text-fill-color: transparent;\r\n+  margin: 0 0 0.5rem 0;\r\n+  line-height: 1.2;\r\n+  \r\n+  @media (min-width: 768px) {\r\n+    font-size: 5.4rem;\r\n+    margin: 0 0 1rem 0;\r\n+  }\r\n+`;\r\n+\r\n+// Mobile-friendly action buttons\r\n+const ActionButtonContainer = styled.div`\r\n+  display: flex;\r\n+  flex-direction: column;\r\n+  gap: 1rem;\r\n+  width: 100%;\r\n+  max-width: 300px;\r\n+  margin: 2rem auto;\r\n+  \r\n+  @media (min-width: 480px) {\r\n+    flex-direction: row;\r\n+    justify-content: center;\r\n+    max-width: none;\r\n+  }\r\n+`;\r\n+\r\n+const ActionButton = styled.button`\r\n+  background: ${props => props.variant === 'outline' ? 'transparent' : \r\n+    props.theme?.colors?.accentGradient || 'linear-gradient(45deg, #800000, #4A0404)'};\r\n+  border: ${props => props.variant === 'outline' ? \r\n+    `2px solid ${props.theme?.colors?.accent || '#800000'}` : 'none'};\r\n+  padding: 1rem 1.5rem;\r\n+  border-radius: 30px;\r\n+  color: ${props => props.variant === 'outline' ? \r\n+    props.theme?.colors?.accent || '#800000' : 'white'};\r\n+  font-weight: bold;\r\n+  cursor: pointer;\r\n+  transition: all 0.3s;\r\n+  text-transform: uppercase;\r\n+  letter-spacing: 1px;\r\n+  font-size: 0.9rem;\r\n+  width: 100%;\r\n+  \r\n+  @media (min-width: 480px) {\r\n+    width: auto;\r\n+    padding: 1rem 2.5rem;\r\n+    font-size: 1rem;\r\n+  }\r\n+\r\n+  &:active {\r\n+    transform: scale(0.98);\r\n+  }\r\n+\r\n+  @media (hover: hover) {\r\n+    &:hover {\r\n+      transform: translateY(-2px);\r\n+      box-shadow: 0 5px 15px ${props => `${props.theme?.colors?.accent}4D` || 'rgba(128, 0, 0, 0.3)'};\r\n+    }\r\n+  }\r\n+`;\r\n+\r\n+// Mobile-optimized tab container with horizontal scroll\r\n+const TabContainer = styled.div`\r\n+  display: flex;\r\n+  gap: 0.5rem;\r\n+  margin: 2rem 0;\r\n+  overflow-x: auto;\r\n+  padding: 0.5rem 0;\r\n+  -webkit-overflow-scrolling: touch;\r\n+  \r\n+  &::-webkit-scrollbar {\r\n+    height: 4px;\r\n+  }\r\n+  \r\n+  &::-webkit-scrollbar-track {\r\n+    background: transparent;\r\n+  }\r\n+  \r\n+  &::-webkit-scrollbar-thumb {\r\n+    background: ${props => props.theme?.colors?.accent || '#800000'};\r\n+    border-radius: 2px;\r\n+  }\r\n+  \r\n+  @media (min-width: 768px) {\r\n+    justify-content: center;\r\n+    gap: 1rem;\r\n+    overflow-x: visible;\r\n+  }\r\n+`;\r\n+\r\n+const Tab = styled.button`\r\n+  background: ${props => props.active ? \r\n+    props.theme?.colors?.tabActiveBg || 'rgba(128, 0, 0, 0.2)' : 'transparent'};\r\n+  border: 1px solid ${props => props.active ? \r\n+    props.theme?.colors?.tabBorder || '#800000' : \r\n+    `${props.theme?.colors?.accent}4D` || 'rgba(128, 0, 0, 0.3)'};\r\n+  color: ${props => props.active ? \r\n+    props.theme?.colors?.text || '#FFFFFF' : \r\n+    `${props.theme?.colors?.text}99` || 'rgba(255, 255, 255, 0.6)'};\r\n+  padding: 0.6rem 1rem;\r\n+  border-radius: 20px;\r\n+  cursor: pointer;\r\n+  transition: all 0.3s;\r\n+  text-transform: uppercase;\r\n+  letter-spacing: 0.5px;\r\n+  font-weight: 500;\r\n+  font-size: 0.8rem;\r\n+  white-space: nowrap;\r\n+  display: flex;\r\n+  align-items: center;\r\n+  gap: 0.3rem;\r\n+  flex-shrink: 0;\r\n+  \r\n+  @media (min-width: 768px) {\r\n+    padding: 0.8rem 1.5rem;\r\n+    font-size: 0.9rem;\r\n+    letter-spacing: 1px;\r\n+    gap: 0.5rem;\r\n+  }\r\n+\r\n+  &:active {\r\n+    transform: scale(0.98);\r\n+  }\r\n+\r\n+  svg {\r\n+    width: 14px;\r\n+    height: 14px;\r\n+    \r\n+    @media (min-width: 768px) {\r\n+      width: 16px;\r\n+      height: 16px;\r\n+    }\r\n+  }\r\n+`;\r\n+\r\n+// Mobile-optimized grid with better touch targets\r\n+const GridContainer = styled.div`\r\n+  display: grid;\r\n+  grid-template-columns: repeat(2, 1fr);\r\n+  gap: 0.75rem;\r\n+  margin-top: 1.5rem;\r\n+  padding: 0 0.25rem;\r\n+  \r\n+  @media (min-width: 480px) {\r\n+    gap: 1rem;\r\n+    padding: 0;\r\n+  }\r\n+  \r\n+  @media (min-width: 768px) {\r\n+    grid-template-columns: repeat(auto-fill, minmax(220px, 1fr));\r\n+    gap: 1.5rem;\r\n+  }\r\n+  \r\n+  @media (min-width: 1024px) {\r\n+    grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));\r\n+    gap: 2rem;\r\n+  }\r\n+`;\r\n+\r\n+// Mobile search with better UX\r\n+const SearchContainer = styled.div`\r\n+  display: flex;\r\n+  flex-direction: column;\r\n+  gap: 0.75rem;\r\n+  width: 100%;\r\n+  padding: 0 0.5rem;\r\n+  \r\n+  @media (min-width: 600px) {\r\n+    flex-direction: row;\r\n+    align-items: center;\r\n+    max-width: 800px;\r\n+    margin: 0 auto;\r\n+    padding: 0;\r\n+  }\r\n+`;\r\n+\r\n+const SearchInput = styled.input`\r\n+  width: 100%;\r\n+  background: rgba(255, 255, 255, 0.05);\r\n+  border: 1px solid rgba(128, 0, 0, 0.2);\r\n+  border-radius: 25px;\r\n+  padding: 0.8rem 1rem;\r\n+  color: white;\r\n+  font-size: 1rem;\r\n+  -webkit-appearance: none;\r\n+  \r\n+  &:focus {\r\n+    outline: none;\r\n+    border-color: rgba(128, 0, 0, 0.4);\r\n+    background: rgba(255, 255, 255, 0.08);\r\n+  }\r\n+\r\n+  &::placeholder {\r\n+    color: rgba(255, 255, 255, 0.4);\r\n+  }\r\n+  \r\n+  @media (min-width: 600px) {\r\n+    flex: 1;\r\n+  }\r\n+`;\r\n+\r\n+const SearchButtonGroup = styled.div`\r\n+  display: flex;\r\n+  gap: 0.5rem;\r\n+  width: 100%;\r\n+  \r\n+  @media (min-width: 600px) {\r\n+    width: auto;\r\n+  }\r\n+`;\r\n+\r\n+const SearchButton = styled.button`\r\n+  flex: 1;\r\n+  background: ${props => props.variant === 'live' ? 'transparent' : 'rgba(128, 0, 0, 0.2)'};\r\n+  border: 1px solid rgba(128, 0, 0, 0.3);\r\n+  padding: 0.8rem 1rem;\r\n+  border-radius: 25px;\r\n+  color: white;\r\n+  font-size: 0.9rem;\r\n+  display: flex;\r\n+  align-items: center;\r\n+  justify-content: center;\r\n+  gap: 0.4rem;\r\n+  cursor: pointer;\r\n+  transition: all 0.2s ease;\r\n+  white-space: nowrap;\r\n+  -webkit-tap-highlight-color: transparent;\r\n+  \r\n+  @media (min-width: 600px) {\r\n+    flex: unset;\r\n+    padding: 0.8rem 1.2rem;\r\n+  }\r\n+\r\n+  &:active {\r\n+    transform: scale(0.98);\r\n+    background: rgba(128, 0, 0, 0.3);\r\n+  }\r\n+\r\n+  &:disabled {\r\n+    opacity: 0.5;\r\n+    cursor: not-allowed;\r\n+  }\r\n+\r\n+  svg {\r\n+    width: 16px;\r\n+    height: 16px;\r\n+  }\r\n+`;\r\n+\r\n+// Mobile-friendly slider with native scroll\r\n+const SliderContainer = styled.div`\r\n+  width: 100%;\r\n+  overflow-x: auto;\r\n+  overflow-y: hidden;\r\n+  position: relative;\r\n+  margin: 1.5rem 0;\r\n+  -webkit-overflow-scrolling: touch;\r\n+  scroll-snap-type: x mandatory;\r\n+  scroll-behavior: smooth;\r\n+  \r\n+  &::-webkit-scrollbar {\r\n+    height: 4px;\r\n+  }\r\n+  \r\n+  &::-webkit-scrollbar-track {\r\n+    background: ${props => `${props.theme?.colors?.background || '#000000'}80`};\r\n+    border-radius: 10px;\r\n+  }\r\n+  \r\n+  &::-webkit-scrollbar-thumb {\r\n+    background: ${props => props.theme?.colors?.accent || '#800000'};\r\n+    border-radius: 10px;\r\n+  }\r\n+  \r\n+  /* Hide scroll buttons on mobile */\r\n+  .scroll-button {\r\n+    display: none;\r\n+    \r\n+    @media (min-width: 768px) {\r\n+      display: flex;\r\n+    }\r\n+  }\r\n+`;\r\n+\r\n+const Slider = styled.div`\r\n+  display: flex;\r\n+  width: fit-content;\r\n+  padding: 0.5rem 0;\r\n+`;\r\n+\r\n+const SlideItem = styled.div`\r\n+  flex: 0 0 160px;\r\n+  margin-right: 0.75rem;\r\n+  scroll-snap-align: start;\r\n+  \r\n+  @media (min-width: 480px) {\r\n+    flex: 0 0 200px;\r\n+    margin-right: 1rem;\r\n+  }\r\n+  \r\n+  @media (min-width: 768px) {\r\n+    flex: 0 0 250px;\r\n+    margin-right: 1.5rem;\r\n+  }\r\n+  \r\n+  @media (min-width: 1024px) {\r\n+    flex: 0 0 300px;\r\n+    margin-right: 2rem;\r\n+  }\r\n+`;\r\n+\r\n+// Add styles for better item display\r\n+const ItemDetailsSection = styled.div`\r\n+  margin-bottom: 1.5rem;\r\n+`;\r\n+\r\n+const ItemHeader = styled.div`\r\n+  margin-bottom: 1.5rem;\r\n+  \r\n+  h3 {\r\n+    font-size: 1.5rem;\r\n+    margin: 0 0 0.5rem 0;\r\n+    font-family: ${props => props.theme?.fonts?.heading || 'inherit'};\r\n+    color: ${props => props.theme?.colors?.text || '#FFFFFF'};\r\n+    \r\n+    @media (min-width: 768px) {\r\n+      font-size: 1.8rem;\r\n+    }\r\n+  }\r\n+\r\n+  .price {\r\n+    font-size: 1.3rem;\r\n+    font-weight: bold;\r\n+    color: ${props => props.theme?.colors?.accent || '#800000'};\r\n+    margin-bottom: 1rem;\r\n+    \r\n+    @media (min-width: 768px) {\r\n+      font-size: 1.5rem;\r\n+    }\r\n+  }\r\n+`;\r\n+\r\n+const CategoryBadge = styled.div`\r\n+  display: inline-block;\r\n+  background: ${props => `${props.theme?.colors?.accent || '#800000'}20`};\r\n+  color: ${props => props.theme?.colors?.accent || '#800000'};\r\n+  padding: 0.25rem 0.75rem;\r\n+  border-radius: 12px;\r\n+  font-size: 0.75rem;\r\n+  font-weight: 500;\r\n+  text-transform: uppercase;\r\n+  letter-spacing: 0.5px;\r\n+  margin-bottom: 1rem;\r\n+`;\r\n+\r\n+const StockStatus = styled.div`\r\n+  display: flex;\r\n+  align-items: center;\r\n+  gap: 0.5rem;\r\n+  margin-bottom: 1rem;\r\n+  font-size: 0.9rem;\r\n+  \r\n+  .stock-indicator {\r\n+    width: 8px;\r\n+    height: 8px;\r\n+    border-radius: 50%;\r\n+    background: ${props => props.inStock ? '#4CAF50' : '#FF5252'};\r\n+  }\r\n+  \r\n+  .stock-text {\r\n+    color: ${props => props.inStock ? '#4CAF50' : '#FF5252'};\r\n+    font-weight: 500;\r\n+  }\r\n+`;\r\n+\r\n+const ItemDescription = styled.div`\r\n+  font-size: 0.95rem;\r\n+  opacity: 0.9;\r\n+  margin-bottom: 1.5rem;\r\n+  line-height: 1.6;\r\n+  color: ${props => props.theme?.colors?.text || '#FFFFFF'};\r\n+`;\r\n+\r\n+const ItemLocation = styled.div`\r\n+  display: flex;\r\n+  align-items: center;\r\n+  gap: 0.5rem;\r\n+  font-size: 0.9rem;\r\n+  opacity: 0.8;\r\n+  margin-bottom: 1.5rem;\r\n+  color: ${props => props.theme?.colors?.text || '#FFFFFF'};\r\n+`;\r\n+\r\n+const ShopInfo = styled.div`\r\n+  padding: 0.75rem;\r\n+  background: ${props => `${props.theme?.colors?.surface || 'rgba(255, 255, 255, 0.05)'}50`};\r\n+  border-radius: 8px;\r\n+  margin-bottom: 1.5rem;\r\n+  font-size: 0.9rem;\r\n+  color: ${props => props.theme?.colors?.text || '#FFFFFF'};\r\n+  \r\n+  strong {\r\n+    color: ${props => props.theme?.colors?.accent || '#800000'};\r\n+  }\r\n+`;\r\n+\r\n+// Update ActionButtons to only show Order button\r\n+const ActionButtons = styled.div`\r\n+  display: flex;\r\n+  gap: 0.75rem;\r\n+  margin-top: 1.5rem;\r\n+  \r\n+  button {\r\n+    flex: 1;\r\n+    padding: 0.75rem;\r\n+    border: none;\r\n+    border-radius: 8px;\r\n+    font-weight: bold;\r\n+    cursor: pointer;\r\n+    transition: all 0.3s;\r\n+    display: flex;\r\n+    align-items: center;\r\n+    justify-content: center;\r\n+    gap: 0.5rem;\r\n+    font-size: 0.9rem;\r\n+    \r\n+    @media (min-width: 768px) {\r\n+      padding: 1rem;\r\n+      font-size: 1rem;\r\n+    }\r\n+    \r\n+    &.order {\r\n+      background: ${props => props.theme?.colors?.accent || '#800000'};\r\n+      color: white;\r\n+      \r\n+      &:hover:not(:disabled) {\r\n+        background: ${props => props.theme?.colors?.primary || '#4A0404'};\r\n+        transform: translateY(-2px);\r\n+      }\r\n+      \r\n+      &:disabled {\r\n+        opacity: 0.5;\r\n+        cursor: not-allowed;\r\n+        transform: none;\r\n+      }\r\n+    }\r\n+    \r\n+    svg {\r\n+      width: 16px;\r\n+      height: 16px;\r\n+    }\r\n+  }\r\n+`;\r\n+\r\n+// Mobile-friendly floating controls - removed since they're now in header\r\n+const StyleIndicator = styled.div`\r\n+  position: fixed;\r\n+  bottom: 1rem;\r\n+  right: 1rem;\r\n+  background: ${props => `${props.theme?.colors?.background || '#000000'}E5`};\r\n+  backdrop-filter: blur(10px);\r\n+  color: white;\r\n+  padding: 0.5rem 1rem;\r\n+  border-radius: 20px;\r\n+  font-size: 0.8rem;\r\n+  display: flex;\r\n+  align-items: center;\r\n+  gap: 0.5rem;\r\n+  border: 1px solid ${props => `${props.theme?.colors?.accent}40` || 'rgba(128, 0, 0, 0.4)'};\r\n+  z-index: 90;\r\n+  \r\n+  @media (min-width: 768px) {\r\n+    font-size: 0.9rem;\r\n+  }\r\n+  \r\n+  .style-number {\r\n+    font-weight: bold;\r\n+    font-size: 1rem;\r\n+    color: ${props => props.theme?.colors?.accent || '#800000'};\r\n+    \r\n+    @media (min-width: 768px) {\r\n+      font-size: 1.2rem;\r\n+    }\r\n+  }\r\n+`;\r\n+\r\n+// Quantity selector optimized for mobile\r\n+const QuantitySelector = styled.div`\r\n+  display: flex;\r\n+  align-items: center;\r\n+  justify-content: space-between;\r\n+  background: ${props => `${props.theme?.colors?.surface || 'rgba(255, 255, 255, 0.05)'}50`};\r\n+  border-radius: 12px;\r\n+  padding: 1rem;\r\n+  margin: 1rem 0;\r\n+  \r\n+  .quantity-label {\r\n+    font-weight: bold;\r\n+    color: ${props => props.theme?.colors?.text || '#FFFFFF'};\r\n+    font-size: 0.9rem;\r\n+  }\r\n+  \r\n+  .quantity-controls {\r\n+    display: flex;\r\n+    align-items: center;\r\n+    gap: 1rem;\r\n+    \r\n+    .quantity-btn {\r\n+      width: 40px;\r\n+      height: 40px;\r\n+      border-radius: 50%;\r\n+      border: 2px solid ${props => props.theme?.colors?.accent || '#800000'};\r\n+      background: transparent;\r\n+      color: ${props => props.theme?.colors?.accent || '#800000'};\r\n+      display: flex;\r\n+      align-items: center;\r\n+      justify-content: center;\r\n+      cursor: pointer;\r\n+      transition: all 0.3s;\r\n+      -webkit-tap-highlight-color: transparent;\r\n+      \r\n+      &:active:not(:disabled) {\r\n+        transform: scale(0.9);\r\n+        background: ${props => props.theme?.colors?.accent || '#800000'};\r\n+        color: white;\r\n+      }\r\n+      \r\n+      &:disabled {\r\n+        opacity: 0.3;\r\n+        cursor: not-allowed;\r\n+      }\r\n+      \r\n+      svg {\r\n+        width: 18px;\r\n+        height: 18px;\r\n+      }\r\n+    }\r\n+    \r\n+    .quantity-display {\r\n+      font-size: 1.3rem;\r\n+      font-weight: bold;\r\n+      color: ${props => props.theme?.colors?.text || 'white'};\r\n+      min-width: 40px;\r\n+      text-align: center;\r\n+    }\r\n+  }\r\n+`;\r\n+\r\n+// Other styled components remain the same but with mobile optimizations...\r\n+const LoadingSpinner = styled.div`\r\n+  width: 40px;\r\n+  height: 40px;\r\n+  margin: 2rem auto;\r\n+  border: 3px solid rgba(128, 0, 0, 0.1);\r\n+  border-radius: 50%;\r\n+  border-top-color: #800000;\r\n+  animation: spin 1s linear infinite;\r\n+\r\n+  @keyframes spin {\r\n+    to {\r\n+      transform: rotate(360deg);\r\n+    }\r\n+  }\r\n+`;\r\n+\r\n+const EmptyGridMessage = styled.div`\r\n+  text-align: center;\r\n+  padding: 2rem 1rem;\r\n+  background: rgba(0, 0, 0, 0.2);\r\n+  border-radius: 12px;\r\n+  border: 1px solid rgba(128, 0, 0, 0.1);\r\n+  color: rgba(255, 255, 255, 0.7);\r\n+  grid-column: 1/-1;\r\n+\r\n+  h3 {\r\n+    font-size: 1.1rem;\r\n+    margin-bottom: 0.5rem;\r\n+    color: rgba(255, 255, 255, 0.9);\r\n+  }\r\n+\r\n+  p {\r\n+    font-size: 0.9rem;\r\n+    line-height: 1.5;\r\n+  }\r\n+`;\r\n+\r\n+const MotivationalMessage = styled.p`\r\n+  font-size: 1.1rem;\r\n+  line-height: 1.5;\r\n+  max-width: 600px;\r\n+  margin: 2rem auto 0;\r\n+  color: ${props => props.theme?.colors?.text || '#FFFFFF'};\r\n+  font-weight: 400;\r\n+  text-align: center;\r\n+  padding: 1rem 1.5rem;\r\n+  letter-spacing: 0.3px;\r\n+  position: relative;\r\n+  \r\n+  @media (min-width: 768px) {\r\n+    font-size: 1.4rem;\r\n+    line-height: 1.6;\r\n+    max-width: 800px;\r\n+    margin: 3rem auto 0;\r\n+    padding: 1.5rem 2rem;\r\n+    letter-spacing: 0.5px;\r\n+  }\r\n+  \r\n+  &::before, &::after {\r\n+    content: '\"';\r\n+    font-family: ${props => props.theme?.fonts?.heading || \"'Georgia', serif\"};\r\n+    font-size: 2rem;\r\n+    position: absolute;\r\n+    opacity: 0.2;\r\n+    color: ${props => props.theme?.colors?.accent || '#800000'};\r\n+    \r\n+    @media (min-width: 768px) {\r\n+      font-size: 3rem;\r\n+    }\r\n+  }\r\n+  \r\n+  &::before {\r\n+    top: -0.5rem;\r\n+    left: 0.5rem;\r\n+    \r\n+    @media (min-width: 768px) {\r\n+      top: -1.5rem;\r\n+      left: -1rem;\r\n+    }\r\n+  }\r\n+  \r\n+  &::after {\r\n+    bottom: -1.5rem;\r\n+    right: 0.5rem;\r\n+    \r\n+    @media (min-width: 768px) {\r\n+      bottom: -2.5rem;\r\n+      right: -1rem;\r\n+    }\r\n+  }\r\n+`;\r\n+\r\n+// 1. Replace the CategoryGrid styled component with these two new components:\r\n+\r\n+const CategoryGridWrapper = styled.div`\r\n+  margin-bottom: 2rem;\r\n+  \r\n+  /* Desktop: Regular grid */\r\n+  @media (min-width: 769px) {\r\n+    display: grid;\r\n+    grid-template-columns: repeat(5, 1fr);\r\n+    gap: 1rem;\r\n+  }\r\n+  \r\n+  @media (max-width: 1200px) and (min-width: 769px) {\r\n+    grid-template-columns: repeat(4, 1fr);\r\n+  }\r\n+  \r\n+  @media (max-width: 900px) and (min-width: 769px) {\r\n+    grid-template-columns: repeat(3, 1fr);\r\n+  }\r\n+  \r\n+  /* Mobile: Scrollable rows */\r\n+  @media (max-width: 768px) {\r\n+    display: flex;\r\n+    flex-direction: column;\r\n+    gap: 1rem;\r\n+  }\r\n+`;\r\n+\r\n+// Replace the CategoryScrollableGrid styled component with this corrected version:\r\n+\r\n+const CategoryScrollableGrid = styled.div`\r\n+  display: none;\r\n+  \r\n+  @media (max-width: 768px) {\r\n+    display: grid;\r\n+    grid-auto-flow: column;\r\n+    grid-template-rows: repeat(2, 1fr);\r\n+    grid-template-columns: repeat(5, minmax(280px, 1fr)); /* Increased from 200px */\r\n+    gap: 1rem; /* Increased from 0.75rem */\r\n+    overflow-x: auto;\r\n+    overflow-y: hidden;\r\n+    padding-bottom: 0.5rem;\r\n+    scroll-snap-type: x mandatory;\r\n+    -webkit-overflow-scrolling: touch;\r\n+    min-height: 85vh; /* Add minimum height to stretch vertically */\r\n+    \r\n+    &::-webkit-scrollbar {\r\n+      height: 4px;\r\n+    }\r\n+    \r\n+    &::-webkit-scrollbar-track {\r\n+      background: ${props => `${props.theme?.colors?.background || '#000000'}80`};\r\n+      border-radius: 10px;\r\n+    }\r\n+    \r\n+    &::-webkit-scrollbar-thumb {\r\n+      background: ${props => props.theme?.colors?.accent || '#800000'};\r\n+      border-radius: 10px;\r\n+    }\r\n+    \r\n+    > * {\r\n+      scroll-snap-align: start;\r\n+      min-width: 0;\r\n+      height: 100%; /* Make items stretch to full height */\r\n+    }\r\n+  }\r\n+  \r\n+  @media (max-width: 480px) {\r\n+    grid-template-columns: repeat(5, minmax(240px, 1fr)); /* Increased from 160px */\r\n+    gap: 0.75rem;\r\n+  }\r\n+`;\r\n+\r\n+// 4. Add this CSS to handle responsive display (add to your styled components section):\r\n+const GlobalStyle = styled.div`\r\n+  @media (min-width: 769px) {\r\n+    .mobile-only {\r\n+      display: none !important;\r\n+    }\r\n+  }\r\n+  \r\n+  @media (max-width: 768px) {\r\n+    .desktop-only {\r\n+      display: none !important;\r\n+    }\r\n+  }\r\n+`;\r\n+\r\n+const CategoryHeader = styled.div`\r\n+  display: flex;\r\n+  justify-content: space-between;\r\n+  align-items: center;\r\n+  margin-bottom: 0.75rem;\r\n+  padding: 0 0.5rem;\r\n+  \r\n+  @media (min-width: 768px) {\r\n+    margin-bottom: 1rem;\r\n+    padding: 0;\r\n+  }\r\n+  \r\n+  h2 {\r\n+    font-family: ${props => props.theme?.fonts?.heading || 'inherit'};\r\n+    font-size: 1.3rem;\r\n+    color: ${props => props.theme?.colors?.accent || '#800000'};\r\n+    margin: 0;\r\n+    \r\n+    @media (min-width: 768px) {\r\n+      font-size: 1.8rem;\r\n+    }\r\n+  }\r\n+  \r\n+  .view-all {\r\n+    font-size: 0.8rem;\r\n+    color: ${props => props.theme?.colors?.accent || '#800000'};\r\n+    opacity: 0.8;\r\n+    cursor: pointer;\r\n+    display: flex;\r\n+    align-items: center;\r\n+    gap: 0.3rem;\r\n+    transition: all 0.3s ease;\r\n+    \r\n+    @media (min-width: 768px) {\r\n+      font-size: 0.9rem;\r\n+      gap: 0.5rem;\r\n+    }\r\n+    \r\n+    &:active {\r\n+      opacity: 1;\r\n+      transform: translateX(3px);\r\n+    }\r\n+  }\r\n+`;\r\n+\r\n+const ChatOverlay = styled.div`\r\n+  position: fixed;\r\n+  top: 0;\r\n+  left: 0;\r\n+  right: 0;\r\n+  bottom: 0;\r\n+  background: rgba(0, 0, 0, 0.5);\r\n+  z-index: 999;\r\n+  opacity: ${props => props.isOpen ? 1 : 0};\r\n+  pointer-events: ${props => props.isOpen ? 'auto' : 'none'};\r\n+  transition: opacity 0.3s ease;\r\n+`;\r\n+\r\n+// Add these styled components after StyleIndicator\r\n+\r\n+const SortContainer = styled.div`\r\n+  position: relative;\r\n+  display: inline-block;\r\n+`;\r\n+\r\n+const SortDropdown = styled.div`\r\n+  position: absolute;\r\n+  top: calc(100% + 0.5rem);\r\n+  right: 0;\r\n+  background: ${props => props.theme?.colors?.background || '#000000'};\r\n+  border: 2px solid ${props => props.theme?.colors?.accent || '#800000'};\r\n+  border-radius: 12px;\r\n+  padding: 0.75rem;\r\n+  min-width: 220px;\r\n+  z-index: 1000;\r\n+  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.8),\r\n+              0 0 20px ${props => `${props.theme?.colors?.accent}40` || 'rgba(128, 0, 0, 0.25)'};\r\n+  opacity: ${props => props.isOpen ? 1 : 0};\r\n+  visibility: ${props => props.isOpen ? 'visible' : 'hidden'};\r\n+  transform: ${props => props.isOpen ? 'translateY(0)' : 'translateY(-10px)'};\r\n+  transition: all 0.3s ease;\r\n+  \r\n+  @media (max-width: 768px) {\r\n+    min-width: 200px;\r\n+    right: 0;\r\n+  }\r\n+`;\r\n+\r\n+const SortOption = styled.button`\r\n+  width: 100%;\r\n+  padding: 0.75rem 1rem;\r\n+  background: ${props => props.active ? \r\n+    props.theme?.colors?.accent || '#800000' : \r\n+    'transparent'};\r\n+  border: none;\r\n+  border-radius: 8px;\r\n+  color: ${props => props.active ? \r\n+    '#FFFFFF' : \r\n+    props.theme?.colors?.text || '#FFFFFF'};\r\n+  font-size: 0.95rem;\r\n+  font-weight: ${props => props.active ? '600' : '500'};\r\n+  text-align: left;\r\n+  cursor: pointer;\r\n+  transition: all 0.2s ease;\r\n+  display: flex;\r\n+  align-items: center;\r\n+  gap: 0.75rem;\r\n+  font-family: ${props => props.theme?.fonts?.body || 'inherit'};\r\n+  min-height: 50px; /* Added for two-line content */\r\n+  \r\n+  &:hover {\r\n+    background: ${props => props.active ?\r\n+      props.theme?.colors?.primary || '#4A0404' :\r\n+      `${props.theme?.colors?.accent}20` || 'rgba(128, 0, 0, 0.2)'};\r\n+    transform: translateX(2px);\r\n+  }\r\n+  \r\n+  &:active {\r\n+    transform: scale(0.98);\r\n+  }\r\n+  \r\n+  svg {\r\n+    width: 16px;\r\n+    height: 16px;\r\n+    flex-shrink: 0;\r\n+    align-self: flex-start; /* Align icon to top when two lines */\r\n+    margin-top: 2px;\r\n+  }\r\n+  \r\n+  @media (max-width: 768px) {\r\n+    padding: 0.65rem 0.85rem;\r\n+    font-size: 0.9rem;\r\n+    min-height: 46px;\r\n+    \r\n+    svg {\r\n+      width: 14px;\r\n+      height: 14px;\r\n+    }\r\n+  }\r\n+`;\r\n+\r\n+const SortHeader = styled.div`\r\n+  display: flex;\r\n+  justify-content: space-between;\r\n+  align-items: center;\r\n+  margin-bottom: 1rem;\r\n+  \r\n+  @media (max-width: 768px) {\r\n+    flex-direction: column;\r\n+    align-items: flex-start;\r\n+    gap: 0.75rem;\r\n+  }\r\n+`;\r\n+\r\n+// Motivational messages\r\n+const MOTIVATIONAL_MESSAGES = [\r\n+  \"Build your vision, Elevate humanity.\",\r\n+  \"Create greatness, Inspire progress.\",\r\n+  \"Master your craft, Serve with passion.\",\r\n+  \"Own your success, Empower those around you.\",\r\n+  \"Rule with wisdom, Lead with heart.\",\r\n+  \"Shape your future, Change lives along the way.\",\r\n+  \"Rise above, Lift others higher.\",\r\n+  \"Conquer your dreams, Build a better world.\",\r\n+  \"Lead by example, Serve with strength.\",\r\n+  \"Pursue greatness, Give back in abundance.\"\r\n+];\r\n+\r\n+const WelcomePage = () => {\r\n+  const navigate = useNavigate();\r\n+  const [motivationalMessage, setMotivationalMessage] = useState(\"\");\r\n+  const [activeTab, setActiveTab] = useState('featured');\r\n+  const [featuredItems, setFeaturedItems] = useState([]);\r\n+  const [loading, setLoading] = useState(true);\r\n+  const [error, setError] = useState(null);\r\n+  const [nearbyItems, setNearbyItems] = useState([]);\r\n+  const [featuredMedia, setFeaturedMedia] = useState([]);\r\n+  const [hasSearched, setHasSearched] = useState(false);\r\n+  const [searchAddress, setSearchAddress] = useState('');\r\n+  const [searching, setSearching] = useState(false);\r\n+  const [locationChecked, setLocationChecked] = useState(false);\r\n+  const [showLocationPrompt, setShowLocationPrompt] = useState(false);\r\n+  const [currentZipCode, setCurrentZipCode] = useState(null);\r\n+  const [currentPage, setCurrentPage] = useState(1);\r\n+  const [totalItems, setTotalItems] = useState(0);\r\n+  const [currentStyle, setCurrentStyle] = useState(null);\r\n+  const itemsPerPage = 6;\r\n+  const [isPinned, setIsPinned] = useState(false);\r\n+  const [isRefreshing, setIsRefreshing] = useState(false);\r\n+  const [orderQuantity, setOrderQuantity] = useState(1);\r\n+  const [sortBy, setSortBy] = useState('recent'); // 'recent', 'proximity', 'price-low', 'price-high'\r\n+  const [sortMenuOpen, setSortMenuOpen] = useState(false);\r\n+\r\n+\r\n+  \r\n+  const { user, isAuthenticated } = useAuth();\r\n+  const [shopData, setShopData] = useState(null);\r\n+  const [currentMessageIndex, setCurrentMessageIndex] = useState(0);\r\n+  const [isMessageVisible, setIsMessageVisible] = useState(true);\r\n+  const [isSliderPaused, setIsSliderPaused] = useState(false);\r\n+  const [sliderPosition, setSliderPosition] = useState(0);\r\n+  const sliderRef = useRef(null);\r\n+  const sliderAnimationRef = useRef(null);\r\n+  const [zoomedItem, setZoomedItem] = useState(null);\r\n+  const [chatOpen, setChatOpen] = useState(false);\r\n+  const [selectedChatItem, setSelectedChatItem] = useState(null);\r\n+  const [currentImageIndex, setCurrentImageIndex] = useState(0);\r\n+  const { userLocation, locationPermission, requestLocation } = useLocation();\r\n+  const [updatingLocation, setUpdatingLocation] = useState(false);\r\n+  const [featuredSearchTerm, setFeaturedSearchTerm] = useState('');\r\n+  const [searchResults, setSearchResults] = useState([]);\r\n+  const [isSearching, setIsSearching] = useState(false);\r\n+  const [hasSearchResults, setHasSearchResults] = useState(false);\r\n+  const [categories, setCategories] = useState({\r\n+    'Electronics & Tech': [],\r\n+    'Clothing & Accessories': [],\r\n+    'Home & Garden': [],\r\n+    'Sports & Outdoors': [],\r\n+    'Books & Media': [],\r\n+    'Toys & Games': [],\r\n+    'Health & Beauty': [],\r\n+    'Automotive': [],\r\n+    'Collectibles & Art': [],\r\n+    'Food & Beverages': [],\r\n+    'Other': []\r\n+  });\r\n+// Replace the existing state variables related to ZIP with city/region states\r\n+const [cityRegion, setCityRegion] = useState('');\r\n+const [isCityPinned, setIsCityPinned] = useState(false);\r\n+const [isConvertingToCity, setIsConvertingToCity] = useState(false);\r\n+const [cityInputValue, setCityInputValue] = useState('');\r\n+const [effectiveLocation, setEffectiveLocation] = useState(null);\r\n+const [isIPLocation, setIsIPLocation] = useState(false);\r\n+\r\n+useEffect(() => {\r\n+  const initializeLocation = async () => {\r\n+    console.log('🔍 Initializing location...');\r\n+    console.log('userLocation:', userLocation);\r\n+    \r\n+    if (userLocation) {\r\n+      // User has shared precise location\r\n+      console.log('✅ Using GPS location:', userLocation);\r\n+      setEffectiveLocation(userLocation);\r\n+      setIsIPLocation(false);\r\n+    } else {\r\n+      // Use IP-based location\r\n+      console.log('🌐 Fetching IP-based location...');\r\n+      const ipLocation = await getIPBasedLocation();\r\n+      console.log('IP Location result:', ipLocation);\r\n+      \r\n+      if (ipLocation) {\r\n+        console.log('✅ Using IP location:', ipLocation);\r\n+        setEffectiveLocation(ipLocation);\r\n+        setIsIPLocation(true);\r\n+      } else {\r\n+        console.error('❌ Failed to get IP location');\r\n+      }\r\n+    }\r\n+  };\r\n+  \r\n+  initializeLocation();\r\n+}, [userLocation]);\r\n+\r\n+useEffect(() => {\r\n+  console.log('🔄 effectiveLocation changed:', effectiveLocation);\r\n+  console.log('activeTab:', activeTab);\r\n+  \r\n+  if (activeTab === 'featured' && effectiveLocation) {\r\n+    console.log('📦 Loading items with location...');\r\n+    loadCategorizedItems();\r\n+  }\r\n+}, [effectiveLocation, activeTab]);\r\n+\r\n+const loadCategorizedItems = async () => {\r\n+  console.log('🔄 loadCategorizedItems called');\r\n+  console.log('effectiveLocation:', effectiveLocation);\r\n+  console.log('sortBy:', sortBy);\r\n+  \r\n+  try {\r\n+    setLoading(true);\r\n+    setError(null);\r\n+\r\n+    console.log('📡 Fetching items from Firebase...');\r\n+    const allItems = await getFeaturedItems(48);\r\n+    console.log('✅ Fetched items:', allItems.length);\r\n+    \r\n+    const currentUserId = user?.uid;\r\n+    \r\n+    // Filter out current user's items AND invalid items\r\n+    const filteredItems = allItems.filter(item => {\r\n+      const isNotCurrentUser = item.shopId !== currentUserId;\r\n+      const hasImages = item.images && item.images.length > 0 && item.images.some(img => img);\r\n+      const hasValidPrice = item.price && !isNaN(parseFloat(item.price)) && parseFloat(item.price) > 0;\r\n+      const hasStock = !item.deleted && (!item.quantity || parseInt(item.quantity) > 0);\r\n+      \r\n+      return isNotCurrentUser && hasImages && hasValidPrice && hasStock;\r\n+    });\r\n+    \r\n+    console.log('✅ Filtered items:', filteredItems.length);\r\n+\r\n+    let itemsWithDistance = filteredItems;\r\n+    \r\n+    // Calculate distances if we have location\r\n+    if (effectiveLocation) {\r\n+      console.log('📍 Calculating distances...');\r\n+      itemsWithDistance = filteredItems.map(item => {\r\n+        let itemCoords = item.coordinates;\r\n+        if (!itemCoords && item.address) {\r\n+          const coordsMatch = item.address.match(/^(-?\\d+\\.?\\d*),\\s*(-?\\d+\\.?\\d*)$/);\r\n+          if (coordsMatch) {\r\n+            itemCoords = {\r\n+              lat: parseFloat(coordsMatch[1]),\r\n+              lng: parseFloat(coordsMatch[2])\r\n+            };\r\n+          }\r\n+        }\r\n+\r\n+        if (itemCoords?.lat && itemCoords?.lng) {\r\n+          try {\r\n+            const distanceInMeters = getDistance(\r\n+              { latitude: effectiveLocation.latitude, longitude: effectiveLocation.longitude },\r\n+              { latitude: itemCoords.lat, longitude: itemCoords.lng }\r\n+            );\r\n+            const distanceInMiles = (distanceInMeters / 1609.34).toFixed(1);\r\n+\r\n+            return {\r\n+              ...item,\r\n+              coordinates: itemCoords,\r\n+              distance: distanceInMeters,\r\n+              distanceInMiles,\r\n+              formattedDistance: `${distanceInMiles} mi`\r\n+            };\r\n+          } catch (e) {\r\n+            console.warn('Error calculating distance for item:', e);\r\n+            return item;\r\n+          }\r\n+        }\r\n+        return item;\r\n+      });\r\n+    } else {\r\n+      console.warn('⚠️ No effectiveLocation available for distance calculation');\r\n+    }\r\n+\r\n+    // Apply sorting\r\n+    console.log('🔄 Applying sort:', sortBy);\r\n+    const sortedItems = applySorting(itemsWithDistance, sortBy);\r\n+    console.log('✅ Sorted items:', sortedItems.length);\r\n+\r\n+    // Categorize items\r\n+    const categorizedItems = {\r\n+      'Electronics & Tech': [],\r\n+      'Clothing & Accessories': [],\r\n+      'Home & Garden': [],\r\n+      'Sports & Outdoors': [],\r\n+      'Books & Media': [],\r\n+      'Toys & Games': [],\r\n+      'Health & Beauty': [],\r\n+      'Automotive': [],\r\n+      'Collectibles & Art': [],\r\n+      'Food & Beverages': [],\r\n+      'Other': []\r\n+    };\r\n+\r\n+    sortedItems.forEach(item => {\r\n+      const category = item.category || 'Other';\r\n+      if (categorizedItems[category]) {\r\n+        categorizedItems[category].push(item);\r\n+      } else {\r\n+        categorizedItems['Other'].push(item);\r\n+      }\r\n+    });\r\n+\r\n+    Object.keys(categorizedItems).forEach(category => {\r\n+      categorizedItems[category] = categorizedItems[category].slice(0, 10);\r\n+    });\r\n+\r\n+    console.log('✅ Setting categories:', Object.keys(categorizedItems).map(k => `${k}: ${categorizedItems[k].length}`));\r\n+    setCategories(categorizedItems);\r\n+    setFeaturedItems(sortedItems.slice(0, 10));\r\n+    setTotalItems(filteredItems.length);\r\n+\r\n+    setLoading(false);\r\n+  } catch (error) {\r\n+    console.error('❌ Error loading categorized items:', error);\r\n+    setError('Failed to load items. Please try again later.');\r\n+    setLoading(false);\r\n+  }\r\n+};\r\n+\r\n+// Add this useEffect with other effects\r\n+\r\n+useEffect(() => {\r\n+  const handleClickOutside = (event) => {\r\n+    if (sortMenuOpen && !event.target.closest('.sort-container')) {\r\n+      setSortMenuOpen(false);\r\n+    }\r\n+  };\r\n+\r\n+  document.addEventListener('mousedown', handleClickOutside);\r\n+  return () => document.removeEventListener('mousedown', handleClickOutside);\r\n+}, [sortMenuOpen]);\r\n+\r\n+// Add this function before the return statement in WelcomePage component\r\n+\r\n+// Replace the applySorting function with this updated version:\r\n+\r\n+const applySorting = (items, sortType) => {\r\n+  let sortedItems = [...items];\r\n+  \r\n+  switch (sortType) {\r\n+    case 'proximity':\r\n+      if (!userLocation) {\r\n+        // If no location, request it\r\n+        requestLocation();\r\n+        return sortedItems;\r\n+      }\r\n+      // Sort by distance (closest first) - no distance filter\r\n+      sortedItems.sort((a, b) => {\r\n+        const distA = a.distance || Infinity;\r\n+        const distB = b.distance || Infinity;\r\n+        return distA - distB;\r\n+      });\r\n+      break;\r\n+      \r\n+    case 'price-low':\r\n+      // Filter items within 30 miles, then sort by price (low to high)\r\n+      if (userLocation) {\r\n+        sortedItems = sortedItems.filter(item => {\r\n+          if (!item.distance) return false;\r\n+          const distanceInMiles = item.distance / 1609.34;\r\n+          return distanceInMiles <= 30;\r\n+        });\r\n+      }\r\n+      sortedItems.sort((a, b) => {\r\n+        const priceA = parseFloat(a.price) || 0;\r\n+        const priceB = parseFloat(b.price) || 0;\r\n+        return priceA - priceB;\r\n+      });\r\n+      break;\r\n+      \r\n+    case 'price-high':\r\n+      // Filter items within 30 miles, then sort by price (high to low)\r\n+      if (userLocation) {\r\n+        sortedItems = sortedItems.filter(item => {\r\n+          if (!item.distance) return false;\r\n+          const distanceInMiles = item.distance / 1609.34;\r\n+          return distanceInMiles <= 30;\r\n+        });\r\n+      }\r\n+      sortedItems.sort((a, b) => {\r\n+        const priceA = parseFloat(a.price) || 0;\r\n+        const priceB = parseFloat(b.price) || 0;\r\n+        return priceB - priceA;\r\n+      });\r\n+      break;\r\n+      \r\n+    case 'recent':\r\n+    default:\r\n+      // Filter items within 30 miles, then sort by most recent\r\n+      if (userLocation) {\r\n+        sortedItems = sortedItems.filter(item => {\r\n+          if (!item.distance) return false;\r\n+          const distanceInMiles = item.distance / 1609.34;\r\n+          return distanceInMiles <= 30;\r\n+        });\r\n+      }\r\n+      sortedItems.sort((a, b) => {\r\n+        const dateA = a.createdAt ? new Date(a.createdAt) : new Date(0);\r\n+        const dateB = b.createdAt ? new Date(b.createdAt) : new Date(0);\r\n+        return dateB - dateA;\r\n+      });\r\n+      break;\r\n+  }\r\n+  \r\n+  return sortedItems;\r\n+};\r\n+\r\n+const getSortLabel = (sortType) => {\r\n+  switch (sortType) {\r\n+    case 'proximity': return 'Closest First';\r\n+    case 'price-low': return 'Price: Low to High';\r\n+    case 'price-high': return 'Price: High to Low';\r\n+    case 'recent':\r\n+    default: return 'Most Recent';\r\n+  }\r\n+};\r\n+\r\n+// Replace convertCoordsToZip with this new function\r\n+const convertCoordsToCity = async (lat, lon) => {\r\n+  try {\r\n+    setIsConvertingToCity(true);\r\n+    setError(null);\r\n+    \r\n+    const response = await fetch(\r\n+      `https://nominatim.openstreetmap.org/reverse?lat=${lat}&lon=${lon}&format=json&zoom=10&addressdetails=1`,\r\n+      {\r\n+        headers: {\r\n+          'Accept': 'application/json',\r\n+          'User-Agent': 'KalKode Marketplace'\r\n+        }\r\n+      }\r\n+    );\r\n+    \r\n+    if (!response.ok) {\r\n+      throw new Error('Failed to fetch location data');\r\n+    }\r\n+    \r\n+    const data = await response.json();\r\n+    console.log('Nominatim response:', data);\r\n+    \r\n+    if (!data || !data.address) {\r\n+      setCityRegion('Not available');\r\n+      setCityInputValue('');\r\n+      return null;\r\n+    }\r\n+    \r\n+    const address = data.address;\r\n+    const city = address.city || address.town || address.village || address.county;\r\n+    const state = address.state;\r\n+    \r\n+    // Major cities list (you can expand this)\r\n+    const majorCities = [\r\n+      'Houston', 'Dallas', 'Austin', 'San Antonio', 'Fort Worth',\r\n+      'Los Angeles', 'New York', 'Chicago', 'Phoenix', 'Philadelphia',\r\n+      'San Diego', 'San Jose', 'Jacksonville', 'Columbus', 'Charlotte'\r\n+    ];\r\n+    \r\n+    let locationString = '';\r\n+    \r\n+    if (city && majorCities.some(major => city.includes(major))) {\r\n+      // For major cities, determine direction from city center\r\n+      const cityName = majorCities.find(major => city.includes(major));\r\n+      \r\n+      // Get city center coordinates (you could make this more precise with a lookup table)\r\n+      const cityCenterResponse = await fetch(\r\n+        `https://nominatim.openstreetmap.org/search?city=${cityName}&state=${state}&format=json&limit=1`,\r\n+        {\r\n+          headers: {\r\n+            'Accept': 'application/json',\r\n+            'User-Agent': 'KalKode Marketplace'\r\n+          }\r\n+        }\r\n+      );\r\n+      \r\n+      const cityCenterData = await cityCenterResponse.json();\r\n+      \r\n+      if (cityCenterData && cityCenterData[0]) {\r\n+        const centerLat = parseFloat(cityCenterData[0].lat);\r\n+        const centerLon = parseFloat(cityCenterData[0].lon);\r\n+        \r\n+        // Calculate direction\r\n+        const direction = getDirection(lat, lon, centerLat, centerLon);\r\n+        locationString = `${direction} ${cityName}, ${getStateAbbreviation(state)}`;\r\n+      } else {\r\n+        locationString = `${cityName}, ${getStateAbbreviation(state)}`;\r\n+      }\r\n+    } else if (state) {\r\n+      // For non-major cities, use state with direction\r\n+      // Get state center (approximate)\r\n+      const stateCenterResponse = await fetch(\r\n+        `https://nominatim.openstreetmap.org/search?state=${state}&country=USA&format=json&limit=1`,\r\n+        {\r\n+          headers: {\r\n+            'Accept': 'application/json',\r\n+            'User-Agent': 'KalKode Marketplace'\r\n+          }\r\n+        }\r\n+      );\r\n+      \r\n+      const stateCenterData = await stateCenterResponse.json();\r\n+      \r\n+      if (stateCenterData && stateCenterData[0]) {\r\n+        const centerLat = parseFloat(stateCenterData[0].lat);\r\n+        const centerLon = parseFloat(stateCenterData[0].lon);\r\n+        \r\n+        const direction = getDirection(lat, lon, centerLat, centerLon);\r\n+        locationString = city ? \r\n+          `${city}, ${direction} ${getStateAbbreviation(state)}` :\r\n+          `${direction} ${getStateAbbreviation(state)}`;\r\n+      } else {\r\n+        locationString = city ? \r\n+          `${city}, ${getStateAbbreviation(state)}` :\r\n+          getStateAbbreviation(state);\r\n+      }\r\n+    } else {\r\n+      locationString = city || 'Unknown Location';\r\n+    }\r\n+    \r\n+    setCityRegion(locationString);\r\n+    setCityInputValue(locationString);\r\n+    \r\n+    console.log(`Coordinates ${lat}, ${lon} → ${locationString}`);\r\n+    \r\n+    return locationString;\r\n+    \r\n+  } catch (error) {\r\n+    console.error('Error converting coordinates to city:', error);\r\n+    setCityRegion('Error');\r\n+    setCityInputValue('');\r\n+    setError('Failed to get location information');\r\n+    return null;\r\n+  } finally {\r\n+    setIsConvertingToCity(false);\r\n+  }\r\n+};\r\n+\r\n+// Helper function to determine direction (N, S, E, W, NE, NW, SE, SW)\r\n+const getDirection = (lat1, lon1, lat2, lon2) => {\r\n+  const latDiff = lat1 - lat2;\r\n+  const lonDiff = lon1 - lon2;\r\n+  \r\n+  const absLatDiff = Math.abs(latDiff);\r\n+  const absLonDiff = Math.abs(lonDiff);\r\n+  \r\n+  // If differences are very small, consider it center\r\n+  if (absLatDiff < 0.1 && absLonDiff < 0.1) {\r\n+    return '';\r\n+  }\r\n+  \r\n+  // Determine primary direction\r\n+  let direction = '';\r\n+  \r\n+  // North/South\r\n+  if (absLatDiff > absLonDiff * 0.5) {\r\n+    direction += latDiff > 0 ? 'N' : 'S';\r\n+  }\r\n+  \r\n+  // East/West\r\n+  if (absLonDiff > absLatDiff * 0.5) {\r\n+    direction += lonDiff > 0 ? 'E' : 'W';\r\n+  }\r\n+  \r\n+  return direction || 'Central';\r\n+};\r\n+\r\n+// Helper function to get state abbreviations\r\n+const getStateAbbreviation = (stateName) => {\r\n+  const stateMap = {\r\n+    'Alabama': 'AL', 'Alaska': 'AK', 'Arizona': 'AZ', 'Arkansas': 'AR',\r\n+    'California': 'CA', 'Colorado': 'CO', 'Connecticut': 'CT', 'Delaware': 'DE',\r\n+    'Florida': 'FL', 'Georgia': 'GA', 'Hawaii': 'HI', 'Idaho': 'ID',\r\n+    'Illinois': 'IL', 'Indiana': 'IN', 'Iowa': 'IA', 'Kansas': 'KS',\r\n+    'Kentucky': 'KY', 'Louisiana': 'LA', 'Maine': 'ME', 'Maryland': 'MD',\r\n+    'Massachusetts': 'MA', 'Michigan': 'MI', 'Minnesota': 'MN', 'Mississippi': 'MS',\r\n+    'Missouri': 'MO', 'Montana': 'MT', 'Nebraska': 'NE', 'Nevada': 'NV',\r\n+    'New Hampshire': 'NH', 'New Jersey': 'NJ', 'New Mexico': 'NM', 'New York': 'NY',\r\n+    'North Carolina': 'NC', 'North Dakota': 'ND', 'Ohio': 'OH', 'Oklahoma': 'OK',\r\n+    'Oregon': 'OR', 'Pennsylvania': 'PA', 'Rhode Island': 'RI', 'South Carolina': 'SC',\r\n+    'South Dakota': 'SD', 'Tennessee': 'TN', 'Texas': 'TX', 'Utah': 'UT',\r\n+    'Vermont': 'VT', 'Virginia': 'VA', 'Washington': 'WA', 'West Virginia': 'WV',\r\n+    'Wisconsin': 'WI', 'Wyoming': 'WY'\r\n+  };\r\n+  \r\n+  return stateMap[stateName] || stateName;\r\n+};\r\n+\r\n+// Replace handleLocationToZip with handleLocationToCity\r\n+const handleLocationToCity = async () => {\r\n+  try {\r\n+    setIsConvertingToCity(true);\r\n+    setError(null);\r\n+    \r\n+    // Request fresh location from browser\r\n+    const freshLocation = await new Promise((resolve, reject) => {\r\n+      if (!navigator.geolocation) {\r\n+        reject(new Error('Geolocation not supported'));\r\n+        return;\r\n+      }\r\n+      \r\n+      navigator.geolocation.getCurrentPosition(\r\n+        (position) => {\r\n+          resolve({\r\n+            latitude: position.coords.latitude,\r\n+            longitude: position.coords.longitude\r\n+          });\r\n+        },\r\n+        (error) => {\r\n+          reject(error);\r\n+        },\r\n+        {\r\n+          enableHighAccuracy: true,\r\n+          timeout: 10000,\r\n+          maximumAge: 0\r\n+        }\r\n+      );\r\n+    });\r\n+    \r\n+    // Convert fresh coordinates to city/region\r\n+    await convertCoordsToCity(freshLocation.latitude, freshLocation.longitude);\r\n+    \r\n+  } catch (error) {\r\n+    console.error('Error getting fresh location:', error);\r\n+    \r\n+    // Fallback: use stored location if available\r\n+    if (userLocation) {\r\n+      console.log('Using stored location as fallback');\r\n+      await convertCoordsToCity(userLocation.latitude, userLocation.longitude);\r\n+    } else {\r\n+      setError('Location not available. Please enable location services.');\r\n+    }\r\n+  } finally {\r\n+    setIsConvertingToCity(false);\r\n+  }\r\n+};\r\n+\r\n+// Replace handleToggleZipPin with handleToggleCityPin\r\n+const handleToggleCityPin = () => {\r\n+  if (isCityPinned) {\r\n+    localStorage.removeItem('pinnedCityRegion');\r\n+    setIsCityPinned(false);\r\n+    setCityRegion('');\r\n+    setCityInputValue('');\r\n+  } else {\r\n+    if (cityRegion && cityRegion !== 'Not available' && cityRegion !== 'Error') {\r\n+      localStorage.setItem('pinnedCityRegion', cityRegion);\r\n+      setIsCityPinned(true);\r\n+    }\r\n+  }\r\n+};\r\n+\r\n+// Update the useEffect that loads pinned location on mount\r\n+useEffect(() => {\r\n+  const pinnedCity = localStorage.getItem('pinnedCityRegion');\r\n+  if (pinnedCity) {\r\n+    setCityRegion(pinnedCity);\r\n+    setCityInputValue(pinnedCity);\r\n+    setIsCityPinned(true);\r\n+  }\r\n+}, []);\r\n+\r\n+\r\n+  // Handle opening shop\r\n+  const handleOpenShop = () => {\r\n+    navigate('/shop/create/template');\r\n+  };\r\n+\r\n+  // Refresh theme\r\n+  const refreshTheme = () => {\r\n+    if (isRefreshing) return;\r\n+    \r\n+    setIsRefreshing(true);\r\n+    const styles = Object.values(WELCOME_STYLES);\r\n+    const otherStyles = styles.filter(style => style.id !== currentStyle.id);\r\n+    \r\n+    if (otherStyles.length > 0) {\r\n+      const randomStyle = otherStyles[Math.floor(Math.random() * otherStyles.length)];\r\n+      setCurrentStyle(randomStyle);\r\n+      \r\n+      if (isPinned) {\r\n+        localStorage.removeItem('pinnedStyleId');\r\n+        setIsPinned(false);\r\n+      }\r\n+    }\r\n+    \r\n+    setTimeout(() => setIsRefreshing(false), 500);\r\n+  };\r\n+\r\n+  // Toggle pin style\r\n+  const togglePinStyle = () => {\r\n+    if (isPinned) {\r\n+      localStorage.removeItem('pinnedStyleId');\r\n+      setIsPinned(false);\r\n+      \r\n+      const styles = Object.values(WELCOME_STYLES).filter(\r\n+        style => style.id !== currentStyle.id\r\n+      );\r\n+      \r\n+      if (styles.length > 0) {\r\n+        const randomStyle = styles[Math.floor(Math.random() * styles.length)];\r\n+        setCurrentStyle(randomStyle);\r\n+      }\r\n+    } else {\r\n+      localStorage.setItem('pinnedStyleId', currentStyle.id.toString());\r\n+      setIsPinned(true);\r\n+    }\r\n+  };\r\n+\r\n+  // Handle location update\r\n+  const handleLocationUpdate = () => {\r\n+    setUpdatingLocation(true);\r\n+    requestLocation();\r\n+  };\r\n+\r\n+  // Get location display text\r\n+  const getLocationDisplayText = () => {\r\n+    if (!userLocation) {\r\n+      return \"Location: Not available\";\r\n+    }\r\n+    return `Location: ${userLocation.latitude.toFixed(4)}, ${userLocation.longitude.toFixed(4)}`;\r\n+  };\r\n+\r\n+  // Search featured items\r\n+  const searchFeaturedItems = async (searchTerm) => {\r\n+    if (!searchTerm.trim()) {\r\n+      setSearchResults([]);\r\n+      setHasSearchResults(false);\r\n+      return;\r\n+    }\r\n+  \r\n+    try {\r\n+      setIsSearching(true);\r\n+      setError(null);\r\n+    \r\n+      const shopsRef = collection(db, 'shops');\r\n+      const snapshot = await getDocs(shopsRef);\r\n+      \r\n+      let allMatchingItems = [];\r\n+      const currentUserId = user?.uid;\r\n+      \r\n+      snapshot.docs.forEach(doc => {\r\n+        const shopData = doc.data();\r\n+        \r\n+        if (doc.id === currentUserId) {\r\n+          return;\r\n+        }\r\n+        \r\n+        if (shopData?.items && Array.isArray(shopData.items)) {\r\n+          shopData.items\r\n+            .filter(item => !item.deleted)\r\n+            .forEach(item => {\r\n+              const itemName = (item.name || '').toLowerCase();\r\n+              const itemDescription = (item.description || '').toLowerCase();\r\n+              const searchLower = searchTerm.toLowerCase();\r\n+              \r\n+              if (itemName.includes(searchLower) || itemDescription.includes(searchLower)) {\r\n+                allMatchingItems.push({\r\n+                  ...item,\r\n+                  shopId: doc.id,\r\n+                  shopName: shopData.name || 'Unknown Shop',\r\n+                  shopTheme: shopData.theme\r\n+                });\r\n+              }\r\n+            });\r\n+        }\r\n+      });\r\n+    \r\n+      if (userLocation) {\r\n+        allMatchingItems = allMatchingItems.map(item => {\r\n+          if (item.coordinates && item.coordinates.lat && item.coordinates.lng) {\r\n+            try {\r\n+              const distanceInMeters = getDistance(\r\n+                { latitude: userLocation.latitude, longitude: userLocation.longitude },\r\n+                { latitude: item.coordinates.lat, longitude: item.coordinates.lng }\r\n+              );\r\n+              const distanceInMiles = (distanceInMeters / 1609.34).toFixed(1);\r\n+              \r\n+              return {\r\n+                ...item,\r\n+                distance: distanceInMeters,\r\n+                distanceInMiles,\r\n+                formattedDistance: `${distanceInMiles} mi`\r\n+              };\r\n+            } catch (e) {\r\n+              console.warn('Error calculating distance for item:', e);\r\n+              return item;\r\n+            }\r\n+          }\r\n+          return item;\r\n+        });\r\n+      }\r\n+    \r\n+      setSearchResults(allMatchingItems);\r\n+      setHasSearchResults(true);\r\n+      \r\n+      if (allMatchingItems.length === 0) {\r\n+        setError(`No items found matching \"${searchTerm}\"`);\r\n+      }\r\n+    } catch (error) {\r\n+      console.error('Error searching items:', error);\r\n+      setError('Failed to search items. Please try again later.');\r\n+    } finally {\r\n+      setIsSearching(false);\r\n+    }\r\n+  };\r\n+\r\n+\r\n+  // Handle featured search\r\n+  const handleFeaturedSearch = () => {\r\n+    if (featuredSearchTerm.trim()) {\r\n+      searchFeaturedItems(featuredSearchTerm);\r\n+    }\r\n+  };\r\n+\r\n+  const handleRowScroll = (categoryName, rowNumber, scrollLeft) => {\r\n+  const row1Id = `${categoryName}-row1`;\r\n+  const row2Id = `${categoryName}-row2`;\r\n+  \r\n+  const row1Element = document.getElementById(row1Id);\r\n+  const row2Element = document.getElementById(row2Id);\r\n+  \r\n+  if (rowNumber === 1 && row2Element) {\r\n+    row2Element.scrollLeft = scrollLeft;\r\n+  } else if (rowNumber === 2 && row1Element) {\r\n+    row1Element.scrollLeft = scrollLeft;\r\n+  }\r\n+};\r\n+\r\n+  const handleClearFeaturedSearch = () => {\r\n+    setFeaturedSearchTerm('');\r\n+    setSearchResults([]);\r\n+    setHasSearchResults(false);\r\n+    setError(null);\r\n+  };\r\n+\r\n+  // Fetch nearby items\r\n+  const fetchNearbyItems = async () => {\r\n+    if (!userLocation) {\r\n+      setError('Location information is not available');\r\n+      setSearching(false);\r\n+      return;\r\n+    }\r\n+  \r\n+    try {\r\n+      setLoading(true);\r\n+      const shopsRef = collection(db, 'shops');\r\n+      const snapshot = await getDocs(shopsRef);\r\n+      \r\n+      let itemsInRadius = [];\r\n+      const currentUserId = user?.uid;\r\n+      \r\n+      snapshot.docs.forEach(doc => {\r\n+        const shopData = doc.data();\r\n+        \r\n+        if (doc.id === currentUserId) {\r\n+          return;\r\n+        }\r\n+        \r\n+        if (shopData?.items && Array.isArray(shopData.items)) {\r\n+          shopData.items\r\n+            .filter(item => !item.deleted)\r\n+            .forEach(item => {\r\n+              let itemCoords = item.coordinates;\r\n+              if (!itemCoords && item.address) {\r\n+                const coordsMatch = item.address.match(/^(-?\\d+\\.?\\d*),\\s*(-?\\d+\\.?\\d*)$/);\r\n+                if (coordsMatch) {\r\n+                  itemCoords = {\r\n+                    lat: parseFloat(coordsMatch[1]),\r\n+                    lng: parseFloat(coordsMatch[2])\r\n+                  };\r\n+                }\r\n+              }\r\n+  \r\n+              if (itemCoords?.lat && itemCoords?.lng) {\r\n+                try {\r\n+                  const distanceInMeters = getDistance(\r\n+                    { latitude: userLocation.latitude, longitude: userLocation.longitude },\r\n+                    { latitude: itemCoords.lat, longitude: itemCoords.lng }\r\n+                  );\r\n+  \r\n+                  const distanceInMiles = (distanceInMeters / 1609.34).toFixed(1);\r\n+                  \r\n+                  itemsInRadius.push({\r\n+                    ...item,\r\n+                    shopId: doc.id,\r\n+                    shopName: shopData.name || 'Unknown Shop',\r\n+                    coordinates: itemCoords,\r\n+                    distance: distanceInMeters,\r\n+                    distanceInMiles,\r\n+                    formattedDistance: `${distanceInMiles} mi`,\r\n+                    theme: shopData.theme\r\n+                  });\r\n+                } catch (e) {\r\n+                  console.warn('Error calculating distance for item:', e);\r\n+                }\r\n+              }\r\n+            });\r\n+        }\r\n+      });\r\n+  \r\n+      itemsInRadius.sort((a, b) => a.distance - b.distance);\r\n+      itemsInRadius = itemsInRadius.slice(0, 10);\r\n+  \r\n+      setNearbyItems(itemsInRadius);\r\n+      setHasSearched(true);\r\n+      \r\n+      if (itemsInRadius.length === 0) {\r\n+        setError('No items found in your area');\r\n+      }\r\n+    } catch (error) {\r\n+      console.error('Error fetching nearby items:', error);\r\n+      setError('Failed to load nearby items. Please try again later.');\r\n+    } finally {\r\n+      setLoading(false);\r\n+      setSearching(false);\r\n+    }\r\n+  };\r\n+\r\n+  // Handle live location\r\n+  const handleLiveLocation = () => {\r\n+    setSearching(true);\r\n+    setError(null);\r\n+    \r\n+    if (userLocation) {\r\n+      fetchNearbyItems();\r\n+      setHasSearched(true);\r\n+    } else {\r\n+      requestLocation();\r\n+    }\r\n+  };\r\n+\r\n+  // Handle address search\r\n+  const handleAddressSearch = async () => {\r\n+    if (!searchAddress.trim()) {\r\n+      setError('Please enter an address');\r\n+      return;\r\n+    }\r\n+  \r\n+    setSearching(true);\r\n+    setError(null);\r\n+    setHasSearched(true);\r\n+    \r\n+    try {\r\n+      const encodedAddress = encodeURIComponent(searchAddress);\r\n+      const response = await fetch(\r\n+        `https://nominatim.openstreetmap.org/search?q=${encodedAddress}&format=json&limit=1`,\r\n+        {\r\n+          headers: {\r\n+            'Accept': 'application/json',\r\n+            'User-Agent': 'KalKode Marketplace'\r\n+          }\r\n+        }\r\n+      );\r\n+      \r\n+      const data = await response.json();\r\n+  \r\n+      if (data && data[0]) {\r\n+        const coordinates = {\r\n+          latitude: parseFloat(data[0].lat),\r\n+          longitude: parseFloat(data[0].lon)\r\n+        };\r\n+        \r\n+        await fetchNearbyItems(coordinates);\r\n+      } else {\r\n+        throw new Error('Location not found. Please try a different address.');\r\n+      }\r\n+  \r\n+    } catch (error) {\r\n+      console.error('Error searching address:', error);\r\n+      setError(error.message || 'Unable to search this location. Please try again.');\r\n+    } finally {\r\n+      setSearching(false);\r\n+    }\r\n+  };\r\n+\r\n+  // Handle item click\r\n+  const handleItemClick = (item) => {\r\n+    setZoomedItem(item);\r\n+    setOrderQuantity(1);\r\n+    setCurrentImageIndex(0); // Reset image index\r\n+    \r\n+    const scrollY = window.scrollY;\r\n+    document.body.style.position = 'fixed';\r\n+    document.body.style.top = `-${scrollY}px`;\r\n+    document.body.style.width = '100%';\r\n+    document.body.style.overflow = 'hidden';\r\n+    \r\n+    document.body.setAttribute('data-scroll-y', scrollY);\r\n+  };\r\n+\r\n+  // Handle close zoom\r\n+  const handleCloseZoom = () => {\r\n+    setZoomedItem(null);\r\n+    setCurrentImageIndex(0);\r\n+    \r\n+    const scrollY = document.body.getAttribute('data-scroll-y') || '0';\r\n+    document.body.style.position = '';\r\n+    document.body.style.top = '';\r\n+    document.body.style.width = '';\r\n+    document.body.style.overflow = '';\r\n+    document.body.removeAttribute('data-scroll-y');\r\n+    \r\n+    window.scrollTo(0, parseInt(scrollY));\r\n+  };\r\n+\r\n+  // Adjust quantity\r\n+  const adjustQuantity = (delta) => {\r\n+    const maxQuantity = parseInt(zoomedItem?.quantity) || 1;\r\n+    const newQuantity = Math.max(1, Math.min(maxQuantity, orderQuantity + delta));\r\n+    setOrderQuantity(newQuantity);\r\n+  };\r\n+\r\n+  // Handle direct order\r\n+  const handleDirectOrder = async () => {\r\n+    if (!zoomedItem) return;\r\n+    \r\n+    if (!isAuthenticated) {\r\n+       navigate('/auth', { \r\n+        state: { \r\n+          mode: 'login',\r\n+          from: window.location.pathname\r\n+        }\r\n+      });\r\n+       return;\r\n+     }\r\n+    \r\n+    try {\r\n+      const result = await TransactionService.initiateQuantityTransaction(\r\n+        zoomedItem.id,\r\n+        zoomedItem.shopId,\r\n+        parseFloat(zoomedItem.price),\r\n+        orderQuantity,\r\n+        'inperson'\r\n+      );\r\n+      \r\n+      if (result.transactionId) {\r\n+        handleCloseZoom();\r\n+        navigate(`/messages?chat=${result.transactionId}`);\r\n+      }\r\n+    } catch (error) {\r\n+      console.error('Error placing order:', error);\r\n+      alert('Error placing order: ' + error.message);\r\n+    }\r\n+  };\r\n+\r\n+  // Handle order click\r\n+  const handleOrderClick = (item) => {\r\n+    setSelectedChatItem(item);\r\n+    setChatOpen(true);\r\n+    \r\n+    if (zoomedItem) {\r\n+      setZoomedItem(null);\r\n+      const scrollY = document.body.getAttribute('data-scroll-y') || '0';\r\n+      document.body.style.position = '';\r\n+      document.body.style.top = '';\r\n+      document.body.style.width = '';\r\n+      document.body.style.overflow = '';\r\n+      document.body.removeAttribute('data-scroll-y');\r\n+      window.scrollTo(0, parseInt(scrollY));\r\n+    }\r\n+  };\r\n+\r\n+  // Handle close chat\r\n+  const handleCloseChat = () => {\r\n+    setChatOpen(false);\r\n+    setSelectedChatItem(null);\r\n+    \r\n+    document.body.style.position = '';\r\n+    document.body.style.top = '';\r\n+    document.body.style.width = '';\r\n+    document.body.style.overflow = '';\r\n+    document.body.removeAttribute('data-scroll-y');\r\n+  };\r\n+\r\n+  // Handle inquire click\r\n+  const handleInquireClick = () => {\r\n+    alert('Inquiry feature coming soon!');\r\n+  };\r\n+\r\n+  // Handle logout\r\n+  const handleLogout = async () => {\r\n+    try {\r\n+      await signOut(auth);\r\n+      navigate('/');\r\n+    } catch (error) {\r\n+      console.error('Error signing out:', error);\r\n+    }\r\n+  };\r\n+\r\n+  // Handle login\r\n+  const handleLogin = () => {\r\n+    navigate('/auth', { \r\n+      state: { \r\n+        mode: 'login',\r\n+        from: window.location.pathname\r\n+      }\r\n+    });\r\n+  };\r\n+\r\n+  // Effects\r\n+  useEffect(() => {\r\n+    const fetchShopData = async () => {\r\n+      if (user && user.uid) {\r\n+        try {\r\n+          const data = await getShopData(user.uid);\r\n+          setShopData(data);\r\n+        } catch (error) {\r\n+          console.error('Error fetching shop data:', error);\r\n+        }\r\n+      }\r\n+    };\r\n+    \r\n+    if (isAuthenticated) {\r\n+      fetchShopData();\r\n+    }\r\n+  }, [user, isAuthenticated]);\r\n+\r\n+  useEffect(() => {\r\n+    if (isAuthenticated) {\r\n+      const randomIndex = Math.floor(Math.random() * MOTIVATIONAL_MESSAGES.length);\r\n+      setMotivationalMessage(MOTIVATIONAL_MESSAGES[randomIndex]);\r\n+    }\r\n+  }, [isAuthenticated]);\r\n+\r\n+  useEffect(() => {\r\n+    const pinnedStyleId = localStorage.getItem('pinnedStyleId');\r\n+    \r\n+    if (pinnedStyleId) {\r\n+      const pinnedStyle = Object.values(WELCOME_STYLES).find(\r\n+        style => style.id.toString() === pinnedStyleId\r\n+      );\r\n+      \r\n+      if (pinnedStyle) {\r\n+        setCurrentStyle(pinnedStyle);\r\n+        setIsPinned(true);\r\n+        return;\r\n+      }\r\n+    }\r\n+    \r\n+    const styles = Object.values(WELCOME_STYLES);\r\n+    const randomStyle = styles[Math.floor(Math.random() * styles.length)];\r\n+    setCurrentStyle(randomStyle);\r\n+  }, []);\r\n+\r\n+  useEffect(() => {\r\n+    if (activeTab === 'nearby' && userLocation) {\r\n+      fetchNearbyItems();\r\n+      setHasSearched(true);\r\n+    }\r\n+  }, [activeTab, userLocation]);\r\n+\r\n+  useEffect(() => {\r\n+    if (locationPermission === 'pending') {\r\n+      requestLocation();\r\n+    }\r\n+  }, []);\r\n+\r\n+  useEffect(() => {\r\n+    if (userLocation) {\r\n+      if (activeTab === 'nearby') {\r\n+        fetchNearbyItems();\r\n+        setHasSearched(true);\r\n+      }\r\n+      \r\n+      if (activeTab === 'featured') {\r\n+        loadCategorizedItems();\r\n+      }\r\n+      \r\n+      setUpdatingLocation(false);\r\n+    }\r\n+  }, [userLocation, activeTab]);\r\n+\r\n+  useEffect(() => {\r\n+  const loadTabContent = async () => {\r\n+    console.log('📑 Loading tab content...', { activeTab, effectiveLocation });\r\n+    \r\n+    try {\r\n+      setLoading(true);\r\n+      setError(null);\r\n+  \r\n+      switch (activeTab) {\r\n+        case 'featured':\r\n+          // ✅ Wait for effectiveLocation before loading items\r\n+          if (effectiveLocation) {\r\n+            console.log('📦 Loading featured items...');\r\n+            await loadCategorizedItems();\r\n+          } else {\r\n+            console.log('⏳ Waiting for location...');\r\n+            setLoading(false);\r\n+          }\r\n+          return;\r\n+        case 'nearby':\r\n+          setLoading(false);\r\n+          break;\r\n+        case 'media':\r\n+          setLoading(false);\r\n+          break;\r\n+        default:\r\n+          setLoading(false);\r\n+      }\r\n+    } catch (error) {\r\n+      console.error('Error loading content:', error);\r\n+      setError('Failed to load content. Please try again later.');\r\n+      setLoading(false);\r\n+    }\r\n+  };\r\n+\r\n+  loadTabContent();\r\n+}, [activeTab, user?.uid, effectiveLocation]); // ✅ Added effectiveLocation dependency\r\n+\r\n+  useEffect(() => {\r\n+    if (activeTab === 'featured') {\r\n+      loadCategorizedItems();\r\n+    }\r\n+    \r\n+    const refreshInterval = setInterval(() => {\r\n+      if (activeTab === 'featured') {\r\n+        loadCategorizedItems();\r\n+      }\r\n+    }, 300000);\r\n+\r\n+    return () => clearInterval(refreshInterval);\r\n+  }, [activeTab, currentPage]);\r\n+\r\n+  // Ping animation effect (disabled on mobile for performance)\r\n+  useEffect(() => {\r\n+    if (window.innerWidth < 768) return;\r\n+    \r\n+    const container = document.querySelector('.page-container');\r\n+    if (!container) return;\r\n+\r\n+    const createPing = () => {\r\n+      const ping = document.createElement('div');\r\n+      ping.className = 'ping';\r\n+      \r\n+      ping.style.left = `${Math.random() * 100}%`;\r\n+      ping.style.top = `${Math.random() * 100}%`;\r\n+      ping.style.zIndex = '0';\r\n+      \r\n+      container.appendChild(ping);\r\n+      \r\n+      setTimeout(() => {\r\n+        if (ping && ping.parentNode) {\r\n+          ping.remove();\r\n+        }\r\n+      }, 3000);\r\n+    };\r\n+\r\n+    const createPingGroup = (count) => {\r\n+      for (let i = 0; i < count; i++) {\r\n+        setTimeout(() => {\r\n+          createPing();\r\n+        }, i * 200);\r\n+      }\r\n+    };\r\n+\r\n+    const pingCounts = [10, 30, 20];\r\n+    let currentIndex = 0;\r\n+\r\n+    const interval = setInterval(() => {\r\n+      const count = pingCounts[currentIndex];\r\n+      createPingGroup(count);\r\n+      currentIndex = (currentIndex + 1) % pingCounts.length;\r\n+    }, 3000);\r\n+    \r\n+    return () => {\r\n+      clearInterval(interval);\r\n+      const pings = container.getElementsByClassName('ping');\r\n+      while (pings.length > 0) {\r\n+        pings[0].remove();\r\n+      }\r\n+    };\r\n+  }, []);\r\n+\r\n+  // Cleanup on unmount\r\n+  useEffect(() => {\r\n+    return () => {\r\n+      document.body.style.position = '';\r\n+      document.body.style.top = '';\r\n+      document.body.style.width = '';\r\n+      document.body.style.overflow = '';\r\n+      document.body.removeAttribute('data-scroll-y');\r\n+      \r\n+      if (sliderAnimationRef.current) {\r\n+        cancelAnimationFrame(sliderAnimationRef.current);\r\n+      }\r\n+    };\r\n+  }, []);\r\n+\r\n+  if (!currentStyle) return null;\r\n+\r\n+  return (\r\n+    <PageContainer className=\"page-container\" theme={currentStyle}>\r\n+      <ThemeDecorations theme={currentStyle} />\r\n+      <Header theme={currentStyle}>\r\n+        <Logo onClick={() => navigate('/')} theme={currentStyle}>\r\n+          KALKODE\r\n+        </Logo>\r\n+\r\n+        <HeaderControls>\r\n+          <HeaderButton \r\n+            onClick={refreshTheme}\r\n+            theme={currentStyle}\r\n+            title=\"Random theme\"\r\n+          >\r\n+            <RefreshCw size={20} className={isRefreshing ? \"spinning\" : \"\"} />\r\n+          </HeaderButton>\r\n+          \r\n+          <HeaderButton \r\n+            onClick={togglePinStyle} \r\n+            theme={currentStyle}\r\n+            className={isPinned ? \"pinned\" : \"\"}\r\n+            title={isPinned ? \"Unpin theme\" : \"Pin theme\"}\r\n+          >\r\n+            <Pin size={20} fill={isPinned ? currentStyle.colors.accent : \"none\"} />\r\n+          </HeaderButton>\r\n+          \r\n+          {isAuthenticated && (\r\n+            <HeaderButton \r\n+              onClick={handleLogout}\r\n+              theme={currentStyle}\r\n+              title=\"Logout\"\r\n+            >\r\n+              <LogOut size={20} />\r\n+            </HeaderButton>\r\n+          )}\r\n+        </HeaderControls>\r\n+      </Header>\r\n+\r\n+      <MainContent isAuthenticated={isAuthenticated}>\r\n+        <WelcomeSection theme={currentStyle}>\r\n+          {isAuthenticated && shopData ? (\r\n+            <>\r\n+              <ProfileSection>\r\n+                <ProfileImage theme={currentStyle}>\r\n+                  {shopData.profile ? (\r\n+                    <img src={shopData.profile} alt={shopData.name || 'Shop Profile'} />\r\n+                  ) : (\r\n+                    <div style={{ \r\n+                      width: '100%', \r\n+                      height: '100%', \r\n+                      background: currentStyle?.colors?.accent || '#800000',\r\n+                      display: 'flex',\r\n+                      alignItems: 'center',\r\n+                      justifyContent: 'center',\r\n+                      color: '#fff',\r\n+                      fontSize: '2rem'\r\n+                    }}>\r\n+                      {(shopData.name?.charAt(0) || user.email?.charAt(0) || 'S').toUpperCase()}\r\n+                    </div>\r\n+                  )}\r\n+                </ProfileImage>\r\n+                <ShopName theme={currentStyle}>{shopData.name || 'My Shop'}</ShopName>\r\n+              </ProfileSection>         \r\n+\r\n+              <MotivationalMessage theme={currentStyle}>\r\n+                {motivationalMessage}\r\n+              </MotivationalMessage>\r\n+            </>\r\n+          ) : (\r\n+            <>\r\n+              <h1>Welcome to KalKode</h1>\r\n+              <p>Trade With Your Community.</p>\r\n+\r\n+              <ActionButtonContainer>\r\n+                <ActionButton theme={currentStyle} onClick={handleOpenShop}>\r\n+                  Open Up Shop\r\n+                </ActionButton>\r\n+                <ActionButton \r\n+                  theme={currentStyle}\r\n+                  onClick={handleLogin}\r\n+                  variant=\"outline\"\r\n+                >\r\n+                  Sign In\r\n+                </ActionButton>\r\n+              </ActionButtonContainer>\r\n+            </>\r\n+          )}\r\n+\r\n+\r\n+        </WelcomeSection>\r\n+\r\n+        <TabContainer>\r\n+          <Tab \r\n+            theme={currentStyle}\r\n+            active={activeTab === 'featured'} \r\n+            onClick={() => setActiveTab('featured')}\r\n+          >\r\n+            <Package size={16} />\r\n+            Featured\r\n+          </Tab>\r\n+          <Tab\r\n+            theme={currentStyle} \r\n+            active={activeTab === 'nearby'} \r\n+            onClick={() => setActiveTab('nearby')}\r\n+          >\r\n+            <Navigation size={16} />\r\n+            Nearby\r\n+          </Tab>\r\n+          <Tab\r\n+            theme={currentStyle} \r\n+            active={activeTab === 'media'} \r\n+            onClick={() => setActiveTab('media')}\r\n+          >\r\n+            <Film size={16} />\r\n+            Media\r\n+          </Tab>\r\n+        </TabContainer>\r\n+\r\n+\r\n+        <LocationIndicator2 theme={currentStyle} isPinned={isCityPinned}>\r\n+          <button \r\n+            className=\"location-icon-btn\"\r\n+            onClick={handleLocationToCity}\r\n+            disabled={isConvertingToCity}\r\n+            title=\"Get region from current location\"\r\n+          >\r\n+            {isConvertingToCity ? (\r\n+              <div className=\"updating-spinner\" />\r\n+            ) : (\r\n+              <Navigation size={20} />\r\n+            )}\r\n+          </button>\r\n+          \r\n+          <input\r\n+            type=\"text\"\r\n+            className=\"location-input\"\r\n+            value={cityInputValue}\r\n+            onChange={(e) => setCityInputValue(e.target.value)}\r\n+            placeholder={\r\n+              isIPLocation ? \r\n+                `${effectiveLocation?.city || 'Location'} (IP-based)` : \r\n+                cityRegion ? cityRegion : \"Click location icon to share\"\r\n+            }\r\n+            readOnly\r\n+          />\r\n+\r\n+          <button\r\n+            className=\"pin-icon-btn\"\r\n+            onClick={handleToggleCityPin}\r\n+            disabled={!cityRegion || cityRegion === 'Not available' || cityRegion === 'Error'}\r\n+            title={isCityPinned ? \"Unpin location\" : \"Pin location\"}\r\n+          >\r\n+            <Pin \r\n+              size={18} \r\n+              fill={isCityPinned ? currentStyle.colors.accent : \"none\"}\r\n+            />\r\n+          </button>\r\n+        </LocationIndicator2>\r\n+\r\n+\r\n+        {/* Nearby Items Tab */}\r\n+        {activeTab === 'nearby' && (\r\n+          <>\r\n+            <SearchContainer>\r\n+              <SearchInput\r\n+                type=\"text\"\r\n+                placeholder=\"Enter address or ZIP code...\"\r\n+                value={searchAddress}\r\n+                onChange={(e) => setSearchAddress(e.target.value)}\r\n+                onKeyPress={(e) => e.key === 'Enter' && handleAddressSearch()}\r\n+              />\r\n+              <SearchButtonGroup>\r\n+                <SearchButton \r\n+                  onClick={handleAddressSearch}\r\n+                  disabled={searching || !searchAddress.trim()}\r\n+                >\r\n+                  <Navigation size={16} />\r\n+                  Search\r\n+                </SearchButton>\r\n+                <SearchButton \r\n+                  onClick={handleLiveLocation}\r\n+                  disabled={searching}\r\n+                  variant=\"live\"\r\n+                >\r\n+                  <Navigation size={16} />\r\n+                  Current\r\n+                </SearchButton>\r\n+              </SearchButtonGroup>\r\n+            </SearchContainer>\r\n+\r\n+            <GridContainer>\r\n+              {error ? (\r\n+                <EmptyGridMessage>\r\n+                  <h3>Oops!</h3>\r\n+                  <p>{error}</p>\r\n+                </EmptyGridMessage>\r\n+              ) : loading ? (\r\n+                <div style={{ textAlign: 'center', gridColumn: '1/-1' }}>\r\n+                  <LoadingSpinner />\r\n+                </div>\r\n+              ) : !hasSearched ? (\r\n+                <EmptyGridMessage>\r\n+                  <h3>Find Items Near You</h3>\r\n+                  <p>Enter your address or use current location to discover items in your area</p>\r\n+                </EmptyGridMessage>\r\n+              ) : nearbyItems.length === 0 ? (\r\n+                <EmptyGridMessage>\r\n+                  <h3>No Items Found</h3>\r\n+                  <p>No items found in this location. Try searching a different area.</p>\r\n+                </EmptyGridMessage>\r\n+              ) : (              \r\n+                nearbyItems.map(item => (\r\n+                  <FeaturedItem \r\n+                    key={`${item.shopId}-${item.id}`} \r\n+                    item={{\r\n+                      ...item,\r\n+                      location: item.formattedDistance\r\n+                    }}\r\n+                    showDistance={true}\r\n+                    theme={currentStyle}\r\n+                    onItemClick={handleItemClick}\r\n+                  />\r\n+                ))\r\n+              )}\r\n+            </GridContainer>\r\n+          </>\r\n+        )}\r\n+\r\n+        {/* Featured Items Tab */}\r\n+        {activeTab === 'featured' && (\r\n+          <>\r\n+            {/* Search container with Filter */}\r\n+            <SearchContainer>\r\n+              <SearchInput\r\n+                type=\"text\"\r\n+                placeholder=\"Search for items...\"\r\n+                value={featuredSearchTerm}\r\n+                onChange={(e) => setFeaturedSearchTerm(e.target.value)}\r\n+                onKeyPress={(e) => e.key === 'Enter' && handleFeaturedSearch()}\r\n+              />\r\n+              <SearchButtonGroup>\r\n+                <SearchButton \r\n+                  onClick={handleFeaturedSearch}\r\n+                  disabled={isSearching || !featuredSearchTerm.trim()}\r\n+                >\r\n+                  <Search size={16} />\r\n+                  Search\r\n+                </SearchButton>\r\n+                {hasSearchResults && (\r\n+                  <SearchButton onClick={handleClearFeaturedSearch} variant=\"live\">\r\n+                    <X size={16} />\r\n+                    Clear\r\n+                  </SearchButton>\r\n+                )}\r\n+\r\n+                {/* Filter Button */}\r\n+                <SortContainer className=\"sort-container\">\r\n+                  <SearchButton \r\n+                    onClick={() => setSortMenuOpen(!sortMenuOpen)}\r\n+                    style={{ position: 'relative' }}\r\n+                  >\r\n+                    <Filter size={16} />\r\n+                    {sortBy !== 'recent' && (\r\n+                      <div style={{\r\n+                        position: 'absolute',\r\n+                        top: '4px',\r\n+                        right: '4px',\r\n+                        width: '6px',\r\n+                        height: '6px',\r\n+                        borderRadius: '50%',\r\n+                        background: currentStyle?.colors?.accent || '#800000'\r\n+                      }} />\r\n+                    )}\r\n+                  </SearchButton>\r\n+                  \r\n+                  <SortDropdown theme={currentStyle} isOpen={sortMenuOpen}>\r\n+                    <div style={{\r\n+                      padding: '0.5rem 1rem 0.75rem',\r\n+                      fontSize: '0.75rem',\r\n+                      fontWeight: '700',\r\n+                      textTransform: 'uppercase',\r\n+                      letterSpacing: '1px',\r\n+                      color: currentStyle?.colors?.accent || '#800000',\r\n+                      borderBottom: `2px solid ${currentStyle?.colors?.accent || '#800000'}`,\r\n+                      marginBottom: '0.75rem',\r\n+                      fontFamily: currentStyle?.fonts?.heading || 'inherit'\r\n+                    }}>\r\n+                      Sort By\r\n+                    </div>\r\n+\r\n+                    <SortOption \r\n+                      theme={currentStyle}\r\n+                      active={sortBy === 'recent'}\r\n+                      onClick={() => {\r\n+                        if (!userLocation) {\r\n+                          requestLocation();\r\n+                          return;\r\n+                        }\r\n+                        setSortBy('recent');\r\n+                        setSortMenuOpen(false);\r\n+                        loadCategorizedItems();\r\n+                      }}\r\n+                    >\r\n+                      <Package size={16} />\r\n+                      <div style={{ display: 'flex', flexDirection: 'column', flex: 1 }}>\r\n+                        <span>Most Recent</span>\r\n+                        <span style={{ \r\n+                          fontSize: '0.7rem', \r\n+                          opacity: 0.7,\r\n+                          fontWeight: '400'\r\n+                        }}>\r\n+                          Within 30 miles\r\n+                        </span>\r\n+                      </div>\r\n+                      {!userLocation && (\r\n+                        <span style={{ \r\n+                          fontSize: '0.65rem', \r\n+                          opacity: 0.6,\r\n+                          marginLeft: 'auto',\r\n+                          fontStyle: 'italic'\r\n+                        }}>\r\n+                          (needs location)\r\n+                        </span>\r\n+                      )}\r\n+                    </SortOption>\r\n+                    \r\n+                    <SortOption \r\n+                      theme={currentStyle}\r\n+                      active={sortBy === 'proximity'}\r\n+                      onClick={() => {\r\n+                        if (!userLocation) {\r\n+                          requestLocation();\r\n+                        }\r\n+                        setSortBy('proximity');\r\n+                        setSortMenuOpen(false);\r\n+                        loadCategorizedItems();\r\n+                      }}\r\n+                    >\r\n+                      <Navigation size={16} />\r\n+                      <div style={{ display: 'flex', flexDirection: 'column', flex: 1 }}>\r\n+                        <span>Closest First</span>\r\n+                        <span style={{ \r\n+                          fontSize: '0.7rem', \r\n+                          opacity: 0.7,\r\n+                          fontWeight: '400'\r\n+                        }}>\r\n+                          No distance limit\r\n+                        </span>\r\n+                      </div>\r\n+                      {!userLocation && (\r\n+                        <span style={{ \r\n+                          fontSize: '0.65rem', \r\n+                          opacity: 0.6,\r\n+                          marginLeft: 'auto',\r\n+                          fontStyle: 'italic'\r\n+                        }}>\r\n+                          (needs location)\r\n+                        </span>\r\n+                      )}\r\n+                    </SortOption>\r\n+                    \r\n+                    <SortOption \r\n+                      theme={currentStyle}\r\n+                      active={sortBy === 'price-low'}\r\n+                      onClick={() => {\r\n+                        if (!userLocation) {\r\n+                          requestLocation();\r\n+                          return;\r\n+                        }\r\n+                        setSortBy('price-low');\r\n+                        setSortMenuOpen(false);\r\n+                        loadCategorizedItems();\r\n+                      }}\r\n+                    >\r\n+                      <span style={{ fontSize: '1rem', fontWeight: '600' }}>$</span>\r\n+                      <div style={{ display: 'flex', flexDirection: 'column', flex: 1 }}>\r\n+                        <span>Price: Low to High</span>\r\n+                        <span style={{ \r\n+                          fontSize: '0.7rem', \r\n+                          opacity: 0.7,\r\n+                          fontWeight: '400'\r\n+                        }}>\r\n+                          Within 30 miles\r\n+                        </span>\r\n+                      </div>\r\n+                      {!userLocation && (\r\n+                        <span style={{ \r\n+                          fontSize: '0.65rem', \r\n+                          opacity: 0.6,\r\n+                          marginLeft: 'auto',\r\n+                          fontStyle: 'italic'\r\n+                        }}>\r\n+                          (needs location)\r\n+                        </span>\r\n+                      )}\r\n+                    </SortOption>\r\n+                    \r\n+                    <SortOption \r\n+                      theme={currentStyle}\r\n+                      active={sortBy === 'price-high'}\r\n+                      onClick={() => {\r\n+                        if (!userLocation) {\r\n+                          requestLocation();\r\n+                          return;\r\n+                        }\r\n+                        setSortBy('price-high');\r\n+                        setSortMenuOpen(false);\r\n+                        loadCategorizedItems();\r\n+                      }}\r\n+                    >\r\n+                      <span style={{ fontSize: '1rem', fontWeight: '600' }}>$$$</span>\r\n+                      <div style={{ display: 'flex', flexDirection: 'column', flex: 1 }}>\r\n+                        <span>Price: High to Low</span>\r\n+                        <span style={{ \r\n+                          fontSize: '0.7rem', \r\n+                          opacity: 0.7,\r\n+                          fontWeight: '400'\r\n+                        }}>\r\n+                          Within 30 miles\r\n+                        </span>\r\n+                      </div>\r\n+                      {!userLocation && (\r\n+                        <span style={{ \r\n+                          fontSize: '0.65rem', \r\n+                          opacity: 0.6,\r\n+                          marginLeft: 'auto',\r\n+                          fontStyle: 'italic'\r\n+                        }}>\r\n+                          (needs location)\r\n+                        </span>\r\n+                      )}\r\n+                    </SortOption>\r\n+                  </SortDropdown>\r\n+                </SortContainer>\r\n+              </SearchButtonGroup>\r\n+            </SearchContainer>\r\n+\r\n+            {/* Show search results or default categorized view */}\r\n+            {hasSearchResults ? (\r\n+              <div>\r\n+                <CategoryHeader theme={currentStyle}>\r\n+                  <h2>Search Results ({searchResults.length})</h2>\r\n+                </CategoryHeader>\r\n+\r\n+                {error ? (\r\n+                  <EmptyGridMessage>\r\n+                    <h3>No Results Found</h3>\r\n+                    <p>{error}</p>\r\n+                  </EmptyGridMessage>\r\n+                ) : isSearching ? (\r\n+                  <div style={{ textAlign: 'center', padding: '2rem' }}>\r\n+                    <LoadingSpinner />\r\n+                  </div>\r\n+                ) : searchResults.length === 0 ? (\r\n+                  <EmptyGridMessage>\r\n+                    <h3>No Items Found</h3>\r\n+                    <p>No items match your search criteria.</p>\r\n+                  </EmptyGridMessage>\r\n+                ) : (\r\n+                  <GridContainer>\r\n+                    {searchResults.map(item => (\r\n+                      <FeaturedItem \r\n+                        key={`search-${item.shopId}-${item.id}`} \r\n+                        item={item}\r\n+                        theme={currentStyle}\r\n+                        onItemClick={handleItemClick}\r\n+                        showDistance={true}\r\n+                      />\r\n+                    ))}\r\n+                  </GridContainer>\r\n+                )}\r\n+              </div>\r\n+            ) : (\r\n+              <div>\r\n+                {/* Featured Items Slider */}\r\n+                <CategoryHeader theme={currentStyle}>\r\n+                  <h2>Featured Items</h2>\r\n+                  <span className=\"view-all\">\r\n+                    {featuredItems.length} items\r\n+                  </span>\r\n+                </CategoryHeader>\r\n+\r\n+                <CategoryGridWrapper>\r\n+                {/* Desktop: Show all items in grid */}\r\n+                <div className=\"desktop-grid\" style={{ display: 'contents' }}>\r\n+                  {featuredItems.map(item => (\r\n+                    <div key={`featured-${item.shopId}-${item.id}`} className=\"desktop-only\" \r\n+                         style={{ display: window.innerWidth > 768 ? 'block' : 'none' }}>\r\n+                      <FeaturedItem\r\n+                        item={item}\r\n+                        theme={currentStyle}\r\n+                        onItemClick={handleItemClick}\r\n+                        showDistance={true}\r\n+                      />\r\n+                    </div>\r\n+                  ))}\r\n+                </div>\r\n+                \r\n+                {/* Mobile: Show all 10 items in a 2-row scrollable grid */}\r\n+                <CategoryScrollableGrid theme={currentStyle} className=\"mobile-only\">\r\n+                  {featuredItems.map(item => (\r\n+                    <FeaturedItem\r\n+                      key={`featured-mobile-${item.shopId}-${item.id}`}\r\n+                      item={item}\r\n+                      theme={currentStyle}\r\n+                      onItemClick={handleItemClick}\r\n+                      showDistance={true}\r\n+                    />\r\n+                  ))}\r\n+                </CategoryScrollableGrid>\r\n+              </CategoryGridWrapper>\r\n+                \r\n+              {Object.entries(categories).map(([categoryName, items]) => {\r\n+          if (items.length === 0) return null;\r\n+                      \r\n+          return (\r\n+            <div key={categoryName} style={{ marginTop: '3rem' }}>\r\n+              <CategoryHeader theme={currentStyle}>\r\n+                <h2>{categoryName}</h2>\r\n+                <span className=\"view-all\">\r\n+                  {items.length} items\r\n+                </span>\r\n+              </CategoryHeader>\r\n+          \r\n+              <CategoryGridWrapper>\r\n+                {/* Desktop: Show all items in grid */}\r\n+                <div className=\"desktop-grid\" style={{ display: 'contents' }}>\r\n+                  {items.map(item => (\r\n+                    <div key={`${categoryName}-${item.shopId}-${item.id}`} className=\"desktop-only\"\r\n+                         style={{ display: window.innerWidth > 768 ? 'block' : 'none' }}>\r\n+                      <FeaturedItem\r\n+                        item={item}\r\n+                        theme={currentStyle}\r\n+                        onItemClick={handleItemClick}\r\n+                        showDistance={true}\r\n+                      />\r\n+                    </div>\r\n+                  ))}\r\n+                </div>\r\n+                \r\n+                {/* Mobile: Show all items in a scrollable grid (1 or 2 rows based on count) */}\r\n+                <CategoryScrollableGrid theme={currentStyle} className=\"mobile-only\" itemCount={items.length}>\r\n+                  {items.map(item => (\r\n+                    <FeaturedItem\r\n+                      key={`${categoryName}-mobile-${item.shopId}-${item.id}`}\r\n+                      item={item}\r\n+                      theme={currentStyle}\r\n+                      onItemClick={handleItemClick}\r\n+                      showDistance={true}\r\n+                    />\r\n+                  ))}\r\n+                </CategoryScrollableGrid>\r\n+              </CategoryGridWrapper>\r\n+            </div>\r\n+          );\r\n+        })}\r\n+              </div>\r\n+            )}\r\n+          </>\r\n+        )}\r\n+\r\n+        {/* Media Tab */}\r\n+        {activeTab === 'media' && (\r\n+          <EmptyGridMessage>\r\n+            <h3>Featured Media</h3>\r\n+            <p>Coming soon! Discover videos and content from local creators.</p>\r\n+          </EmptyGridMessage>\r\n+        )}\r\n+      </MainContent>\r\n+\r\n+      {/* Style Indicator Only */}\r\n+      <StyleIndicator theme={currentStyle}>\r\n+        <span className=\"style-number\">{currentStyle.id}</span>\r\n+        <span>{currentStyle.name}</span>\r\n+      </StyleIndicator>\r\n+\r\n+      {/* Zoomed Item View - Updated to match ShopPublicView */}\r\n+      {/* Zoomed Item View - 75/25 Split */}\r\n+      {/* Zoomed Item View - 70/30 Split with 2:5 Card */}\r\n+      {zoomedItem && (\r\n+        <ZoomOverlay onClick={handleCloseZoom} theme={currentStyle}>\r\n+          <ZoomContainer \r\n+            theme={currentStyle}\r\n+            onClick={(e) => e.stopPropagation()}\r\n+          >\r\n+            {/* 70% - Image Carousel */}\r\n+            <ImageCarousel \r\n+              theme={currentStyle} \r\n+              currentIndex={currentImageIndex}\r\n+            >\r\n+              {/* Close button */}\r\n+              <button \r\n+                className=\"close-overlay-button\"\r\n+                onClick={handleCloseZoom}\r\n+                aria-label=\"Close\"\r\n+              >\r\n+                <X size={20} />\r\n+              </button>\r\n+            \r\n+              <div className=\"image-track\">\r\n+                {zoomedItem.images && zoomedItem.images.filter(Boolean).length > 0 ? (\r\n+                  zoomedItem.images.filter(Boolean).map((image, index) => (\r\n+                    <div key={index} className=\"image-slide\">\r\n+                      <img src={image} alt={`${zoomedItem.name} ${index + 1}`} />\r\n+                    </div>\r\n+                  ))\r\n+                ) : (\r\n+                  <div className=\"image-slide\">\r\n+                    <div className=\"no-image\">\r\n+                      <Package size={40} />\r\n+                      <p>No image</p>\r\n+                    </div>\r\n+                  </div>\r\n+                )}\r\n+              </div>\r\n+              \r\n+              {/* Navigation */}\r\n+              {zoomedItem.images && zoomedItem.images.filter(Boolean).length > 1 && (\r\n+                <>\r\n+                  <button \r\n+                    className=\"carousel-button prev\"\r\n+                    onClick={() => setCurrentImageIndex(prev => \r\n+                      prev === 0 ? zoomedItem.images.filter(Boolean).length - 1 : prev - 1\r\n+                    )}\r\n+                    aria-label=\"Previous\"\r\n+                  >\r\n+                    <ChevronLeft size={20} />\r\n+                  </button>\r\n+                  <button \r\n+                    className=\"carousel-button next\"\r\n+                    onClick={() => setCurrentImageIndex(prev => \r\n+                      prev === zoomedItem.images.filter(Boolean).length - 1 ? 0 : prev + 1\r\n+                    )}\r\n+                    aria-label=\"Next\"\r\n+                  >\r\n+                    <ChevronRight size={20} />\r\n+                  </button>\r\n+                  \r\n+                  <div className=\"carousel-dots\">\r\n+                    {zoomedItem.images.filter(Boolean).map((_, index) => (\r\n+                      <button\r\n+                        key={index}\r\n+                        className=\"dot\"\r\n+                        style={{ opacity: index === currentImageIndex ? 1 : 0.3 }}\r\n+                        onClick={() => setCurrentImageIndex(index)}\r\n+                        aria-label={`Image ${index + 1}`}\r\n+                      />\r\n+                    ))}\r\n+                  </div>\r\n+                </>\r\n+              )}\r\n+            </ImageCarousel>\r\n+            \r\n+            {/* 30% - Compact Details */}\r\n+            <ZoomContent theme={currentStyle}>\r\n+              {/* Name & Price Row */}\r\n+              <div style={{ \r\n+                display: 'flex', \r\n+                justifyContent: 'space-between', \r\n+                alignItems: 'baseline',\r\n+                gap: '0.75rem'\r\n+              }}>\r\n+                <h3 style={{\r\n+                  fontSize: '1.1rem',\r\n+                  margin: 0,\r\n+                  fontWeight: '600',\r\n+                  color: currentStyle?.colors?.text || '#FFFFFF',\r\n+                  flex: 1,\r\n+                  overflow: 'hidden',\r\n+                  textOverflow: 'ellipsis',\r\n+                  whiteSpace: 'nowrap'\r\n+                }}>\r\n+                  {zoomedItem.name}\r\n+                </h3>\r\n+                \r\n+                <div style={{\r\n+                  fontSize: '1.2rem',\r\n+                  fontWeight: 'bold',\r\n+                  color: currentStyle?.colors?.accent || '#800000',\r\n+                  whiteSpace: 'nowrap'\r\n+                }}>\r\n+                  ${parseFloat(zoomedItem.price || 0).toFixed(2)}\r\n+                </div>\r\n+              </div>\r\n+              \r\n+              {/* Info Row: Distance • Shop • Stock */}\r\n+              <div style={{\r\n+                display: 'flex',\r\n+                alignItems: 'center',\r\n+                gap: '0.75rem',\r\n+                fontSize: '0.75rem',\r\n+                flexWrap: 'wrap',\r\n+                color: currentStyle?.colors?.text || '#FFFFFF',\r\n+                opacity: 0.8\r\n+              }}>\r\n+                {zoomedItem.formattedDistance && (\r\n+                  <>\r\n+                    <div style={{ display: 'flex', alignItems: 'center', gap: '0.25rem' }}>\r\n+                      <Navigation size={11} />\r\n+                      <span>{zoomedItem.formattedDistance}</span>\r\n+                    </div>\r\n+                    <span>•</span>\r\n+                  </>\r\n+                )}\r\n+                \r\n+                {zoomedItem.shopName && (\r\n+                  <>\r\n+                    <div \r\n+                      style={{ \r\n+                        display: 'flex', \r\n+                        alignItems: 'center', \r\n+                        gap: '0.25rem',\r\n+                        cursor: 'pointer',\r\n+                        textDecoration: 'underline'\r\n+                      }}\r\n+                      onClick={(e) => {\r\n+                        e.stopPropagation();\r\n+                        navigate(`/shop/${zoomedItem.shopId}/view`);\r\n+                      }}\r\n+                    >\r\n+                      <Store size={11} />\r\n+                      <span>{zoomedItem.shopName}</span>\r\n+                    </div>\r\n+                    <span>•</span>\r\n+                  </>\r\n+                )}\r\n+                \r\n+                {zoomedItem.quantity !== undefined && (\r\n+                  <div style={{ display: 'flex', alignItems: 'center', gap: '0.25rem' }}>\r\n+                    <div style={{\r\n+                      width: '5px',\r\n+                      height: '5px',\r\n+                      borderRadius: '50%',\r\n+                      background: parseInt(zoomedItem.quantity) > 0 ? '#4CAF50' : '#FF5252'\r\n+                    }} />\r\n+                    <span style={{\r\n+                      color: parseInt(zoomedItem.quantity) > 0 ? '#4CAF50' : '#FF5252',\r\n+                      fontWeight: '500'\r\n+                    }}>\r\n+                      {parseInt(zoomedItem.quantity) > 0 ? \r\n+                        `${zoomedItem.quantity} in stock` : \r\n+                        'Out of stock'\r\n+                      }\r\n+                    </span>\r\n+                  </div>\r\n+                )}\r\n+              </div>\r\n+              \r\n+              {/* Quantity Selector */}\r\n+              <div style={{\r\n+                display: 'flex',\r\n+                alignItems: 'center',\r\n+                justifyContent: 'space-between',\r\n+                background: `${currentStyle?.colors?.surface || 'rgba(255, 255, 255, 0.05)'}20`,\r\n+                borderRadius: '6px',\r\n+                padding: '0.5rem 0.75rem'\r\n+              }}>\r\n+                <span style={{\r\n+                  fontSize: '0.8rem',\r\n+                  fontWeight: '600',\r\n+                  color: currentStyle?.colors?.text || '#FFFFFF'\r\n+                }}>\r\n+                  Qty\r\n+                </span>\r\n+                \r\n+                <div style={{ display: 'flex', alignItems: 'center', gap: '0.75rem' }}>\r\n+                  <button \r\n+                    onClick={() => adjustQuantity(-1)}\r\n+                    disabled={orderQuantity <= 1}\r\n+                    style={{\r\n+                      width: '24px',\r\n+                      height: '24px',\r\n+                      borderRadius: '50%',\r\n+                      border: `1.5px solid ${currentStyle?.colors?.accent || '#800000'}`,\r\n+                      background: 'transparent',\r\n+                      color: currentStyle?.colors?.accent || '#800000',\r\n+                      display: 'flex',\r\n+                      alignItems: 'center',\r\n+                      justifyContent: 'center',\r\n+                      cursor: orderQuantity <= 1 ? 'not-allowed' : 'pointer',\r\n+                      opacity: orderQuantity <= 1 ? 0.3 : 1\r\n+                    }}\r\n+                  >\r\n+                    <Minus size={12} />\r\n+                  </button>\r\n+                  \r\n+                  <div style={{\r\n+                    fontSize: '1rem',\r\n+                    fontWeight: 'bold',\r\n+                    color: currentStyle?.colors?.text || 'white',\r\n+                    minWidth: '24px',\r\n+                    textAlign: 'center'\r\n+                  }}>\r\n+                    {orderQuantity}\r\n+                  </div>\r\n+                \r\n+                  <button \r\n+                    onClick={() => adjustQuantity(1)}\r\n+                    disabled={orderQuantity >= parseInt(zoomedItem.quantity || 1)}\r\n+                    style={{\r\n+                      width: '24px',\r\n+                      height: '24px',\r\n+                      borderRadius: '50%',\r\n+                      border: `1.5px solid ${currentStyle?.colors?.accent || '#800000'}`,\r\n+                      background: 'transparent',\r\n+                      color: currentStyle?.colors?.accent || '#800000',\r\n+                      display: 'flex',\r\n+                      alignItems: 'center',\r\n+                      justifyContent: 'center',\r\n+                      cursor: orderQuantity >= parseInt(zoomedItem.quantity || 1) ? 'not-allowed' : 'pointer',\r\n+                      opacity: orderQuantity >= parseInt(zoomedItem.quantity || 1) ? 0.3 : 1\r\n+                    }}\r\n+                  >\r\n+                    <Plus size={12} />\r\n+                  </button>\r\n+                </div>\r\n+              </div>\r\n+                  \r\n+              {/* Order Button */}\r\n+              <button \r\n+                onClick={handleDirectOrder}\r\n+                disabled={parseInt(zoomedItem.quantity || 0) < 1 || orderQuantity > parseInt(zoomedItem.quantity || 0)}\r\n+                style={{\r\n+                  width: '100%',\r\n+                  padding: '0.75rem',\r\n+                  borderRadius: '8px',\r\n+                  border: 'none',\r\n+                  background: parseInt(zoomedItem.quantity || 0) < 1 ? \r\n+                    `${currentStyle?.colors?.accent || '#800000'}40` : \r\n+                    currentStyle?.colors?.accent || '#800000',\r\n+                  color: 'white',\r\n+                  fontSize: '0.9rem',\r\n+                  fontWeight: '600',\r\n+                  display: 'flex',\r\n+                  alignItems: 'center',\r\n+                  justifyContent: 'center',\r\n+                  gap: '0.5rem',\r\n+                  cursor: parseInt(zoomedItem.quantity || 0) < 1 ? 'not-allowed' : 'pointer',\r\n+                  transition: 'all 0.3s'\r\n+                }}\r\n+              >\r\n+                {parseInt(zoomedItem.quantity || 0) < 1 ? (\r\n+                  <>\r\n+                    <X size={16} />\r\n+                    Out of Stock\r\n+                  </>\r\n+                ) : (\r\n+                  <>\r\n+                    <ShoppingCart size={16} />\r\n+                    Order {orderQuantity > 1 && `${orderQuantity} `}· ${(parseFloat(zoomedItem.price || 0) * orderQuantity).toFixed(2)}\r\n+                  </>\r\n+                )}\r\n+              </button>\r\n+            </ZoomContent>\r\n+          </ZoomContainer>\r\n+        </ZoomOverlay>\r\n+      )}\r\n+\r\n+      {/* Chat Overlay */}\r\n+      <ChatOverlay isOpen={chatOpen} onClick={handleCloseChat} />\r\n+      \r\n+      {selectedChatItem && (\r\n+        <OrderChat \r\n+          isOpen={chatOpen} \r\n+          onClose={handleCloseChat} \r\n+          item={selectedChatItem}\r\n+          shopId={selectedChatItem.shopId}\r\n+          shopName={selectedChatItem.shopName}\r\n+          theme={currentStyle}\r\n+        />\r\n+      )}\r\n+    </PageContainer>\r\n+  );\r\n+};\r\n+\r\n+export default WelcomePage;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1759889832368,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1877,9 +1877,8 @@\n }, [sortMenuOpen]);\r\n \r\n // Add this function before the return statement in WelcomePage component\r\n \r\n-// Replace the applySorting function with this updated version:\r\n \r\n const applySorting = (items, sortType) => {\r\n   let sortedItems = [...items];\r\n   \r\n"
                },
                {
                    "date": 1759889858057,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,3640 @@\n+// src/pages/WelcomePage.js - Mobile-Optimized Version\r\n+import React from 'react';\r\n+import styled from 'styled-components';\r\n+import { useNavigate } from 'react-router-dom';\r\n+import { useEffect, useState, useRef } from 'react';\r\n+import { getFeaturedItems } from '../firebase/firebaseService';\r\n+import FeaturedItem from '../components/shop/FeaturedItem';\r\n+import { Search, Package, Navigation, Film, Filter, Store, Plus, Minus, Pin, ChevronLeft, ChevronRight, X, MessageCircle, ShoppingCart, RefreshCw, LogOut } from 'lucide-react';\r\n+import { getDistance } from 'geolib';\r\n+import OrderChat from '../components/Chat/OrderChat';\r\n+import { collection, getDocs } from 'firebase/firestore';\r\n+import { db, auth } from '../firebase/config';\r\n+import { WELCOME_STYLES } from '../theme/welcomeStyles';\r\n+import { getShopData } from '../firebase/firebaseService';\r\n+import { useAuth } from '../contexts/AuthContext';\r\n+import { useLocation } from '../contexts/LocationContext';\r\n+import LocationDialog from '../components/LocationDialog';\r\n+import ThemeDecorations from '../components/ThemeDecorations';\r\n+import { TransactionService } from '../services/TransactionService';\r\n+import { signOut } from 'firebase/auth';\r\n+\r\n+const getIPBasedLocation = async () => {\r\n+  try {\r\n+    console.log('🌐 Fetching IP-based location from ipapi.co...');\r\n+    const response = await fetch('https://ipapi.co/json/');\r\n+    \r\n+    if (!response.ok) {\r\n+      throw new Error(`HTTP error! status: ${response.status}`);\r\n+    }\r\n+    \r\n+    const data = await response.json();\r\n+    console.log('✅ IP Location data:', data);\r\n+    \r\n+    if (!data.latitude || !data.longitude) {\r\n+      throw new Error('Invalid location data received');\r\n+    }\r\n+    \r\n+    return {\r\n+      latitude: data.latitude,\r\n+      longitude: data.longitude,\r\n+      city: data.city,\r\n+      region: data.region,\r\n+      country: data.country_name,\r\n+      isIPBased: true\r\n+    };\r\n+  } catch (error) {\r\n+    console.error('❌ Error getting IP location:', error);\r\n+    \r\n+    // Fallback to a default location (Houston, TX)\r\n+    console.log('⚠️ Using fallback location: Houston, TX');\r\n+    return {\r\n+      latitude: 29.7604,\r\n+      longitude: -95.3698,\r\n+      city: 'Houston',\r\n+      region: 'Texas',\r\n+      country: 'United States',\r\n+      isIPBased: true,\r\n+      isFallback: true\r\n+    };\r\n+  }\r\n+};\r\n+\r\n+// Mobile-first styled components\r\n+const PageContainer = styled.div.attrs({ className: 'page-container' })`\r\n+  min-height: 100vh;\r\n+  background: ${props => props.theme?.colors?.background || '#000000'};\r\n+  color: ${props => props.theme?.colors?.text || '#FFFFFF'};\r\n+  position: relative;\r\n+  overflow: hidden;\r\n+  \r\n+  /* Mobile-optimized background effects */\r\n+  &::before {\r\n+    content: '';\r\n+    position: absolute;\r\n+    width: 100%;\r\n+    height: 100%;\r\n+    background: ${props => props.theme?.colors?.backgroundGradient || 'radial-gradient(circle at 20% 30%, rgba(128, 0, 0, 0.2) 0%, transparent 50%)'};\r\n+    opacity: 0.8;\r\n+    animation: ${props => props.theme?.animations?.backgroundAnimation || 'galaxySwirl 30s linear infinite'};\r\n+  }\r\n+\r\n+  /* Simplified stars for mobile performance */\r\n+  &::after {\r\n+    content: '';\r\n+    position: absolute;\r\n+    width: 100%;\r\n+    height: 100%;\r\n+    background-image: radial-gradient(circle 1px, ${props => props.theme?.colors?.text || '#FFF'} 1px, transparent 1px);\r\n+    background-size: 100px 100px;\r\n+    opacity: 0.05;\r\n+    \r\n+    @media (min-width: 768px) {\r\n+      background-size: 200px 200px;\r\n+      opacity: 0.1;\r\n+    }\r\n+  }\r\n+\r\n+  /* Reduced ping animations on mobile for performance */\r\n+  .ping {\r\n+    display: none;\r\n+    \r\n+    @media (min-width: 768px) {\r\n+      display: block;\r\n+      position: absolute;\r\n+      width: 2px;\r\n+      height: 2px;\r\n+      border-radius: 50%;\r\n+      background: ${props => props.theme?.colors?.accent || '#800000'};\r\n+      pointer-events: none;\r\n+      z-index: 0;\r\n+    }\r\n+  }\r\n+\r\n+  @keyframes galaxySwirl {\r\n+    0% { transform: rotate(0deg); }\r\n+    100% { transform: rotate(360deg); }\r\n+  }\r\n+`;\r\n+\r\n+// Simplified header with just logo and right-side controls\r\n+const Header = styled.header`\r\n+  width: 100%;\r\n+  height: 60px;\r\n+  padding: 0 1rem;\r\n+  display: flex;\r\n+  align-items: center;\r\n+  justify-content: space-between;\r\n+  background: ${props => `${props.theme?.colors?.headerBg || 'rgba(0, 0, 0, 0.9)'}F5`};\r\n+  backdrop-filter: blur(10px);\r\n+  border-bottom: 1px solid ${props => `${props.theme?.colors?.accent}4D` || 'rgba(128, 0, 0, 0.3)'};\r\n+  position: fixed;\r\n+  top: 0;\r\n+  z-index: 100;\r\n+\r\n+  @media (min-width: 768px) {\r\n+    height: 80px;\r\n+    padding: 0 2rem;\r\n+  }\r\n+`;\r\n+\r\n+const Logo = styled.div`\r\n+  color: ${props => props.theme?.colors?.accent || '#800000'};\r\n+  font-family: ${props => props.theme?.fonts?.heading || \"'Impact', sans-serif\"};\r\n+  font-size: 1.4rem;\r\n+  letter-spacing: 1px;\r\n+  transform: skew(-5deg);\r\n+  cursor: pointer;\r\n+  flex-shrink: 0;\r\n+\r\n+  @media (min-width: 768px) {\r\n+    font-size: 2rem;\r\n+    letter-spacing: 2px;\r\n+  }\r\n+`;\r\n+\r\n+const LocationIndicator2 = styled.div`\r\n+  display: flex;\r\n+  align-items: center;\r\n+  justify-content: center;\r\n+  gap: 0.75rem;\r\n+  background: ${props => `${props.theme?.colors?.surface || 'rgba(0, 0, 0, 0.4)'}CC`};\r\n+  backdrop-filter: blur(10px);\r\n+  padding: 0.75rem 1.5rem;\r\n+  border-radius: 25px;\r\n+  border: 1px solid ${props => `${props.theme?.colors?.accent}40` || 'rgba(128, 0, 0, 0.4)'};\r\n+  margin: 1.5rem auto;\r\n+  max-width: 500px;\r\n+  width: 90%;\r\n+  transition: all 0.3s ease;\r\n+  position: relative;\r\n+  \r\n+  @media (max-width: 768px) {\r\n+    width: 95%;\r\n+    padding: 0.6rem 1rem;\r\n+    gap: 0.5rem;\r\n+  }\r\n+  \r\n+  .location-icon-btn {\r\n+    background: transparent;\r\n+    border: none;\r\n+    color: ${props => props.theme?.colors?.accent || '#800000'};\r\n+    cursor: pointer;\r\n+    display: flex;\r\n+    align-items: center;\r\n+    justify-content: center;\r\n+    padding: 0.25rem;\r\n+    border-radius: 50%;\r\n+    transition: all 0.2s ease;\r\n+    flex-shrink: 0;\r\n+    \r\n+    &:hover {\r\n+      background: ${props => `${props.theme?.colors?.accent}20` || 'rgba(128, 0, 0, 0.2)'};\r\n+    }\r\n+    \r\n+    &:active {\r\n+      transform: scale(0.9);\r\n+    }\r\n+    \r\n+    &:disabled {\r\n+      opacity: 0.5;\r\n+      cursor: not-allowed;\r\n+    }\r\n+    \r\n+    svg {\r\n+      width: 20px;\r\n+      height: 20px;\r\n+      \r\n+      @media (max-width: 768px) {\r\n+        width: 18px;\r\n+        height: 18px;\r\n+      }\r\n+    }\r\n+  }\r\n+  \r\n+  .location-input {\r\n+    flex: 1;\r\n+    background: transparent;\r\n+    border: none;\r\n+    color: ${props => props.theme?.colors?.text || '#FFFFFF'};\r\n+    font-size: 0.95rem;\r\n+    outline: none;\r\n+    text-align: center;\r\n+    cursor: default;\r\n+    min-width: 0; /* Allow text to shrink */\r\n+    \r\n+    &::placeholder {\r\n+      color: ${props => `${props.theme?.colors?.text}50` || 'rgba(255, 255, 255, 0.5)'};\r\n+      font-style: italic;\r\n+    }\r\n+    \r\n+    @media (max-width: 768px) {\r\n+      font-size: 0.85rem;\r\n+    }\r\n+  }\r\n+  \r\n+  .updating-spinner {\r\n+    width: 16px;\r\n+    height: 16px;\r\n+    border: 2px solid ${props => `${props.theme?.colors?.accent}30` || 'rgba(128, 0, 0, 0.3)'};\r\n+    border-radius: 50%;\r\n+    border-top-color: ${props => props.theme?.colors?.accent || '#800000'};\r\n+    animation: spin 1s linear infinite;\r\n+  }\r\n+  \r\n+  .pin-icon-btn {\r\n+    background: transparent;\r\n+    border: none;\r\n+    color: ${props => props.theme?.colors?.accent || '#800000'};\r\n+    cursor: pointer;\r\n+    display: flex;\r\n+    align-items: center;\r\n+    justify-content: center;\r\n+    padding: 0.25rem;\r\n+    border-radius: 50%;\r\n+    transition: all 0.2s ease;\r\n+    opacity: ${props => props.isPinned ? 1 : 0.5};\r\n+    flex-shrink: 0;\r\n+    \r\n+    &:hover:not(:disabled) {\r\n+      background: ${props => `${props.theme?.colors?.accent}20` || 'rgba(128, 0, 0, 0.2)'};\r\n+      opacity: 1;\r\n+    }\r\n+    \r\n+    &:active:not(:disabled) {\r\n+      transform: scale(0.9);\r\n+    }\r\n+    \r\n+    &:disabled {\r\n+      opacity: 0.3;\r\n+      cursor: not-allowed;\r\n+    }\r\n+    \r\n+    svg {\r\n+      width: 18px;\r\n+      height: 18px;\r\n+      \r\n+      @media (max-width: 768px) {\r\n+        width: 16px;\r\n+        height: 16px;\r\n+      }\r\n+    }\r\n+  }\r\n+  \r\n+  @keyframes spin {\r\n+    to {\r\n+      transform: rotate(360deg);\r\n+    }\r\n+  }\r\n+`;\r\n+\r\n+const HeaderControls = styled.div`\r\n+  display: flex;\r\n+  align-items: center;\r\n+  gap: 0.75rem;\r\n+`;\r\n+\r\n+const HeaderButton = styled.button`\r\n+  background: transparent;\r\n+  border: none;\r\n+  color: ${props => props.theme?.colors?.accent || '#800000'};\r\n+  padding: 0.5rem;\r\n+  cursor: pointer;\r\n+  display: flex;\r\n+  align-items: center;\r\n+  justify-content: center;\r\n+  border-radius: 50%;\r\n+  transition: all 0.3s ease;\r\n+  opacity: 0.8;\r\n+  \r\n+  &:active {\r\n+    transform: scale(0.9);\r\n+    opacity: 1;\r\n+  }\r\n+  \r\n+  @media (hover: hover) {\r\n+    &:hover {\r\n+      opacity: 1;\r\n+      background: ${props => `${props.theme?.colors?.accent}10` || 'rgba(128, 0, 0, 0.1)'};\r\n+    }\r\n+  }\r\n+  \r\n+  &.pinned {\r\n+    color: ${props => props.theme?.colors?.accent || '#800000'};\r\n+    opacity: 1;\r\n+  }\r\n+  \r\n+  svg {\r\n+    width: 20px;\r\n+    height: 20px;\r\n+    \r\n+    @media (min-width: 768px) {\r\n+      width: 22px;\r\n+      height: 22px;\r\n+    }\r\n+  }\r\n+`;\r\n+\r\n+// Improved mobile main content with better spacing\r\n+const MainContent = styled.main`\r\n+  max-width: 1200px;\r\n+  margin: 0 auto;\r\n+  padding: 80px 1rem 100px 1rem;\r\n+  position: relative;\r\n+  z-index: 1;\r\n+  \r\n+  @media (min-width: 768px) {\r\n+    padding: 6rem 2rem 2rem 2rem;\r\n+  }\r\n+`;\r\n+\r\n+// Mobile-optimized welcome section\r\n+const WelcomeSection = styled.section`\r\n+  text-align: center;\r\n+  margin: 2rem 0;\r\n+  position: relative;\r\n+\r\n+  h1 {\r\n+    font-family: ${props => props.theme?.fonts?.heading || \"'Impact', sans-serif\"};\r\n+    font-size: 2.5rem;\r\n+    margin-bottom: 1rem;\r\n+    background: ${props => props.theme?.colors?.accentGradient || 'linear-gradient(45deg, #800000, #4A0404)'};\r\n+    -webkit-background-clip: text;\r\n+    -webkit-text-fill-color: transparent;\r\n+    letter-spacing: 1px;\r\n+    line-height: 1.2;\r\n+    \r\n+    @media (min-width: 768px) {\r\n+      font-size: 4.5rem;\r\n+      letter-spacing: 2px;\r\n+    }\r\n+  }\r\n+\r\n+  p {\r\n+    font-size: 1rem;\r\n+    line-height: 1.5;\r\n+    max-width: 600px;\r\n+    margin: 0 auto;\r\n+    color: ${props => `${props.theme?.colors?.text}CC` || 'rgba(255, 255, 255, 0.8)'};\r\n+    padding: 0 1rem;\r\n+    \r\n+    @media (min-width: 768px) {\r\n+      font-size: 1.2rem;\r\n+      line-height: 1.6;\r\n+      max-width: 800px;\r\n+    }\r\n+  }\r\n+`;\r\n+\r\n+// Completely redesigned ZoomOverlay - Responsive to zoom level\r\n+const ZoomOverlay = styled.div`\r\n+  position: fixed;\r\n+  top: 0;\r\n+  left: 0;\r\n+  right: 0;\r\n+  bottom: 0;\r\n+  background: ${props => `${props.theme?.colors?.background || 'rgba(0, 0, 0, 0.95)'}F5`};\r\n+  z-index: 10000;\r\n+  backdrop-filter: blur(10px);\r\n+  display: flex;\r\n+  align-items: center;\r\n+  justify-content: center;\r\n+  padding: 2rem;\r\n+  overflow: hidden;\r\n+  \r\n+  @media (max-width: 768px) {\r\n+    padding: 1rem;\r\n+  }\r\n+  \r\n+  @media (max-width: 480px) {\r\n+    padding: 0.5rem;\r\n+  }\r\n+`;\r\n+\r\n+// Redesigned ZoomContainer - 2:5 aspect ratio card, centered with ample space\r\n+const ZoomContainer = styled.div`\r\n+  position: relative;\r\n+  width: 100%;\r\n+  max-width: 500px;\r\n+  aspect-ratio: 2 / 5;\r\n+  max-height: 85vh;\r\n+  background: ${props => props.theme?.colors?.background || '#000000'};\r\n+  border-radius: 16px;\r\n+  overflow: hidden;\r\n+  border: 2px solid ${props => props.theme?.colors?.accent || '#800000'};\r\n+  box-shadow: 0 20px 60px rgba(0, 0, 0, 0.8);\r\n+  display: flex;\r\n+  flex-direction: column;\r\n+  \r\n+  @media (max-width: 768px) {\r\n+    max-width: 420px;\r\n+    border-radius: 12px;\r\n+  }\r\n+  \r\n+  @media (max-width: 480px) {\r\n+    max-width: 95%;\r\n+    border-radius: 10px;\r\n+  }\r\n+`;\r\n+\r\n+// Image section - 70% of card height\r\n+const ImageCarousel = styled.div`\r\n+  position: relative;\r\n+  width: 100%;\r\n+  height: 70%;\r\n+  background: ${props => `${props.theme?.colors?.background || '#000000'}80`};\r\n+  overflow: hidden;\r\n+  flex-shrink: 0;\r\n+  \r\n+  .image-track {\r\n+    display: flex;\r\n+    height: 100%;\r\n+    transition: transform 0.3s ease;\r\n+    transform: translateX(${props => props.currentIndex * -100}%);\r\n+  }\r\n+  \r\n+  .image-slide {\r\n+    min-width: 100%;\r\n+    height: 100%;\r\n+    display: flex;\r\n+    align-items: center;\r\n+    justify-content: center;\r\n+    \r\n+    img {\r\n+      width: 100%;\r\n+      height: 100%;\r\n+      object-fit: cover;\r\n+      background: ${props => `${props.theme?.colors?.background || '#000000'}40`};\r\n+    }\r\n+    \r\n+    .no-image {\r\n+      display: flex;\r\n+      flex-direction: column;\r\n+      align-items: center;\r\n+      gap: 0.75rem;\r\n+      color: ${props => props.theme?.colors?.text || '#FFFFFF'};\r\n+      opacity: 0.3;\r\n+      \r\n+      p {\r\n+        margin: 0;\r\n+        font-size: 0.85rem;\r\n+      }\r\n+    }\r\n+  }\r\n+  \r\n+  .carousel-dots {\r\n+    position: absolute;\r\n+    bottom: 1rem;\r\n+    left: 50%;\r\n+    transform: translateX(-50%);\r\n+    display: flex;\r\n+    gap: 0.4rem;\r\n+    z-index: 2;\r\n+    padding: 0.4rem 0.75rem;\r\n+    background: ${props => `${props.theme?.colors?.background || 'rgba(0, 0, 0, 0.6)'}CC`};\r\n+    border-radius: 20px;\r\n+    backdrop-filter: blur(8px);\r\n+  }\r\n+  \r\n+  .dot {\r\n+    width: 6px;\r\n+    height: 6px;\r\n+    border-radius: 50%;\r\n+    background: ${props => props.theme?.colors?.text || '#FFFFFF'};\r\n+    border: none;\r\n+    padding: 0;\r\n+    cursor: pointer;\r\n+    transition: all 0.2s ease;\r\n+    \r\n+    &:hover {\r\n+      transform: scale(1.2);\r\n+    }\r\n+  }\r\n+  \r\n+  .carousel-button {\r\n+    position: absolute;\r\n+    top: 50%;\r\n+    transform: translateY(-50%);\r\n+    background: ${props => `${props.theme?.colors?.background || 'rgba(0, 0, 0, 0.7)'}DD`};\r\n+    border: 1px solid ${props => `${props.theme?.colors?.accent}40` || 'rgba(255, 255, 255, 0.2)'};\r\n+    border-radius: 50%;\r\n+    width: 40px;\r\n+    height: 40px;\r\n+    display: flex;\r\n+    align-items: center;\r\n+    justify-content: center;\r\n+    color: ${props => props.theme?.colors?.text || 'white'};\r\n+    cursor: pointer;\r\n+    opacity: 0;\r\n+    transition: all 0.3s ease;\r\n+    z-index: 2;\r\n+    \r\n+    &:hover {\r\n+      opacity: 1 !important;\r\n+      background: ${props => props.theme?.colors?.accent || '#800000'};\r\n+      transform: translateY(-50%) scale(1.1);\r\n+    }\r\n+    \r\n+    &.prev {\r\n+      left: 1rem;\r\n+    }\r\n+    \r\n+    &.next {\r\n+      right: 1rem;\r\n+    }\r\n+    \r\n+    &:disabled {\r\n+      opacity: 0 !important;\r\n+      cursor: not-allowed;\r\n+    }\r\n+    \r\n+    @media (max-width: 480px) {\r\n+      width: 32px;\r\n+      height: 32px;\r\n+      \r\n+      &.prev {\r\n+        left: 0.5rem;\r\n+      }\r\n+      \r\n+      &.next {\r\n+        right: 0.5rem;\r\n+      }\r\n+      \r\n+      svg {\r\n+        width: 16px;\r\n+        height: 16px;\r\n+      }\r\n+    }\r\n+  }\r\n+  \r\n+  &:hover .carousel-button {\r\n+    opacity: 0.7;\r\n+  }\r\n+  \r\n+  .close-overlay-button {\r\n+    position: absolute;\r\n+    top: 1rem;\r\n+    right: 1rem;\r\n+    background: ${props => `${props.theme?.colors?.background || 'rgba(0, 0, 0, 0.8)'}DD`};\r\n+    border: 1px solid ${props => `${props.theme?.colors?.accent}60` || 'rgba(255, 255, 255, 0.3)'};\r\n+    border-radius: 50%;\r\n+    width: 40px;\r\n+    height: 40px;\r\n+    display: flex;\r\n+    align-items: center;\r\n+    justify-content: center;\r\n+    color: white;\r\n+    cursor: pointer;\r\n+    transition: all 0.2s ease;\r\n+    backdrop-filter: blur(8px);\r\n+    z-index: 3;\r\n+    opacity: 0.8;\r\n+    \r\n+    &:hover {\r\n+      opacity: 1;\r\n+      background: ${props => props.theme?.colors?.accent || '#800000'};\r\n+      border-color: ${props => props.theme?.colors?.accent || '#800000'};\r\n+      transform: scale(1.1);\r\n+    }\r\n+    \r\n+    &:active {\r\n+      transform: scale(0.95);\r\n+    }\r\n+    \r\n+    @media (max-width: 480px) {\r\n+      width: 32px;\r\n+      height: 32px;\r\n+      top: 0.75rem;\r\n+      right: 0.75rem;\r\n+      \r\n+      svg {\r\n+        width: 16px;\r\n+        height: 16px;\r\n+      }\r\n+    }\r\n+  }\r\n+`;\r\n+\r\n+// Details section - 30% of card height\r\n+const ZoomContent = styled.div`\r\n+  height: 30%;\r\n+  overflow-y: auto;\r\n+  overflow-x: hidden;\r\n+  padding: 1rem;\r\n+  -webkit-overflow-scrolling: touch;\r\n+  display: flex;\r\n+  flex-direction: column;\r\n+  gap: 0.75rem;\r\n+  background: ${props => props.theme?.colors?.background || '#000000'};\r\n+  \r\n+  /* Custom scrollbar */\r\n+  &::-webkit-scrollbar {\r\n+    width: 4px;\r\n+  }\r\n+  \r\n+  &::-webkit-scrollbar-track {\r\n+    background: transparent;\r\n+  }\r\n+  \r\n+  &::-webkit-scrollbar-thumb {\r\n+    background: ${props => `${props.theme?.colors?.accent || '#800000'}60`};\r\n+    border-radius: 2px;\r\n+    \r\n+    &:hover {\r\n+      background: ${props => props.theme?.colors?.accent || '#800000'};\r\n+    }\r\n+  }\r\n+  \r\n+  @media (max-width: 480px) {\r\n+    padding: 0.875rem;\r\n+    gap: 0.625rem;\r\n+  }\r\n+`;\r\n+\r\n+\r\n+// Update ZoomHeader - Remove it entirely or hide it\r\n+const ZoomHeader = styled.div`\r\n+  display: none; // Hide the header completely\r\n+`;\r\n+\r\n+// Mobile-optimized profile section\r\n+const ProfileSection = styled.div`\r\n+  display: flex;\r\n+  flex-direction: column;\r\n+  align-items: center;\r\n+  margin-bottom: 1.5rem;\r\n+`;\r\n+\r\n+const ProfileImage = styled.div`\r\n+  width: 120px;\r\n+  height: 120px;\r\n+  border-radius: 50%;\r\n+  overflow: hidden;\r\n+  margin-bottom: 1rem;\r\n+  border: 4px solid ${props => props.theme?.colors?.accent || '#800000'};\r\n+  box-shadow: 0 0 20px ${props => `${props.theme?.colors?.accent}40` || 'rgba(128, 0, 0, 0.25)'};\r\n+  \r\n+  @media (min-width: 768px) {\r\n+    width: 200px;\r\n+    height: 189px;\r\n+    border: 6px solid ${props => props.theme?.colors?.accent || '#800000'};\r\n+  }\r\n+  \r\n+  img {\r\n+    width: 100%;\r\n+    height: 100%;\r\n+    object-fit: cover;\r\n+  }\r\n+`;\r\n+\r\n+// Add to styled components section in WelcomePage.js\r\n+const LocationIndicator = styled.div`\r\n+  position: fixed;\r\n+  top: 90px;\r\n+  left: 2rem;\r\n+  display: flex;\r\n+  align-items: center;\r\n+  background: rgba(0, 0, 0, 0.7);\r\n+  padding: 0.5rem 1rem;\r\n+  border-radius: 20px;\r\n+  border: 1px solid ${props => `${props.theme?.colors?.accent}30` || 'rgba(128, 0, 0, 0.3)'};\r\n+  backdrop-filter: blur(4px);\r\n+  color: ${props => props.theme?.colors?.text || '#FFFFFF'};\r\n+  font-size: 0.9rem;\r\n+  z-index: 10;\r\n+  cursor: pointer;\r\n+  transition: all 0.3s ease;\r\n+  max-width: 300px;\r\n+  \r\n+  /* Hide on mobile, show only on desktop for debugging */\r\n+  @media (max-width: 768px) {\r\n+  width: auto;\r\n+    padding: 1rem 2.5rem;\r\n+    font-size: 1rem;\r\n+  } \r\n+  \r\n+  &:hover {\r\n+    background: rgba(0, 0, 0, 0.8);\r\n+    transform: translateY(-2px);\r\n+  }\r\n+  \r\n+  .location-icon {\r\n+    color: ${props => props.theme?.colors?.accent || '#800000'};\r\n+    margin-right: 0.75rem;\r\n+  }\r\n+  \r\n+  .location-text {\r\n+    white-space: nowrap;\r\n+    overflow: hidden;\r\n+    text-overflow: ellipsis;\r\n+  }\r\n+  \r\n+  .updating {\r\n+    margin-left: 0.5rem;\r\n+    width: 16px;\r\n+    height: 16px;\r\n+    border: 2px solid rgba(128, 0, 0, 0.2);\r\n+    border-radius: 50%;\r\n+    border-top-color: ${props => props.theme?.colors?.accent || '#800000'};\r\n+    animation: spin 1s linear infinite;\r\n+  }\r\n+`;\r\n+\r\n+const ShopName = styled.h2`\r\n+  font-family: ${props => props.theme?.fonts?.heading || \"'Impact', sans-serif\"};\r\n+  font-size: 2.5rem;\r\n+  background: ${props => props.theme?.colors?.accentGradient || 'linear-gradient(45deg, #800000, #4A0404)'};\r\n+  -webkit-background-clip: text;\r\n+  -webkit-text-fill-color: transparent;\r\n+  margin: 0 0 0.5rem 0;\r\n+  line-height: 1.2;\r\n+  \r\n+  @media (min-width: 768px) {\r\n+    font-size: 5.4rem;\r\n+    margin: 0 0 1rem 0;\r\n+  }\r\n+`;\r\n+\r\n+// Mobile-friendly action buttons\r\n+const ActionButtonContainer = styled.div`\r\n+  display: flex;\r\n+  flex-direction: column;\r\n+  gap: 1rem;\r\n+  width: 100%;\r\n+  max-width: 300px;\r\n+  margin: 2rem auto;\r\n+  \r\n+  @media (min-width: 480px) {\r\n+    flex-direction: row;\r\n+    justify-content: center;\r\n+    max-width: none;\r\n+  }\r\n+`;\r\n+\r\n+const ActionButton = styled.button`\r\n+  background: ${props => props.variant === 'outline' ? 'transparent' : \r\n+    props.theme?.colors?.accentGradient || 'linear-gradient(45deg, #800000, #4A0404)'};\r\n+  border: ${props => props.variant === 'outline' ? \r\n+    `2px solid ${props.theme?.colors?.accent || '#800000'}` : 'none'};\r\n+  padding: 1rem 1.5rem;\r\n+  border-radius: 30px;\r\n+  color: ${props => props.variant === 'outline' ? \r\n+    props.theme?.colors?.accent || '#800000' : 'white'};\r\n+  font-weight: bold;\r\n+  cursor: pointer;\r\n+  transition: all 0.3s;\r\n+  text-transform: uppercase;\r\n+  letter-spacing: 1px;\r\n+  font-size: 0.9rem;\r\n+  width: 100%;\r\n+  \r\n+  @media (min-width: 480px) {\r\n+    width: auto;\r\n+    padding: 1rem 2.5rem;\r\n+    font-size: 1rem;\r\n+  }\r\n+\r\n+  &:active {\r\n+    transform: scale(0.98);\r\n+  }\r\n+\r\n+  @media (hover: hover) {\r\n+    &:hover {\r\n+      transform: translateY(-2px);\r\n+      box-shadow: 0 5px 15px ${props => `${props.theme?.colors?.accent}4D` || 'rgba(128, 0, 0, 0.3)'};\r\n+    }\r\n+  }\r\n+`;\r\n+\r\n+// Mobile-optimized tab container with horizontal scroll\r\n+const TabContainer = styled.div`\r\n+  display: flex;\r\n+  gap: 0.5rem;\r\n+  margin: 2rem 0;\r\n+  overflow-x: auto;\r\n+  padding: 0.5rem 0;\r\n+  -webkit-overflow-scrolling: touch;\r\n+  \r\n+  &::-webkit-scrollbar {\r\n+    height: 4px;\r\n+  }\r\n+  \r\n+  &::-webkit-scrollbar-track {\r\n+    background: transparent;\r\n+  }\r\n+  \r\n+  &::-webkit-scrollbar-thumb {\r\n+    background: ${props => props.theme?.colors?.accent || '#800000'};\r\n+    border-radius: 2px;\r\n+  }\r\n+  \r\n+  @media (min-width: 768px) {\r\n+    justify-content: center;\r\n+    gap: 1rem;\r\n+    overflow-x: visible;\r\n+  }\r\n+`;\r\n+\r\n+const Tab = styled.button`\r\n+  background: ${props => props.active ? \r\n+    props.theme?.colors?.tabActiveBg || 'rgba(128, 0, 0, 0.2)' : 'transparent'};\r\n+  border: 1px solid ${props => props.active ? \r\n+    props.theme?.colors?.tabBorder || '#800000' : \r\n+    `${props.theme?.colors?.accent}4D` || 'rgba(128, 0, 0, 0.3)'};\r\n+  color: ${props => props.active ? \r\n+    props.theme?.colors?.text || '#FFFFFF' : \r\n+    `${props.theme?.colors?.text}99` || 'rgba(255, 255, 255, 0.6)'};\r\n+  padding: 0.6rem 1rem;\r\n+  border-radius: 20px;\r\n+  cursor: pointer;\r\n+  transition: all 0.3s;\r\n+  text-transform: uppercase;\r\n+  letter-spacing: 0.5px;\r\n+  font-weight: 500;\r\n+  font-size: 0.8rem;\r\n+  white-space: nowrap;\r\n+  display: flex;\r\n+  align-items: center;\r\n+  gap: 0.3rem;\r\n+  flex-shrink: 0;\r\n+  \r\n+  @media (min-width: 768px) {\r\n+    padding: 0.8rem 1.5rem;\r\n+    font-size: 0.9rem;\r\n+    letter-spacing: 1px;\r\n+    gap: 0.5rem;\r\n+  }\r\n+\r\n+  &:active {\r\n+    transform: scale(0.98);\r\n+  }\r\n+\r\n+  svg {\r\n+    width: 14px;\r\n+    height: 14px;\r\n+    \r\n+    @media (min-width: 768px) {\r\n+      width: 16px;\r\n+      height: 16px;\r\n+    }\r\n+  }\r\n+`;\r\n+\r\n+// Mobile-optimized grid with better touch targets\r\n+const GridContainer = styled.div`\r\n+  display: grid;\r\n+  grid-template-columns: repeat(2, 1fr);\r\n+  gap: 0.75rem;\r\n+  margin-top: 1.5rem;\r\n+  padding: 0 0.25rem;\r\n+  \r\n+  @media (min-width: 480px) {\r\n+    gap: 1rem;\r\n+    padding: 0;\r\n+  }\r\n+  \r\n+  @media (min-width: 768px) {\r\n+    grid-template-columns: repeat(auto-fill, minmax(220px, 1fr));\r\n+    gap: 1.5rem;\r\n+  }\r\n+  \r\n+  @media (min-width: 1024px) {\r\n+    grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));\r\n+    gap: 2rem;\r\n+  }\r\n+`;\r\n+\r\n+// Mobile search with better UX\r\n+const SearchContainer = styled.div`\r\n+  display: flex;\r\n+  flex-direction: column;\r\n+  gap: 0.75rem;\r\n+  width: 100%;\r\n+  padding: 0 0.5rem;\r\n+  \r\n+  @media (min-width: 600px) {\r\n+    flex-direction: row;\r\n+    align-items: center;\r\n+    max-width: 800px;\r\n+    margin: 0 auto;\r\n+    padding: 0;\r\n+  }\r\n+`;\r\n+\r\n+const SearchInput = styled.input`\r\n+  width: 100%;\r\n+  background: rgba(255, 255, 255, 0.05);\r\n+  border: 1px solid rgba(128, 0, 0, 0.2);\r\n+  border-radius: 25px;\r\n+  padding: 0.8rem 1rem;\r\n+  color: white;\r\n+  font-size: 1rem;\r\n+  -webkit-appearance: none;\r\n+  \r\n+  &:focus {\r\n+    outline: none;\r\n+    border-color: rgba(128, 0, 0, 0.4);\r\n+    background: rgba(255, 255, 255, 0.08);\r\n+  }\r\n+\r\n+  &::placeholder {\r\n+    color: rgba(255, 255, 255, 0.4);\r\n+  }\r\n+  \r\n+  @media (min-width: 600px) {\r\n+    flex: 1;\r\n+  }\r\n+`;\r\n+\r\n+const SearchButtonGroup = styled.div`\r\n+  display: flex;\r\n+  gap: 0.5rem;\r\n+  width: 100%;\r\n+  \r\n+  @media (min-width: 600px) {\r\n+    width: auto;\r\n+  }\r\n+`;\r\n+\r\n+const SearchButton = styled.button`\r\n+  flex: 1;\r\n+  background: ${props => props.variant === 'live' ? 'transparent' : 'rgba(128, 0, 0, 0.2)'};\r\n+  border: 1px solid rgba(128, 0, 0, 0.3);\r\n+  padding: 0.8rem 1rem;\r\n+  border-radius: 25px;\r\n+  color: white;\r\n+  font-size: 0.9rem;\r\n+  display: flex;\r\n+  align-items: center;\r\n+  justify-content: center;\r\n+  gap: 0.4rem;\r\n+  cursor: pointer;\r\n+  transition: all 0.2s ease;\r\n+  white-space: nowrap;\r\n+  -webkit-tap-highlight-color: transparent;\r\n+  \r\n+  @media (min-width: 600px) {\r\n+    flex: unset;\r\n+    padding: 0.8rem 1.2rem;\r\n+  }\r\n+\r\n+  &:active {\r\n+    transform: scale(0.98);\r\n+    background: rgba(128, 0, 0, 0.3);\r\n+  }\r\n+\r\n+  &:disabled {\r\n+    opacity: 0.5;\r\n+    cursor: not-allowed;\r\n+  }\r\n+\r\n+  svg {\r\n+    width: 16px;\r\n+    height: 16px;\r\n+  }\r\n+`;\r\n+\r\n+// Mobile-friendly slider with native scroll\r\n+const SliderContainer = styled.div`\r\n+  width: 100%;\r\n+  overflow-x: auto;\r\n+  overflow-y: hidden;\r\n+  position: relative;\r\n+  margin: 1.5rem 0;\r\n+  -webkit-overflow-scrolling: touch;\r\n+  scroll-snap-type: x mandatory;\r\n+  scroll-behavior: smooth;\r\n+  \r\n+  &::-webkit-scrollbar {\r\n+    height: 4px;\r\n+  }\r\n+  \r\n+  &::-webkit-scrollbar-track {\r\n+    background: ${props => `${props.theme?.colors?.background || '#000000'}80`};\r\n+    border-radius: 10px;\r\n+  }\r\n+  \r\n+  &::-webkit-scrollbar-thumb {\r\n+    background: ${props => props.theme?.colors?.accent || '#800000'};\r\n+    border-radius: 10px;\r\n+  }\r\n+  \r\n+  /* Hide scroll buttons on mobile */\r\n+  .scroll-button {\r\n+    display: none;\r\n+    \r\n+    @media (min-width: 768px) {\r\n+      display: flex;\r\n+    }\r\n+  }\r\n+`;\r\n+\r\n+const Slider = styled.div`\r\n+  display: flex;\r\n+  width: fit-content;\r\n+  padding: 0.5rem 0;\r\n+`;\r\n+\r\n+const SlideItem = styled.div`\r\n+  flex: 0 0 160px;\r\n+  margin-right: 0.75rem;\r\n+  scroll-snap-align: start;\r\n+  \r\n+  @media (min-width: 480px) {\r\n+    flex: 0 0 200px;\r\n+    margin-right: 1rem;\r\n+  }\r\n+  \r\n+  @media (min-width: 768px) {\r\n+    flex: 0 0 250px;\r\n+    margin-right: 1.5rem;\r\n+  }\r\n+  \r\n+  @media (min-width: 1024px) {\r\n+    flex: 0 0 300px;\r\n+    margin-right: 2rem;\r\n+  }\r\n+`;\r\n+\r\n+// Add styles for better item display\r\n+const ItemDetailsSection = styled.div`\r\n+  margin-bottom: 1.5rem;\r\n+`;\r\n+\r\n+const ItemHeader = styled.div`\r\n+  margin-bottom: 1.5rem;\r\n+  \r\n+  h3 {\r\n+    font-size: 1.5rem;\r\n+    margin: 0 0 0.5rem 0;\r\n+    font-family: ${props => props.theme?.fonts?.heading || 'inherit'};\r\n+    color: ${props => props.theme?.colors?.text || '#FFFFFF'};\r\n+    \r\n+    @media (min-width: 768px) {\r\n+      font-size: 1.8rem;\r\n+    }\r\n+  }\r\n+\r\n+  .price {\r\n+    font-size: 1.3rem;\r\n+    font-weight: bold;\r\n+    color: ${props => props.theme?.colors?.accent || '#800000'};\r\n+    margin-bottom: 1rem;\r\n+    \r\n+    @media (min-width: 768px) {\r\n+      font-size: 1.5rem;\r\n+    }\r\n+  }\r\n+`;\r\n+\r\n+const CategoryBadge = styled.div`\r\n+  display: inline-block;\r\n+  background: ${props => `${props.theme?.colors?.accent || '#800000'}20`};\r\n+  color: ${props => props.theme?.colors?.accent || '#800000'};\r\n+  padding: 0.25rem 0.75rem;\r\n+  border-radius: 12px;\r\n+  font-size: 0.75rem;\r\n+  font-weight: 500;\r\n+  text-transform: uppercase;\r\n+  letter-spacing: 0.5px;\r\n+  margin-bottom: 1rem;\r\n+`;\r\n+\r\n+const StockStatus = styled.div`\r\n+  display: flex;\r\n+  align-items: center;\r\n+  gap: 0.5rem;\r\n+  margin-bottom: 1rem;\r\n+  font-size: 0.9rem;\r\n+  \r\n+  .stock-indicator {\r\n+    width: 8px;\r\n+    height: 8px;\r\n+    border-radius: 50%;\r\n+    background: ${props => props.inStock ? '#4CAF50' : '#FF5252'};\r\n+  }\r\n+  \r\n+  .stock-text {\r\n+    color: ${props => props.inStock ? '#4CAF50' : '#FF5252'};\r\n+    font-weight: 500;\r\n+  }\r\n+`;\r\n+\r\n+const ItemDescription = styled.div`\r\n+  font-size: 0.95rem;\r\n+  opacity: 0.9;\r\n+  margin-bottom: 1.5rem;\r\n+  line-height: 1.6;\r\n+  color: ${props => props.theme?.colors?.text || '#FFFFFF'};\r\n+`;\r\n+\r\n+const ItemLocation = styled.div`\r\n+  display: flex;\r\n+  align-items: center;\r\n+  gap: 0.5rem;\r\n+  font-size: 0.9rem;\r\n+  opacity: 0.8;\r\n+  margin-bottom: 1.5rem;\r\n+  color: ${props => props.theme?.colors?.text || '#FFFFFF'};\r\n+`;\r\n+\r\n+const ShopInfo = styled.div`\r\n+  padding: 0.75rem;\r\n+  background: ${props => `${props.theme?.colors?.surface || 'rgba(255, 255, 255, 0.05)'}50`};\r\n+  border-radius: 8px;\r\n+  margin-bottom: 1.5rem;\r\n+  font-size: 0.9rem;\r\n+  color: ${props => props.theme?.colors?.text || '#FFFFFF'};\r\n+  \r\n+  strong {\r\n+    color: ${props => props.theme?.colors?.accent || '#800000'};\r\n+  }\r\n+`;\r\n+\r\n+// Update ActionButtons to only show Order button\r\n+const ActionButtons = styled.div`\r\n+  display: flex;\r\n+  gap: 0.75rem;\r\n+  margin-top: 1.5rem;\r\n+  \r\n+  button {\r\n+    flex: 1;\r\n+    padding: 0.75rem;\r\n+    border: none;\r\n+    border-radius: 8px;\r\n+    font-weight: bold;\r\n+    cursor: pointer;\r\n+    transition: all 0.3s;\r\n+    display: flex;\r\n+    align-items: center;\r\n+    justify-content: center;\r\n+    gap: 0.5rem;\r\n+    font-size: 0.9rem;\r\n+    \r\n+    @media (min-width: 768px) {\r\n+      padding: 1rem;\r\n+      font-size: 1rem;\r\n+    }\r\n+    \r\n+    &.order {\r\n+      background: ${props => props.theme?.colors?.accent || '#800000'};\r\n+      color: white;\r\n+      \r\n+      &:hover:not(:disabled) {\r\n+        background: ${props => props.theme?.colors?.primary || '#4A0404'};\r\n+        transform: translateY(-2px);\r\n+      }\r\n+      \r\n+      &:disabled {\r\n+        opacity: 0.5;\r\n+        cursor: not-allowed;\r\n+        transform: none;\r\n+      }\r\n+    }\r\n+    \r\n+    svg {\r\n+      width: 16px;\r\n+      height: 16px;\r\n+    }\r\n+  }\r\n+`;\r\n+\r\n+// Mobile-friendly floating controls - removed since they're now in header\r\n+const StyleIndicator = styled.div`\r\n+  position: fixed;\r\n+  bottom: 1rem;\r\n+  right: 1rem;\r\n+  background: ${props => `${props.theme?.colors?.background || '#000000'}E5`};\r\n+  backdrop-filter: blur(10px);\r\n+  color: white;\r\n+  padding: 0.5rem 1rem;\r\n+  border-radius: 20px;\r\n+  font-size: 0.8rem;\r\n+  display: flex;\r\n+  align-items: center;\r\n+  gap: 0.5rem;\r\n+  border: 1px solid ${props => `${props.theme?.colors?.accent}40` || 'rgba(128, 0, 0, 0.4)'};\r\n+  z-index: 90;\r\n+  \r\n+  @media (min-width: 768px) {\r\n+    font-size: 0.9rem;\r\n+  }\r\n+  \r\n+  .style-number {\r\n+    font-weight: bold;\r\n+    font-size: 1rem;\r\n+    color: ${props => props.theme?.colors?.accent || '#800000'};\r\n+    \r\n+    @media (min-width: 768px) {\r\n+      font-size: 1.2rem;\r\n+    }\r\n+  }\r\n+`;\r\n+\r\n+// Quantity selector optimized for mobile\r\n+const QuantitySelector = styled.div`\r\n+  display: flex;\r\n+  align-items: center;\r\n+  justify-content: space-between;\r\n+  background: ${props => `${props.theme?.colors?.surface || 'rgba(255, 255, 255, 0.05)'}50`};\r\n+  border-radius: 12px;\r\n+  padding: 1rem;\r\n+  margin: 1rem 0;\r\n+  \r\n+  .quantity-label {\r\n+    font-weight: bold;\r\n+    color: ${props => props.theme?.colors?.text || '#FFFFFF'};\r\n+    font-size: 0.9rem;\r\n+  }\r\n+  \r\n+  .quantity-controls {\r\n+    display: flex;\r\n+    align-items: center;\r\n+    gap: 1rem;\r\n+    \r\n+    .quantity-btn {\r\n+      width: 40px;\r\n+      height: 40px;\r\n+      border-radius: 50%;\r\n+      border: 2px solid ${props => props.theme?.colors?.accent || '#800000'};\r\n+      background: transparent;\r\n+      color: ${props => props.theme?.colors?.accent || '#800000'};\r\n+      display: flex;\r\n+      align-items: center;\r\n+      justify-content: center;\r\n+      cursor: pointer;\r\n+      transition: all 0.3s;\r\n+      -webkit-tap-highlight-color: transparent;\r\n+      \r\n+      &:active:not(:disabled) {\r\n+        transform: scale(0.9);\r\n+        background: ${props => props.theme?.colors?.accent || '#800000'};\r\n+        color: white;\r\n+      }\r\n+      \r\n+      &:disabled {\r\n+        opacity: 0.3;\r\n+        cursor: not-allowed;\r\n+      }\r\n+      \r\n+      svg {\r\n+        width: 18px;\r\n+        height: 18px;\r\n+      }\r\n+    }\r\n+    \r\n+    .quantity-display {\r\n+      font-size: 1.3rem;\r\n+      font-weight: bold;\r\n+      color: ${props => props.theme?.colors?.text || 'white'};\r\n+      min-width: 40px;\r\n+      text-align: center;\r\n+    }\r\n+  }\r\n+`;\r\n+\r\n+// Other styled components remain the same but with mobile optimizations...\r\n+const LoadingSpinner = styled.div`\r\n+  width: 40px;\r\n+  height: 40px;\r\n+  margin: 2rem auto;\r\n+  border: 3px solid rgba(128, 0, 0, 0.1);\r\n+  border-radius: 50%;\r\n+  border-top-color: #800000;\r\n+  animation: spin 1s linear infinite;\r\n+\r\n+  @keyframes spin {\r\n+    to {\r\n+      transform: rotate(360deg);\r\n+    }\r\n+  }\r\n+`;\r\n+\r\n+const EmptyGridMessage = styled.div`\r\n+  text-align: center;\r\n+  padding: 2rem 1rem;\r\n+  background: rgba(0, 0, 0, 0.2);\r\n+  border-radius: 12px;\r\n+  border: 1px solid rgba(128, 0, 0, 0.1);\r\n+  color: rgba(255, 255, 255, 0.7);\r\n+  grid-column: 1/-1;\r\n+\r\n+  h3 {\r\n+    font-size: 1.1rem;\r\n+    margin-bottom: 0.5rem;\r\n+    color: rgba(255, 255, 255, 0.9);\r\n+  }\r\n+\r\n+  p {\r\n+    font-size: 0.9rem;\r\n+    line-height: 1.5;\r\n+  }\r\n+`;\r\n+\r\n+const MotivationalMessage = styled.p`\r\n+  font-size: 1.1rem;\r\n+  line-height: 1.5;\r\n+  max-width: 600px;\r\n+  margin: 2rem auto 0;\r\n+  color: ${props => props.theme?.colors?.text || '#FFFFFF'};\r\n+  font-weight: 400;\r\n+  text-align: center;\r\n+  padding: 1rem 1.5rem;\r\n+  letter-spacing: 0.3px;\r\n+  position: relative;\r\n+  \r\n+  @media (min-width: 768px) {\r\n+    font-size: 1.4rem;\r\n+    line-height: 1.6;\r\n+    max-width: 800px;\r\n+    margin: 3rem auto 0;\r\n+    padding: 1.5rem 2rem;\r\n+    letter-spacing: 0.5px;\r\n+  }\r\n+  \r\n+  &::before, &::after {\r\n+    content: '\"';\r\n+    font-family: ${props => props.theme?.fonts?.heading || \"'Georgia', serif\"};\r\n+    font-size: 2rem;\r\n+    position: absolute;\r\n+    opacity: 0.2;\r\n+    color: ${props => props.theme?.colors?.accent || '#800000'};\r\n+    \r\n+    @media (min-width: 768px) {\r\n+      font-size: 3rem;\r\n+    }\r\n+  }\r\n+  \r\n+  &::before {\r\n+    top: -0.5rem;\r\n+    left: 0.5rem;\r\n+    \r\n+    @media (min-width: 768px) {\r\n+      top: -1.5rem;\r\n+      left: -1rem;\r\n+    }\r\n+  }\r\n+  \r\n+  &::after {\r\n+    bottom: -1.5rem;\r\n+    right: 0.5rem;\r\n+    \r\n+    @media (min-width: 768px) {\r\n+      bottom: -2.5rem;\r\n+      right: -1rem;\r\n+    }\r\n+  }\r\n+`;\r\n+\r\n+// 1. Replace the CategoryGrid styled component with these two new components:\r\n+\r\n+const CategoryGridWrapper = styled.div`\r\n+  margin-bottom: 2rem;\r\n+  \r\n+  /* Desktop: Regular grid */\r\n+  @media (min-width: 769px) {\r\n+    display: grid;\r\n+    grid-template-columns: repeat(5, 1fr);\r\n+    gap: 1rem;\r\n+  }\r\n+  \r\n+  @media (max-width: 1200px) and (min-width: 769px) {\r\n+    grid-template-columns: repeat(4, 1fr);\r\n+  }\r\n+  \r\n+  @media (max-width: 900px) and (min-width: 769px) {\r\n+    grid-template-columns: repeat(3, 1fr);\r\n+  }\r\n+  \r\n+  /* Mobile: Scrollable rows */\r\n+  @media (max-width: 768px) {\r\n+    display: flex;\r\n+    flex-direction: column;\r\n+    gap: 1rem;\r\n+  }\r\n+`;\r\n+\r\n+// Replace the CategoryScrollableGrid styled component with this corrected version:\r\n+\r\n+const CategoryScrollableGrid = styled.div`\r\n+  display: none;\r\n+  \r\n+  @media (max-width: 768px) {\r\n+    display: grid;\r\n+    grid-auto-flow: column;\r\n+    grid-template-rows: repeat(2, 1fr);\r\n+    grid-template-columns: repeat(5, minmax(280px, 1fr)); /* Increased from 200px */\r\n+    gap: 1rem; /* Increased from 0.75rem */\r\n+    overflow-x: auto;\r\n+    overflow-y: hidden;\r\n+    padding-bottom: 0.5rem;\r\n+    scroll-snap-type: x mandatory;\r\n+    -webkit-overflow-scrolling: touch;\r\n+    min-height: 85vh; /* Add minimum height to stretch vertically */\r\n+    \r\n+    &::-webkit-scrollbar {\r\n+      height: 4px;\r\n+    }\r\n+    \r\n+    &::-webkit-scrollbar-track {\r\n+      background: ${props => `${props.theme?.colors?.background || '#000000'}80`};\r\n+      border-radius: 10px;\r\n+    }\r\n+    \r\n+    &::-webkit-scrollbar-thumb {\r\n+      background: ${props => props.theme?.colors?.accent || '#800000'};\r\n+      border-radius: 10px;\r\n+    }\r\n+    \r\n+    > * {\r\n+      scroll-snap-align: start;\r\n+      min-width: 0;\r\n+      height: 100%; /* Make items stretch to full height */\r\n+    }\r\n+  }\r\n+  \r\n+  @media (max-width: 480px) {\r\n+    grid-template-columns: repeat(5, minmax(240px, 1fr)); /* Increased from 160px */\r\n+    gap: 0.75rem;\r\n+  }\r\n+`;\r\n+\r\n+// 4. Add this CSS to handle responsive display (add to your styled components section):\r\n+const GlobalStyle = styled.div`\r\n+  @media (min-width: 769px) {\r\n+    .mobile-only {\r\n+      display: none !important;\r\n+    }\r\n+  }\r\n+  \r\n+  @media (max-width: 768px) {\r\n+    .desktop-only {\r\n+      display: none !important;\r\n+    }\r\n+  }\r\n+`;\r\n+\r\n+const CategoryHeader = styled.div`\r\n+  display: flex;\r\n+  justify-content: space-between;\r\n+  align-items: center;\r\n+  margin-bottom: 0.75rem;\r\n+  padding: 0 0.5rem;\r\n+  \r\n+  @media (min-width: 768px) {\r\n+    margin-bottom: 1rem;\r\n+    padding: 0;\r\n+  }\r\n+  \r\n+  h2 {\r\n+    font-family: ${props => props.theme?.fonts?.heading || 'inherit'};\r\n+    font-size: 1.3rem;\r\n+    color: ${props => props.theme?.colors?.accent || '#800000'};\r\n+    margin: 0;\r\n+    \r\n+    @media (min-width: 768px) {\r\n+      font-size: 1.8rem;\r\n+    }\r\n+  }\r\n+  \r\n+  .view-all {\r\n+    font-size: 0.8rem;\r\n+    color: ${props => props.theme?.colors?.accent || '#800000'};\r\n+    opacity: 0.8;\r\n+    cursor: pointer;\r\n+    display: flex;\r\n+    align-items: center;\r\n+    gap: 0.3rem;\r\n+    transition: all 0.3s ease;\r\n+    \r\n+    @media (min-width: 768px) {\r\n+      font-size: 0.9rem;\r\n+      gap: 0.5rem;\r\n+    }\r\n+    \r\n+    &:active {\r\n+      opacity: 1;\r\n+      transform: translateX(3px);\r\n+    }\r\n+  }\r\n+`;\r\n+\r\n+const ChatOverlay = styled.div`\r\n+  position: fixed;\r\n+  top: 0;\r\n+  left: 0;\r\n+  right: 0;\r\n+  bottom: 0;\r\n+  background: rgba(0, 0, 0, 0.5);\r\n+  z-index: 999;\r\n+  opacity: ${props => props.isOpen ? 1 : 0};\r\n+  pointer-events: ${props => props.isOpen ? 'auto' : 'none'};\r\n+  transition: opacity 0.3s ease;\r\n+`;\r\n+\r\n+// Add these styled components after StyleIndicator\r\n+\r\n+const SortContainer = styled.div`\r\n+  position: relative;\r\n+  display: inline-block;\r\n+`;\r\n+\r\n+const SortDropdown = styled.div`\r\n+  position: absolute;\r\n+  top: calc(100% + 0.5rem);\r\n+  right: 0;\r\n+  background: ${props => props.theme?.colors?.background || '#000000'};\r\n+  border: 2px solid ${props => props.theme?.colors?.accent || '#800000'};\r\n+  border-radius: 12px;\r\n+  padding: 0.75rem;\r\n+  min-width: 220px;\r\n+  z-index: 1000;\r\n+  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.8),\r\n+              0 0 20px ${props => `${props.theme?.colors?.accent}40` || 'rgba(128, 0, 0, 0.25)'};\r\n+  opacity: ${props => props.isOpen ? 1 : 0};\r\n+  visibility: ${props => props.isOpen ? 'visible' : 'hidden'};\r\n+  transform: ${props => props.isOpen ? 'translateY(0)' : 'translateY(-10px)'};\r\n+  transition: all 0.3s ease;\r\n+  \r\n+  @media (max-width: 768px) {\r\n+    min-width: 200px;\r\n+    right: 0;\r\n+  }\r\n+`;\r\n+\r\n+const SortOption = styled.button`\r\n+  width: 100%;\r\n+  padding: 0.75rem 1rem;\r\n+  background: ${props => props.active ? \r\n+    props.theme?.colors?.accent || '#800000' : \r\n+    'transparent'};\r\n+  border: none;\r\n+  border-radius: 8px;\r\n+  color: ${props => props.active ? \r\n+    '#FFFFFF' : \r\n+    props.theme?.colors?.text || '#FFFFFF'};\r\n+  font-size: 0.95rem;\r\n+  font-weight: ${props => props.active ? '600' : '500'};\r\n+  text-align: left;\r\n+  cursor: pointer;\r\n+  transition: all 0.2s ease;\r\n+  display: flex;\r\n+  align-items: center;\r\n+  gap: 0.75rem;\r\n+  font-family: ${props => props.theme?.fonts?.body || 'inherit'};\r\n+  min-height: 50px; /* Added for two-line content */\r\n+  \r\n+  &:hover {\r\n+    background: ${props => props.active ?\r\n+      props.theme?.colors?.primary || '#4A0404' :\r\n+      `${props.theme?.colors?.accent}20` || 'rgba(128, 0, 0, 0.2)'};\r\n+    transform: translateX(2px);\r\n+  }\r\n+  \r\n+  &:active {\r\n+    transform: scale(0.98);\r\n+  }\r\n+  \r\n+  svg {\r\n+    width: 16px;\r\n+    height: 16px;\r\n+    flex-shrink: 0;\r\n+    align-self: flex-start; /* Align icon to top when two lines */\r\n+    margin-top: 2px;\r\n+  }\r\n+  \r\n+  @media (max-width: 768px) {\r\n+    padding: 0.65rem 0.85rem;\r\n+    font-size: 0.9rem;\r\n+    min-height: 46px;\r\n+    \r\n+    svg {\r\n+      width: 14px;\r\n+      height: 14px;\r\n+    }\r\n+  }\r\n+`;\r\n+\r\n+const SortHeader = styled.div`\r\n+  display: flex;\r\n+  justify-content: space-between;\r\n+  align-items: center;\r\n+  margin-bottom: 1rem;\r\n+  \r\n+  @media (max-width: 768px) {\r\n+    flex-direction: column;\r\n+    align-items: flex-start;\r\n+    gap: 0.75rem;\r\n+  }\r\n+`;\r\n+\r\n+// Motivational messages\r\n+const MOTIVATIONAL_MESSAGES = [\r\n+  \"Build your vision, Elevate humanity.\",\r\n+  \"Create greatness, Inspire progress.\",\r\n+  \"Master your craft, Serve with passion.\",\r\n+  \"Own your success, Empower those around you.\",\r\n+  \"Rule with wisdom, Lead with heart.\",\r\n+  \"Shape your future, Change lives along the way.\",\r\n+  \"Rise above, Lift others higher.\",\r\n+  \"Conquer your dreams, Build a better world.\",\r\n+  \"Lead by example, Serve with strength.\",\r\n+  \"Pursue greatness, Give back in abundance.\"\r\n+];\r\n+\r\n+const WelcomePage = () => {\r\n+  const navigate = useNavigate();\r\n+  const [motivationalMessage, setMotivationalMessage] = useState(\"\");\r\n+  const [activeTab, setActiveTab] = useState('featured');\r\n+  const [featuredItems, setFeaturedItems] = useState([]);\r\n+  const [loading, setLoading] = useState(true);\r\n+  const [error, setError] = useState(null);\r\n+  const [nearbyItems, setNearbyItems] = useState([]);\r\n+  const [featuredMedia, setFeaturedMedia] = useState([]);\r\n+  const [hasSearched, setHasSearched] = useState(false);\r\n+  const [searchAddress, setSearchAddress] = useState('');\r\n+  const [searching, setSearching] = useState(false);\r\n+  const [locationChecked, setLocationChecked] = useState(false);\r\n+  const [showLocationPrompt, setShowLocationPrompt] = useState(false);\r\n+  const [currentZipCode, setCurrentZipCode] = useState(null);\r\n+  const [currentPage, setCurrentPage] = useState(1);\r\n+  const [totalItems, setTotalItems] = useState(0);\r\n+  const [currentStyle, setCurrentStyle] = useState(null);\r\n+  const itemsPerPage = 6;\r\n+  const [isPinned, setIsPinned] = useState(false);\r\n+  const [isRefreshing, setIsRefreshing] = useState(false);\r\n+  const [orderQuantity, setOrderQuantity] = useState(1);\r\n+  const [sortBy, setSortBy] = useState('recent'); // 'recent', 'proximity', 'price-low', 'price-high'\r\n+  const [sortMenuOpen, setSortMenuOpen] = useState(false);\r\n+\r\n+\r\n+  \r\n+  const { user, isAuthenticated } = useAuth();\r\n+  const [shopData, setShopData] = useState(null);\r\n+  const [currentMessageIndex, setCurrentMessageIndex] = useState(0);\r\n+  const [isMessageVisible, setIsMessageVisible] = useState(true);\r\n+  const [isSliderPaused, setIsSliderPaused] = useState(false);\r\n+  const [sliderPosition, setSliderPosition] = useState(0);\r\n+  const sliderRef = useRef(null);\r\n+  const sliderAnimationRef = useRef(null);\r\n+  const [zoomedItem, setZoomedItem] = useState(null);\r\n+  const [chatOpen, setChatOpen] = useState(false);\r\n+  const [selectedChatItem, setSelectedChatItem] = useState(null);\r\n+  const [currentImageIndex, setCurrentImageIndex] = useState(0);\r\n+  const { userLocation, locationPermission, requestLocation } = useLocation();\r\n+  const [updatingLocation, setUpdatingLocation] = useState(false);\r\n+  const [featuredSearchTerm, setFeaturedSearchTerm] = useState('');\r\n+  const [searchResults, setSearchResults] = useState([]);\r\n+  const [isSearching, setIsSearching] = useState(false);\r\n+  const [hasSearchResults, setHasSearchResults] = useState(false);\r\n+  const [categories, setCategories] = useState({\r\n+    'Electronics & Tech': [],\r\n+    'Clothing & Accessories': [],\r\n+    'Home & Garden': [],\r\n+    'Sports & Outdoors': [],\r\n+    'Books & Media': [],\r\n+    'Toys & Games': [],\r\n+    'Health & Beauty': [],\r\n+    'Automotive': [],\r\n+    'Collectibles & Art': [],\r\n+    'Food & Beverages': [],\r\n+    'Other': []\r\n+  });\r\n+// Replace the existing state variables related to ZIP with city/region states\r\n+const [cityRegion, setCityRegion] = useState('');\r\n+const [isCityPinned, setIsCityPinned] = useState(false);\r\n+const [isConvertingToCity, setIsConvertingToCity] = useState(false);\r\n+const [cityInputValue, setCityInputValue] = useState('');\r\n+const [effectiveLocation, setEffectiveLocation] = useState(null);\r\n+const [isIPLocation, setIsIPLocation] = useState(false);\r\n+\r\n+useEffect(() => {\r\n+  const initializeLocation = async () => {\r\n+    console.log('🔍 Initializing location...');\r\n+    console.log('userLocation:', userLocation);\r\n+    \r\n+    if (userLocation) {\r\n+      // User has shared precise location\r\n+      console.log('✅ Using GPS location:', userLocation);\r\n+      setEffectiveLocation(userLocation);\r\n+      setIsIPLocation(false);\r\n+    } else {\r\n+      // Use IP-based location\r\n+      console.log('🌐 Fetching IP-based location...');\r\n+      const ipLocation = await getIPBasedLocation();\r\n+      console.log('IP Location result:', ipLocation);\r\n+      \r\n+      if (ipLocation) {\r\n+        console.log('✅ Using IP location:', ipLocation);\r\n+        setEffectiveLocation(ipLocation);\r\n+        setIsIPLocation(true);\r\n+      } else {\r\n+        console.error('❌ Failed to get IP location');\r\n+      }\r\n+    }\r\n+  };\r\n+  \r\n+  initializeLocation();\r\n+}, [userLocation]);\r\n+\r\n+useEffect(() => {\r\n+  console.log('🔄 effectiveLocation changed:', effectiveLocation);\r\n+  console.log('activeTab:', activeTab);\r\n+  \r\n+  if (activeTab === 'featured' && effectiveLocation) {\r\n+    console.log('📦 Loading items with location...');\r\n+    loadCategorizedItems();\r\n+  }\r\n+}, [effectiveLocation, activeTab]);\r\n+\r\n+const loadCategorizedItems = async () => {\r\n+  console.log('🔄 loadCategorizedItems called');\r\n+  console.log('effectiveLocation:', effectiveLocation);\r\n+  console.log('sortBy:', sortBy);\r\n+  \r\n+  try {\r\n+    setLoading(true);\r\n+    setError(null);\r\n+\r\n+    console.log('📡 Fetching items from Firebase...');\r\n+    const allItems = await getFeaturedItems(48);\r\n+    console.log('✅ Fetched items:', allItems.length);\r\n+    \r\n+    const currentUserId = user?.uid;\r\n+    \r\n+    // Filter out current user's items AND invalid items\r\n+    const filteredItems = allItems.filter(item => {\r\n+      const isNotCurrentUser = item.shopId !== currentUserId;\r\n+      const hasImages = item.images && item.images.length > 0 && item.images.some(img => img);\r\n+      const hasValidPrice = item.price && !isNaN(parseFloat(item.price)) && parseFloat(item.price) > 0;\r\n+      const hasStock = !item.deleted && (!item.quantity || parseInt(item.quantity) > 0);\r\n+      \r\n+      return isNotCurrentUser && hasImages && hasValidPrice && hasStock;\r\n+    });\r\n+    \r\n+    console.log('✅ Filtered items:', filteredItems.length);\r\n+\r\n+    let itemsWithDistance = filteredItems;\r\n+    \r\n+    // Calculate distances if we have location\r\n+    if (effectiveLocation) {\r\n+      console.log('📍 Calculating distances...');\r\n+      itemsWithDistance = filteredItems.map(item => {\r\n+        let itemCoords = item.coordinates;\r\n+        if (!itemCoords && item.address) {\r\n+          const coordsMatch = item.address.match(/^(-?\\d+\\.?\\d*),\\s*(-?\\d+\\.?\\d*)$/);\r\n+          if (coordsMatch) {\r\n+            itemCoords = {\r\n+              lat: parseFloat(coordsMatch[1]),\r\n+              lng: parseFloat(coordsMatch[2])\r\n+            };\r\n+          }\r\n+        }\r\n+\r\n+        if (itemCoords?.lat && itemCoords?.lng) {\r\n+          try {\r\n+            const distanceInMeters = getDistance(\r\n+              { latitude: effectiveLocation.latitude, longitude: effectiveLocation.longitude },\r\n+              { latitude: itemCoords.lat, longitude: itemCoords.lng }\r\n+            );\r\n+            const distanceInMiles = (distanceInMeters / 1609.34).toFixed(1);\r\n+\r\n+            return {\r\n+              ...item,\r\n+              coordinates: itemCoords,\r\n+              distance: distanceInMeters,\r\n+              distanceInMiles,\r\n+              formattedDistance: `${distanceInMiles} mi`\r\n+            };\r\n+          } catch (e) {\r\n+            console.warn('Error calculating distance for item:', e);\r\n+            return item;\r\n+          }\r\n+        }\r\n+        return item;\r\n+      });\r\n+    } else {\r\n+      console.warn('⚠️ No effectiveLocation available for distance calculation');\r\n+    }\r\n+\r\n+    // Apply sorting\r\n+    console.log('🔄 Applying sort:', sortBy);\r\n+    const sortedItems = applySorting(itemsWithDistance, sortBy);\r\n+    console.log('✅ Sorted items:', sortedItems.length);\r\n+\r\n+    // Categorize items\r\n+    const categorizedItems = {\r\n+      'Electronics & Tech': [],\r\n+      'Clothing & Accessories': [],\r\n+      'Home & Garden': [],\r\n+      'Sports & Outdoors': [],\r\n+      'Books & Media': [],\r\n+      'Toys & Games': [],\r\n+      'Health & Beauty': [],\r\n+      'Automotive': [],\r\n+      'Collectibles & Art': [],\r\n+      'Food & Beverages': [],\r\n+      'Other': []\r\n+    };\r\n+\r\n+    sortedItems.forEach(item => {\r\n+      const category = item.category || 'Other';\r\n+      if (categorizedItems[category]) {\r\n+        categorizedItems[category].push(item);\r\n+      } else {\r\n+        categorizedItems['Other'].push(item);\r\n+      }\r\n+    });\r\n+\r\n+    Object.keys(categorizedItems).forEach(category => {\r\n+      categorizedItems[category] = categorizedItems[category].slice(0, 10);\r\n+    });\r\n+\r\n+    console.log('✅ Setting categories:', Object.keys(categorizedItems).map(k => `${k}: ${categorizedItems[k].length}`));\r\n+    setCategories(categorizedItems);\r\n+    setFeaturedItems(sortedItems.slice(0, 10));\r\n+    setTotalItems(filteredItems.length);\r\n+\r\n+    setLoading(false);\r\n+  } catch (error) {\r\n+    console.error('❌ Error loading categorized items:', error);\r\n+    setError('Failed to load items. Please try again later.');\r\n+    setLoading(false);\r\n+  }\r\n+};\r\n+\r\n+// Add this useEffect with other effects\r\n+\r\n+useEffect(() => {\r\n+  const handleClickOutside = (event) => {\r\n+    if (sortMenuOpen && !event.target.closest('.sort-container')) {\r\n+      setSortMenuOpen(false);\r\n+    }\r\n+  };\r\n+\r\n+  document.addEventListener('mousedown', handleClickOutside);\r\n+  return () => document.removeEventListener('mousedown', handleClickOutside);\r\n+}, [sortMenuOpen]);\r\n+\r\n+\r\n+\r\n+\r\n+const getSortLabel = (sortType) => {\r\n+  switch (sortType) {\r\n+    case 'proximity': return 'Closest First';\r\n+    case 'price-low': return 'Price: Low to High';\r\n+    case 'price-high': return 'Price: High to Low';\r\n+    case 'recent':\r\n+    default: return 'Most Recent';\r\n+  }\r\n+};\r\n+\r\n+// Replace convertCoordsToZip with this new function\r\n+const convertCoordsToCity = async (lat, lon) => {\r\n+  try {\r\n+    setIsConvertingToCity(true);\r\n+    setError(null);\r\n+    \r\n+    const response = await fetch(\r\n+      `https://nominatim.openstreetmap.org/reverse?lat=${lat}&lon=${lon}&format=json&zoom=10&addressdetails=1`,\r\n+      {\r\n+        headers: {\r\n+          'Accept': 'application/json',\r\n+          'User-Agent': 'KalKode Marketplace'\r\n+        }\r\n+      }\r\n+    );\r\n+    \r\n+    if (!response.ok) {\r\n+      throw new Error('Failed to fetch location data');\r\n+    }\r\n+    \r\n+    const data = await response.json();\r\n+    console.log('Nominatim response:', data);\r\n+    \r\n+    if (!data || !data.address) {\r\n+      setCityRegion('Not available');\r\n+      setCityInputValue('');\r\n+      return null;\r\n+    }\r\n+    \r\n+    const address = data.address;\r\n+    const city = address.city || address.town || address.village || address.county;\r\n+    const state = address.state;\r\n+    \r\n+    // Major cities list (you can expand this)\r\n+    const majorCities = [\r\n+      'Houston', 'Dallas', 'Austin', 'San Antonio', 'Fort Worth',\r\n+      'Los Angeles', 'New York', 'Chicago', 'Phoenix', 'Philadelphia',\r\n+      'San Diego', 'San Jose', 'Jacksonville', 'Columbus', 'Charlotte'\r\n+    ];\r\n+    \r\n+    let locationString = '';\r\n+    \r\n+    if (city && majorCities.some(major => city.includes(major))) {\r\n+      // For major cities, determine direction from city center\r\n+      const cityName = majorCities.find(major => city.includes(major));\r\n+      \r\n+      // Get city center coordinates (you could make this more precise with a lookup table)\r\n+      const cityCenterResponse = await fetch(\r\n+        `https://nominatim.openstreetmap.org/search?city=${cityName}&state=${state}&format=json&limit=1`,\r\n+        {\r\n+          headers: {\r\n+            'Accept': 'application/json',\r\n+            'User-Agent': 'KalKode Marketplace'\r\n+          }\r\n+        }\r\n+      );\r\n+      \r\n+      const cityCenterData = await cityCenterResponse.json();\r\n+      \r\n+      if (cityCenterData && cityCenterData[0]) {\r\n+        const centerLat = parseFloat(cityCenterData[0].lat);\r\n+        const centerLon = parseFloat(cityCenterData[0].lon);\r\n+        \r\n+        // Calculate direction\r\n+        const direction = getDirection(lat, lon, centerLat, centerLon);\r\n+        locationString = `${direction} ${cityName}, ${getStateAbbreviation(state)}`;\r\n+      } else {\r\n+        locationString = `${cityName}, ${getStateAbbreviation(state)}`;\r\n+      }\r\n+    } else if (state) {\r\n+      // For non-major cities, use state with direction\r\n+      // Get state center (approximate)\r\n+      const stateCenterResponse = await fetch(\r\n+        `https://nominatim.openstreetmap.org/search?state=${state}&country=USA&format=json&limit=1`,\r\n+        {\r\n+          headers: {\r\n+            'Accept': 'application/json',\r\n+            'User-Agent': 'KalKode Marketplace'\r\n+          }\r\n+        }\r\n+      );\r\n+      \r\n+      const stateCenterData = await stateCenterResponse.json();\r\n+      \r\n+      if (stateCenterData && stateCenterData[0]) {\r\n+        const centerLat = parseFloat(stateCenterData[0].lat);\r\n+        const centerLon = parseFloat(stateCenterData[0].lon);\r\n+        \r\n+        const direction = getDirection(lat, lon, centerLat, centerLon);\r\n+        locationString = city ? \r\n+          `${city}, ${direction} ${getStateAbbreviation(state)}` :\r\n+          `${direction} ${getStateAbbreviation(state)}`;\r\n+      } else {\r\n+        locationString = city ? \r\n+          `${city}, ${getStateAbbreviation(state)}` :\r\n+          getStateAbbreviation(state);\r\n+      }\r\n+    } else {\r\n+      locationString = city || 'Unknown Location';\r\n+    }\r\n+    \r\n+    setCityRegion(locationString);\r\n+    setCityInputValue(locationString);\r\n+    \r\n+    console.log(`Coordinates ${lat}, ${lon} → ${locationString}`);\r\n+    \r\n+    return locationString;\r\n+    \r\n+  } catch (error) {\r\n+    console.error('Error converting coordinates to city:', error);\r\n+    setCityRegion('Error');\r\n+    setCityInputValue('');\r\n+    setError('Failed to get location information');\r\n+    return null;\r\n+  } finally {\r\n+    setIsConvertingToCity(false);\r\n+  }\r\n+};\r\n+\r\n+// Helper function to determine direction (N, S, E, W, NE, NW, SE, SW)\r\n+const getDirection = (lat1, lon1, lat2, lon2) => {\r\n+  const latDiff = lat1 - lat2;\r\n+  const lonDiff = lon1 - lon2;\r\n+  \r\n+  const absLatDiff = Math.abs(latDiff);\r\n+  const absLonDiff = Math.abs(lonDiff);\r\n+  \r\n+  // If differences are very small, consider it center\r\n+  if (absLatDiff < 0.1 && absLonDiff < 0.1) {\r\n+    return '';\r\n+  }\r\n+  \r\n+  // Determine primary direction\r\n+  let direction = '';\r\n+  \r\n+  // North/South\r\n+  if (absLatDiff > absLonDiff * 0.5) {\r\n+    direction += latDiff > 0 ? 'N' : 'S';\r\n+  }\r\n+  \r\n+  // East/West\r\n+  if (absLonDiff > absLatDiff * 0.5) {\r\n+    direction += lonDiff > 0 ? 'E' : 'W';\r\n+  }\r\n+  \r\n+  return direction || 'Central';\r\n+};\r\n+\r\n+// Helper function to get state abbreviations\r\n+const getStateAbbreviation = (stateName) => {\r\n+  const stateMap = {\r\n+    'Alabama': 'AL', 'Alaska': 'AK', 'Arizona': 'AZ', 'Arkansas': 'AR',\r\n+    'California': 'CA', 'Colorado': 'CO', 'Connecticut': 'CT', 'Delaware': 'DE',\r\n+    'Florida': 'FL', 'Georgia': 'GA', 'Hawaii': 'HI', 'Idaho': 'ID',\r\n+    'Illinois': 'IL', 'Indiana': 'IN', 'Iowa': 'IA', 'Kansas': 'KS',\r\n+    'Kentucky': 'KY', 'Louisiana': 'LA', 'Maine': 'ME', 'Maryland': 'MD',\r\n+    'Massachusetts': 'MA', 'Michigan': 'MI', 'Minnesota': 'MN', 'Mississippi': 'MS',\r\n+    'Missouri': 'MO', 'Montana': 'MT', 'Nebraska': 'NE', 'Nevada': 'NV',\r\n+    'New Hampshire': 'NH', 'New Jersey': 'NJ', 'New Mexico': 'NM', 'New York': 'NY',\r\n+    'North Carolina': 'NC', 'North Dakota': 'ND', 'Ohio': 'OH', 'Oklahoma': 'OK',\r\n+    'Oregon': 'OR', 'Pennsylvania': 'PA', 'Rhode Island': 'RI', 'South Carolina': 'SC',\r\n+    'South Dakota': 'SD', 'Tennessee': 'TN', 'Texas': 'TX', 'Utah': 'UT',\r\n+    'Vermont': 'VT', 'Virginia': 'VA', 'Washington': 'WA', 'West Virginia': 'WV',\r\n+    'Wisconsin': 'WI', 'Wyoming': 'WY'\r\n+  };\r\n+  \r\n+  return stateMap[stateName] || stateName;\r\n+};\r\n+\r\n+// Replace handleLocationToZip with handleLocationToCity\r\n+const handleLocationToCity = async () => {\r\n+  try {\r\n+    setIsConvertingToCity(true);\r\n+    setError(null);\r\n+    \r\n+    // Request fresh location from browser\r\n+    const freshLocation = await new Promise((resolve, reject) => {\r\n+      if (!navigator.geolocation) {\r\n+        reject(new Error('Geolocation not supported'));\r\n+        return;\r\n+      }\r\n+      \r\n+      navigator.geolocation.getCurrentPosition(\r\n+        (position) => {\r\n+          resolve({\r\n+            latitude: position.coords.latitude,\r\n+            longitude: position.coords.longitude\r\n+          });\r\n+        },\r\n+        (error) => {\r\n+          reject(error);\r\n+        },\r\n+        {\r\n+          enableHighAccuracy: true,\r\n+          timeout: 10000,\r\n+          maximumAge: 0\r\n+        }\r\n+      );\r\n+    });\r\n+    \r\n+    // Convert fresh coordinates to city/region\r\n+    await convertCoordsToCity(freshLocation.latitude, freshLocation.longitude);\r\n+    \r\n+  } catch (error) {\r\n+    console.error('Error getting fresh location:', error);\r\n+    \r\n+    // Fallback: use stored location if available\r\n+    if (userLocation) {\r\n+      console.log('Using stored location as fallback');\r\n+      await convertCoordsToCity(userLocation.latitude, userLocation.longitude);\r\n+    } else {\r\n+      setError('Location not available. Please enable location services.');\r\n+    }\r\n+  } finally {\r\n+    setIsConvertingToCity(false);\r\n+  }\r\n+};\r\n+\r\n+// Replace handleToggleZipPin with handleToggleCityPin\r\n+const handleToggleCityPin = () => {\r\n+  if (isCityPinned) {\r\n+    localStorage.removeItem('pinnedCityRegion');\r\n+    setIsCityPinned(false);\r\n+    setCityRegion('');\r\n+    setCityInputValue('');\r\n+  } else {\r\n+    if (cityRegion && cityRegion !== 'Not available' && cityRegion !== 'Error') {\r\n+      localStorage.setItem('pinnedCityRegion', cityRegion);\r\n+      setIsCityPinned(true);\r\n+    }\r\n+  }\r\n+};\r\n+\r\n+// Update the useEffect that loads pinned location on mount\r\n+useEffect(() => {\r\n+  const pinnedCity = localStorage.getItem('pinnedCityRegion');\r\n+  if (pinnedCity) {\r\n+    setCityRegion(pinnedCity);\r\n+    setCityInputValue(pinnedCity);\r\n+    setIsCityPinned(true);\r\n+  }\r\n+}, []);\r\n+\r\n+\r\n+  // Handle opening shop\r\n+  const handleOpenShop = () => {\r\n+    navigate('/shop/create/template');\r\n+  };\r\n+\r\n+  // Refresh theme\r\n+  const refreshTheme = () => {\r\n+    if (isRefreshing) return;\r\n+    \r\n+    setIsRefreshing(true);\r\n+    const styles = Object.values(WELCOME_STYLES);\r\n+    const otherStyles = styles.filter(style => style.id !== currentStyle.id);\r\n+    \r\n+    if (otherStyles.length > 0) {\r\n+      const randomStyle = otherStyles[Math.floor(Math.random() * otherStyles.length)];\r\n+      setCurrentStyle(randomStyle);\r\n+      \r\n+      if (isPinned) {\r\n+        localStorage.removeItem('pinnedStyleId');\r\n+        setIsPinned(false);\r\n+      }\r\n+    }\r\n+    \r\n+    setTimeout(() => setIsRefreshing(false), 500);\r\n+  };\r\n+\r\n+  // Toggle pin style\r\n+  const togglePinStyle = () => {\r\n+    if (isPinned) {\r\n+      localStorage.removeItem('pinnedStyleId');\r\n+      setIsPinned(false);\r\n+      \r\n+      const styles = Object.values(WELCOME_STYLES).filter(\r\n+        style => style.id !== currentStyle.id\r\n+      );\r\n+      \r\n+      if (styles.length > 0) {\r\n+        const randomStyle = styles[Math.floor(Math.random() * styles.length)];\r\n+        setCurrentStyle(randomStyle);\r\n+      }\r\n+    } else {\r\n+      localStorage.setItem('pinnedStyleId', currentStyle.id.toString());\r\n+      setIsPinned(true);\r\n+    }\r\n+  };\r\n+\r\n+  // Handle location update\r\n+  const handleLocationUpdate = () => {\r\n+    setUpdatingLocation(true);\r\n+    requestLocation();\r\n+  };\r\n+\r\n+  // Get location display text\r\n+  const getLocationDisplayText = () => {\r\n+    if (!userLocation) {\r\n+      return \"Location: Not available\";\r\n+    }\r\n+    return `Location: ${userLocation.latitude.toFixed(4)}, ${userLocation.longitude.toFixed(4)}`;\r\n+  };\r\n+\r\n+  // Search featured items\r\n+  const searchFeaturedItems = async (searchTerm) => {\r\n+    if (!searchTerm.trim()) {\r\n+      setSearchResults([]);\r\n+      setHasSearchResults(false);\r\n+      return;\r\n+    }\r\n+  \r\n+    try {\r\n+      setIsSearching(true);\r\n+      setError(null);\r\n+    \r\n+      const shopsRef = collection(db, 'shops');\r\n+      const snapshot = await getDocs(shopsRef);\r\n+      \r\n+      let allMatchingItems = [];\r\n+      const currentUserId = user?.uid;\r\n+      \r\n+      snapshot.docs.forEach(doc => {\r\n+        const shopData = doc.data();\r\n+        \r\n+        if (doc.id === currentUserId) {\r\n+          return;\r\n+        }\r\n+        \r\n+        if (shopData?.items && Array.isArray(shopData.items)) {\r\n+          shopData.items\r\n+            .filter(item => !item.deleted)\r\n+            .forEach(item => {\r\n+              const itemName = (item.name || '').toLowerCase();\r\n+              const itemDescription = (item.description || '').toLowerCase();\r\n+              const searchLower = searchTerm.toLowerCase();\r\n+              \r\n+              if (itemName.includes(searchLower) || itemDescription.includes(searchLower)) {\r\n+                allMatchingItems.push({\r\n+                  ...item,\r\n+                  shopId: doc.id,\r\n+                  shopName: shopData.name || 'Unknown Shop',\r\n+                  shopTheme: shopData.theme\r\n+                });\r\n+              }\r\n+            });\r\n+        }\r\n+      });\r\n+    \r\n+      if (userLocation) {\r\n+        allMatchingItems = allMatchingItems.map(item => {\r\n+          if (item.coordinates && item.coordinates.lat && item.coordinates.lng) {\r\n+            try {\r\n+              const distanceInMeters = getDistance(\r\n+                { latitude: userLocation.latitude, longitude: userLocation.longitude },\r\n+                { latitude: item.coordinates.lat, longitude: item.coordinates.lng }\r\n+              );\r\n+              const distanceInMiles = (distanceInMeters / 1609.34).toFixed(1);\r\n+              \r\n+              return {\r\n+                ...item,\r\n+                distance: distanceInMeters,\r\n+                distanceInMiles,\r\n+                formattedDistance: `${distanceInMiles} mi`\r\n+              };\r\n+            } catch (e) {\r\n+              console.warn('Error calculating distance for item:', e);\r\n+              return item;\r\n+            }\r\n+          }\r\n+          return item;\r\n+        });\r\n+      }\r\n+    \r\n+      setSearchResults(allMatchingItems);\r\n+      setHasSearchResults(true);\r\n+      \r\n+      if (allMatchingItems.length === 0) {\r\n+        setError(`No items found matching \"${searchTerm}\"`);\r\n+      }\r\n+    } catch (error) {\r\n+      console.error('Error searching items:', error);\r\n+      setError('Failed to search items. Please try again later.');\r\n+    } finally {\r\n+      setIsSearching(false);\r\n+    }\r\n+  };\r\n+\r\n+\r\n+  // Handle featured search\r\n+  const handleFeaturedSearch = () => {\r\n+    if (featuredSearchTerm.trim()) {\r\n+      searchFeaturedItems(featuredSearchTerm);\r\n+    }\r\n+  };\r\n+\r\n+  const handleRowScroll = (categoryName, rowNumber, scrollLeft) => {\r\n+  const row1Id = `${categoryName}-row1`;\r\n+  const row2Id = `${categoryName}-row2`;\r\n+  \r\n+  const row1Element = document.getElementById(row1Id);\r\n+  const row2Element = document.getElementById(row2Id);\r\n+  \r\n+  if (rowNumber === 1 && row2Element) {\r\n+    row2Element.scrollLeft = scrollLeft;\r\n+  } else if (rowNumber === 2 && row1Element) {\r\n+    row1Element.scrollLeft = scrollLeft;\r\n+  }\r\n+};\r\n+\r\n+  const handleClearFeaturedSearch = () => {\r\n+    setFeaturedSearchTerm('');\r\n+    setSearchResults([]);\r\n+    setHasSearchResults(false);\r\n+    setError(null);\r\n+  };\r\n+\r\n+  // Fetch nearby items\r\n+  const fetchNearbyItems = async () => {\r\n+    if (!userLocation) {\r\n+      setError('Location information is not available');\r\n+      setSearching(false);\r\n+      return;\r\n+    }\r\n+  \r\n+    try {\r\n+      setLoading(true);\r\n+      const shopsRef = collection(db, 'shops');\r\n+      const snapshot = await getDocs(shopsRef);\r\n+      \r\n+      let itemsInRadius = [];\r\n+      const currentUserId = user?.uid;\r\n+      \r\n+      snapshot.docs.forEach(doc => {\r\n+        const shopData = doc.data();\r\n+        \r\n+        if (doc.id === currentUserId) {\r\n+          return;\r\n+        }\r\n+        \r\n+        if (shopData?.items && Array.isArray(shopData.items)) {\r\n+          shopData.items\r\n+            .filter(item => !item.deleted)\r\n+            .forEach(item => {\r\n+              let itemCoords = item.coordinates;\r\n+              if (!itemCoords && item.address) {\r\n+                const coordsMatch = item.address.match(/^(-?\\d+\\.?\\d*),\\s*(-?\\d+\\.?\\d*)$/);\r\n+                if (coordsMatch) {\r\n+                  itemCoords = {\r\n+                    lat: parseFloat(coordsMatch[1]),\r\n+                    lng: parseFloat(coordsMatch[2])\r\n+                  };\r\n+                }\r\n+              }\r\n+  \r\n+              if (itemCoords?.lat && itemCoords?.lng) {\r\n+                try {\r\n+                  const distanceInMeters = getDistance(\r\n+                    { latitude: userLocation.latitude, longitude: userLocation.longitude },\r\n+                    { latitude: itemCoords.lat, longitude: itemCoords.lng }\r\n+                  );\r\n+  \r\n+                  const distanceInMiles = (distanceInMeters / 1609.34).toFixed(1);\r\n+                  \r\n+                  itemsInRadius.push({\r\n+                    ...item,\r\n+                    shopId: doc.id,\r\n+                    shopName: shopData.name || 'Unknown Shop',\r\n+                    coordinates: itemCoords,\r\n+                    distance: distanceInMeters,\r\n+                    distanceInMiles,\r\n+                    formattedDistance: `${distanceInMiles} mi`,\r\n+                    theme: shopData.theme\r\n+                  });\r\n+                } catch (e) {\r\n+                  console.warn('Error calculating distance for item:', e);\r\n+                }\r\n+              }\r\n+            });\r\n+        }\r\n+      });\r\n+  \r\n+      itemsInRadius.sort((a, b) => a.distance - b.distance);\r\n+      itemsInRadius = itemsInRadius.slice(0, 10);\r\n+  \r\n+      setNearbyItems(itemsInRadius);\r\n+      setHasSearched(true);\r\n+      \r\n+      if (itemsInRadius.length === 0) {\r\n+        setError('No items found in your area');\r\n+      }\r\n+    } catch (error) {\r\n+      console.error('Error fetching nearby items:', error);\r\n+      setError('Failed to load nearby items. Please try again later.');\r\n+    } finally {\r\n+      setLoading(false);\r\n+      setSearching(false);\r\n+    }\r\n+  };\r\n+\r\n+  // Handle live location\r\n+  const handleLiveLocation = () => {\r\n+    setSearching(true);\r\n+    setError(null);\r\n+    \r\n+    if (userLocation) {\r\n+      fetchNearbyItems();\r\n+      setHasSearched(true);\r\n+    } else {\r\n+      requestLocation();\r\n+    }\r\n+  };\r\n+\r\n+  // Handle address search\r\n+  const handleAddressSearch = async () => {\r\n+    if (!searchAddress.trim()) {\r\n+      setError('Please enter an address');\r\n+      return;\r\n+    }\r\n+  \r\n+    setSearching(true);\r\n+    setError(null);\r\n+    setHasSearched(true);\r\n+    \r\n+    try {\r\n+      const encodedAddress = encodeURIComponent(searchAddress);\r\n+      const response = await fetch(\r\n+        `https://nominatim.openstreetmap.org/search?q=${encodedAddress}&format=json&limit=1`,\r\n+        {\r\n+          headers: {\r\n+            'Accept': 'application/json',\r\n+            'User-Agent': 'KalKode Marketplace'\r\n+          }\r\n+        }\r\n+      );\r\n+      \r\n+      const data = await response.json();\r\n+  \r\n+      if (data && data[0]) {\r\n+        const coordinates = {\r\n+          latitude: parseFloat(data[0].lat),\r\n+          longitude: parseFloat(data[0].lon)\r\n+        };\r\n+        \r\n+        await fetchNearbyItems(coordinates);\r\n+      } else {\r\n+        throw new Error('Location not found. Please try a different address.');\r\n+      }\r\n+  \r\n+    } catch (error) {\r\n+      console.error('Error searching address:', error);\r\n+      setError(error.message || 'Unable to search this location. Please try again.');\r\n+    } finally {\r\n+      setSearching(false);\r\n+    }\r\n+  };\r\n+\r\n+  // Handle item click\r\n+  const handleItemClick = (item) => {\r\n+    setZoomedItem(item);\r\n+    setOrderQuantity(1);\r\n+    setCurrentImageIndex(0); // Reset image index\r\n+    \r\n+    const scrollY = window.scrollY;\r\n+    document.body.style.position = 'fixed';\r\n+    document.body.style.top = `-${scrollY}px`;\r\n+    document.body.style.width = '100%';\r\n+    document.body.style.overflow = 'hidden';\r\n+    \r\n+    document.body.setAttribute('data-scroll-y', scrollY);\r\n+  };\r\n+\r\n+  // Handle close zoom\r\n+  const handleCloseZoom = () => {\r\n+    setZoomedItem(null);\r\n+    setCurrentImageIndex(0);\r\n+    \r\n+    const scrollY = document.body.getAttribute('data-scroll-y') || '0';\r\n+    document.body.style.position = '';\r\n+    document.body.style.top = '';\r\n+    document.body.style.width = '';\r\n+    document.body.style.overflow = '';\r\n+    document.body.removeAttribute('data-scroll-y');\r\n+    \r\n+    window.scrollTo(0, parseInt(scrollY));\r\n+  };\r\n+\r\n+  // Adjust quantity\r\n+  const adjustQuantity = (delta) => {\r\n+    const maxQuantity = parseInt(zoomedItem?.quantity) || 1;\r\n+    const newQuantity = Math.max(1, Math.min(maxQuantity, orderQuantity + delta));\r\n+    setOrderQuantity(newQuantity);\r\n+  };\r\n+\r\n+  // Handle direct order\r\n+  const handleDirectOrder = async () => {\r\n+    if (!zoomedItem) return;\r\n+    \r\n+    if (!isAuthenticated) {\r\n+       navigate('/auth', { \r\n+        state: { \r\n+          mode: 'login',\r\n+          from: window.location.pathname\r\n+        }\r\n+      });\r\n+       return;\r\n+     }\r\n+    \r\n+    try {\r\n+      const result = await TransactionService.initiateQuantityTransaction(\r\n+        zoomedItem.id,\r\n+        zoomedItem.shopId,\r\n+        parseFloat(zoomedItem.price),\r\n+        orderQuantity,\r\n+        'inperson'\r\n+      );\r\n+      \r\n+      if (result.transactionId) {\r\n+        handleCloseZoom();\r\n+        navigate(`/messages?chat=${result.transactionId}`);\r\n+      }\r\n+    } catch (error) {\r\n+      console.error('Error placing order:', error);\r\n+      alert('Error placing order: ' + error.message);\r\n+    }\r\n+  };\r\n+\r\n+  // Handle order click\r\n+  const handleOrderClick = (item) => {\r\n+    setSelectedChatItem(item);\r\n+    setChatOpen(true);\r\n+    \r\n+    if (zoomedItem) {\r\n+      setZoomedItem(null);\r\n+      const scrollY = document.body.getAttribute('data-scroll-y') || '0';\r\n+      document.body.style.position = '';\r\n+      document.body.style.top = '';\r\n+      document.body.style.width = '';\r\n+      document.body.style.overflow = '';\r\n+      document.body.removeAttribute('data-scroll-y');\r\n+      window.scrollTo(0, parseInt(scrollY));\r\n+    }\r\n+  };\r\n+\r\n+  // Handle close chat\r\n+  const handleCloseChat = () => {\r\n+    setChatOpen(false);\r\n+    setSelectedChatItem(null);\r\n+    \r\n+    document.body.style.position = '';\r\n+    document.body.style.top = '';\r\n+    document.body.style.width = '';\r\n+    document.body.style.overflow = '';\r\n+    document.body.removeAttribute('data-scroll-y');\r\n+  };\r\n+\r\n+  // Handle inquire click\r\n+  const handleInquireClick = () => {\r\n+    alert('Inquiry feature coming soon!');\r\n+  };\r\n+\r\n+  // Handle logout\r\n+  const handleLogout = async () => {\r\n+    try {\r\n+      await signOut(auth);\r\n+      navigate('/');\r\n+    } catch (error) {\r\n+      console.error('Error signing out:', error);\r\n+    }\r\n+  };\r\n+\r\n+  // Handle login\r\n+  const handleLogin = () => {\r\n+    navigate('/auth', { \r\n+      state: { \r\n+        mode: 'login',\r\n+        from: window.location.pathname\r\n+      }\r\n+    });\r\n+  };\r\n+\r\n+  // Effects\r\n+  useEffect(() => {\r\n+    const fetchShopData = async () => {\r\n+      if (user && user.uid) {\r\n+        try {\r\n+          const data = await getShopData(user.uid);\r\n+          setShopData(data);\r\n+        } catch (error) {\r\n+          console.error('Error fetching shop data:', error);\r\n+        }\r\n+      }\r\n+    };\r\n+    \r\n+    if (isAuthenticated) {\r\n+      fetchShopData();\r\n+    }\r\n+  }, [user, isAuthenticated]);\r\n+\r\n+  useEffect(() => {\r\n+    if (isAuthenticated) {\r\n+      const randomIndex = Math.floor(Math.random() * MOTIVATIONAL_MESSAGES.length);\r\n+      setMotivationalMessage(MOTIVATIONAL_MESSAGES[randomIndex]);\r\n+    }\r\n+  }, [isAuthenticated]);\r\n+\r\n+  useEffect(() => {\r\n+    const pinnedStyleId = localStorage.getItem('pinnedStyleId');\r\n+    \r\n+    if (pinnedStyleId) {\r\n+      const pinnedStyle = Object.values(WELCOME_STYLES).find(\r\n+        style => style.id.toString() === pinnedStyleId\r\n+      );\r\n+      \r\n+      if (pinnedStyle) {\r\n+        setCurrentStyle(pinnedStyle);\r\n+        setIsPinned(true);\r\n+        return;\r\n+      }\r\n+    }\r\n+    \r\n+    const styles = Object.values(WELCOME_STYLES);\r\n+    const randomStyle = styles[Math.floor(Math.random() * styles.length)];\r\n+    setCurrentStyle(randomStyle);\r\n+  }, []);\r\n+\r\n+  useEffect(() => {\r\n+    if (activeTab === 'nearby' && userLocation) {\r\n+      fetchNearbyItems();\r\n+      setHasSearched(true);\r\n+    }\r\n+  }, [activeTab, userLocation]);\r\n+\r\n+  useEffect(() => {\r\n+    if (locationPermission === 'pending') {\r\n+      requestLocation();\r\n+    }\r\n+  }, []);\r\n+\r\n+  useEffect(() => {\r\n+    if (userLocation) {\r\n+      if (activeTab === 'nearby') {\r\n+        fetchNearbyItems();\r\n+        setHasSearched(true);\r\n+      }\r\n+      \r\n+      if (activeTab === 'featured') {\r\n+        loadCategorizedItems();\r\n+      }\r\n+      \r\n+      setUpdatingLocation(false);\r\n+    }\r\n+  }, [userLocation, activeTab]);\r\n+\r\n+  useEffect(() => {\r\n+  const loadTabContent = async () => {\r\n+    console.log('📑 Loading tab content...', { activeTab, effectiveLocation });\r\n+    \r\n+    try {\r\n+      setLoading(true);\r\n+      setError(null);\r\n+  \r\n+      switch (activeTab) {\r\n+        case 'featured':\r\n+          // ✅ Wait for effectiveLocation before loading items\r\n+          if (effectiveLocation) {\r\n+            console.log('📦 Loading featured items...');\r\n+            await loadCategorizedItems();\r\n+          } else {\r\n+            console.log('⏳ Waiting for location...');\r\n+            setLoading(false);\r\n+          }\r\n+          return;\r\n+        case 'nearby':\r\n+          setLoading(false);\r\n+          break;\r\n+        case 'media':\r\n+          setLoading(false);\r\n+          break;\r\n+        default:\r\n+          setLoading(false);\r\n+      }\r\n+    } catch (error) {\r\n+      console.error('Error loading content:', error);\r\n+      setError('Failed to load content. Please try again later.');\r\n+      setLoading(false);\r\n+    }\r\n+  };\r\n+\r\n+  loadTabContent();\r\n+}, [activeTab, user?.uid, effectiveLocation]); // ✅ Added effectiveLocation dependency\r\n+\r\n+  useEffect(() => {\r\n+    if (activeTab === 'featured') {\r\n+      loadCategorizedItems();\r\n+    }\r\n+    \r\n+    const refreshInterval = setInterval(() => {\r\n+      if (activeTab === 'featured') {\r\n+        loadCategorizedItems();\r\n+      }\r\n+    }, 300000);\r\n+\r\n+    return () => clearInterval(refreshInterval);\r\n+  }, [activeTab, currentPage]);\r\n+\r\n+  // Ping animation effect (disabled on mobile for performance)\r\n+  useEffect(() => {\r\n+    if (window.innerWidth < 768) return;\r\n+    \r\n+    const container = document.querySelector('.page-container');\r\n+    if (!container) return;\r\n+\r\n+    const createPing = () => {\r\n+      const ping = document.createElement('div');\r\n+      ping.className = 'ping';\r\n+      \r\n+      ping.style.left = `${Math.random() * 100}%`;\r\n+      ping.style.top = `${Math.random() * 100}%`;\r\n+      ping.style.zIndex = '0';\r\n+      \r\n+      container.appendChild(ping);\r\n+      \r\n+      setTimeout(() => {\r\n+        if (ping && ping.parentNode) {\r\n+          ping.remove();\r\n+        }\r\n+      }, 3000);\r\n+    };\r\n+\r\n+    const createPingGroup = (count) => {\r\n+      for (let i = 0; i < count; i++) {\r\n+        setTimeout(() => {\r\n+          createPing();\r\n+        }, i * 200);\r\n+      }\r\n+    };\r\n+\r\n+    const pingCounts = [10, 30, 20];\r\n+    let currentIndex = 0;\r\n+\r\n+    const interval = setInterval(() => {\r\n+      const count = pingCounts[currentIndex];\r\n+      createPingGroup(count);\r\n+      currentIndex = (currentIndex + 1) % pingCounts.length;\r\n+    }, 3000);\r\n+    \r\n+    return () => {\r\n+      clearInterval(interval);\r\n+      const pings = container.getElementsByClassName('ping');\r\n+      while (pings.length > 0) {\r\n+        pings[0].remove();\r\n+      }\r\n+    };\r\n+  }, []);\r\n+\r\n+  // Cleanup on unmount\r\n+  useEffect(() => {\r\n+    return () => {\r\n+      document.body.style.position = '';\r\n+      document.body.style.top = '';\r\n+      document.body.style.width = '';\r\n+      document.body.style.overflow = '';\r\n+      document.body.removeAttribute('data-scroll-y');\r\n+      \r\n+      if (sliderAnimationRef.current) {\r\n+        cancelAnimationFrame(sliderAnimationRef.current);\r\n+      }\r\n+    };\r\n+  }, []);\r\n+\r\n+  if (!currentStyle) return null;\r\n+\r\n+  return (\r\n+    <PageContainer className=\"page-container\" theme={currentStyle}>\r\n+      <ThemeDecorations theme={currentStyle} />\r\n+      <Header theme={currentStyle}>\r\n+        <Logo onClick={() => navigate('/')} theme={currentStyle}>\r\n+          KALKODE\r\n+        </Logo>\r\n+\r\n+        <HeaderControls>\r\n+          <HeaderButton \r\n+            onClick={refreshTheme}\r\n+            theme={currentStyle}\r\n+            title=\"Random theme\"\r\n+          >\r\n+            <RefreshCw size={20} className={isRefreshing ? \"spinning\" : \"\"} />\r\n+          </HeaderButton>\r\n+          \r\n+          <HeaderButton \r\n+            onClick={togglePinStyle} \r\n+            theme={currentStyle}\r\n+            className={isPinned ? \"pinned\" : \"\"}\r\n+            title={isPinned ? \"Unpin theme\" : \"Pin theme\"}\r\n+          >\r\n+            <Pin size={20} fill={isPinned ? currentStyle.colors.accent : \"none\"} />\r\n+          </HeaderButton>\r\n+          \r\n+          {isAuthenticated && (\r\n+            <HeaderButton \r\n+              onClick={handleLogout}\r\n+              theme={currentStyle}\r\n+              title=\"Logout\"\r\n+            >\r\n+              <LogOut size={20} />\r\n+            </HeaderButton>\r\n+          )}\r\n+        </HeaderControls>\r\n+      </Header>\r\n+\r\n+      <MainContent isAuthenticated={isAuthenticated}>\r\n+        <WelcomeSection theme={currentStyle}>\r\n+          {isAuthenticated && shopData ? (\r\n+            <>\r\n+              <ProfileSection>\r\n+                <ProfileImage theme={currentStyle}>\r\n+                  {shopData.profile ? (\r\n+                    <img src={shopData.profile} alt={shopData.name || 'Shop Profile'} />\r\n+                  ) : (\r\n+                    <div style={{ \r\n+                      width: '100%', \r\n+                      height: '100%', \r\n+                      background: currentStyle?.colors?.accent || '#800000',\r\n+                      display: 'flex',\r\n+                      alignItems: 'center',\r\n+                      justifyContent: 'center',\r\n+                      color: '#fff',\r\n+                      fontSize: '2rem'\r\n+                    }}>\r\n+                      {(shopData.name?.charAt(0) || user.email?.charAt(0) || 'S').toUpperCase()}\r\n+                    </div>\r\n+                  )}\r\n+                </ProfileImage>\r\n+                <ShopName theme={currentStyle}>{shopData.name || 'My Shop'}</ShopName>\r\n+              </ProfileSection>         \r\n+\r\n+              <MotivationalMessage theme={currentStyle}>\r\n+                {motivationalMessage}\r\n+              </MotivationalMessage>\r\n+            </>\r\n+          ) : (\r\n+            <>\r\n+              <h1>Welcome to KalKode</h1>\r\n+              <p>Trade With Your Community.</p>\r\n+\r\n+              <ActionButtonContainer>\r\n+                <ActionButton theme={currentStyle} onClick={handleOpenShop}>\r\n+                  Open Up Shop\r\n+                </ActionButton>\r\n+                <ActionButton \r\n+                  theme={currentStyle}\r\n+                  onClick={handleLogin}\r\n+                  variant=\"outline\"\r\n+                >\r\n+                  Sign In\r\n+                </ActionButton>\r\n+              </ActionButtonContainer>\r\n+            </>\r\n+          )}\r\n+\r\n+\r\n+        </WelcomeSection>\r\n+\r\n+        <TabContainer>\r\n+          <Tab \r\n+            theme={currentStyle}\r\n+            active={activeTab === 'featured'} \r\n+            onClick={() => setActiveTab('featured')}\r\n+          >\r\n+            <Package size={16} />\r\n+            Featured\r\n+          </Tab>\r\n+          <Tab\r\n+            theme={currentStyle} \r\n+            active={activeTab === 'nearby'} \r\n+            onClick={() => setActiveTab('nearby')}\r\n+          >\r\n+            <Navigation size={16} />\r\n+            Nearby\r\n+          </Tab>\r\n+          <Tab\r\n+            theme={currentStyle} \r\n+            active={activeTab === 'media'} \r\n+            onClick={() => setActiveTab('media')}\r\n+          >\r\n+            <Film size={16} />\r\n+            Media\r\n+          </Tab>\r\n+        </TabContainer>\r\n+\r\n+\r\n+        <LocationIndicator2 theme={currentStyle} isPinned={isCityPinned}>\r\n+          <button \r\n+            className=\"location-icon-btn\"\r\n+            onClick={handleLocationToCity}\r\n+            disabled={isConvertingToCity}\r\n+            title=\"Get region from current location\"\r\n+          >\r\n+            {isConvertingToCity ? (\r\n+              <div className=\"updating-spinner\" />\r\n+            ) : (\r\n+              <Navigation size={20} />\r\n+            )}\r\n+          </button>\r\n+          \r\n+          <input\r\n+            type=\"text\"\r\n+            className=\"location-input\"\r\n+            value={cityInputValue}\r\n+            onChange={(e) => setCityInputValue(e.target.value)}\r\n+            placeholder={\r\n+              isIPLocation ? \r\n+                `${effectiveLocation?.city || 'Location'} (IP-based)` : \r\n+                cityRegion ? cityRegion : \"Click location icon to share\"\r\n+            }\r\n+            readOnly\r\n+          />\r\n+\r\n+          <button\r\n+            className=\"pin-icon-btn\"\r\n+            onClick={handleToggleCityPin}\r\n+            disabled={!cityRegion || cityRegion === 'Not available' || cityRegion === 'Error'}\r\n+            title={isCityPinned ? \"Unpin location\" : \"Pin location\"}\r\n+          >\r\n+            <Pin \r\n+              size={18} \r\n+              fill={isCityPinned ? currentStyle.colors.accent : \"none\"}\r\n+            />\r\n+          </button>\r\n+        </LocationIndicator2>\r\n+\r\n+\r\n+        {/* Nearby Items Tab */}\r\n+        {activeTab === 'nearby' && (\r\n+          <>\r\n+            <SearchContainer>\r\n+              <SearchInput\r\n+                type=\"text\"\r\n+                placeholder=\"Enter address or ZIP code...\"\r\n+                value={searchAddress}\r\n+                onChange={(e) => setSearchAddress(e.target.value)}\r\n+                onKeyPress={(e) => e.key === 'Enter' && handleAddressSearch()}\r\n+              />\r\n+              <SearchButtonGroup>\r\n+                <SearchButton \r\n+                  onClick={handleAddressSearch}\r\n+                  disabled={searching || !searchAddress.trim()}\r\n+                >\r\n+                  <Navigation size={16} />\r\n+                  Search\r\n+                </SearchButton>\r\n+                <SearchButton \r\n+                  onClick={handleLiveLocation}\r\n+                  disabled={searching}\r\n+                  variant=\"live\"\r\n+                >\r\n+                  <Navigation size={16} />\r\n+                  Current\r\n+                </SearchButton>\r\n+              </SearchButtonGroup>\r\n+            </SearchContainer>\r\n+\r\n+            <GridContainer>\r\n+              {error ? (\r\n+                <EmptyGridMessage>\r\n+                  <h3>Oops!</h3>\r\n+                  <p>{error}</p>\r\n+                </EmptyGridMessage>\r\n+              ) : loading ? (\r\n+                <div style={{ textAlign: 'center', gridColumn: '1/-1' }}>\r\n+                  <LoadingSpinner />\r\n+                </div>\r\n+              ) : !hasSearched ? (\r\n+                <EmptyGridMessage>\r\n+                  <h3>Find Items Near You</h3>\r\n+                  <p>Enter your address or use current location to discover items in your area</p>\r\n+                </EmptyGridMessage>\r\n+              ) : nearbyItems.length === 0 ? (\r\n+                <EmptyGridMessage>\r\n+                  <h3>No Items Found</h3>\r\n+                  <p>No items found in this location. Try searching a different area.</p>\r\n+                </EmptyGridMessage>\r\n+              ) : (              \r\n+                nearbyItems.map(item => (\r\n+                  <FeaturedItem \r\n+                    key={`${item.shopId}-${item.id}`} \r\n+                    item={{\r\n+                      ...item,\r\n+                      location: item.formattedDistance\r\n+                    }}\r\n+                    showDistance={true}\r\n+                    theme={currentStyle}\r\n+                    onItemClick={handleItemClick}\r\n+                  />\r\n+                ))\r\n+              )}\r\n+            </GridContainer>\r\n+          </>\r\n+        )}\r\n+\r\n+        {/* Featured Items Tab */}\r\n+        {activeTab === 'featured' && (\r\n+          <>\r\n+            {/* Search container with Filter */}\r\n+            <SearchContainer>\r\n+              <SearchInput\r\n+                type=\"text\"\r\n+                placeholder=\"Search for items...\"\r\n+                value={featuredSearchTerm}\r\n+                onChange={(e) => setFeaturedSearchTerm(e.target.value)}\r\n+                onKeyPress={(e) => e.key === 'Enter' && handleFeaturedSearch()}\r\n+              />\r\n+              <SearchButtonGroup>\r\n+                <SearchButton \r\n+                  onClick={handleFeaturedSearch}\r\n+                  disabled={isSearching || !featuredSearchTerm.trim()}\r\n+                >\r\n+                  <Search size={16} />\r\n+                  Search\r\n+                </SearchButton>\r\n+                {hasSearchResults && (\r\n+                  <SearchButton onClick={handleClearFeaturedSearch} variant=\"live\">\r\n+                    <X size={16} />\r\n+                    Clear\r\n+                  </SearchButton>\r\n+                )}\r\n+\r\n+                {/* Filter Button */}\r\n+                <SortContainer className=\"sort-container\">\r\n+                  <SearchButton \r\n+                    onClick={() => setSortMenuOpen(!sortMenuOpen)}\r\n+                    style={{ position: 'relative' }}\r\n+                  >\r\n+                    <Filter size={16} />\r\n+                    {sortBy !== 'recent' && (\r\n+                      <div style={{\r\n+                        position: 'absolute',\r\n+                        top: '4px',\r\n+                        right: '4px',\r\n+                        width: '6px',\r\n+                        height: '6px',\r\n+                        borderRadius: '50%',\r\n+                        background: currentStyle?.colors?.accent || '#800000'\r\n+                      }} />\r\n+                    )}\r\n+                  </SearchButton>\r\n+                  \r\n+                  <SortDropdown theme={currentStyle} isOpen={sortMenuOpen}>\r\n+                    <div style={{\r\n+                      padding: '0.5rem 1rem 0.75rem',\r\n+                      fontSize: '0.75rem',\r\n+                      fontWeight: '700',\r\n+                      textTransform: 'uppercase',\r\n+                      letterSpacing: '1px',\r\n+                      color: currentStyle?.colors?.accent || '#800000',\r\n+                      borderBottom: `2px solid ${currentStyle?.colors?.accent || '#800000'}`,\r\n+                      marginBottom: '0.75rem',\r\n+                      fontFamily: currentStyle?.fonts?.heading || 'inherit'\r\n+                    }}>\r\n+                      Sort By\r\n+                    </div>\r\n+\r\n+                    <SortOption \r\n+                      theme={currentStyle}\r\n+                      active={sortBy === 'recent'}\r\n+                      onClick={() => {\r\n+                        if (!userLocation) {\r\n+                          requestLocation();\r\n+                          return;\r\n+                        }\r\n+                        setSortBy('recent');\r\n+                        setSortMenuOpen(false);\r\n+                        loadCategorizedItems();\r\n+                      }}\r\n+                    >\r\n+                      <Package size={16} />\r\n+                      <div style={{ display: 'flex', flexDirection: 'column', flex: 1 }}>\r\n+                        <span>Most Recent</span>\r\n+                        <span style={{ \r\n+                          fontSize: '0.7rem', \r\n+                          opacity: 0.7,\r\n+                          fontWeight: '400'\r\n+                        }}>\r\n+                          Within 30 miles\r\n+                        </span>\r\n+                      </div>\r\n+                      {!userLocation && (\r\n+                        <span style={{ \r\n+                          fontSize: '0.65rem', \r\n+                          opacity: 0.6,\r\n+                          marginLeft: 'auto',\r\n+                          fontStyle: 'italic'\r\n+                        }}>\r\n+                          (needs location)\r\n+                        </span>\r\n+                      )}\r\n+                    </SortOption>\r\n+                    \r\n+                    <SortOption \r\n+                      theme={currentStyle}\r\n+                      active={sortBy === 'proximity'}\r\n+                      onClick={() => {\r\n+                        if (!userLocation) {\r\n+                          requestLocation();\r\n+                        }\r\n+                        setSortBy('proximity');\r\n+                        setSortMenuOpen(false);\r\n+                        loadCategorizedItems();\r\n+                      }}\r\n+                    >\r\n+                      <Navigation size={16} />\r\n+                      <div style={{ display: 'flex', flexDirection: 'column', flex: 1 }}>\r\n+                        <span>Closest First</span>\r\n+                        <span style={{ \r\n+                          fontSize: '0.7rem', \r\n+                          opacity: 0.7,\r\n+                          fontWeight: '400'\r\n+                        }}>\r\n+                          No distance limit\r\n+                        </span>\r\n+                      </div>\r\n+                      {!userLocation && (\r\n+                        <span style={{ \r\n+                          fontSize: '0.65rem', \r\n+                          opacity: 0.6,\r\n+                          marginLeft: 'auto',\r\n+                          fontStyle: 'italic'\r\n+                        }}>\r\n+                          (needs location)\r\n+                        </span>\r\n+                      )}\r\n+                    </SortOption>\r\n+                    \r\n+                    <SortOption \r\n+                      theme={currentStyle}\r\n+                      active={sortBy === 'price-low'}\r\n+                      onClick={() => {\r\n+                        if (!userLocation) {\r\n+                          requestLocation();\r\n+                          return;\r\n+                        }\r\n+                        setSortBy('price-low');\r\n+                        setSortMenuOpen(false);\r\n+                        loadCategorizedItems();\r\n+                      }}\r\n+                    >\r\n+                      <span style={{ fontSize: '1rem', fontWeight: '600' }}>$</span>\r\n+                      <div style={{ display: 'flex', flexDirection: 'column', flex: 1 }}>\r\n+                        <span>Price: Low to High</span>\r\n+                        <span style={{ \r\n+                          fontSize: '0.7rem', \r\n+                          opacity: 0.7,\r\n+                          fontWeight: '400'\r\n+                        }}>\r\n+                          Within 30 miles\r\n+                        </span>\r\n+                      </div>\r\n+                      {!userLocation && (\r\n+                        <span style={{ \r\n+                          fontSize: '0.65rem', \r\n+                          opacity: 0.6,\r\n+                          marginLeft: 'auto',\r\n+                          fontStyle: 'italic'\r\n+                        }}>\r\n+                          (needs location)\r\n+                        </span>\r\n+                      )}\r\n+                    </SortOption>\r\n+                    \r\n+                    <SortOption \r\n+                      theme={currentStyle}\r\n+                      active={sortBy === 'price-high'}\r\n+                      onClick={() => {\r\n+                        if (!userLocation) {\r\n+                          requestLocation();\r\n+                          return;\r\n+                        }\r\n+                        setSortBy('price-high');\r\n+                        setSortMenuOpen(false);\r\n+                        loadCategorizedItems();\r\n+                      }}\r\n+                    >\r\n+                      <span style={{ fontSize: '1rem', fontWeight: '600' }}>$$$</span>\r\n+                      <div style={{ display: 'flex', flexDirection: 'column', flex: 1 }}>\r\n+                        <span>Price: High to Low</span>\r\n+                        <span style={{ \r\n+                          fontSize: '0.7rem', \r\n+                          opacity: 0.7,\r\n+                          fontWeight: '400'\r\n+                        }}>\r\n+                          Within 30 miles\r\n+                        </span>\r\n+                      </div>\r\n+                      {!userLocation && (\r\n+                        <span style={{ \r\n+                          fontSize: '0.65rem', \r\n+                          opacity: 0.6,\r\n+                          marginLeft: 'auto',\r\n+                          fontStyle: 'italic'\r\n+                        }}>\r\n+                          (needs location)\r\n+                        </span>\r\n+                      )}\r\n+                    </SortOption>\r\n+                  </SortDropdown>\r\n+                </SortContainer>\r\n+              </SearchButtonGroup>\r\n+            </SearchContainer>\r\n+\r\n+            {/* Show search results or default categorized view */}\r\n+            {hasSearchResults ? (\r\n+              <div>\r\n+                <CategoryHeader theme={currentStyle}>\r\n+                  <h2>Search Results ({searchResults.length})</h2>\r\n+                </CategoryHeader>\r\n+\r\n+                {error ? (\r\n+                  <EmptyGridMessage>\r\n+                    <h3>No Results Found</h3>\r\n+                    <p>{error}</p>\r\n+                  </EmptyGridMessage>\r\n+                ) : isSearching ? (\r\n+                  <div style={{ textAlign: 'center', padding: '2rem' }}>\r\n+                    <LoadingSpinner />\r\n+                  </div>\r\n+                ) : searchResults.length === 0 ? (\r\n+                  <EmptyGridMessage>\r\n+                    <h3>No Items Found</h3>\r\n+                    <p>No items match your search criteria.</p>\r\n+                  </EmptyGridMessage>\r\n+                ) : (\r\n+                  <GridContainer>\r\n+                    {searchResults.map(item => (\r\n+                      <FeaturedItem \r\n+                        key={`search-${item.shopId}-${item.id}`} \r\n+                        item={item}\r\n+                        theme={currentStyle}\r\n+                        onItemClick={handleItemClick}\r\n+                        showDistance={true}\r\n+                      />\r\n+                    ))}\r\n+                  </GridContainer>\r\n+                )}\r\n+              </div>\r\n+            ) : (\r\n+              <div>\r\n+                {/* Featured Items Slider */}\r\n+                <CategoryHeader theme={currentStyle}>\r\n+                  <h2>Featured Items</h2>\r\n+                  <span className=\"view-all\">\r\n+                    {featuredItems.length} items\r\n+                  </span>\r\n+                </CategoryHeader>\r\n+\r\n+                <CategoryGridWrapper>\r\n+                {/* Desktop: Show all items in grid */}\r\n+                <div className=\"desktop-grid\" style={{ display: 'contents' }}>\r\n+                  {featuredItems.map(item => (\r\n+                    <div key={`featured-${item.shopId}-${item.id}`} className=\"desktop-only\" \r\n+                         style={{ display: window.innerWidth > 768 ? 'block' : 'none' }}>\r\n+                      <FeaturedItem\r\n+                        item={item}\r\n+                        theme={currentStyle}\r\n+                        onItemClick={handleItemClick}\r\n+                        showDistance={true}\r\n+                      />\r\n+                    </div>\r\n+                  ))}\r\n+                </div>\r\n+                \r\n+                {/* Mobile: Show all 10 items in a 2-row scrollable grid */}\r\n+                <CategoryScrollableGrid theme={currentStyle} className=\"mobile-only\">\r\n+                  {featuredItems.map(item => (\r\n+                    <FeaturedItem\r\n+                      key={`featured-mobile-${item.shopId}-${item.id}`}\r\n+                      item={item}\r\n+                      theme={currentStyle}\r\n+                      onItemClick={handleItemClick}\r\n+                      showDistance={true}\r\n+                    />\r\n+                  ))}\r\n+                </CategoryScrollableGrid>\r\n+              </CategoryGridWrapper>\r\n+                \r\n+              {Object.entries(categories).map(([categoryName, items]) => {\r\n+          if (items.length === 0) return null;\r\n+                      \r\n+          return (\r\n+            <div key={categoryName} style={{ marginTop: '3rem' }}>\r\n+              <CategoryHeader theme={currentStyle}>\r\n+                <h2>{categoryName}</h2>\r\n+                <span className=\"view-all\">\r\n+                  {items.length} items\r\n+                </span>\r\n+              </CategoryHeader>\r\n+          \r\n+              <CategoryGridWrapper>\r\n+                {/* Desktop: Show all items in grid */}\r\n+                <div className=\"desktop-grid\" style={{ display: 'contents' }}>\r\n+                  {items.map(item => (\r\n+                    <div key={`${categoryName}-${item.shopId}-${item.id}`} className=\"desktop-only\"\r\n+                         style={{ display: window.innerWidth > 768 ? 'block' : 'none' }}>\r\n+                      <FeaturedItem\r\n+                        item={item}\r\n+                        theme={currentStyle}\r\n+                        onItemClick={handleItemClick}\r\n+                        showDistance={true}\r\n+                      />\r\n+                    </div>\r\n+                  ))}\r\n+                </div>\r\n+                \r\n+                {/* Mobile: Show all items in a scrollable grid (1 or 2 rows based on count) */}\r\n+                <CategoryScrollableGrid theme={currentStyle} className=\"mobile-only\" itemCount={items.length}>\r\n+                  {items.map(item => (\r\n+                    <FeaturedItem\r\n+                      key={`${categoryName}-mobile-${item.shopId}-${item.id}`}\r\n+                      item={item}\r\n+                      theme={currentStyle}\r\n+                      onItemClick={handleItemClick}\r\n+                      showDistance={true}\r\n+                    />\r\n+                  ))}\r\n+                </CategoryScrollableGrid>\r\n+              </CategoryGridWrapper>\r\n+            </div>\r\n+          );\r\n+        })}\r\n+              </div>\r\n+            )}\r\n+          </>\r\n+        )}\r\n+\r\n+        {/* Media Tab */}\r\n+        {activeTab === 'media' && (\r\n+          <EmptyGridMessage>\r\n+            <h3>Featured Media</h3>\r\n+            <p>Coming soon! Discover videos and content from local creators.</p>\r\n+          </EmptyGridMessage>\r\n+        )}\r\n+      </MainContent>\r\n+\r\n+      {/* Style Indicator Only */}\r\n+      <StyleIndicator theme={currentStyle}>\r\n+        <span className=\"style-number\">{currentStyle.id}</span>\r\n+        <span>{currentStyle.name}</span>\r\n+      </StyleIndicator>\r\n+\r\n+      {/* Zoomed Item View - Updated to match ShopPublicView */}\r\n+      {/* Zoomed Item View - 75/25 Split */}\r\n+      {/* Zoomed Item View - 70/30 Split with 2:5 Card */}\r\n+      {zoomedItem && (\r\n+        <ZoomOverlay onClick={handleCloseZoom} theme={currentStyle}>\r\n+          <ZoomContainer \r\n+            theme={currentStyle}\r\n+            onClick={(e) => e.stopPropagation()}\r\n+          >\r\n+            {/* 70% - Image Carousel */}\r\n+            <ImageCarousel \r\n+              theme={currentStyle} \r\n+              currentIndex={currentImageIndex}\r\n+            >\r\n+              {/* Close button */}\r\n+              <button \r\n+                className=\"close-overlay-button\"\r\n+                onClick={handleCloseZoom}\r\n+                aria-label=\"Close\"\r\n+              >\r\n+                <X size={20} />\r\n+              </button>\r\n+            \r\n+              <div className=\"image-track\">\r\n+                {zoomedItem.images && zoomedItem.images.filter(Boolean).length > 0 ? (\r\n+                  zoomedItem.images.filter(Boolean).map((image, index) => (\r\n+                    <div key={index} className=\"image-slide\">\r\n+                      <img src={image} alt={`${zoomedItem.name} ${index + 1}`} />\r\n+                    </div>\r\n+                  ))\r\n+                ) : (\r\n+                  <div className=\"image-slide\">\r\n+                    <div className=\"no-image\">\r\n+                      <Package size={40} />\r\n+                      <p>No image</p>\r\n+                    </div>\r\n+                  </div>\r\n+                )}\r\n+              </div>\r\n+              \r\n+              {/* Navigation */}\r\n+              {zoomedItem.images && zoomedItem.images.filter(Boolean).length > 1 && (\r\n+                <>\r\n+                  <button \r\n+                    className=\"carousel-button prev\"\r\n+                    onClick={() => setCurrentImageIndex(prev => \r\n+                      prev === 0 ? zoomedItem.images.filter(Boolean).length - 1 : prev - 1\r\n+                    )}\r\n+                    aria-label=\"Previous\"\r\n+                  >\r\n+                    <ChevronLeft size={20} />\r\n+                  </button>\r\n+                  <button \r\n+                    className=\"carousel-button next\"\r\n+                    onClick={() => setCurrentImageIndex(prev => \r\n+                      prev === zoomedItem.images.filter(Boolean).length - 1 ? 0 : prev + 1\r\n+                    )}\r\n+                    aria-label=\"Next\"\r\n+                  >\r\n+                    <ChevronRight size={20} />\r\n+                  </button>\r\n+                  \r\n+                  <div className=\"carousel-dots\">\r\n+                    {zoomedItem.images.filter(Boolean).map((_, index) => (\r\n+                      <button\r\n+                        key={index}\r\n+                        className=\"dot\"\r\n+                        style={{ opacity: index === currentImageIndex ? 1 : 0.3 }}\r\n+                        onClick={() => setCurrentImageIndex(index)}\r\n+                        aria-label={`Image ${index + 1}`}\r\n+                      />\r\n+                    ))}\r\n+                  </div>\r\n+                </>\r\n+              )}\r\n+            </ImageCarousel>\r\n+            \r\n+            {/* 30% - Compact Details */}\r\n+            <ZoomContent theme={currentStyle}>\r\n+              {/* Name & Price Row */}\r\n+              <div style={{ \r\n+                display: 'flex', \r\n+                justifyContent: 'space-between', \r\n+                alignItems: 'baseline',\r\n+                gap: '0.75rem'\r\n+              }}>\r\n+                <h3 style={{\r\n+                  fontSize: '1.1rem',\r\n+                  margin: 0,\r\n+                  fontWeight: '600',\r\n+                  color: currentStyle?.colors?.text || '#FFFFFF',\r\n+                  flex: 1,\r\n+                  overflow: 'hidden',\r\n+                  textOverflow: 'ellipsis',\r\n+                  whiteSpace: 'nowrap'\r\n+                }}>\r\n+                  {zoomedItem.name}\r\n+                </h3>\r\n+                \r\n+                <div style={{\r\n+                  fontSize: '1.2rem',\r\n+                  fontWeight: 'bold',\r\n+                  color: currentStyle?.colors?.accent || '#800000',\r\n+                  whiteSpace: 'nowrap'\r\n+                }}>\r\n+                  ${parseFloat(zoomedItem.price || 0).toFixed(2)}\r\n+                </div>\r\n+              </div>\r\n+              \r\n+              {/* Info Row: Distance • Shop • Stock */}\r\n+              <div style={{\r\n+                display: 'flex',\r\n+                alignItems: 'center',\r\n+                gap: '0.75rem',\r\n+                fontSize: '0.75rem',\r\n+                flexWrap: 'wrap',\r\n+                color: currentStyle?.colors?.text || '#FFFFFF',\r\n+                opacity: 0.8\r\n+              }}>\r\n+                {zoomedItem.formattedDistance && (\r\n+                  <>\r\n+                    <div style={{ display: 'flex', alignItems: 'center', gap: '0.25rem' }}>\r\n+                      <Navigation size={11} />\r\n+                      <span>{zoomedItem.formattedDistance}</span>\r\n+                    </div>\r\n+                    <span>•</span>\r\n+                  </>\r\n+                )}\r\n+                \r\n+                {zoomedItem.shopName && (\r\n+                  <>\r\n+                    <div \r\n+                      style={{ \r\n+                        display: 'flex', \r\n+                        alignItems: 'center', \r\n+                        gap: '0.25rem',\r\n+                        cursor: 'pointer',\r\n+                        textDecoration: 'underline'\r\n+                      }}\r\n+                      onClick={(e) => {\r\n+                        e.stopPropagation();\r\n+                        navigate(`/shop/${zoomedItem.shopId}/view`);\r\n+                      }}\r\n+                    >\r\n+                      <Store size={11} />\r\n+                      <span>{zoomedItem.shopName}</span>\r\n+                    </div>\r\n+                    <span>•</span>\r\n+                  </>\r\n+                )}\r\n+                \r\n+                {zoomedItem.quantity !== undefined && (\r\n+                  <div style={{ display: 'flex', alignItems: 'center', gap: '0.25rem' }}>\r\n+                    <div style={{\r\n+                      width: '5px',\r\n+                      height: '5px',\r\n+                      borderRadius: '50%',\r\n+                      background: parseInt(zoomedItem.quantity) > 0 ? '#4CAF50' : '#FF5252'\r\n+                    }} />\r\n+                    <span style={{\r\n+                      color: parseInt(zoomedItem.quantity) > 0 ? '#4CAF50' : '#FF5252',\r\n+                      fontWeight: '500'\r\n+                    }}>\r\n+                      {parseInt(zoomedItem.quantity) > 0 ? \r\n+                        `${zoomedItem.quantity} in stock` : \r\n+                        'Out of stock'\r\n+                      }\r\n+                    </span>\r\n+                  </div>\r\n+                )}\r\n+              </div>\r\n+              \r\n+              {/* Quantity Selector */}\r\n+              <div style={{\r\n+                display: 'flex',\r\n+                alignItems: 'center',\r\n+                justifyContent: 'space-between',\r\n+                background: `${currentStyle?.colors?.surface || 'rgba(255, 255, 255, 0.05)'}20`,\r\n+                borderRadius: '6px',\r\n+                padding: '0.5rem 0.75rem'\r\n+              }}>\r\n+                <span style={{\r\n+                  fontSize: '0.8rem',\r\n+                  fontWeight: '600',\r\n+                  color: currentStyle?.colors?.text || '#FFFFFF'\r\n+                }}>\r\n+                  Qty\r\n+                </span>\r\n+                \r\n+                <div style={{ display: 'flex', alignItems: 'center', gap: '0.75rem' }}>\r\n+                  <button \r\n+                    onClick={() => adjustQuantity(-1)}\r\n+                    disabled={orderQuantity <= 1}\r\n+                    style={{\r\n+                      width: '24px',\r\n+                      height: '24px',\r\n+                      borderRadius: '50%',\r\n+                      border: `1.5px solid ${currentStyle?.colors?.accent || '#800000'}`,\r\n+                      background: 'transparent',\r\n+                      color: currentStyle?.colors?.accent || '#800000',\r\n+                      display: 'flex',\r\n+                      alignItems: 'center',\r\n+                      justifyContent: 'center',\r\n+                      cursor: orderQuantity <= 1 ? 'not-allowed' : 'pointer',\r\n+                      opacity: orderQuantity <= 1 ? 0.3 : 1\r\n+                    }}\r\n+                  >\r\n+                    <Minus size={12} />\r\n+                  </button>\r\n+                  \r\n+                  <div style={{\r\n+                    fontSize: '1rem',\r\n+                    fontWeight: 'bold',\r\n+                    color: currentStyle?.colors?.text || 'white',\r\n+                    minWidth: '24px',\r\n+                    textAlign: 'center'\r\n+                  }}>\r\n+                    {orderQuantity}\r\n+                  </div>\r\n+                \r\n+                  <button \r\n+                    onClick={() => adjustQuantity(1)}\r\n+                    disabled={orderQuantity >= parseInt(zoomedItem.quantity || 1)}\r\n+                    style={{\r\n+                      width: '24px',\r\n+                      height: '24px',\r\n+                      borderRadius: '50%',\r\n+                      border: `1.5px solid ${currentStyle?.colors?.accent || '#800000'}`,\r\n+                      background: 'transparent',\r\n+                      color: currentStyle?.colors?.accent || '#800000',\r\n+                      display: 'flex',\r\n+                      alignItems: 'center',\r\n+                      justifyContent: 'center',\r\n+                      cursor: orderQuantity >= parseInt(zoomedItem.quantity || 1) ? 'not-allowed' : 'pointer',\r\n+                      opacity: orderQuantity >= parseInt(zoomedItem.quantity || 1) ? 0.3 : 1\r\n+                    }}\r\n+                  >\r\n+                    <Plus size={12} />\r\n+                  </button>\r\n+                </div>\r\n+              </div>\r\n+                  \r\n+              {/* Order Button */}\r\n+              <button \r\n+                onClick={handleDirectOrder}\r\n+                disabled={parseInt(zoomedItem.quantity || 0) < 1 || orderQuantity > parseInt(zoomedItem.quantity || 0)}\r\n+                style={{\r\n+                  width: '100%',\r\n+                  padding: '0.75rem',\r\n+                  borderRadius: '8px',\r\n+                  border: 'none',\r\n+                  background: parseInt(zoomedItem.quantity || 0) < 1 ? \r\n+                    `${currentStyle?.colors?.accent || '#800000'}40` : \r\n+                    currentStyle?.colors?.accent || '#800000',\r\n+                  color: 'white',\r\n+                  fontSize: '0.9rem',\r\n+                  fontWeight: '600',\r\n+                  display: 'flex',\r\n+                  alignItems: 'center',\r\n+                  justifyContent: 'center',\r\n+                  gap: '0.5rem',\r\n+                  cursor: parseInt(zoomedItem.quantity || 0) < 1 ? 'not-allowed' : 'pointer',\r\n+                  transition: 'all 0.3s'\r\n+                }}\r\n+              >\r\n+                {parseInt(zoomedItem.quantity || 0) < 1 ? (\r\n+                  <>\r\n+                    <X size={16} />\r\n+                    Out of Stock\r\n+                  </>\r\n+                ) : (\r\n+                  <>\r\n+                    <ShoppingCart size={16} />\r\n+                    Order {orderQuantity > 1 && `${orderQuantity} `}· ${(parseFloat(zoomedItem.price || 0) * orderQuantity).toFixed(2)}\r\n+                  </>\r\n+                )}\r\n+              </button>\r\n+            </ZoomContent>\r\n+          </ZoomContainer>\r\n+        </ZoomOverlay>\r\n+      )}\r\n+\r\n+      {/* Chat Overlay */}\r\n+      <ChatOverlay isOpen={chatOpen} onClick={handleCloseChat} />\r\n+      \r\n+      {selectedChatItem && (\r\n+        <OrderChat \r\n+          isOpen={chatOpen} \r\n+          onClose={handleCloseChat} \r\n+          item={selectedChatItem}\r\n+          shopId={selectedChatItem.shopId}\r\n+          shopName={selectedChatItem.shopName}\r\n+          theme={currentStyle}\r\n+        />\r\n+      )}\r\n+    </PageContainer>\r\n+  );\r\n+};\r\n+\r\n+export default WelcomePage;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1759889872801,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,3687 @@\n+// src/pages/WelcomePage.js - Mobile-Optimized Version\r\n+import React from 'react';\r\n+import styled from 'styled-components';\r\n+import { useNavigate } from 'react-router-dom';\r\n+import { useEffect, useState, useRef } from 'react';\r\n+import { getFeaturedItems } from '../firebase/firebaseService';\r\n+import FeaturedItem from '../components/shop/FeaturedItem';\r\n+import { Search, Package, Navigation, Film, Filter, Store, Plus, Minus, Pin, ChevronLeft, ChevronRight, X, MessageCircle, ShoppingCart, RefreshCw, LogOut } from 'lucide-react';\r\n+import { getDistance } from 'geolib';\r\n+import OrderChat from '../components/Chat/OrderChat';\r\n+import { collection, getDocs } from 'firebase/firestore';\r\n+import { db, auth } from '../firebase/config';\r\n+import { WELCOME_STYLES } from '../theme/welcomeStyles';\r\n+import { getShopData } from '../firebase/firebaseService';\r\n+import { useAuth } from '../contexts/AuthContext';\r\n+import { useLocation } from '../contexts/LocationContext';\r\n+import LocationDialog from '../components/LocationDialog';\r\n+import ThemeDecorations from '../components/ThemeDecorations';\r\n+import { TransactionService } from '../services/TransactionService';\r\n+import { signOut } from 'firebase/auth';\r\n+\r\n+const getIPBasedLocation = async () => {\r\n+  try {\r\n+    console.log('🌐 Fetching IP-based location from ipapi.co...');\r\n+    const response = await fetch('https://ipapi.co/json/');\r\n+    \r\n+    if (!response.ok) {\r\n+      throw new Error(`HTTP error! status: ${response.status}`);\r\n+    }\r\n+    \r\n+    const data = await response.json();\r\n+    console.log('✅ IP Location data:', data);\r\n+    \r\n+    if (!data.latitude || !data.longitude) {\r\n+      throw new Error('Invalid location data received');\r\n+    }\r\n+    \r\n+    return {\r\n+      latitude: data.latitude,\r\n+      longitude: data.longitude,\r\n+      city: data.city,\r\n+      region: data.region,\r\n+      country: data.country_name,\r\n+      isIPBased: true\r\n+    };\r\n+  } catch (error) {\r\n+    console.error('❌ Error getting IP location:', error);\r\n+    \r\n+    // Fallback to a default location (Houston, TX)\r\n+    console.log('⚠️ Using fallback location: Houston, TX');\r\n+    return {\r\n+      latitude: 29.7604,\r\n+      longitude: -95.3698,\r\n+      city: 'Houston',\r\n+      region: 'Texas',\r\n+      country: 'United States',\r\n+      isIPBased: true,\r\n+      isFallback: true\r\n+    };\r\n+  }\r\n+};\r\n+\r\n+// Mobile-first styled components\r\n+const PageContainer = styled.div.attrs({ className: 'page-container' })`\r\n+  min-height: 100vh;\r\n+  background: ${props => props.theme?.colors?.background || '#000000'};\r\n+  color: ${props => props.theme?.colors?.text || '#FFFFFF'};\r\n+  position: relative;\r\n+  overflow: hidden;\r\n+  \r\n+  /* Mobile-optimized background effects */\r\n+  &::before {\r\n+    content: '';\r\n+    position: absolute;\r\n+    width: 100%;\r\n+    height: 100%;\r\n+    background: ${props => props.theme?.colors?.backgroundGradient || 'radial-gradient(circle at 20% 30%, rgba(128, 0, 0, 0.2) 0%, transparent 50%)'};\r\n+    opacity: 0.8;\r\n+    animation: ${props => props.theme?.animations?.backgroundAnimation || 'galaxySwirl 30s linear infinite'};\r\n+  }\r\n+\r\n+  /* Simplified stars for mobile performance */\r\n+  &::after {\r\n+    content: '';\r\n+    position: absolute;\r\n+    width: 100%;\r\n+    height: 100%;\r\n+    background-image: radial-gradient(circle 1px, ${props => props.theme?.colors?.text || '#FFF'} 1px, transparent 1px);\r\n+    background-size: 100px 100px;\r\n+    opacity: 0.05;\r\n+    \r\n+    @media (min-width: 768px) {\r\n+      background-size: 200px 200px;\r\n+      opacity: 0.1;\r\n+    }\r\n+  }\r\n+\r\n+  /* Reduced ping animations on mobile for performance */\r\n+  .ping {\r\n+    display: none;\r\n+    \r\n+    @media (min-width: 768px) {\r\n+      display: block;\r\n+      position: absolute;\r\n+      width: 2px;\r\n+      height: 2px;\r\n+      border-radius: 50%;\r\n+      background: ${props => props.theme?.colors?.accent || '#800000'};\r\n+      pointer-events: none;\r\n+      z-index: 0;\r\n+    }\r\n+  }\r\n+\r\n+  @keyframes galaxySwirl {\r\n+    0% { transform: rotate(0deg); }\r\n+    100% { transform: rotate(360deg); }\r\n+  }\r\n+`;\r\n+\r\n+// Simplified header with just logo and right-side controls\r\n+const Header = styled.header`\r\n+  width: 100%;\r\n+  height: 60px;\r\n+  padding: 0 1rem;\r\n+  display: flex;\r\n+  align-items: center;\r\n+  justify-content: space-between;\r\n+  background: ${props => `${props.theme?.colors?.headerBg || 'rgba(0, 0, 0, 0.9)'}F5`};\r\n+  backdrop-filter: blur(10px);\r\n+  border-bottom: 1px solid ${props => `${props.theme?.colors?.accent}4D` || 'rgba(128, 0, 0, 0.3)'};\r\n+  position: fixed;\r\n+  top: 0;\r\n+  z-index: 100;\r\n+\r\n+  @media (min-width: 768px) {\r\n+    height: 80px;\r\n+    padding: 0 2rem;\r\n+  }\r\n+`;\r\n+\r\n+const Logo = styled.div`\r\n+  color: ${props => props.theme?.colors?.accent || '#800000'};\r\n+  font-family: ${props => props.theme?.fonts?.heading || \"'Impact', sans-serif\"};\r\n+  font-size: 1.4rem;\r\n+  letter-spacing: 1px;\r\n+  transform: skew(-5deg);\r\n+  cursor: pointer;\r\n+  flex-shrink: 0;\r\n+\r\n+  @media (min-width: 768px) {\r\n+    font-size: 2rem;\r\n+    letter-spacing: 2px;\r\n+  }\r\n+`;\r\n+\r\n+const LocationIndicator2 = styled.div`\r\n+  display: flex;\r\n+  align-items: center;\r\n+  justify-content: center;\r\n+  gap: 0.75rem;\r\n+  background: ${props => `${props.theme?.colors?.surface || 'rgba(0, 0, 0, 0.4)'}CC`};\r\n+  backdrop-filter: blur(10px);\r\n+  padding: 0.75rem 1.5rem;\r\n+  border-radius: 25px;\r\n+  border: 1px solid ${props => `${props.theme?.colors?.accent}40` || 'rgba(128, 0, 0, 0.4)'};\r\n+  margin: 1.5rem auto;\r\n+  max-width: 500px;\r\n+  width: 90%;\r\n+  transition: all 0.3s ease;\r\n+  position: relative;\r\n+  \r\n+  @media (max-width: 768px) {\r\n+    width: 95%;\r\n+    padding: 0.6rem 1rem;\r\n+    gap: 0.5rem;\r\n+  }\r\n+  \r\n+  .location-icon-btn {\r\n+    background: transparent;\r\n+    border: none;\r\n+    color: ${props => props.theme?.colors?.accent || '#800000'};\r\n+    cursor: pointer;\r\n+    display: flex;\r\n+    align-items: center;\r\n+    justify-content: center;\r\n+    padding: 0.25rem;\r\n+    border-radius: 50%;\r\n+    transition: all 0.2s ease;\r\n+    flex-shrink: 0;\r\n+    \r\n+    &:hover {\r\n+      background: ${props => `${props.theme?.colors?.accent}20` || 'rgba(128, 0, 0, 0.2)'};\r\n+    }\r\n+    \r\n+    &:active {\r\n+      transform: scale(0.9);\r\n+    }\r\n+    \r\n+    &:disabled {\r\n+      opacity: 0.5;\r\n+      cursor: not-allowed;\r\n+    }\r\n+    \r\n+    svg {\r\n+      width: 20px;\r\n+      height: 20px;\r\n+      \r\n+      @media (max-width: 768px) {\r\n+        width: 18px;\r\n+        height: 18px;\r\n+      }\r\n+    }\r\n+  }\r\n+  \r\n+  .location-input {\r\n+    flex: 1;\r\n+    background: transparent;\r\n+    border: none;\r\n+    color: ${props => props.theme?.colors?.text || '#FFFFFF'};\r\n+    font-size: 0.95rem;\r\n+    outline: none;\r\n+    text-align: center;\r\n+    cursor: default;\r\n+    min-width: 0; /* Allow text to shrink */\r\n+    \r\n+    &::placeholder {\r\n+      color: ${props => `${props.theme?.colors?.text}50` || 'rgba(255, 255, 255, 0.5)'};\r\n+      font-style: italic;\r\n+    }\r\n+    \r\n+    @media (max-width: 768px) {\r\n+      font-size: 0.85rem;\r\n+    }\r\n+  }\r\n+  \r\n+  .updating-spinner {\r\n+    width: 16px;\r\n+    height: 16px;\r\n+    border: 2px solid ${props => `${props.theme?.colors?.accent}30` || 'rgba(128, 0, 0, 0.3)'};\r\n+    border-radius: 50%;\r\n+    border-top-color: ${props => props.theme?.colors?.accent || '#800000'};\r\n+    animation: spin 1s linear infinite;\r\n+  }\r\n+  \r\n+  .pin-icon-btn {\r\n+    background: transparent;\r\n+    border: none;\r\n+    color: ${props => props.theme?.colors?.accent || '#800000'};\r\n+    cursor: pointer;\r\n+    display: flex;\r\n+    align-items: center;\r\n+    justify-content: center;\r\n+    padding: 0.25rem;\r\n+    border-radius: 50%;\r\n+    transition: all 0.2s ease;\r\n+    opacity: ${props => props.isPinned ? 1 : 0.5};\r\n+    flex-shrink: 0;\r\n+    \r\n+    &:hover:not(:disabled) {\r\n+      background: ${props => `${props.theme?.colors?.accent}20` || 'rgba(128, 0, 0, 0.2)'};\r\n+      opacity: 1;\r\n+    }\r\n+    \r\n+    &:active:not(:disabled) {\r\n+      transform: scale(0.9);\r\n+    }\r\n+    \r\n+    &:disabled {\r\n+      opacity: 0.3;\r\n+      cursor: not-allowed;\r\n+    }\r\n+    \r\n+    svg {\r\n+      width: 18px;\r\n+      height: 18px;\r\n+      \r\n+      @media (max-width: 768px) {\r\n+        width: 16px;\r\n+        height: 16px;\r\n+      }\r\n+    }\r\n+  }\r\n+  \r\n+  @keyframes spin {\r\n+    to {\r\n+      transform: rotate(360deg);\r\n+    }\r\n+  }\r\n+`;\r\n+\r\n+const HeaderControls = styled.div`\r\n+  display: flex;\r\n+  align-items: center;\r\n+  gap: 0.75rem;\r\n+`;\r\n+\r\n+const HeaderButton = styled.button`\r\n+  background: transparent;\r\n+  border: none;\r\n+  color: ${props => props.theme?.colors?.accent || '#800000'};\r\n+  padding: 0.5rem;\r\n+  cursor: pointer;\r\n+  display: flex;\r\n+  align-items: center;\r\n+  justify-content: center;\r\n+  border-radius: 50%;\r\n+  transition: all 0.3s ease;\r\n+  opacity: 0.8;\r\n+  \r\n+  &:active {\r\n+    transform: scale(0.9);\r\n+    opacity: 1;\r\n+  }\r\n+  \r\n+  @media (hover: hover) {\r\n+    &:hover {\r\n+      opacity: 1;\r\n+      background: ${props => `${props.theme?.colors?.accent}10` || 'rgba(128, 0, 0, 0.1)'};\r\n+    }\r\n+  }\r\n+  \r\n+  &.pinned {\r\n+    color: ${props => props.theme?.colors?.accent || '#800000'};\r\n+    opacity: 1;\r\n+  }\r\n+  \r\n+  svg {\r\n+    width: 20px;\r\n+    height: 20px;\r\n+    \r\n+    @media (min-width: 768px) {\r\n+      width: 22px;\r\n+      height: 22px;\r\n+    }\r\n+  }\r\n+`;\r\n+\r\n+// Improved mobile main content with better spacing\r\n+const MainContent = styled.main`\r\n+  max-width: 1200px;\r\n+  margin: 0 auto;\r\n+  padding: 80px 1rem 100px 1rem;\r\n+  position: relative;\r\n+  z-index: 1;\r\n+  \r\n+  @media (min-width: 768px) {\r\n+    padding: 6rem 2rem 2rem 2rem;\r\n+  }\r\n+`;\r\n+\r\n+// Mobile-optimized welcome section\r\n+const WelcomeSection = styled.section`\r\n+  text-align: center;\r\n+  margin: 2rem 0;\r\n+  position: relative;\r\n+\r\n+  h1 {\r\n+    font-family: ${props => props.theme?.fonts?.heading || \"'Impact', sans-serif\"};\r\n+    font-size: 2.5rem;\r\n+    margin-bottom: 1rem;\r\n+    background: ${props => props.theme?.colors?.accentGradient || 'linear-gradient(45deg, #800000, #4A0404)'};\r\n+    -webkit-background-clip: text;\r\n+    -webkit-text-fill-color: transparent;\r\n+    letter-spacing: 1px;\r\n+    line-height: 1.2;\r\n+    \r\n+    @media (min-width: 768px) {\r\n+      font-size: 4.5rem;\r\n+      letter-spacing: 2px;\r\n+    }\r\n+  }\r\n+\r\n+  p {\r\n+    font-size: 1rem;\r\n+    line-height: 1.5;\r\n+    max-width: 600px;\r\n+    margin: 0 auto;\r\n+    color: ${props => `${props.theme?.colors?.text}CC` || 'rgba(255, 255, 255, 0.8)'};\r\n+    padding: 0 1rem;\r\n+    \r\n+    @media (min-width: 768px) {\r\n+      font-size: 1.2rem;\r\n+      line-height: 1.6;\r\n+      max-width: 800px;\r\n+    }\r\n+  }\r\n+`;\r\n+\r\n+// Completely redesigned ZoomOverlay - Responsive to zoom level\r\n+const ZoomOverlay = styled.div`\r\n+  position: fixed;\r\n+  top: 0;\r\n+  left: 0;\r\n+  right: 0;\r\n+  bottom: 0;\r\n+  background: ${props => `${props.theme?.colors?.background || 'rgba(0, 0, 0, 0.95)'}F5`};\r\n+  z-index: 10000;\r\n+  backdrop-filter: blur(10px);\r\n+  display: flex;\r\n+  align-items: center;\r\n+  justify-content: center;\r\n+  padding: 2rem;\r\n+  overflow: hidden;\r\n+  \r\n+  @media (max-width: 768px) {\r\n+    padding: 1rem;\r\n+  }\r\n+  \r\n+  @media (max-width: 480px) {\r\n+    padding: 0.5rem;\r\n+  }\r\n+`;\r\n+\r\n+// Redesigned ZoomContainer - 2:5 aspect ratio card, centered with ample space\r\n+const ZoomContainer = styled.div`\r\n+  position: relative;\r\n+  width: 100%;\r\n+  max-width: 500px;\r\n+  aspect-ratio: 2 / 5;\r\n+  max-height: 85vh;\r\n+  background: ${props => props.theme?.colors?.background || '#000000'};\r\n+  border-radius: 16px;\r\n+  overflow: hidden;\r\n+  border: 2px solid ${props => props.theme?.colors?.accent || '#800000'};\r\n+  box-shadow: 0 20px 60px rgba(0, 0, 0, 0.8);\r\n+  display: flex;\r\n+  flex-direction: column;\r\n+  \r\n+  @media (max-width: 768px) {\r\n+    max-width: 420px;\r\n+    border-radius: 12px;\r\n+  }\r\n+  \r\n+  @media (max-width: 480px) {\r\n+    max-width: 95%;\r\n+    border-radius: 10px;\r\n+  }\r\n+`;\r\n+\r\n+// Image section - 70% of card height\r\n+const ImageCarousel = styled.div`\r\n+  position: relative;\r\n+  width: 100%;\r\n+  height: 70%;\r\n+  background: ${props => `${props.theme?.colors?.background || '#000000'}80`};\r\n+  overflow: hidden;\r\n+  flex-shrink: 0;\r\n+  \r\n+  .image-track {\r\n+    display: flex;\r\n+    height: 100%;\r\n+    transition: transform 0.3s ease;\r\n+    transform: translateX(${props => props.currentIndex * -100}%);\r\n+  }\r\n+  \r\n+  .image-slide {\r\n+    min-width: 100%;\r\n+    height: 100%;\r\n+    display: flex;\r\n+    align-items: center;\r\n+    justify-content: center;\r\n+    \r\n+    img {\r\n+      width: 100%;\r\n+      height: 100%;\r\n+      object-fit: cover;\r\n+      background: ${props => `${props.theme?.colors?.background || '#000000'}40`};\r\n+    }\r\n+    \r\n+    .no-image {\r\n+      display: flex;\r\n+      flex-direction: column;\r\n+      align-items: center;\r\n+      gap: 0.75rem;\r\n+      color: ${props => props.theme?.colors?.text || '#FFFFFF'};\r\n+      opacity: 0.3;\r\n+      \r\n+      p {\r\n+        margin: 0;\r\n+        font-size: 0.85rem;\r\n+      }\r\n+    }\r\n+  }\r\n+  \r\n+  .carousel-dots {\r\n+    position: absolute;\r\n+    bottom: 1rem;\r\n+    left: 50%;\r\n+    transform: translateX(-50%);\r\n+    display: flex;\r\n+    gap: 0.4rem;\r\n+    z-index: 2;\r\n+    padding: 0.4rem 0.75rem;\r\n+    background: ${props => `${props.theme?.colors?.background || 'rgba(0, 0, 0, 0.6)'}CC`};\r\n+    border-radius: 20px;\r\n+    backdrop-filter: blur(8px);\r\n+  }\r\n+  \r\n+  .dot {\r\n+    width: 6px;\r\n+    height: 6px;\r\n+    border-radius: 50%;\r\n+    background: ${props => props.theme?.colors?.text || '#FFFFFF'};\r\n+    border: none;\r\n+    padding: 0;\r\n+    cursor: pointer;\r\n+    transition: all 0.2s ease;\r\n+    \r\n+    &:hover {\r\n+      transform: scale(1.2);\r\n+    }\r\n+  }\r\n+  \r\n+  .carousel-button {\r\n+    position: absolute;\r\n+    top: 50%;\r\n+    transform: translateY(-50%);\r\n+    background: ${props => `${props.theme?.colors?.background || 'rgba(0, 0, 0, 0.7)'}DD`};\r\n+    border: 1px solid ${props => `${props.theme?.colors?.accent}40` || 'rgba(255, 255, 255, 0.2)'};\r\n+    border-radius: 50%;\r\n+    width: 40px;\r\n+    height: 40px;\r\n+    display: flex;\r\n+    align-items: center;\r\n+    justify-content: center;\r\n+    color: ${props => props.theme?.colors?.text || 'white'};\r\n+    cursor: pointer;\r\n+    opacity: 0;\r\n+    transition: all 0.3s ease;\r\n+    z-index: 2;\r\n+    \r\n+    &:hover {\r\n+      opacity: 1 !important;\r\n+      background: ${props => props.theme?.colors?.accent || '#800000'};\r\n+      transform: translateY(-50%) scale(1.1);\r\n+    }\r\n+    \r\n+    &.prev {\r\n+      left: 1rem;\r\n+    }\r\n+    \r\n+    &.next {\r\n+      right: 1rem;\r\n+    }\r\n+    \r\n+    &:disabled {\r\n+      opacity: 0 !important;\r\n+      cursor: not-allowed;\r\n+    }\r\n+    \r\n+    @media (max-width: 480px) {\r\n+      width: 32px;\r\n+      height: 32px;\r\n+      \r\n+      &.prev {\r\n+        left: 0.5rem;\r\n+      }\r\n+      \r\n+      &.next {\r\n+        right: 0.5rem;\r\n+      }\r\n+      \r\n+      svg {\r\n+        width: 16px;\r\n+        height: 16px;\r\n+      }\r\n+    }\r\n+  }\r\n+  \r\n+  &:hover .carousel-button {\r\n+    opacity: 0.7;\r\n+  }\r\n+  \r\n+  .close-overlay-button {\r\n+    position: absolute;\r\n+    top: 1rem;\r\n+    right: 1rem;\r\n+    background: ${props => `${props.theme?.colors?.background || 'rgba(0, 0, 0, 0.8)'}DD`};\r\n+    border: 1px solid ${props => `${props.theme?.colors?.accent}60` || 'rgba(255, 255, 255, 0.3)'};\r\n+    border-radius: 50%;\r\n+    width: 40px;\r\n+    height: 40px;\r\n+    display: flex;\r\n+    align-items: center;\r\n+    justify-content: center;\r\n+    color: white;\r\n+    cursor: pointer;\r\n+    transition: all 0.2s ease;\r\n+    backdrop-filter: blur(8px);\r\n+    z-index: 3;\r\n+    opacity: 0.8;\r\n+    \r\n+    &:hover {\r\n+      opacity: 1;\r\n+      background: ${props => props.theme?.colors?.accent || '#800000'};\r\n+      border-color: ${props => props.theme?.colors?.accent || '#800000'};\r\n+      transform: scale(1.1);\r\n+    }\r\n+    \r\n+    &:active {\r\n+      transform: scale(0.95);\r\n+    }\r\n+    \r\n+    @media (max-width: 480px) {\r\n+      width: 32px;\r\n+      height: 32px;\r\n+      top: 0.75rem;\r\n+      right: 0.75rem;\r\n+      \r\n+      svg {\r\n+        width: 16px;\r\n+        height: 16px;\r\n+      }\r\n+    }\r\n+  }\r\n+`;\r\n+\r\n+// Details section - 30% of card height\r\n+const ZoomContent = styled.div`\r\n+  height: 30%;\r\n+  overflow-y: auto;\r\n+  overflow-x: hidden;\r\n+  padding: 1rem;\r\n+  -webkit-overflow-scrolling: touch;\r\n+  display: flex;\r\n+  flex-direction: column;\r\n+  gap: 0.75rem;\r\n+  background: ${props => props.theme?.colors?.background || '#000000'};\r\n+  \r\n+  /* Custom scrollbar */\r\n+  &::-webkit-scrollbar {\r\n+    width: 4px;\r\n+  }\r\n+  \r\n+  &::-webkit-scrollbar-track {\r\n+    background: transparent;\r\n+  }\r\n+  \r\n+  &::-webkit-scrollbar-thumb {\r\n+    background: ${props => `${props.theme?.colors?.accent || '#800000'}60`};\r\n+    border-radius: 2px;\r\n+    \r\n+    &:hover {\r\n+      background: ${props => props.theme?.colors?.accent || '#800000'};\r\n+    }\r\n+  }\r\n+  \r\n+  @media (max-width: 480px) {\r\n+    padding: 0.875rem;\r\n+    gap: 0.625rem;\r\n+  }\r\n+`;\r\n+\r\n+\r\n+// Update ZoomHeader - Remove it entirely or hide it\r\n+const ZoomHeader = styled.div`\r\n+  display: none; // Hide the header completely\r\n+`;\r\n+\r\n+// Mobile-optimized profile section\r\n+const ProfileSection = styled.div`\r\n+  display: flex;\r\n+  flex-direction: column;\r\n+  align-items: center;\r\n+  margin-bottom: 1.5rem;\r\n+`;\r\n+\r\n+const ProfileImage = styled.div`\r\n+  width: 120px;\r\n+  height: 120px;\r\n+  border-radius: 50%;\r\n+  overflow: hidden;\r\n+  margin-bottom: 1rem;\r\n+  border: 4px solid ${props => props.theme?.colors?.accent || '#800000'};\r\n+  box-shadow: 0 0 20px ${props => `${props.theme?.colors?.accent}40` || 'rgba(128, 0, 0, 0.25)'};\r\n+  \r\n+  @media (min-width: 768px) {\r\n+    width: 200px;\r\n+    height: 189px;\r\n+    border: 6px solid ${props => props.theme?.colors?.accent || '#800000'};\r\n+  }\r\n+  \r\n+  img {\r\n+    width: 100%;\r\n+    height: 100%;\r\n+    object-fit: cover;\r\n+  }\r\n+`;\r\n+\r\n+// Add to styled components section in WelcomePage.js\r\n+const LocationIndicator = styled.div`\r\n+  position: fixed;\r\n+  top: 90px;\r\n+  left: 2rem;\r\n+  display: flex;\r\n+  align-items: center;\r\n+  background: rgba(0, 0, 0, 0.7);\r\n+  padding: 0.5rem 1rem;\r\n+  border-radius: 20px;\r\n+  border: 1px solid ${props => `${props.theme?.colors?.accent}30` || 'rgba(128, 0, 0, 0.3)'};\r\n+  backdrop-filter: blur(4px);\r\n+  color: ${props => props.theme?.colors?.text || '#FFFFFF'};\r\n+  font-size: 0.9rem;\r\n+  z-index: 10;\r\n+  cursor: pointer;\r\n+  transition: all 0.3s ease;\r\n+  max-width: 300px;\r\n+  \r\n+  /* Hide on mobile, show only on desktop for debugging */\r\n+  @media (max-width: 768px) {\r\n+  width: auto;\r\n+    padding: 1rem 2.5rem;\r\n+    font-size: 1rem;\r\n+  } \r\n+  \r\n+  &:hover {\r\n+    background: rgba(0, 0, 0, 0.8);\r\n+    transform: translateY(-2px);\r\n+  }\r\n+  \r\n+  .location-icon {\r\n+    color: ${props => props.theme?.colors?.accent || '#800000'};\r\n+    margin-right: 0.75rem;\r\n+  }\r\n+  \r\n+  .location-text {\r\n+    white-space: nowrap;\r\n+    overflow: hidden;\r\n+    text-overflow: ellipsis;\r\n+  }\r\n+  \r\n+  .updating {\r\n+    margin-left: 0.5rem;\r\n+    width: 16px;\r\n+    height: 16px;\r\n+    border: 2px solid rgba(128, 0, 0, 0.2);\r\n+    border-radius: 50%;\r\n+    border-top-color: ${props => props.theme?.colors?.accent || '#800000'};\r\n+    animation: spin 1s linear infinite;\r\n+  }\r\n+`;\r\n+\r\n+const ShopName = styled.h2`\r\n+  font-family: ${props => props.theme?.fonts?.heading || \"'Impact', sans-serif\"};\r\n+  font-size: 2.5rem;\r\n+  background: ${props => props.theme?.colors?.accentGradient || 'linear-gradient(45deg, #800000, #4A0404)'};\r\n+  -webkit-background-clip: text;\r\n+  -webkit-text-fill-color: transparent;\r\n+  margin: 0 0 0.5rem 0;\r\n+  line-height: 1.2;\r\n+  \r\n+  @media (min-width: 768px) {\r\n+    font-size: 5.4rem;\r\n+    margin: 0 0 1rem 0;\r\n+  }\r\n+`;\r\n+\r\n+// Mobile-friendly action buttons\r\n+const ActionButtonContainer = styled.div`\r\n+  display: flex;\r\n+  flex-direction: column;\r\n+  gap: 1rem;\r\n+  width: 100%;\r\n+  max-width: 300px;\r\n+  margin: 2rem auto;\r\n+  \r\n+  @media (min-width: 480px) {\r\n+    flex-direction: row;\r\n+    justify-content: center;\r\n+    max-width: none;\r\n+  }\r\n+`;\r\n+\r\n+const ActionButton = styled.button`\r\n+  background: ${props => props.variant === 'outline' ? 'transparent' : \r\n+    props.theme?.colors?.accentGradient || 'linear-gradient(45deg, #800000, #4A0404)'};\r\n+  border: ${props => props.variant === 'outline' ? \r\n+    `2px solid ${props.theme?.colors?.accent || '#800000'}` : 'none'};\r\n+  padding: 1rem 1.5rem;\r\n+  border-radius: 30px;\r\n+  color: ${props => props.variant === 'outline' ? \r\n+    props.theme?.colors?.accent || '#800000' : 'white'};\r\n+  font-weight: bold;\r\n+  cursor: pointer;\r\n+  transition: all 0.3s;\r\n+  text-transform: uppercase;\r\n+  letter-spacing: 1px;\r\n+  font-size: 0.9rem;\r\n+  width: 100%;\r\n+  \r\n+  @media (min-width: 480px) {\r\n+    width: auto;\r\n+    padding: 1rem 2.5rem;\r\n+    font-size: 1rem;\r\n+  }\r\n+\r\n+  &:active {\r\n+    transform: scale(0.98);\r\n+  }\r\n+\r\n+  @media (hover: hover) {\r\n+    &:hover {\r\n+      transform: translateY(-2px);\r\n+      box-shadow: 0 5px 15px ${props => `${props.theme?.colors?.accent}4D` || 'rgba(128, 0, 0, 0.3)'};\r\n+    }\r\n+  }\r\n+`;\r\n+\r\n+// Mobile-optimized tab container with horizontal scroll\r\n+const TabContainer = styled.div`\r\n+  display: flex;\r\n+  gap: 0.5rem;\r\n+  margin: 2rem 0;\r\n+  overflow-x: auto;\r\n+  padding: 0.5rem 0;\r\n+  -webkit-overflow-scrolling: touch;\r\n+  \r\n+  &::-webkit-scrollbar {\r\n+    height: 4px;\r\n+  }\r\n+  \r\n+  &::-webkit-scrollbar-track {\r\n+    background: transparent;\r\n+  }\r\n+  \r\n+  &::-webkit-scrollbar-thumb {\r\n+    background: ${props => props.theme?.colors?.accent || '#800000'};\r\n+    border-radius: 2px;\r\n+  }\r\n+  \r\n+  @media (min-width: 768px) {\r\n+    justify-content: center;\r\n+    gap: 1rem;\r\n+    overflow-x: visible;\r\n+  }\r\n+`;\r\n+\r\n+const Tab = styled.button`\r\n+  background: ${props => props.active ? \r\n+    props.theme?.colors?.tabActiveBg || 'rgba(128, 0, 0, 0.2)' : 'transparent'};\r\n+  border: 1px solid ${props => props.active ? \r\n+    props.theme?.colors?.tabBorder || '#800000' : \r\n+    `${props.theme?.colors?.accent}4D` || 'rgba(128, 0, 0, 0.3)'};\r\n+  color: ${props => props.active ? \r\n+    props.theme?.colors?.text || '#FFFFFF' : \r\n+    `${props.theme?.colors?.text}99` || 'rgba(255, 255, 255, 0.6)'};\r\n+  padding: 0.6rem 1rem;\r\n+  border-radius: 20px;\r\n+  cursor: pointer;\r\n+  transition: all 0.3s;\r\n+  text-transform: uppercase;\r\n+  letter-spacing: 0.5px;\r\n+  font-weight: 500;\r\n+  font-size: 0.8rem;\r\n+  white-space: nowrap;\r\n+  display: flex;\r\n+  align-items: center;\r\n+  gap: 0.3rem;\r\n+  flex-shrink: 0;\r\n+  \r\n+  @media (min-width: 768px) {\r\n+    padding: 0.8rem 1.5rem;\r\n+    font-size: 0.9rem;\r\n+    letter-spacing: 1px;\r\n+    gap: 0.5rem;\r\n+  }\r\n+\r\n+  &:active {\r\n+    transform: scale(0.98);\r\n+  }\r\n+\r\n+  svg {\r\n+    width: 14px;\r\n+    height: 14px;\r\n+    \r\n+    @media (min-width: 768px) {\r\n+      width: 16px;\r\n+      height: 16px;\r\n+    }\r\n+  }\r\n+`;\r\n+\r\n+// Mobile-optimized grid with better touch targets\r\n+const GridContainer = styled.div`\r\n+  display: grid;\r\n+  grid-template-columns: repeat(2, 1fr);\r\n+  gap: 0.75rem;\r\n+  margin-top: 1.5rem;\r\n+  padding: 0 0.25rem;\r\n+  \r\n+  @media (min-width: 480px) {\r\n+    gap: 1rem;\r\n+    padding: 0;\r\n+  }\r\n+  \r\n+  @media (min-width: 768px) {\r\n+    grid-template-columns: repeat(auto-fill, minmax(220px, 1fr));\r\n+    gap: 1.5rem;\r\n+  }\r\n+  \r\n+  @media (min-width: 1024px) {\r\n+    grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));\r\n+    gap: 2rem;\r\n+  }\r\n+`;\r\n+\r\n+// Mobile search with better UX\r\n+const SearchContainer = styled.div`\r\n+  display: flex;\r\n+  flex-direction: column;\r\n+  gap: 0.75rem;\r\n+  width: 100%;\r\n+  padding: 0 0.5rem;\r\n+  \r\n+  @media (min-width: 600px) {\r\n+    flex-direction: row;\r\n+    align-items: center;\r\n+    max-width: 800px;\r\n+    margin: 0 auto;\r\n+    padding: 0;\r\n+  }\r\n+`;\r\n+\r\n+const SearchInput = styled.input`\r\n+  width: 100%;\r\n+  background: rgba(255, 255, 255, 0.05);\r\n+  border: 1px solid rgba(128, 0, 0, 0.2);\r\n+  border-radius: 25px;\r\n+  padding: 0.8rem 1rem;\r\n+  color: white;\r\n+  font-size: 1rem;\r\n+  -webkit-appearance: none;\r\n+  \r\n+  &:focus {\r\n+    outline: none;\r\n+    border-color: rgba(128, 0, 0, 0.4);\r\n+    background: rgba(255, 255, 255, 0.08);\r\n+  }\r\n+\r\n+  &::placeholder {\r\n+    color: rgba(255, 255, 255, 0.4);\r\n+  }\r\n+  \r\n+  @media (min-width: 600px) {\r\n+    flex: 1;\r\n+  }\r\n+`;\r\n+\r\n+const SearchButtonGroup = styled.div`\r\n+  display: flex;\r\n+  gap: 0.5rem;\r\n+  width: 100%;\r\n+  \r\n+  @media (min-width: 600px) {\r\n+    width: auto;\r\n+  }\r\n+`;\r\n+\r\n+const SearchButton = styled.button`\r\n+  flex: 1;\r\n+  background: ${props => props.variant === 'live' ? 'transparent' : 'rgba(128, 0, 0, 0.2)'};\r\n+  border: 1px solid rgba(128, 0, 0, 0.3);\r\n+  padding: 0.8rem 1rem;\r\n+  border-radius: 25px;\r\n+  color: white;\r\n+  font-size: 0.9rem;\r\n+  display: flex;\r\n+  align-items: center;\r\n+  justify-content: center;\r\n+  gap: 0.4rem;\r\n+  cursor: pointer;\r\n+  transition: all 0.2s ease;\r\n+  white-space: nowrap;\r\n+  -webkit-tap-highlight-color: transparent;\r\n+  \r\n+  @media (min-width: 600px) {\r\n+    flex: unset;\r\n+    padding: 0.8rem 1.2rem;\r\n+  }\r\n+\r\n+  &:active {\r\n+    transform: scale(0.98);\r\n+    background: rgba(128, 0, 0, 0.3);\r\n+  }\r\n+\r\n+  &:disabled {\r\n+    opacity: 0.5;\r\n+    cursor: not-allowed;\r\n+  }\r\n+\r\n+  svg {\r\n+    width: 16px;\r\n+    height: 16px;\r\n+  }\r\n+`;\r\n+\r\n+// Mobile-friendly slider with native scroll\r\n+const SliderContainer = styled.div`\r\n+  width: 100%;\r\n+  overflow-x: auto;\r\n+  overflow-y: hidden;\r\n+  position: relative;\r\n+  margin: 1.5rem 0;\r\n+  -webkit-overflow-scrolling: touch;\r\n+  scroll-snap-type: x mandatory;\r\n+  scroll-behavior: smooth;\r\n+  \r\n+  &::-webkit-scrollbar {\r\n+    height: 4px;\r\n+  }\r\n+  \r\n+  &::-webkit-scrollbar-track {\r\n+    background: ${props => `${props.theme?.colors?.background || '#000000'}80`};\r\n+    border-radius: 10px;\r\n+  }\r\n+  \r\n+  &::-webkit-scrollbar-thumb {\r\n+    background: ${props => props.theme?.colors?.accent || '#800000'};\r\n+    border-radius: 10px;\r\n+  }\r\n+  \r\n+  /* Hide scroll buttons on mobile */\r\n+  .scroll-button {\r\n+    display: none;\r\n+    \r\n+    @media (min-width: 768px) {\r\n+      display: flex;\r\n+    }\r\n+  }\r\n+`;\r\n+\r\n+const Slider = styled.div`\r\n+  display: flex;\r\n+  width: fit-content;\r\n+  padding: 0.5rem 0;\r\n+`;\r\n+\r\n+const SlideItem = styled.div`\r\n+  flex: 0 0 160px;\r\n+  margin-right: 0.75rem;\r\n+  scroll-snap-align: start;\r\n+  \r\n+  @media (min-width: 480px) {\r\n+    flex: 0 0 200px;\r\n+    margin-right: 1rem;\r\n+  }\r\n+  \r\n+  @media (min-width: 768px) {\r\n+    flex: 0 0 250px;\r\n+    margin-right: 1.5rem;\r\n+  }\r\n+  \r\n+  @media (min-width: 1024px) {\r\n+    flex: 0 0 300px;\r\n+    margin-right: 2rem;\r\n+  }\r\n+`;\r\n+\r\n+// Add styles for better item display\r\n+const ItemDetailsSection = styled.div`\r\n+  margin-bottom: 1.5rem;\r\n+`;\r\n+\r\n+const ItemHeader = styled.div`\r\n+  margin-bottom: 1.5rem;\r\n+  \r\n+  h3 {\r\n+    font-size: 1.5rem;\r\n+    margin: 0 0 0.5rem 0;\r\n+    font-family: ${props => props.theme?.fonts?.heading || 'inherit'};\r\n+    color: ${props => props.theme?.colors?.text || '#FFFFFF'};\r\n+    \r\n+    @media (min-width: 768px) {\r\n+      font-size: 1.8rem;\r\n+    }\r\n+  }\r\n+\r\n+  .price {\r\n+    font-size: 1.3rem;\r\n+    font-weight: bold;\r\n+    color: ${props => props.theme?.colors?.accent || '#800000'};\r\n+    margin-bottom: 1rem;\r\n+    \r\n+    @media (min-width: 768px) {\r\n+      font-size: 1.5rem;\r\n+    }\r\n+  }\r\n+`;\r\n+\r\n+const CategoryBadge = styled.div`\r\n+  display: inline-block;\r\n+  background: ${props => `${props.theme?.colors?.accent || '#800000'}20`};\r\n+  color: ${props => props.theme?.colors?.accent || '#800000'};\r\n+  padding: 0.25rem 0.75rem;\r\n+  border-radius: 12px;\r\n+  font-size: 0.75rem;\r\n+  font-weight: 500;\r\n+  text-transform: uppercase;\r\n+  letter-spacing: 0.5px;\r\n+  margin-bottom: 1rem;\r\n+`;\r\n+\r\n+const StockStatus = styled.div`\r\n+  display: flex;\r\n+  align-items: center;\r\n+  gap: 0.5rem;\r\n+  margin-bottom: 1rem;\r\n+  font-size: 0.9rem;\r\n+  \r\n+  .stock-indicator {\r\n+    width: 8px;\r\n+    height: 8px;\r\n+    border-radius: 50%;\r\n+    background: ${props => props.inStock ? '#4CAF50' : '#FF5252'};\r\n+  }\r\n+  \r\n+  .stock-text {\r\n+    color: ${props => props.inStock ? '#4CAF50' : '#FF5252'};\r\n+    font-weight: 500;\r\n+  }\r\n+`;\r\n+\r\n+const ItemDescription = styled.div`\r\n+  font-size: 0.95rem;\r\n+  opacity: 0.9;\r\n+  margin-bottom: 1.5rem;\r\n+  line-height: 1.6;\r\n+  color: ${props => props.theme?.colors?.text || '#FFFFFF'};\r\n+`;\r\n+\r\n+const ItemLocation = styled.div`\r\n+  display: flex;\r\n+  align-items: center;\r\n+  gap: 0.5rem;\r\n+  font-size: 0.9rem;\r\n+  opacity: 0.8;\r\n+  margin-bottom: 1.5rem;\r\n+  color: ${props => props.theme?.colors?.text || '#FFFFFF'};\r\n+`;\r\n+\r\n+const ShopInfo = styled.div`\r\n+  padding: 0.75rem;\r\n+  background: ${props => `${props.theme?.colors?.surface || 'rgba(255, 255, 255, 0.05)'}50`};\r\n+  border-radius: 8px;\r\n+  margin-bottom: 1.5rem;\r\n+  font-size: 0.9rem;\r\n+  color: ${props => props.theme?.colors?.text || '#FFFFFF'};\r\n+  \r\n+  strong {\r\n+    color: ${props => props.theme?.colors?.accent || '#800000'};\r\n+  }\r\n+`;\r\n+\r\n+// Update ActionButtons to only show Order button\r\n+const ActionButtons = styled.div`\r\n+  display: flex;\r\n+  gap: 0.75rem;\r\n+  margin-top: 1.5rem;\r\n+  \r\n+  button {\r\n+    flex: 1;\r\n+    padding: 0.75rem;\r\n+    border: none;\r\n+    border-radius: 8px;\r\n+    font-weight: bold;\r\n+    cursor: pointer;\r\n+    transition: all 0.3s;\r\n+    display: flex;\r\n+    align-items: center;\r\n+    justify-content: center;\r\n+    gap: 0.5rem;\r\n+    font-size: 0.9rem;\r\n+    \r\n+    @media (min-width: 768px) {\r\n+      padding: 1rem;\r\n+      font-size: 1rem;\r\n+    }\r\n+    \r\n+    &.order {\r\n+      background: ${props => props.theme?.colors?.accent || '#800000'};\r\n+      color: white;\r\n+      \r\n+      &:hover:not(:disabled) {\r\n+        background: ${props => props.theme?.colors?.primary || '#4A0404'};\r\n+        transform: translateY(-2px);\r\n+      }\r\n+      \r\n+      &:disabled {\r\n+        opacity: 0.5;\r\n+        cursor: not-allowed;\r\n+        transform: none;\r\n+      }\r\n+    }\r\n+    \r\n+    svg {\r\n+      width: 16px;\r\n+      height: 16px;\r\n+    }\r\n+  }\r\n+`;\r\n+\r\n+// Mobile-friendly floating controls - removed since they're now in header\r\n+const StyleIndicator = styled.div`\r\n+  position: fixed;\r\n+  bottom: 1rem;\r\n+  right: 1rem;\r\n+  background: ${props => `${props.theme?.colors?.background || '#000000'}E5`};\r\n+  backdrop-filter: blur(10px);\r\n+  color: white;\r\n+  padding: 0.5rem 1rem;\r\n+  border-radius: 20px;\r\n+  font-size: 0.8rem;\r\n+  display: flex;\r\n+  align-items: center;\r\n+  gap: 0.5rem;\r\n+  border: 1px solid ${props => `${props.theme?.colors?.accent}40` || 'rgba(128, 0, 0, 0.4)'};\r\n+  z-index: 90;\r\n+  \r\n+  @media (min-width: 768px) {\r\n+    font-size: 0.9rem;\r\n+  }\r\n+  \r\n+  .style-number {\r\n+    font-weight: bold;\r\n+    font-size: 1rem;\r\n+    color: ${props => props.theme?.colors?.accent || '#800000'};\r\n+    \r\n+    @media (min-width: 768px) {\r\n+      font-size: 1.2rem;\r\n+    }\r\n+  }\r\n+`;\r\n+\r\n+// Quantity selector optimized for mobile\r\n+const QuantitySelector = styled.div`\r\n+  display: flex;\r\n+  align-items: center;\r\n+  justify-content: space-between;\r\n+  background: ${props => `${props.theme?.colors?.surface || 'rgba(255, 255, 255, 0.05)'}50`};\r\n+  border-radius: 12px;\r\n+  padding: 1rem;\r\n+  margin: 1rem 0;\r\n+  \r\n+  .quantity-label {\r\n+    font-weight: bold;\r\n+    color: ${props => props.theme?.colors?.text || '#FFFFFF'};\r\n+    font-size: 0.9rem;\r\n+  }\r\n+  \r\n+  .quantity-controls {\r\n+    display: flex;\r\n+    align-items: center;\r\n+    gap: 1rem;\r\n+    \r\n+    .quantity-btn {\r\n+      width: 40px;\r\n+      height: 40px;\r\n+      border-radius: 50%;\r\n+      border: 2px solid ${props => props.theme?.colors?.accent || '#800000'};\r\n+      background: transparent;\r\n+      color: ${props => props.theme?.colors?.accent || '#800000'};\r\n+      display: flex;\r\n+      align-items: center;\r\n+      justify-content: center;\r\n+      cursor: pointer;\r\n+      transition: all 0.3s;\r\n+      -webkit-tap-highlight-color: transparent;\r\n+      \r\n+      &:active:not(:disabled) {\r\n+        transform: scale(0.9);\r\n+        background: ${props => props.theme?.colors?.accent || '#800000'};\r\n+        color: white;\r\n+      }\r\n+      \r\n+      &:disabled {\r\n+        opacity: 0.3;\r\n+        cursor: not-allowed;\r\n+      }\r\n+      \r\n+      svg {\r\n+        width: 18px;\r\n+        height: 18px;\r\n+      }\r\n+    }\r\n+    \r\n+    .quantity-display {\r\n+      font-size: 1.3rem;\r\n+      font-weight: bold;\r\n+      color: ${props => props.theme?.colors?.text || 'white'};\r\n+      min-width: 40px;\r\n+      text-align: center;\r\n+    }\r\n+  }\r\n+`;\r\n+\r\n+// Other styled components remain the same but with mobile optimizations...\r\n+const LoadingSpinner = styled.div`\r\n+  width: 40px;\r\n+  height: 40px;\r\n+  margin: 2rem auto;\r\n+  border: 3px solid rgba(128, 0, 0, 0.1);\r\n+  border-radius: 50%;\r\n+  border-top-color: #800000;\r\n+  animation: spin 1s linear infinite;\r\n+\r\n+  @keyframes spin {\r\n+    to {\r\n+      transform: rotate(360deg);\r\n+    }\r\n+  }\r\n+`;\r\n+\r\n+const EmptyGridMessage = styled.div`\r\n+  text-align: center;\r\n+  padding: 2rem 1rem;\r\n+  background: rgba(0, 0, 0, 0.2);\r\n+  border-radius: 12px;\r\n+  border: 1px solid rgba(128, 0, 0, 0.1);\r\n+  color: rgba(255, 255, 255, 0.7);\r\n+  grid-column: 1/-1;\r\n+\r\n+  h3 {\r\n+    font-size: 1.1rem;\r\n+    margin-bottom: 0.5rem;\r\n+    color: rgba(255, 255, 255, 0.9);\r\n+  }\r\n+\r\n+  p {\r\n+    font-size: 0.9rem;\r\n+    line-height: 1.5;\r\n+  }\r\n+`;\r\n+\r\n+const MotivationalMessage = styled.p`\r\n+  font-size: 1.1rem;\r\n+  line-height: 1.5;\r\n+  max-width: 600px;\r\n+  margin: 2rem auto 0;\r\n+  color: ${props => props.theme?.colors?.text || '#FFFFFF'};\r\n+  font-weight: 400;\r\n+  text-align: center;\r\n+  padding: 1rem 1.5rem;\r\n+  letter-spacing: 0.3px;\r\n+  position: relative;\r\n+  \r\n+  @media (min-width: 768px) {\r\n+    font-size: 1.4rem;\r\n+    line-height: 1.6;\r\n+    max-width: 800px;\r\n+    margin: 3rem auto 0;\r\n+    padding: 1.5rem 2rem;\r\n+    letter-spacing: 0.5px;\r\n+  }\r\n+  \r\n+  &::before, &::after {\r\n+    content: '\"';\r\n+    font-family: ${props => props.theme?.fonts?.heading || \"'Georgia', serif\"};\r\n+    font-size: 2rem;\r\n+    position: absolute;\r\n+    opacity: 0.2;\r\n+    color: ${props => props.theme?.colors?.accent || '#800000'};\r\n+    \r\n+    @media (min-width: 768px) {\r\n+      font-size: 3rem;\r\n+    }\r\n+  }\r\n+  \r\n+  &::before {\r\n+    top: -0.5rem;\r\n+    left: 0.5rem;\r\n+    \r\n+    @media (min-width: 768px) {\r\n+      top: -1.5rem;\r\n+      left: -1rem;\r\n+    }\r\n+  }\r\n+  \r\n+  &::after {\r\n+    bottom: -1.5rem;\r\n+    right: 0.5rem;\r\n+    \r\n+    @media (min-width: 768px) {\r\n+      bottom: -2.5rem;\r\n+      right: -1rem;\r\n+    }\r\n+  }\r\n+`;\r\n+\r\n+// 1. Replace the CategoryGrid styled component with these two new components:\r\n+\r\n+const CategoryGridWrapper = styled.div`\r\n+  margin-bottom: 2rem;\r\n+  \r\n+  /* Desktop: Regular grid */\r\n+  @media (min-width: 769px) {\r\n+    display: grid;\r\n+    grid-template-columns: repeat(5, 1fr);\r\n+    gap: 1rem;\r\n+  }\r\n+  \r\n+  @media (max-width: 1200px) and (min-width: 769px) {\r\n+    grid-template-columns: repeat(4, 1fr);\r\n+  }\r\n+  \r\n+  @media (max-width: 900px) and (min-width: 769px) {\r\n+    grid-template-columns: repeat(3, 1fr);\r\n+  }\r\n+  \r\n+  /* Mobile: Scrollable rows */\r\n+  @media (max-width: 768px) {\r\n+    display: flex;\r\n+    flex-direction: column;\r\n+    gap: 1rem;\r\n+  }\r\n+`;\r\n+\r\n+// Replace the CategoryScrollableGrid styled component with this corrected version:\r\n+\r\n+const CategoryScrollableGrid = styled.div`\r\n+  display: none;\r\n+  \r\n+  @media (max-width: 768px) {\r\n+    display: grid;\r\n+    grid-auto-flow: column;\r\n+    grid-template-rows: repeat(2, 1fr);\r\n+    grid-template-columns: repeat(5, minmax(280px, 1fr)); /* Increased from 200px */\r\n+    gap: 1rem; /* Increased from 0.75rem */\r\n+    overflow-x: auto;\r\n+    overflow-y: hidden;\r\n+    padding-bottom: 0.5rem;\r\n+    scroll-snap-type: x mandatory;\r\n+    -webkit-overflow-scrolling: touch;\r\n+    min-height: 85vh; /* Add minimum height to stretch vertically */\r\n+    \r\n+    &::-webkit-scrollbar {\r\n+      height: 4px;\r\n+    }\r\n+    \r\n+    &::-webkit-scrollbar-track {\r\n+      background: ${props => `${props.theme?.colors?.background || '#000000'}80`};\r\n+      border-radius: 10px;\r\n+    }\r\n+    \r\n+    &::-webkit-scrollbar-thumb {\r\n+      background: ${props => props.theme?.colors?.accent || '#800000'};\r\n+      border-radius: 10px;\r\n+    }\r\n+    \r\n+    > * {\r\n+      scroll-snap-align: start;\r\n+      min-width: 0;\r\n+      height: 100%; /* Make items stretch to full height */\r\n+    }\r\n+  }\r\n+  \r\n+  @media (max-width: 480px) {\r\n+    grid-template-columns: repeat(5, minmax(240px, 1fr)); /* Increased from 160px */\r\n+    gap: 0.75rem;\r\n+  }\r\n+`;\r\n+\r\n+// 4. Add this CSS to handle responsive display (add to your styled components section):\r\n+const GlobalStyle = styled.div`\r\n+  @media (min-width: 769px) {\r\n+    .mobile-only {\r\n+      display: none !important;\r\n+    }\r\n+  }\r\n+  \r\n+  @media (max-width: 768px) {\r\n+    .desktop-only {\r\n+      display: none !important;\r\n+    }\r\n+  }\r\n+`;\r\n+\r\n+const CategoryHeader = styled.div`\r\n+  display: flex;\r\n+  justify-content: space-between;\r\n+  align-items: center;\r\n+  margin-bottom: 0.75rem;\r\n+  padding: 0 0.5rem;\r\n+  \r\n+  @media (min-width: 768px) {\r\n+    margin-bottom: 1rem;\r\n+    padding: 0;\r\n+  }\r\n+  \r\n+  h2 {\r\n+    font-family: ${props => props.theme?.fonts?.heading || 'inherit'};\r\n+    font-size: 1.3rem;\r\n+    color: ${props => props.theme?.colors?.accent || '#800000'};\r\n+    margin: 0;\r\n+    \r\n+    @media (min-width: 768px) {\r\n+      font-size: 1.8rem;\r\n+    }\r\n+  }\r\n+  \r\n+  .view-all {\r\n+    font-size: 0.8rem;\r\n+    color: ${props => props.theme?.colors?.accent || '#800000'};\r\n+    opacity: 0.8;\r\n+    cursor: pointer;\r\n+    display: flex;\r\n+    align-items: center;\r\n+    gap: 0.3rem;\r\n+    transition: all 0.3s ease;\r\n+    \r\n+    @media (min-width: 768px) {\r\n+      font-size: 0.9rem;\r\n+      gap: 0.5rem;\r\n+    }\r\n+    \r\n+    &:active {\r\n+      opacity: 1;\r\n+      transform: translateX(3px);\r\n+    }\r\n+  }\r\n+`;\r\n+\r\n+const ChatOverlay = styled.div`\r\n+  position: fixed;\r\n+  top: 0;\r\n+  left: 0;\r\n+  right: 0;\r\n+  bottom: 0;\r\n+  background: rgba(0, 0, 0, 0.5);\r\n+  z-index: 999;\r\n+  opacity: ${props => props.isOpen ? 1 : 0};\r\n+  pointer-events: ${props => props.isOpen ? 'auto' : 'none'};\r\n+  transition: opacity 0.3s ease;\r\n+`;\r\n+\r\n+// Add these styled components after StyleIndicator\r\n+\r\n+const SortContainer = styled.div`\r\n+  position: relative;\r\n+  display: inline-block;\r\n+`;\r\n+\r\n+const SortDropdown = styled.div`\r\n+  position: absolute;\r\n+  top: calc(100% + 0.5rem);\r\n+  right: 0;\r\n+  background: ${props => props.theme?.colors?.background || '#000000'};\r\n+  border: 2px solid ${props => props.theme?.colors?.accent || '#800000'};\r\n+  border-radius: 12px;\r\n+  padding: 0.75rem;\r\n+  min-width: 220px;\r\n+  z-index: 1000;\r\n+  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.8),\r\n+              0 0 20px ${props => `${props.theme?.colors?.accent}40` || 'rgba(128, 0, 0, 0.25)'};\r\n+  opacity: ${props => props.isOpen ? 1 : 0};\r\n+  visibility: ${props => props.isOpen ? 'visible' : 'hidden'};\r\n+  transform: ${props => props.isOpen ? 'translateY(0)' : 'translateY(-10px)'};\r\n+  transition: all 0.3s ease;\r\n+  \r\n+  @media (max-width: 768px) {\r\n+    min-width: 200px;\r\n+    right: 0;\r\n+  }\r\n+`;\r\n+\r\n+const SortOption = styled.button`\r\n+  width: 100%;\r\n+  padding: 0.75rem 1rem;\r\n+  background: ${props => props.active ? \r\n+    props.theme?.colors?.accent || '#800000' : \r\n+    'transparent'};\r\n+  border: none;\r\n+  border-radius: 8px;\r\n+  color: ${props => props.active ? \r\n+    '#FFFFFF' : \r\n+    props.theme?.colors?.text || '#FFFFFF'};\r\n+  font-size: 0.95rem;\r\n+  font-weight: ${props => props.active ? '600' : '500'};\r\n+  text-align: left;\r\n+  cursor: pointer;\r\n+  transition: all 0.2s ease;\r\n+  display: flex;\r\n+  align-items: center;\r\n+  gap: 0.75rem;\r\n+  font-family: ${props => props.theme?.fonts?.body || 'inherit'};\r\n+  min-height: 50px; /* Added for two-line content */\r\n+  \r\n+  &:hover {\r\n+    background: ${props => props.active ?\r\n+      props.theme?.colors?.primary || '#4A0404' :\r\n+      `${props.theme?.colors?.accent}20` || 'rgba(128, 0, 0, 0.2)'};\r\n+    transform: translateX(2px);\r\n+  }\r\n+  \r\n+  &:active {\r\n+    transform: scale(0.98);\r\n+  }\r\n+  \r\n+  svg {\r\n+    width: 16px;\r\n+    height: 16px;\r\n+    flex-shrink: 0;\r\n+    align-self: flex-start; /* Align icon to top when two lines */\r\n+    margin-top: 2px;\r\n+  }\r\n+  \r\n+  @media (max-width: 768px) {\r\n+    padding: 0.65rem 0.85rem;\r\n+    font-size: 0.9rem;\r\n+    min-height: 46px;\r\n+    \r\n+    svg {\r\n+      width: 14px;\r\n+      height: 14px;\r\n+    }\r\n+  }\r\n+`;\r\n+\r\n+const SortHeader = styled.div`\r\n+  display: flex;\r\n+  justify-content: space-between;\r\n+  align-items: center;\r\n+  margin-bottom: 1rem;\r\n+  \r\n+  @media (max-width: 768px) {\r\n+    flex-direction: column;\r\n+    align-items: flex-start;\r\n+    gap: 0.75rem;\r\n+  }\r\n+`;\r\n+\r\n+// Motivational messages\r\n+const MOTIVATIONAL_MESSAGES = [\r\n+  \"Build your vision, Elevate humanity.\",\r\n+  \"Create greatness, Inspire progress.\",\r\n+  \"Master your craft, Serve with passion.\",\r\n+  \"Own your success, Empower those around you.\",\r\n+  \"Rule with wisdom, Lead with heart.\",\r\n+  \"Shape your future, Change lives along the way.\",\r\n+  \"Rise above, Lift others higher.\",\r\n+  \"Conquer your dreams, Build a better world.\",\r\n+  \"Lead by example, Serve with strength.\",\r\n+  \"Pursue greatness, Give back in abundance.\"\r\n+];\r\n+\r\n+const WelcomePage = () => {\r\n+  const navigate = useNavigate();\r\n+  const [motivationalMessage, setMotivationalMessage] = useState(\"\");\r\n+  const [activeTab, setActiveTab] = useState('featured');\r\n+  const [featuredItems, setFeaturedItems] = useState([]);\r\n+  const [loading, setLoading] = useState(true);\r\n+  const [error, setError] = useState(null);\r\n+  const [nearbyItems, setNearbyItems] = useState([]);\r\n+  const [featuredMedia, setFeaturedMedia] = useState([]);\r\n+  const [hasSearched, setHasSearched] = useState(false);\r\n+  const [searchAddress, setSearchAddress] = useState('');\r\n+  const [searching, setSearching] = useState(false);\r\n+  const [locationChecked, setLocationChecked] = useState(false);\r\n+  const [showLocationPrompt, setShowLocationPrompt] = useState(false);\r\n+  const [currentZipCode, setCurrentZipCode] = useState(null);\r\n+  const [currentPage, setCurrentPage] = useState(1);\r\n+  const [totalItems, setTotalItems] = useState(0);\r\n+  const [currentStyle, setCurrentStyle] = useState(null);\r\n+  const itemsPerPage = 6;\r\n+  const [isPinned, setIsPinned] = useState(false);\r\n+  const [isRefreshing, setIsRefreshing] = useState(false);\r\n+  const [orderQuantity, setOrderQuantity] = useState(1);\r\n+  const [sortBy, setSortBy] = useState('recent'); // 'recent', 'proximity', 'price-low', 'price-high'\r\n+  const [sortMenuOpen, setSortMenuOpen] = useState(false);\r\n+\r\n+\r\n+  \r\n+  const { user, isAuthenticated } = useAuth();\r\n+  const [shopData, setShopData] = useState(null);\r\n+  const [currentMessageIndex, setCurrentMessageIndex] = useState(0);\r\n+  const [isMessageVisible, setIsMessageVisible] = useState(true);\r\n+  const [isSliderPaused, setIsSliderPaused] = useState(false);\r\n+  const [sliderPosition, setSliderPosition] = useState(0);\r\n+  const sliderRef = useRef(null);\r\n+  const sliderAnimationRef = useRef(null);\r\n+  const [zoomedItem, setZoomedItem] = useState(null);\r\n+  const [chatOpen, setChatOpen] = useState(false);\r\n+  const [selectedChatItem, setSelectedChatItem] = useState(null);\r\n+  const [currentImageIndex, setCurrentImageIndex] = useState(0);\r\n+  const { userLocation, locationPermission, requestLocation } = useLocation();\r\n+  const [updatingLocation, setUpdatingLocation] = useState(false);\r\n+  const [featuredSearchTerm, setFeaturedSearchTerm] = useState('');\r\n+  const [searchResults, setSearchResults] = useState([]);\r\n+  const [isSearching, setIsSearching] = useState(false);\r\n+  const [hasSearchResults, setHasSearchResults] = useState(false);\r\n+  const [categories, setCategories] = useState({\r\n+    'Electronics & Tech': [],\r\n+    'Clothing & Accessories': [],\r\n+    'Home & Garden': [],\r\n+    'Sports & Outdoors': [],\r\n+    'Books & Media': [],\r\n+    'Toys & Games': [],\r\n+    'Health & Beauty': [],\r\n+    'Automotive': [],\r\n+    'Collectibles & Art': [],\r\n+    'Food & Beverages': [],\r\n+    'Other': []\r\n+  });\r\n+// Replace the existing state variables related to ZIP with city/region states\r\n+const [cityRegion, setCityRegion] = useState('');\r\n+const [isCityPinned, setIsCityPinned] = useState(false);\r\n+const [isConvertingToCity, setIsConvertingToCity] = useState(false);\r\n+const [cityInputValue, setCityInputValue] = useState('');\r\n+const [effectiveLocation, setEffectiveLocation] = useState(null);\r\n+const [isIPLocation, setIsIPLocation] = useState(false);\r\n+\r\n+useEffect(() => {\r\n+  const initializeLocation = async () => {\r\n+    console.log('🔍 Initializing location...');\r\n+    console.log('userLocation:', userLocation);\r\n+    \r\n+    if (userLocation) {\r\n+      // User has shared precise location\r\n+      console.log('✅ Using GPS location:', userLocation);\r\n+      setEffectiveLocation(userLocation);\r\n+      setIsIPLocation(false);\r\n+    } else {\r\n+      // Use IP-based location\r\n+      console.log('🌐 Fetching IP-based location...');\r\n+      const ipLocation = await getIPBasedLocation();\r\n+      console.log('IP Location result:', ipLocation);\r\n+      \r\n+      if (ipLocation) {\r\n+        console.log('✅ Using IP location:', ipLocation);\r\n+        setEffectiveLocation(ipLocation);\r\n+        setIsIPLocation(true);\r\n+      } else {\r\n+        console.error('❌ Failed to get IP location');\r\n+      }\r\n+    }\r\n+  };\r\n+  \r\n+  initializeLocation();\r\n+}, [userLocation]);\r\n+\r\n+useEffect(() => {\r\n+  console.log('🔄 effectiveLocation changed:', effectiveLocation);\r\n+  console.log('activeTab:', activeTab);\r\n+  \r\n+  if (activeTab === 'featured' && effectiveLocation) {\r\n+    console.log('📦 Loading items with location...');\r\n+    loadCategorizedItems();\r\n+  }\r\n+}, [effectiveLocation, activeTab]);\r\n+\r\n+const loadCategorizedItems = async () => {\r\n+  console.log('🔄 loadCategorizedItems called');\r\n+  console.log('effectiveLocation:', effectiveLocation);\r\n+  console.log('sortBy:', sortBy);\r\n+  \r\n+  try {\r\n+    setLoading(true);\r\n+    setError(null);\r\n+\r\n+    console.log('📡 Fetching items from Firebase...');\r\n+    const allItems = await getFeaturedItems(48);\r\n+    console.log('✅ Fetched items:', allItems.length);\r\n+    \r\n+    const currentUserId = user?.uid;\r\n+    \r\n+    // Filter out current user's items AND invalid items\r\n+    const filteredItems = allItems.filter(item => {\r\n+      const isNotCurrentUser = item.shopId !== currentUserId;\r\n+      const hasImages = item.images && item.images.length > 0 && item.images.some(img => img);\r\n+      const hasValidPrice = item.price && !isNaN(parseFloat(item.price)) && parseFloat(item.price) > 0;\r\n+      const hasStock = !item.deleted && (!item.quantity || parseInt(item.quantity) > 0);\r\n+      \r\n+      return isNotCurrentUser && hasImages && hasValidPrice && hasStock;\r\n+    });\r\n+    \r\n+    console.log('✅ Filtered items:', filteredItems.length);\r\n+\r\n+    let itemsWithDistance = filteredItems;\r\n+    \r\n+    // Calculate distances if we have location\r\n+    if (effectiveLocation) {\r\n+      console.log('📍 Calculating distances...');\r\n+      itemsWithDistance = filteredItems.map(item => {\r\n+        let itemCoords = item.coordinates;\r\n+        if (!itemCoords && item.address) {\r\n+          const coordsMatch = item.address.match(/^(-?\\d+\\.?\\d*),\\s*(-?\\d+\\.?\\d*)$/);\r\n+          if (coordsMatch) {\r\n+            itemCoords = {\r\n+              lat: parseFloat(coordsMatch[1]),\r\n+              lng: parseFloat(coordsMatch[2])\r\n+            };\r\n+          }\r\n+        }\r\n+\r\n+        if (itemCoords?.lat && itemCoords?.lng) {\r\n+          try {\r\n+            const distanceInMeters = getDistance(\r\n+              { latitude: effectiveLocation.latitude, longitude: effectiveLocation.longitude },\r\n+              { latitude: itemCoords.lat, longitude: itemCoords.lng }\r\n+            );\r\n+            const distanceInMiles = (distanceInMeters / 1609.34).toFixed(1);\r\n+\r\n+            return {\r\n+              ...item,\r\n+              coordinates: itemCoords,\r\n+              distance: distanceInMeters,\r\n+              distanceInMiles,\r\n+              formattedDistance: `${distanceInMiles} mi`\r\n+            };\r\n+          } catch (e) {\r\n+            console.warn('Error calculating distance for item:', e);\r\n+            return item;\r\n+          }\r\n+        }\r\n+        return item;\r\n+      });\r\n+    } else {\r\n+      console.warn('⚠️ No effectiveLocation available for distance calculation');\r\n+    }\r\n+\r\n+    // Apply sorting\r\n+    console.log('🔄 Applying sort:', sortBy);\r\n+    const sortedItems = applySorting(itemsWithDistance, sortBy);\r\n+    console.log('✅ Sorted items:', sortedItems.length);\r\n+\r\n+    // Categorize items\r\n+    const categorizedItems = {\r\n+      'Electronics & Tech': [],\r\n+      'Clothing & Accessories': [],\r\n+      'Home & Garden': [],\r\n+      'Sports & Outdoors': [],\r\n+      'Books & Media': [],\r\n+      'Toys & Games': [],\r\n+      'Health & Beauty': [],\r\n+      'Automotive': [],\r\n+      'Collectibles & Art': [],\r\n+      'Food & Beverages': [],\r\n+      'Other': []\r\n+    };\r\n+\r\n+    sortedItems.forEach(item => {\r\n+      const category = item.category || 'Other';\r\n+      if (categorizedItems[category]) {\r\n+        categorizedItems[category].push(item);\r\n+      } else {\r\n+        categorizedItems['Other'].push(item);\r\n+      }\r\n+    });\r\n+\r\n+    Object.keys(categorizedItems).forEach(category => {\r\n+      categorizedItems[category] = categorizedItems[category].slice(0, 10);\r\n+    });\r\n+\r\n+    console.log('✅ Setting categories:', Object.keys(categorizedItems).map(k => `${k}: ${categorizedItems[k].length}`));\r\n+    setCategories(categorizedItems);\r\n+    setFeaturedItems(sortedItems.slice(0, 10));\r\n+    setTotalItems(filteredItems.length);\r\n+\r\n+    setLoading(false);\r\n+  } catch (error) {\r\n+    console.error('❌ Error loading categorized items:', error);\r\n+    setError('Failed to load items. Please try again later.');\r\n+    setLoading(false);\r\n+  }\r\n+};\r\n+\r\n+// Add this useEffect with other effects\r\n+\r\n+useEffect(() => {\r\n+  const handleClickOutside = (event) => {\r\n+    if (sortMenuOpen && !event.target.closest('.sort-container')) {\r\n+      setSortMenuOpen(false);\r\n+    }\r\n+  };\r\n+\r\n+  document.addEventListener('mousedown', handleClickOutside);\r\n+  return () => document.removeEventListener('mousedown', handleClickOutside);\r\n+}, [sortMenuOpen]);\r\n+\r\n+const applySorting = (items, sortType) => {\r\n+  let sortedItems = [...items];\r\n+  \r\n+  switch (sortType) {\r\n+    case 'proximity':\r\n+      if (!userLocation) {\r\n+        // If no location, request it\r\n+        requestLocation();\r\n+        return sortedItems;\r\n+      }\r\n+      // Sort by distance (closest first) - no distance filter\r\n+      sortedItems.sort((a, b) => {\r\n+        const distA = a.distance || Infinity;\r\n+        const distB = b.distance || Infinity;\r\n+        return distA - distB;\r\n+      });\r\n+      break;\r\n+      \r\n+    case 'price-low':\r\n+      // REMOVED 30-mile filter - sort all items by price (low to high)\r\n+      sortedItems.sort((a, b) => {\r\n+        const priceA = parseFloat(a.price) || 0;\r\n+        const priceB = parseFloat(b.price) || 0;\r\n+        return priceA - priceB;\r\n+      });\r\n+      break;\r\n+      \r\n+    case 'price-high':\r\n+      // REMOVED 30-mile filter - sort all items by price (high to low)\r\n+      sortedItems.sort((a, b) => {\r\n+        const priceA = parseFloat(a.price) || 0;\r\n+        const priceB = parseFloat(b.price) || 0;\r\n+        return priceB - priceA;\r\n+      });\r\n+      break;\r\n+      \r\n+    case 'recent':\r\n+    default:\r\n+      // REMOVED 30-mile filter - sort all items by most recent\r\n+      sortedItems.sort((a, b) => {\r\n+        const dateA = a.createdAt ? new Date(a.createdAt) : new Date(0);\r\n+        const dateB = b.createdAt ? new Date(b.createdAt) : new Date(0);\r\n+        return dateB - dateA;\r\n+      });\r\n+      break;\r\n+  }\r\n+  \r\n+  return sortedItems;\r\n+};\r\n+\r\n+const getSortLabel = (sortType) => {\r\n+  switch (sortType) {\r\n+    case 'proximity': return 'Closest First';\r\n+    case 'price-low': return 'Price: Low to High';\r\n+    case 'price-high': return 'Price: High to Low';\r\n+    case 'recent':\r\n+    default: return 'Most Recent';\r\n+  }\r\n+};\r\n+\r\n+// Replace convertCoordsToZip with this new function\r\n+const convertCoordsToCity = async (lat, lon) => {\r\n+  try {\r\n+    setIsConvertingToCity(true);\r\n+    setError(null);\r\n+    \r\n+    const response = await fetch(\r\n+      `https://nominatim.openstreetmap.org/reverse?lat=${lat}&lon=${lon}&format=json&zoom=10&addressdetails=1`,\r\n+      {\r\n+        headers: {\r\n+          'Accept': 'application/json',\r\n+          'User-Agent': 'KalKode Marketplace'\r\n+        }\r\n+      }\r\n+    );\r\n+    \r\n+    if (!response.ok) {\r\n+      throw new Error('Failed to fetch location data');\r\n+    }\r\n+    \r\n+    const data = await response.json();\r\n+    console.log('Nominatim response:', data);\r\n+    \r\n+    if (!data || !data.address) {\r\n+      setCityRegion('Not available');\r\n+      setCityInputValue('');\r\n+      return null;\r\n+    }\r\n+    \r\n+    const address = data.address;\r\n+    const city = address.city || address.town || address.village || address.county;\r\n+    const state = address.state;\r\n+    \r\n+    // Major cities list (you can expand this)\r\n+    const majorCities = [\r\n+      'Houston', 'Dallas', 'Austin', 'San Antonio', 'Fort Worth',\r\n+      'Los Angeles', 'New York', 'Chicago', 'Phoenix', 'Philadelphia',\r\n+      'San Diego', 'San Jose', 'Jacksonville', 'Columbus', 'Charlotte'\r\n+    ];\r\n+    \r\n+    let locationString = '';\r\n+    \r\n+    if (city && majorCities.some(major => city.includes(major))) {\r\n+      // For major cities, determine direction from city center\r\n+      const cityName = majorCities.find(major => city.includes(major));\r\n+      \r\n+      // Get city center coordinates (you could make this more precise with a lookup table)\r\n+      const cityCenterResponse = await fetch(\r\n+        `https://nominatim.openstreetmap.org/search?city=${cityName}&state=${state}&format=json&limit=1`,\r\n+        {\r\n+          headers: {\r\n+            'Accept': 'application/json',\r\n+            'User-Agent': 'KalKode Marketplace'\r\n+          }\r\n+        }\r\n+      );\r\n+      \r\n+      const cityCenterData = await cityCenterResponse.json();\r\n+      \r\n+      if (cityCenterData && cityCenterData[0]) {\r\n+        const centerLat = parseFloat(cityCenterData[0].lat);\r\n+        const centerLon = parseFloat(cityCenterData[0].lon);\r\n+        \r\n+        // Calculate direction\r\n+        const direction = getDirection(lat, lon, centerLat, centerLon);\r\n+        locationString = `${direction} ${cityName}, ${getStateAbbreviation(state)}`;\r\n+      } else {\r\n+        locationString = `${cityName}, ${getStateAbbreviation(state)}`;\r\n+      }\r\n+    } else if (state) {\r\n+      // For non-major cities, use state with direction\r\n+      // Get state center (approximate)\r\n+      const stateCenterResponse = await fetch(\r\n+        `https://nominatim.openstreetmap.org/search?state=${state}&country=USA&format=json&limit=1`,\r\n+        {\r\n+          headers: {\r\n+            'Accept': 'application/json',\r\n+            'User-Agent': 'KalKode Marketplace'\r\n+          }\r\n+        }\r\n+      );\r\n+      \r\n+      const stateCenterData = await stateCenterResponse.json();\r\n+      \r\n+      if (stateCenterData && stateCenterData[0]) {\r\n+        const centerLat = parseFloat(stateCenterData[0].lat);\r\n+        const centerLon = parseFloat(stateCenterData[0].lon);\r\n+        \r\n+        const direction = getDirection(lat, lon, centerLat, centerLon);\r\n+        locationString = city ? \r\n+          `${city}, ${direction} ${getStateAbbreviation(state)}` :\r\n+          `${direction} ${getStateAbbreviation(state)}`;\r\n+      } else {\r\n+        locationString = city ? \r\n+          `${city}, ${getStateAbbreviation(state)}` :\r\n+          getStateAbbreviation(state);\r\n+      }\r\n+    } else {\r\n+      locationString = city || 'Unknown Location';\r\n+    }\r\n+    \r\n+    setCityRegion(locationString);\r\n+    setCityInputValue(locationString);\r\n+    \r\n+    console.log(`Coordinates ${lat}, ${lon} → ${locationString}`);\r\n+    \r\n+    return locationString;\r\n+    \r\n+  } catch (error) {\r\n+    console.error('Error converting coordinates to city:', error);\r\n+    setCityRegion('Error');\r\n+    setCityInputValue('');\r\n+    setError('Failed to get location information');\r\n+    return null;\r\n+  } finally {\r\n+    setIsConvertingToCity(false);\r\n+  }\r\n+};\r\n+\r\n+// Helper function to determine direction (N, S, E, W, NE, NW, SE, SW)\r\n+const getDirection = (lat1, lon1, lat2, lon2) => {\r\n+  const latDiff = lat1 - lat2;\r\n+  const lonDiff = lon1 - lon2;\r\n+  \r\n+  const absLatDiff = Math.abs(latDiff);\r\n+  const absLonDiff = Math.abs(lonDiff);\r\n+  \r\n+  // If differences are very small, consider it center\r\n+  if (absLatDiff < 0.1 && absLonDiff < 0.1) {\r\n+    return '';\r\n+  }\r\n+  \r\n+  // Determine primary direction\r\n+  let direction = '';\r\n+  \r\n+  // North/South\r\n+  if (absLatDiff > absLonDiff * 0.5) {\r\n+    direction += latDiff > 0 ? 'N' : 'S';\r\n+  }\r\n+  \r\n+  // East/West\r\n+  if (absLonDiff > absLatDiff * 0.5) {\r\n+    direction += lonDiff > 0 ? 'E' : 'W';\r\n+  }\r\n+  \r\n+  return direction || 'Central';\r\n+};\r\n+\r\n+// Helper function to get state abbreviations\r\n+const getStateAbbreviation = (stateName) => {\r\n+  const stateMap = {\r\n+    'Alabama': 'AL', 'Alaska': 'AK', 'Arizona': 'AZ', 'Arkansas': 'AR',\r\n+    'California': 'CA', 'Colorado': 'CO', 'Connecticut': 'CT', 'Delaware': 'DE',\r\n+    'Florida': 'FL', 'Georgia': 'GA', 'Hawaii': 'HI', 'Idaho': 'ID',\r\n+    'Illinois': 'IL', 'Indiana': 'IN', 'Iowa': 'IA', 'Kansas': 'KS',\r\n+    'Kentucky': 'KY', 'Louisiana': 'LA', 'Maine': 'ME', 'Maryland': 'MD',\r\n+    'Massachusetts': 'MA', 'Michigan': 'MI', 'Minnesota': 'MN', 'Mississippi': 'MS',\r\n+    'Missouri': 'MO', 'Montana': 'MT', 'Nebraska': 'NE', 'Nevada': 'NV',\r\n+    'New Hampshire': 'NH', 'New Jersey': 'NJ', 'New Mexico': 'NM', 'New York': 'NY',\r\n+    'North Carolina': 'NC', 'North Dakota': 'ND', 'Ohio': 'OH', 'Oklahoma': 'OK',\r\n+    'Oregon': 'OR', 'Pennsylvania': 'PA', 'Rhode Island': 'RI', 'South Carolina': 'SC',\r\n+    'South Dakota': 'SD', 'Tennessee': 'TN', 'Texas': 'TX', 'Utah': 'UT',\r\n+    'Vermont': 'VT', 'Virginia': 'VA', 'Washington': 'WA', 'West Virginia': 'WV',\r\n+    'Wisconsin': 'WI', 'Wyoming': 'WY'\r\n+  };\r\n+  \r\n+  return stateMap[stateName] || stateName;\r\n+};\r\n+\r\n+// Replace handleLocationToZip with handleLocationToCity\r\n+const handleLocationToCity = async () => {\r\n+  try {\r\n+    setIsConvertingToCity(true);\r\n+    setError(null);\r\n+    \r\n+    // Request fresh location from browser\r\n+    const freshLocation = await new Promise((resolve, reject) => {\r\n+      if (!navigator.geolocation) {\r\n+        reject(new Error('Geolocation not supported'));\r\n+        return;\r\n+      }\r\n+      \r\n+      navigator.geolocation.getCurrentPosition(\r\n+        (position) => {\r\n+          resolve({\r\n+            latitude: position.coords.latitude,\r\n+            longitude: position.coords.longitude\r\n+          });\r\n+        },\r\n+        (error) => {\r\n+          reject(error);\r\n+        },\r\n+        {\r\n+          enableHighAccuracy: true,\r\n+          timeout: 10000,\r\n+          maximumAge: 0\r\n+        }\r\n+      );\r\n+    });\r\n+    \r\n+    // Convert fresh coordinates to city/region\r\n+    await convertCoordsToCity(freshLocation.latitude, freshLocation.longitude);\r\n+    \r\n+  } catch (error) {\r\n+    console.error('Error getting fresh location:', error);\r\n+    \r\n+    // Fallback: use stored location if available\r\n+    if (userLocation) {\r\n+      console.log('Using stored location as fallback');\r\n+      await convertCoordsToCity(userLocation.latitude, userLocation.longitude);\r\n+    } else {\r\n+      setError('Location not available. Please enable location services.');\r\n+    }\r\n+  } finally {\r\n+    setIsConvertingToCity(false);\r\n+  }\r\n+};\r\n+\r\n+// Replace handleToggleZipPin with handleToggleCityPin\r\n+const handleToggleCityPin = () => {\r\n+  if (isCityPinned) {\r\n+    localStorage.removeItem('pinnedCityRegion');\r\n+    setIsCityPinned(false);\r\n+    setCityRegion('');\r\n+    setCityInputValue('');\r\n+  } else {\r\n+    if (cityRegion && cityRegion !== 'Not available' && cityRegion !== 'Error') {\r\n+      localStorage.setItem('pinnedCityRegion', cityRegion);\r\n+      setIsCityPinned(true);\r\n+    }\r\n+  }\r\n+};\r\n+\r\n+// Update the useEffect that loads pinned location on mount\r\n+useEffect(() => {\r\n+  const pinnedCity = localStorage.getItem('pinnedCityRegion');\r\n+  if (pinnedCity) {\r\n+    setCityRegion(pinnedCity);\r\n+    setCityInputValue(pinnedCity);\r\n+    setIsCityPinned(true);\r\n+  }\r\n+}, []);\r\n+\r\n+\r\n+  // Handle opening shop\r\n+  const handleOpenShop = () => {\r\n+    navigate('/shop/create/template');\r\n+  };\r\n+\r\n+  // Refresh theme\r\n+  const refreshTheme = () => {\r\n+    if (isRefreshing) return;\r\n+    \r\n+    setIsRefreshing(true);\r\n+    const styles = Object.values(WELCOME_STYLES);\r\n+    const otherStyles = styles.filter(style => style.id !== currentStyle.id);\r\n+    \r\n+    if (otherStyles.length > 0) {\r\n+      const randomStyle = otherStyles[Math.floor(Math.random() * otherStyles.length)];\r\n+      setCurrentStyle(randomStyle);\r\n+      \r\n+      if (isPinned) {\r\n+        localStorage.removeItem('pinnedStyleId');\r\n+        setIsPinned(false);\r\n+      }\r\n+    }\r\n+    \r\n+    setTimeout(() => setIsRefreshing(false), 500);\r\n+  };\r\n+\r\n+  // Toggle pin style\r\n+  const togglePinStyle = () => {\r\n+    if (isPinned) {\r\n+      localStorage.removeItem('pinnedStyleId');\r\n+      setIsPinned(false);\r\n+      \r\n+      const styles = Object.values(WELCOME_STYLES).filter(\r\n+        style => style.id !== currentStyle.id\r\n+      );\r\n+      \r\n+      if (styles.length > 0) {\r\n+        const randomStyle = styles[Math.floor(Math.random() * styles.length)];\r\n+        setCurrentStyle(randomStyle);\r\n+      }\r\n+    } else {\r\n+      localStorage.setItem('pinnedStyleId', currentStyle.id.toString());\r\n+      setIsPinned(true);\r\n+    }\r\n+  };\r\n+\r\n+  // Handle location update\r\n+  const handleLocationUpdate = () => {\r\n+    setUpdatingLocation(true);\r\n+    requestLocation();\r\n+  };\r\n+\r\n+  // Get location display text\r\n+  const getLocationDisplayText = () => {\r\n+    if (!userLocation) {\r\n+      return \"Location: Not available\";\r\n+    }\r\n+    return `Location: ${userLocation.latitude.toFixed(4)}, ${userLocation.longitude.toFixed(4)}`;\r\n+  };\r\n+\r\n+  // Search featured items\r\n+  const searchFeaturedItems = async (searchTerm) => {\r\n+    if (!searchTerm.trim()) {\r\n+      setSearchResults([]);\r\n+      setHasSearchResults(false);\r\n+      return;\r\n+    }\r\n+  \r\n+    try {\r\n+      setIsSearching(true);\r\n+      setError(null);\r\n+    \r\n+      const shopsRef = collection(db, 'shops');\r\n+      const snapshot = await getDocs(shopsRef);\r\n+      \r\n+      let allMatchingItems = [];\r\n+      const currentUserId = user?.uid;\r\n+      \r\n+      snapshot.docs.forEach(doc => {\r\n+        const shopData = doc.data();\r\n+        \r\n+        if (doc.id === currentUserId) {\r\n+          return;\r\n+        }\r\n+        \r\n+        if (shopData?.items && Array.isArray(shopData.items)) {\r\n+          shopData.items\r\n+            .filter(item => !item.deleted)\r\n+            .forEach(item => {\r\n+              const itemName = (item.name || '').toLowerCase();\r\n+              const itemDescription = (item.description || '').toLowerCase();\r\n+              const searchLower = searchTerm.toLowerCase();\r\n+              \r\n+              if (itemName.includes(searchLower) || itemDescription.includes(searchLower)) {\r\n+                allMatchingItems.push({\r\n+                  ...item,\r\n+                  shopId: doc.id,\r\n+                  shopName: shopData.name || 'Unknown Shop',\r\n+                  shopTheme: shopData.theme\r\n+                });\r\n+              }\r\n+            });\r\n+        }\r\n+      });\r\n+    \r\n+      if (userLocation) {\r\n+        allMatchingItems = allMatchingItems.map(item => {\r\n+          if (item.coordinates && item.coordinates.lat && item.coordinates.lng) {\r\n+            try {\r\n+              const distanceInMeters = getDistance(\r\n+                { latitude: userLocation.latitude, longitude: userLocation.longitude },\r\n+                { latitude: item.coordinates.lat, longitude: item.coordinates.lng }\r\n+              );\r\n+              const distanceInMiles = (distanceInMeters / 1609.34).toFixed(1);\r\n+              \r\n+              return {\r\n+                ...item,\r\n+                distance: distanceInMeters,\r\n+                distanceInMiles,\r\n+                formattedDistance: `${distanceInMiles} mi`\r\n+              };\r\n+            } catch (e) {\r\n+              console.warn('Error calculating distance for item:', e);\r\n+              return item;\r\n+            }\r\n+          }\r\n+          return item;\r\n+        });\r\n+      }\r\n+    \r\n+      setSearchResults(allMatchingItems);\r\n+      setHasSearchResults(true);\r\n+      \r\n+      if (allMatchingItems.length === 0) {\r\n+        setError(`No items found matching \"${searchTerm}\"`);\r\n+      }\r\n+    } catch (error) {\r\n+      console.error('Error searching items:', error);\r\n+      setError('Failed to search items. Please try again later.');\r\n+    } finally {\r\n+      setIsSearching(false);\r\n+    }\r\n+  };\r\n+\r\n+\r\n+  // Handle featured search\r\n+  const handleFeaturedSearch = () => {\r\n+    if (featuredSearchTerm.trim()) {\r\n+      searchFeaturedItems(featuredSearchTerm);\r\n+    }\r\n+  };\r\n+\r\n+  const handleRowScroll = (categoryName, rowNumber, scrollLeft) => {\r\n+  const row1Id = `${categoryName}-row1`;\r\n+  const row2Id = `${categoryName}-row2`;\r\n+  \r\n+  const row1Element = document.getElementById(row1Id);\r\n+  const row2Element = document.getElementById(row2Id);\r\n+  \r\n+  if (rowNumber === 1 && row2Element) {\r\n+    row2Element.scrollLeft = scrollLeft;\r\n+  } else if (rowNumber === 2 && row1Element) {\r\n+    row1Element.scrollLeft = scrollLeft;\r\n+  }\r\n+};\r\n+\r\n+  const handleClearFeaturedSearch = () => {\r\n+    setFeaturedSearchTerm('');\r\n+    setSearchResults([]);\r\n+    setHasSearchResults(false);\r\n+    setError(null);\r\n+  };\r\n+\r\n+  // Fetch nearby items\r\n+  const fetchNearbyItems = async () => {\r\n+    if (!userLocation) {\r\n+      setError('Location information is not available');\r\n+      setSearching(false);\r\n+      return;\r\n+    }\r\n+  \r\n+    try {\r\n+      setLoading(true);\r\n+      const shopsRef = collection(db, 'shops');\r\n+      const snapshot = await getDocs(shopsRef);\r\n+      \r\n+      let itemsInRadius = [];\r\n+      const currentUserId = user?.uid;\r\n+      \r\n+      snapshot.docs.forEach(doc => {\r\n+        const shopData = doc.data();\r\n+        \r\n+        if (doc.id === currentUserId) {\r\n+          return;\r\n+        }\r\n+        \r\n+        if (shopData?.items && Array.isArray(shopData.items)) {\r\n+          shopData.items\r\n+            .filter(item => !item.deleted)\r\n+            .forEach(item => {\r\n+              let itemCoords = item.coordinates;\r\n+              if (!itemCoords && item.address) {\r\n+                const coordsMatch = item.address.match(/^(-?\\d+\\.?\\d*),\\s*(-?\\d+\\.?\\d*)$/);\r\n+                if (coordsMatch) {\r\n+                  itemCoords = {\r\n+                    lat: parseFloat(coordsMatch[1]),\r\n+                    lng: parseFloat(coordsMatch[2])\r\n+                  };\r\n+                }\r\n+              }\r\n+  \r\n+              if (itemCoords?.lat && itemCoords?.lng) {\r\n+                try {\r\n+                  const distanceInMeters = getDistance(\r\n+                    { latitude: userLocation.latitude, longitude: userLocation.longitude },\r\n+                    { latitude: itemCoords.lat, longitude: itemCoords.lng }\r\n+                  );\r\n+  \r\n+                  const distanceInMiles = (distanceInMeters / 1609.34).toFixed(1);\r\n+                  \r\n+                  itemsInRadius.push({\r\n+                    ...item,\r\n+                    shopId: doc.id,\r\n+                    shopName: shopData.name || 'Unknown Shop',\r\n+                    coordinates: itemCoords,\r\n+                    distance: distanceInMeters,\r\n+                    distanceInMiles,\r\n+                    formattedDistance: `${distanceInMiles} mi`,\r\n+                    theme: shopData.theme\r\n+                  });\r\n+                } catch (e) {\r\n+                  console.warn('Error calculating distance for item:', e);\r\n+                }\r\n+              }\r\n+            });\r\n+        }\r\n+      });\r\n+  \r\n+      itemsInRadius.sort((a, b) => a.distance - b.distance);\r\n+      itemsInRadius = itemsInRadius.slice(0, 10);\r\n+  \r\n+      setNearbyItems(itemsInRadius);\r\n+      setHasSearched(true);\r\n+      \r\n+      if (itemsInRadius.length === 0) {\r\n+        setError('No items found in your area');\r\n+      }\r\n+    } catch (error) {\r\n+      console.error('Error fetching nearby items:', error);\r\n+      setError('Failed to load nearby items. Please try again later.');\r\n+    } finally {\r\n+      setLoading(false);\r\n+      setSearching(false);\r\n+    }\r\n+  };\r\n+\r\n+  // Handle live location\r\n+  const handleLiveLocation = () => {\r\n+    setSearching(true);\r\n+    setError(null);\r\n+    \r\n+    if (userLocation) {\r\n+      fetchNearbyItems();\r\n+      setHasSearched(true);\r\n+    } else {\r\n+      requestLocation();\r\n+    }\r\n+  };\r\n+\r\n+  // Handle address search\r\n+  const handleAddressSearch = async () => {\r\n+    if (!searchAddress.trim()) {\r\n+      setError('Please enter an address');\r\n+      return;\r\n+    }\r\n+  \r\n+    setSearching(true);\r\n+    setError(null);\r\n+    setHasSearched(true);\r\n+    \r\n+    try {\r\n+      const encodedAddress = encodeURIComponent(searchAddress);\r\n+      const response = await fetch(\r\n+        `https://nominatim.openstreetmap.org/search?q=${encodedAddress}&format=json&limit=1`,\r\n+        {\r\n+          headers: {\r\n+            'Accept': 'application/json',\r\n+            'User-Agent': 'KalKode Marketplace'\r\n+          }\r\n+        }\r\n+      );\r\n+      \r\n+      const data = await response.json();\r\n+  \r\n+      if (data && data[0]) {\r\n+        const coordinates = {\r\n+          latitude: parseFloat(data[0].lat),\r\n+          longitude: parseFloat(data[0].lon)\r\n+        };\r\n+        \r\n+        await fetchNearbyItems(coordinates);\r\n+      } else {\r\n+        throw new Error('Location not found. Please try a different address.');\r\n+      }\r\n+  \r\n+    } catch (error) {\r\n+      console.error('Error searching address:', error);\r\n+      setError(error.message || 'Unable to search this location. Please try again.');\r\n+    } finally {\r\n+      setSearching(false);\r\n+    }\r\n+  };\r\n+\r\n+  // Handle item click\r\n+  const handleItemClick = (item) => {\r\n+    setZoomedItem(item);\r\n+    setOrderQuantity(1);\r\n+    setCurrentImageIndex(0); // Reset image index\r\n+    \r\n+    const scrollY = window.scrollY;\r\n+    document.body.style.position = 'fixed';\r\n+    document.body.style.top = `-${scrollY}px`;\r\n+    document.body.style.width = '100%';\r\n+    document.body.style.overflow = 'hidden';\r\n+    \r\n+    document.body.setAttribute('data-scroll-y', scrollY);\r\n+  };\r\n+\r\n+  // Handle close zoom\r\n+  const handleCloseZoom = () => {\r\n+    setZoomedItem(null);\r\n+    setCurrentImageIndex(0);\r\n+    \r\n+    const scrollY = document.body.getAttribute('data-scroll-y') || '0';\r\n+    document.body.style.position = '';\r\n+    document.body.style.top = '';\r\n+    document.body.style.width = '';\r\n+    document.body.style.overflow = '';\r\n+    document.body.removeAttribute('data-scroll-y');\r\n+    \r\n+    window.scrollTo(0, parseInt(scrollY));\r\n+  };\r\n+\r\n+  // Adjust quantity\r\n+  const adjustQuantity = (delta) => {\r\n+    const maxQuantity = parseInt(zoomedItem?.quantity) || 1;\r\n+    const newQuantity = Math.max(1, Math.min(maxQuantity, orderQuantity + delta));\r\n+    setOrderQuantity(newQuantity);\r\n+  };\r\n+\r\n+  // Handle direct order\r\n+  const handleDirectOrder = async () => {\r\n+    if (!zoomedItem) return;\r\n+    \r\n+    if (!isAuthenticated) {\r\n+       navigate('/auth', { \r\n+        state: { \r\n+          mode: 'login',\r\n+          from: window.location.pathname\r\n+        }\r\n+      });\r\n+       return;\r\n+     }\r\n+    \r\n+    try {\r\n+      const result = await TransactionService.initiateQuantityTransaction(\r\n+        zoomedItem.id,\r\n+        zoomedItem.shopId,\r\n+        parseFloat(zoomedItem.price),\r\n+        orderQuantity,\r\n+        'inperson'\r\n+      );\r\n+      \r\n+      if (result.transactionId) {\r\n+        handleCloseZoom();\r\n+        navigate(`/messages?chat=${result.transactionId}`);\r\n+      }\r\n+    } catch (error) {\r\n+      console.error('Error placing order:', error);\r\n+      alert('Error placing order: ' + error.message);\r\n+    }\r\n+  };\r\n+\r\n+  // Handle order click\r\n+  const handleOrderClick = (item) => {\r\n+    setSelectedChatItem(item);\r\n+    setChatOpen(true);\r\n+    \r\n+    if (zoomedItem) {\r\n+      setZoomedItem(null);\r\n+      const scrollY = document.body.getAttribute('data-scroll-y') || '0';\r\n+      document.body.style.position = '';\r\n+      document.body.style.top = '';\r\n+      document.body.style.width = '';\r\n+      document.body.style.overflow = '';\r\n+      document.body.removeAttribute('data-scroll-y');\r\n+      window.scrollTo(0, parseInt(scrollY));\r\n+    }\r\n+  };\r\n+\r\n+  // Handle close chat\r\n+  const handleCloseChat = () => {\r\n+    setChatOpen(false);\r\n+    setSelectedChatItem(null);\r\n+    \r\n+    document.body.style.position = '';\r\n+    document.body.style.top = '';\r\n+    document.body.style.width = '';\r\n+    document.body.style.overflow = '';\r\n+    document.body.removeAttribute('data-scroll-y');\r\n+  };\r\n+\r\n+  // Handle inquire click\r\n+  const handleInquireClick = () => {\r\n+    alert('Inquiry feature coming soon!');\r\n+  };\r\n+\r\n+  // Handle logout\r\n+  const handleLogout = async () => {\r\n+    try {\r\n+      await signOut(auth);\r\n+      navigate('/');\r\n+    } catch (error) {\r\n+      console.error('Error signing out:', error);\r\n+    }\r\n+  };\r\n+\r\n+  // Handle login\r\n+  const handleLogin = () => {\r\n+    navigate('/auth', { \r\n+      state: { \r\n+        mode: 'login',\r\n+        from: window.location.pathname\r\n+      }\r\n+    });\r\n+  };\r\n+\r\n+  // Effects\r\n+  useEffect(() => {\r\n+    const fetchShopData = async () => {\r\n+      if (user && user.uid) {\r\n+        try {\r\n+          const data = await getShopData(user.uid);\r\n+          setShopData(data);\r\n+        } catch (error) {\r\n+          console.error('Error fetching shop data:', error);\r\n+        }\r\n+      }\r\n+    };\r\n+    \r\n+    if (isAuthenticated) {\r\n+      fetchShopData();\r\n+    }\r\n+  }, [user, isAuthenticated]);\r\n+\r\n+  useEffect(() => {\r\n+    if (isAuthenticated) {\r\n+      const randomIndex = Math.floor(Math.random() * MOTIVATIONAL_MESSAGES.length);\r\n+      setMotivationalMessage(MOTIVATIONAL_MESSAGES[randomIndex]);\r\n+    }\r\n+  }, [isAuthenticated]);\r\n+\r\n+  useEffect(() => {\r\n+    const pinnedStyleId = localStorage.getItem('pinnedStyleId');\r\n+    \r\n+    if (pinnedStyleId) {\r\n+      const pinnedStyle = Object.values(WELCOME_STYLES).find(\r\n+        style => style.id.toString() === pinnedStyleId\r\n+      );\r\n+      \r\n+      if (pinnedStyle) {\r\n+        setCurrentStyle(pinnedStyle);\r\n+        setIsPinned(true);\r\n+        return;\r\n+      }\r\n+    }\r\n+    \r\n+    const styles = Object.values(WELCOME_STYLES);\r\n+    const randomStyle = styles[Math.floor(Math.random() * styles.length)];\r\n+    setCurrentStyle(randomStyle);\r\n+  }, []);\r\n+\r\n+  useEffect(() => {\r\n+    if (activeTab === 'nearby' && userLocation) {\r\n+      fetchNearbyItems();\r\n+      setHasSearched(true);\r\n+    }\r\n+  }, [activeTab, userLocation]);\r\n+\r\n+  useEffect(() => {\r\n+    if (locationPermission === 'pending') {\r\n+      requestLocation();\r\n+    }\r\n+  }, []);\r\n+\r\n+  useEffect(() => {\r\n+    if (userLocation) {\r\n+      if (activeTab === 'nearby') {\r\n+        fetchNearbyItems();\r\n+        setHasSearched(true);\r\n+      }\r\n+      \r\n+      if (activeTab === 'featured') {\r\n+        loadCategorizedItems();\r\n+      }\r\n+      \r\n+      setUpdatingLocation(false);\r\n+    }\r\n+  }, [userLocation, activeTab]);\r\n+\r\n+  useEffect(() => {\r\n+  const loadTabContent = async () => {\r\n+    console.log('📑 Loading tab content...', { activeTab, effectiveLocation });\r\n+    \r\n+    try {\r\n+      setLoading(true);\r\n+      setError(null);\r\n+  \r\n+      switch (activeTab) {\r\n+        case 'featured':\r\n+          // ✅ Wait for effectiveLocation before loading items\r\n+          if (effectiveLocation) {\r\n+            console.log('📦 Loading featured items...');\r\n+            await loadCategorizedItems();\r\n+          } else {\r\n+            console.log('⏳ Waiting for location...');\r\n+            setLoading(false);\r\n+          }\r\n+          return;\r\n+        case 'nearby':\r\n+          setLoading(false);\r\n+          break;\r\n+        case 'media':\r\n+          setLoading(false);\r\n+          break;\r\n+        default:\r\n+          setLoading(false);\r\n+      }\r\n+    } catch (error) {\r\n+      console.error('Error loading content:', error);\r\n+      setError('Failed to load content. Please try again later.');\r\n+      setLoading(false);\r\n+    }\r\n+  };\r\n+\r\n+  loadTabContent();\r\n+}, [activeTab, user?.uid, effectiveLocation]); // ✅ Added effectiveLocation dependency\r\n+\r\n+  useEffect(() => {\r\n+    if (activeTab === 'featured') {\r\n+      loadCategorizedItems();\r\n+    }\r\n+    \r\n+    const refreshInterval = setInterval(() => {\r\n+      if (activeTab === 'featured') {\r\n+        loadCategorizedItems();\r\n+      }\r\n+    }, 300000);\r\n+\r\n+    return () => clearInterval(refreshInterval);\r\n+  }, [activeTab, currentPage]);\r\n+\r\n+  // Ping animation effect (disabled on mobile for performance)\r\n+  useEffect(() => {\r\n+    if (window.innerWidth < 768) return;\r\n+    \r\n+    const container = document.querySelector('.page-container');\r\n+    if (!container) return;\r\n+\r\n+    const createPing = () => {\r\n+      const ping = document.createElement('div');\r\n+      ping.className = 'ping';\r\n+      \r\n+      ping.style.left = `${Math.random() * 100}%`;\r\n+      ping.style.top = `${Math.random() * 100}%`;\r\n+      ping.style.zIndex = '0';\r\n+      \r\n+      container.appendChild(ping);\r\n+      \r\n+      setTimeout(() => {\r\n+        if (ping && ping.parentNode) {\r\n+          ping.remove();\r\n+        }\r\n+      }, 3000);\r\n+    };\r\n+\r\n+    const createPingGroup = (count) => {\r\n+      for (let i = 0; i < count; i++) {\r\n+        setTimeout(() => {\r\n+          createPing();\r\n+        }, i * 200);\r\n+      }\r\n+    };\r\n+\r\n+    const pingCounts = [10, 30, 20];\r\n+    let currentIndex = 0;\r\n+\r\n+    const interval = setInterval(() => {\r\n+      const count = pingCounts[currentIndex];\r\n+      createPingGroup(count);\r\n+      currentIndex = (currentIndex + 1) % pingCounts.length;\r\n+    }, 3000);\r\n+    \r\n+    return () => {\r\n+      clearInterval(interval);\r\n+      const pings = container.getElementsByClassName('ping');\r\n+      while (pings.length > 0) {\r\n+        pings[0].remove();\r\n+      }\r\n+    };\r\n+  }, []);\r\n+\r\n+  // Cleanup on unmount\r\n+  useEffect(() => {\r\n+    return () => {\r\n+      document.body.style.position = '';\r\n+      document.body.style.top = '';\r\n+      document.body.style.width = '';\r\n+      document.body.style.overflow = '';\r\n+      document.body.removeAttribute('data-scroll-y');\r\n+      \r\n+      if (sliderAnimationRef.current) {\r\n+        cancelAnimationFrame(sliderAnimationRef.current);\r\n+      }\r\n+    };\r\n+  }, []);\r\n+\r\n+  if (!currentStyle) return null;\r\n+\r\n+  return (\r\n+    <PageContainer className=\"page-container\" theme={currentStyle}>\r\n+      <ThemeDecorations theme={currentStyle} />\r\n+      <Header theme={currentStyle}>\r\n+        <Logo onClick={() => navigate('/')} theme={currentStyle}>\r\n+          KALKODE\r\n+        </Logo>\r\n+\r\n+        <HeaderControls>\r\n+          <HeaderButton \r\n+            onClick={refreshTheme}\r\n+            theme={currentStyle}\r\n+            title=\"Random theme\"\r\n+          >\r\n+            <RefreshCw size={20} className={isRefreshing ? \"spinning\" : \"\"} />\r\n+          </HeaderButton>\r\n+          \r\n+          <HeaderButton \r\n+            onClick={togglePinStyle} \r\n+            theme={currentStyle}\r\n+            className={isPinned ? \"pinned\" : \"\"}\r\n+            title={isPinned ? \"Unpin theme\" : \"Pin theme\"}\r\n+          >\r\n+            <Pin size={20} fill={isPinned ? currentStyle.colors.accent : \"none\"} />\r\n+          </HeaderButton>\r\n+          \r\n+          {isAuthenticated && (\r\n+            <HeaderButton \r\n+              onClick={handleLogout}\r\n+              theme={currentStyle}\r\n+              title=\"Logout\"\r\n+            >\r\n+              <LogOut size={20} />\r\n+            </HeaderButton>\r\n+          )}\r\n+        </HeaderControls>\r\n+      </Header>\r\n+\r\n+      <MainContent isAuthenticated={isAuthenticated}>\r\n+        <WelcomeSection theme={currentStyle}>\r\n+          {isAuthenticated && shopData ? (\r\n+            <>\r\n+              <ProfileSection>\r\n+                <ProfileImage theme={currentStyle}>\r\n+                  {shopData.profile ? (\r\n+                    <img src={shopData.profile} alt={shopData.name || 'Shop Profile'} />\r\n+                  ) : (\r\n+                    <div style={{ \r\n+                      width: '100%', \r\n+                      height: '100%', \r\n+                      background: currentStyle?.colors?.accent || '#800000',\r\n+                      display: 'flex',\r\n+                      alignItems: 'center',\r\n+                      justifyContent: 'center',\r\n+                      color: '#fff',\r\n+                      fontSize: '2rem'\r\n+                    }}>\r\n+                      {(shopData.name?.charAt(0) || user.email?.charAt(0) || 'S').toUpperCase()}\r\n+                    </div>\r\n+                  )}\r\n+                </ProfileImage>\r\n+                <ShopName theme={currentStyle}>{shopData.name || 'My Shop'}</ShopName>\r\n+              </ProfileSection>         \r\n+\r\n+              <MotivationalMessage theme={currentStyle}>\r\n+                {motivationalMessage}\r\n+              </MotivationalMessage>\r\n+            </>\r\n+          ) : (\r\n+            <>\r\n+              <h1>Welcome to KalKode</h1>\r\n+              <p>Trade With Your Community.</p>\r\n+\r\n+              <ActionButtonContainer>\r\n+                <ActionButton theme={currentStyle} onClick={handleOpenShop}>\r\n+                  Open Up Shop\r\n+                </ActionButton>\r\n+                <ActionButton \r\n+                  theme={currentStyle}\r\n+                  onClick={handleLogin}\r\n+                  variant=\"outline\"\r\n+                >\r\n+                  Sign In\r\n+                </ActionButton>\r\n+              </ActionButtonContainer>\r\n+            </>\r\n+          )}\r\n+\r\n+\r\n+        </WelcomeSection>\r\n+\r\n+        <TabContainer>\r\n+          <Tab \r\n+            theme={currentStyle}\r\n+            active={activeTab === 'featured'} \r\n+            onClick={() => setActiveTab('featured')}\r\n+          >\r\n+            <Package size={16} />\r\n+            Featured\r\n+          </Tab>\r\n+          <Tab\r\n+            theme={currentStyle} \r\n+            active={activeTab === 'nearby'} \r\n+            onClick={() => setActiveTab('nearby')}\r\n+          >\r\n+            <Navigation size={16} />\r\n+            Nearby\r\n+          </Tab>\r\n+          <Tab\r\n+            theme={currentStyle} \r\n+            active={activeTab === 'media'} \r\n+            onClick={() => setActiveTab('media')}\r\n+          >\r\n+            <Film size={16} />\r\n+            Media\r\n+          </Tab>\r\n+        </TabContainer>\r\n+\r\n+\r\n+        <LocationIndicator2 theme={currentStyle} isPinned={isCityPinned}>\r\n+          <button \r\n+            className=\"location-icon-btn\"\r\n+            onClick={handleLocationToCity}\r\n+            disabled={isConvertingToCity}\r\n+            title=\"Get region from current location\"\r\n+          >\r\n+            {isConvertingToCity ? (\r\n+              <div className=\"updating-spinner\" />\r\n+            ) : (\r\n+              <Navigation size={20} />\r\n+            )}\r\n+          </button>\r\n+          \r\n+          <input\r\n+            type=\"text\"\r\n+            className=\"location-input\"\r\n+            value={cityInputValue}\r\n+            onChange={(e) => setCityInputValue(e.target.value)}\r\n+            placeholder={\r\n+              isIPLocation ? \r\n+                `${effectiveLocation?.city || 'Location'} (IP-based)` : \r\n+                cityRegion ? cityRegion : \"Click location icon to share\"\r\n+            }\r\n+            readOnly\r\n+          />\r\n+\r\n+          <button\r\n+            className=\"pin-icon-btn\"\r\n+            onClick={handleToggleCityPin}\r\n+            disabled={!cityRegion || cityRegion === 'Not available' || cityRegion === 'Error'}\r\n+            title={isCityPinned ? \"Unpin location\" : \"Pin location\"}\r\n+          >\r\n+            <Pin \r\n+              size={18} \r\n+              fill={isCityPinned ? currentStyle.colors.accent : \"none\"}\r\n+            />\r\n+          </button>\r\n+        </LocationIndicator2>\r\n+\r\n+\r\n+        {/* Nearby Items Tab */}\r\n+        {activeTab === 'nearby' && (\r\n+          <>\r\n+            <SearchContainer>\r\n+              <SearchInput\r\n+                type=\"text\"\r\n+                placeholder=\"Enter address or ZIP code...\"\r\n+                value={searchAddress}\r\n+                onChange={(e) => setSearchAddress(e.target.value)}\r\n+                onKeyPress={(e) => e.key === 'Enter' && handleAddressSearch()}\r\n+              />\r\n+              <SearchButtonGroup>\r\n+                <SearchButton \r\n+                  onClick={handleAddressSearch}\r\n+                  disabled={searching || !searchAddress.trim()}\r\n+                >\r\n+                  <Navigation size={16} />\r\n+                  Search\r\n+                </SearchButton>\r\n+                <SearchButton \r\n+                  onClick={handleLiveLocation}\r\n+                  disabled={searching}\r\n+                  variant=\"live\"\r\n+                >\r\n+                  <Navigation size={16} />\r\n+                  Current\r\n+                </SearchButton>\r\n+              </SearchButtonGroup>\r\n+            </SearchContainer>\r\n+\r\n+            <GridContainer>\r\n+              {error ? (\r\n+                <EmptyGridMessage>\r\n+                  <h3>Oops!</h3>\r\n+                  <p>{error}</p>\r\n+                </EmptyGridMessage>\r\n+              ) : loading ? (\r\n+                <div style={{ textAlign: 'center', gridColumn: '1/-1' }}>\r\n+                  <LoadingSpinner />\r\n+                </div>\r\n+              ) : !hasSearched ? (\r\n+                <EmptyGridMessage>\r\n+                  <h3>Find Items Near You</h3>\r\n+                  <p>Enter your address or use current location to discover items in your area</p>\r\n+                </EmptyGridMessage>\r\n+              ) : nearbyItems.length === 0 ? (\r\n+                <EmptyGridMessage>\r\n+                  <h3>No Items Found</h3>\r\n+                  <p>No items found in this location. Try searching a different area.</p>\r\n+                </EmptyGridMessage>\r\n+              ) : (              \r\n+                nearbyItems.map(item => (\r\n+                  <FeaturedItem \r\n+                    key={`${item.shopId}-${item.id}`} \r\n+                    item={{\r\n+                      ...item,\r\n+                      location: item.formattedDistance\r\n+                    }}\r\n+                    showDistance={true}\r\n+                    theme={currentStyle}\r\n+                    onItemClick={handleItemClick}\r\n+                  />\r\n+                ))\r\n+              )}\r\n+            </GridContainer>\r\n+          </>\r\n+        )}\r\n+\r\n+        {/* Featured Items Tab */}\r\n+        {activeTab === 'featured' && (\r\n+          <>\r\n+            {/* Search container with Filter */}\r\n+            <SearchContainer>\r\n+              <SearchInput\r\n+                type=\"text\"\r\n+                placeholder=\"Search for items...\"\r\n+                value={featuredSearchTerm}\r\n+                onChange={(e) => setFeaturedSearchTerm(e.target.value)}\r\n+                onKeyPress={(e) => e.key === 'Enter' && handleFeaturedSearch()}\r\n+              />\r\n+              <SearchButtonGroup>\r\n+                <SearchButton \r\n+                  onClick={handleFeaturedSearch}\r\n+                  disabled={isSearching || !featuredSearchTerm.trim()}\r\n+                >\r\n+                  <Search size={16} />\r\n+                  Search\r\n+                </SearchButton>\r\n+                {hasSearchResults && (\r\n+                  <SearchButton onClick={handleClearFeaturedSearch} variant=\"live\">\r\n+                    <X size={16} />\r\n+                    Clear\r\n+                  </SearchButton>\r\n+                )}\r\n+\r\n+                {/* Filter Button */}\r\n+                <SortContainer className=\"sort-container\">\r\n+                  <SearchButton \r\n+                    onClick={() => setSortMenuOpen(!sortMenuOpen)}\r\n+                    style={{ position: 'relative' }}\r\n+                  >\r\n+                    <Filter size={16} />\r\n+                    {sortBy !== 'recent' && (\r\n+                      <div style={{\r\n+                        position: 'absolute',\r\n+                        top: '4px',\r\n+                        right: '4px',\r\n+                        width: '6px',\r\n+                        height: '6px',\r\n+                        borderRadius: '50%',\r\n+                        background: currentStyle?.colors?.accent || '#800000'\r\n+                      }} />\r\n+                    )}\r\n+                  </SearchButton>\r\n+                  \r\n+                  <SortDropdown theme={currentStyle} isOpen={sortMenuOpen}>\r\n+                    <div style={{\r\n+                      padding: '0.5rem 1rem 0.75rem',\r\n+                      fontSize: '0.75rem',\r\n+                      fontWeight: '700',\r\n+                      textTransform: 'uppercase',\r\n+                      letterSpacing: '1px',\r\n+                      color: currentStyle?.colors?.accent || '#800000',\r\n+                      borderBottom: `2px solid ${currentStyle?.colors?.accent || '#800000'}`,\r\n+                      marginBottom: '0.75rem',\r\n+                      fontFamily: currentStyle?.fonts?.heading || 'inherit'\r\n+                    }}>\r\n+                      Sort By\r\n+                    </div>\r\n+\r\n+                    <SortOption \r\n+                      theme={currentStyle}\r\n+                      active={sortBy === 'recent'}\r\n+                      onClick={() => {\r\n+                        if (!userLocation) {\r\n+                          requestLocation();\r\n+                          return;\r\n+                        }\r\n+                        setSortBy('recent');\r\n+                        setSortMenuOpen(false);\r\n+                        loadCategorizedItems();\r\n+                      }}\r\n+                    >\r\n+                      <Package size={16} />\r\n+                      <div style={{ display: 'flex', flexDirection: 'column', flex: 1 }}>\r\n+                        <span>Most Recent</span>\r\n+                        <span style={{ \r\n+                          fontSize: '0.7rem', \r\n+                          opacity: 0.7,\r\n+                          fontWeight: '400'\r\n+                        }}>\r\n+                          Within 30 miles\r\n+                        </span>\r\n+                      </div>\r\n+                      {!userLocation && (\r\n+                        <span style={{ \r\n+                          fontSize: '0.65rem', \r\n+                          opacity: 0.6,\r\n+                          marginLeft: 'auto',\r\n+                          fontStyle: 'italic'\r\n+                        }}>\r\n+                          (needs location)\r\n+                        </span>\r\n+                      )}\r\n+                    </SortOption>\r\n+                    \r\n+                    <SortOption \r\n+                      theme={currentStyle}\r\n+                      active={sortBy === 'proximity'}\r\n+                      onClick={() => {\r\n+                        if (!userLocation) {\r\n+                          requestLocation();\r\n+                        }\r\n+                        setSortBy('proximity');\r\n+                        setSortMenuOpen(false);\r\n+                        loadCategorizedItems();\r\n+                      }}\r\n+                    >\r\n+                      <Navigation size={16} />\r\n+                      <div style={{ display: 'flex', flexDirection: 'column', flex: 1 }}>\r\n+                        <span>Closest First</span>\r\n+                        <span style={{ \r\n+                          fontSize: '0.7rem', \r\n+                          opacity: 0.7,\r\n+                          fontWeight: '400'\r\n+                        }}>\r\n+                          No distance limit\r\n+                        </span>\r\n+                      </div>\r\n+                      {!userLocation && (\r\n+                        <span style={{ \r\n+                          fontSize: '0.65rem', \r\n+                          opacity: 0.6,\r\n+                          marginLeft: 'auto',\r\n+                          fontStyle: 'italic'\r\n+                        }}>\r\n+                          (needs location)\r\n+                        </span>\r\n+                      )}\r\n+                    </SortOption>\r\n+                    \r\n+                    <SortOption \r\n+                      theme={currentStyle}\r\n+                      active={sortBy === 'price-low'}\r\n+                      onClick={() => {\r\n+                        if (!userLocation) {\r\n+                          requestLocation();\r\n+                          return;\r\n+                        }\r\n+                        setSortBy('price-low');\r\n+                        setSortMenuOpen(false);\r\n+                        loadCategorizedItems();\r\n+                      }}\r\n+                    >\r\n+                      <span style={{ fontSize: '1rem', fontWeight: '600' }}>$</span>\r\n+                      <div style={{ display: 'flex', flexDirection: 'column', flex: 1 }}>\r\n+                        <span>Price: Low to High</span>\r\n+                        <span style={{ \r\n+                          fontSize: '0.7rem', \r\n+                          opacity: 0.7,\r\n+                          fontWeight: '400'\r\n+                        }}>\r\n+                          Within 30 miles\r\n+                        </span>\r\n+                      </div>\r\n+                      {!userLocation && (\r\n+                        <span style={{ \r\n+                          fontSize: '0.65rem', \r\n+                          opacity: 0.6,\r\n+                          marginLeft: 'auto',\r\n+                          fontStyle: 'italic'\r\n+                        }}>\r\n+                          (needs location)\r\n+                        </span>\r\n+                      )}\r\n+                    </SortOption>\r\n+                    \r\n+                    <SortOption \r\n+                      theme={currentStyle}\r\n+                      active={sortBy === 'price-high'}\r\n+                      onClick={() => {\r\n+                        if (!userLocation) {\r\n+                          requestLocation();\r\n+                          return;\r\n+                        }\r\n+                        setSortBy('price-high');\r\n+                        setSortMenuOpen(false);\r\n+                        loadCategorizedItems();\r\n+                      }}\r\n+                    >\r\n+                      <span style={{ fontSize: '1rem', fontWeight: '600' }}>$$$</span>\r\n+                      <div style={{ display: 'flex', flexDirection: 'column', flex: 1 }}>\r\n+                        <span>Price: High to Low</span>\r\n+                        <span style={{ \r\n+                          fontSize: '0.7rem', \r\n+                          opacity: 0.7,\r\n+                          fontWeight: '400'\r\n+                        }}>\r\n+                          Within 30 miles\r\n+                        </span>\r\n+                      </div>\r\n+                      {!userLocation && (\r\n+                        <span style={{ \r\n+                          fontSize: '0.65rem', \r\n+                          opacity: 0.6,\r\n+                          marginLeft: 'auto',\r\n+                          fontStyle: 'italic'\r\n+                        }}>\r\n+                          (needs location)\r\n+                        </span>\r\n+                      )}\r\n+                    </SortOption>\r\n+                  </SortDropdown>\r\n+                </SortContainer>\r\n+              </SearchButtonGroup>\r\n+            </SearchContainer>\r\n+\r\n+            {/* Show search results or default categorized view */}\r\n+            {hasSearchResults ? (\r\n+              <div>\r\n+                <CategoryHeader theme={currentStyle}>\r\n+                  <h2>Search Results ({searchResults.length})</h2>\r\n+                </CategoryHeader>\r\n+\r\n+                {error ? (\r\n+                  <EmptyGridMessage>\r\n+                    <h3>No Results Found</h3>\r\n+                    <p>{error}</p>\r\n+                  </EmptyGridMessage>\r\n+                ) : isSearching ? (\r\n+                  <div style={{ textAlign: 'center', padding: '2rem' }}>\r\n+                    <LoadingSpinner />\r\n+                  </div>\r\n+                ) : searchResults.length === 0 ? (\r\n+                  <EmptyGridMessage>\r\n+                    <h3>No Items Found</h3>\r\n+                    <p>No items match your search criteria.</p>\r\n+                  </EmptyGridMessage>\r\n+                ) : (\r\n+                  <GridContainer>\r\n+                    {searchResults.map(item => (\r\n+                      <FeaturedItem \r\n+                        key={`search-${item.shopId}-${item.id}`} \r\n+                        item={item}\r\n+                        theme={currentStyle}\r\n+                        onItemClick={handleItemClick}\r\n+                        showDistance={true}\r\n+                      />\r\n+                    ))}\r\n+                  </GridContainer>\r\n+                )}\r\n+              </div>\r\n+            ) : (\r\n+              <div>\r\n+                {/* Featured Items Slider */}\r\n+                <CategoryHeader theme={currentStyle}>\r\n+                  <h2>Featured Items</h2>\r\n+                  <span className=\"view-all\">\r\n+                    {featuredItems.length} items\r\n+                  </span>\r\n+                </CategoryHeader>\r\n+\r\n+                <CategoryGridWrapper>\r\n+                {/* Desktop: Show all items in grid */}\r\n+                <div className=\"desktop-grid\" style={{ display: 'contents' }}>\r\n+                  {featuredItems.map(item => (\r\n+                    <div key={`featured-${item.shopId}-${item.id}`} className=\"desktop-only\" \r\n+                         style={{ display: window.innerWidth > 768 ? 'block' : 'none' }}>\r\n+                      <FeaturedItem\r\n+                        item={item}\r\n+                        theme={currentStyle}\r\n+                        onItemClick={handleItemClick}\r\n+                        showDistance={true}\r\n+                      />\r\n+                    </div>\r\n+                  ))}\r\n+                </div>\r\n+                \r\n+                {/* Mobile: Show all 10 items in a 2-row scrollable grid */}\r\n+                <CategoryScrollableGrid theme={currentStyle} className=\"mobile-only\">\r\n+                  {featuredItems.map(item => (\r\n+                    <FeaturedItem\r\n+                      key={`featured-mobile-${item.shopId}-${item.id}`}\r\n+                      item={item}\r\n+                      theme={currentStyle}\r\n+                      onItemClick={handleItemClick}\r\n+                      showDistance={true}\r\n+                    />\r\n+                  ))}\r\n+                </CategoryScrollableGrid>\r\n+              </CategoryGridWrapper>\r\n+                \r\n+              {Object.entries(categories).map(([categoryName, items]) => {\r\n+          if (items.length === 0) return null;\r\n+                      \r\n+          return (\r\n+            <div key={categoryName} style={{ marginTop: '3rem' }}>\r\n+              <CategoryHeader theme={currentStyle}>\r\n+                <h2>{categoryName}</h2>\r\n+                <span className=\"view-all\">\r\n+                  {items.length} items\r\n+                </span>\r\n+              </CategoryHeader>\r\n+          \r\n+              <CategoryGridWrapper>\r\n+                {/* Desktop: Show all items in grid */}\r\n+                <div className=\"desktop-grid\" style={{ display: 'contents' }}>\r\n+                  {items.map(item => (\r\n+                    <div key={`${categoryName}-${item.shopId}-${item.id}`} className=\"desktop-only\"\r\n+                         style={{ display: window.innerWidth > 768 ? 'block' : 'none' }}>\r\n+                      <FeaturedItem\r\n+                        item={item}\r\n+                        theme={currentStyle}\r\n+                        onItemClick={handleItemClick}\r\n+                        showDistance={true}\r\n+                      />\r\n+                    </div>\r\n+                  ))}\r\n+                </div>\r\n+                \r\n+                {/* Mobile: Show all items in a scrollable grid (1 or 2 rows based on count) */}\r\n+                <CategoryScrollableGrid theme={currentStyle} className=\"mobile-only\" itemCount={items.length}>\r\n+                  {items.map(item => (\r\n+                    <FeaturedItem\r\n+                      key={`${categoryName}-mobile-${item.shopId}-${item.id}`}\r\n+                      item={item}\r\n+                      theme={currentStyle}\r\n+                      onItemClick={handleItemClick}\r\n+                      showDistance={true}\r\n+                    />\r\n+                  ))}\r\n+                </CategoryScrollableGrid>\r\n+              </CategoryGridWrapper>\r\n+            </div>\r\n+          );\r\n+        })}\r\n+              </div>\r\n+            )}\r\n+          </>\r\n+        )}\r\n+\r\n+        {/* Media Tab */}\r\n+        {activeTab === 'media' && (\r\n+          <EmptyGridMessage>\r\n+            <h3>Featured Media</h3>\r\n+            <p>Coming soon! Discover videos and content from local creators.</p>\r\n+          </EmptyGridMessage>\r\n+        )}\r\n+      </MainContent>\r\n+\r\n+      {/* Style Indicator Only */}\r\n+      <StyleIndicator theme={currentStyle}>\r\n+        <span className=\"style-number\">{currentStyle.id}</span>\r\n+        <span>{currentStyle.name}</span>\r\n+      </StyleIndicator>\r\n+\r\n+      {/* Zoomed Item View - Updated to match ShopPublicView */}\r\n+      {/* Zoomed Item View - 75/25 Split */}\r\n+      {/* Zoomed Item View - 70/30 Split with 2:5 Card */}\r\n+      {zoomedItem && (\r\n+        <ZoomOverlay onClick={handleCloseZoom} theme={currentStyle}>\r\n+          <ZoomContainer \r\n+            theme={currentStyle}\r\n+            onClick={(e) => e.stopPropagation()}\r\n+          >\r\n+            {/* 70% - Image Carousel */}\r\n+            <ImageCarousel \r\n+              theme={currentStyle} \r\n+              currentIndex={currentImageIndex}\r\n+            >\r\n+              {/* Close button */}\r\n+              <button \r\n+                className=\"close-overlay-button\"\r\n+                onClick={handleCloseZoom}\r\n+                aria-label=\"Close\"\r\n+              >\r\n+                <X size={20} />\r\n+              </button>\r\n+            \r\n+              <div className=\"image-track\">\r\n+                {zoomedItem.images && zoomedItem.images.filter(Boolean).length > 0 ? (\r\n+                  zoomedItem.images.filter(Boolean).map((image, index) => (\r\n+                    <div key={index} className=\"image-slide\">\r\n+                      <img src={image} alt={`${zoomedItem.name} ${index + 1}`} />\r\n+                    </div>\r\n+                  ))\r\n+                ) : (\r\n+                  <div className=\"image-slide\">\r\n+                    <div className=\"no-image\">\r\n+                      <Package size={40} />\r\n+                      <p>No image</p>\r\n+                    </div>\r\n+                  </div>\r\n+                )}\r\n+              </div>\r\n+              \r\n+              {/* Navigation */}\r\n+              {zoomedItem.images && zoomedItem.images.filter(Boolean).length > 1 && (\r\n+                <>\r\n+                  <button \r\n+                    className=\"carousel-button prev\"\r\n+                    onClick={() => setCurrentImageIndex(prev => \r\n+                      prev === 0 ? zoomedItem.images.filter(Boolean).length - 1 : prev - 1\r\n+                    )}\r\n+                    aria-label=\"Previous\"\r\n+                  >\r\n+                    <ChevronLeft size={20} />\r\n+                  </button>\r\n+                  <button \r\n+                    className=\"carousel-button next\"\r\n+                    onClick={() => setCurrentImageIndex(prev => \r\n+                      prev === zoomedItem.images.filter(Boolean).length - 1 ? 0 : prev + 1\r\n+                    )}\r\n+                    aria-label=\"Next\"\r\n+                  >\r\n+                    <ChevronRight size={20} />\r\n+                  </button>\r\n+                  \r\n+                  <div className=\"carousel-dots\">\r\n+                    {zoomedItem.images.filter(Boolean).map((_, index) => (\r\n+                      <button\r\n+                        key={index}\r\n+                        className=\"dot\"\r\n+                        style={{ opacity: index === currentImageIndex ? 1 : 0.3 }}\r\n+                        onClick={() => setCurrentImageIndex(index)}\r\n+                        aria-label={`Image ${index + 1}`}\r\n+                      />\r\n+                    ))}\r\n+                  </div>\r\n+                </>\r\n+              )}\r\n+            </ImageCarousel>\r\n+            \r\n+            {/* 30% - Compact Details */}\r\n+            <ZoomContent theme={currentStyle}>\r\n+              {/* Name & Price Row */}\r\n+              <div style={{ \r\n+                display: 'flex', \r\n+                justifyContent: 'space-between', \r\n+                alignItems: 'baseline',\r\n+                gap: '0.75rem'\r\n+              }}>\r\n+                <h3 style={{\r\n+                  fontSize: '1.1rem',\r\n+                  margin: 0,\r\n+                  fontWeight: '600',\r\n+                  color: currentStyle?.colors?.text || '#FFFFFF',\r\n+                  flex: 1,\r\n+                  overflow: 'hidden',\r\n+                  textOverflow: 'ellipsis',\r\n+                  whiteSpace: 'nowrap'\r\n+                }}>\r\n+                  {zoomedItem.name}\r\n+                </h3>\r\n+                \r\n+                <div style={{\r\n+                  fontSize: '1.2rem',\r\n+                  fontWeight: 'bold',\r\n+                  color: currentStyle?.colors?.accent || '#800000',\r\n+                  whiteSpace: 'nowrap'\r\n+                }}>\r\n+                  ${parseFloat(zoomedItem.price || 0).toFixed(2)}\r\n+                </div>\r\n+              </div>\r\n+              \r\n+              {/* Info Row: Distance • Shop • Stock */}\r\n+              <div style={{\r\n+                display: 'flex',\r\n+                alignItems: 'center',\r\n+                gap: '0.75rem',\r\n+                fontSize: '0.75rem',\r\n+                flexWrap: 'wrap',\r\n+                color: currentStyle?.colors?.text || '#FFFFFF',\r\n+                opacity: 0.8\r\n+              }}>\r\n+                {zoomedItem.formattedDistance && (\r\n+                  <>\r\n+                    <div style={{ display: 'flex', alignItems: 'center', gap: '0.25rem' }}>\r\n+                      <Navigation size={11} />\r\n+                      <span>{zoomedItem.formattedDistance}</span>\r\n+                    </div>\r\n+                    <span>•</span>\r\n+                  </>\r\n+                )}\r\n+                \r\n+                {zoomedItem.shopName && (\r\n+                  <>\r\n+                    <div \r\n+                      style={{ \r\n+                        display: 'flex', \r\n+                        alignItems: 'center', \r\n+                        gap: '0.25rem',\r\n+                        cursor: 'pointer',\r\n+                        textDecoration: 'underline'\r\n+                      }}\r\n+                      onClick={(e) => {\r\n+                        e.stopPropagation();\r\n+                        navigate(`/shop/${zoomedItem.shopId}/view`);\r\n+                      }}\r\n+                    >\r\n+                      <Store size={11} />\r\n+                      <span>{zoomedItem.shopName}</span>\r\n+                    </div>\r\n+                    <span>•</span>\r\n+                  </>\r\n+                )}\r\n+                \r\n+                {zoomedItem.quantity !== undefined && (\r\n+                  <div style={{ display: 'flex', alignItems: 'center', gap: '0.25rem' }}>\r\n+                    <div style={{\r\n+                      width: '5px',\r\n+                      height: '5px',\r\n+                      borderRadius: '50%',\r\n+                      background: parseInt(zoomedItem.quantity) > 0 ? '#4CAF50' : '#FF5252'\r\n+                    }} />\r\n+                    <span style={{\r\n+                      color: parseInt(zoomedItem.quantity) > 0 ? '#4CAF50' : '#FF5252',\r\n+                      fontWeight: '500'\r\n+                    }}>\r\n+                      {parseInt(zoomedItem.quantity) > 0 ? \r\n+                        `${zoomedItem.quantity} in stock` : \r\n+                        'Out of stock'\r\n+                      }\r\n+                    </span>\r\n+                  </div>\r\n+                )}\r\n+              </div>\r\n+              \r\n+              {/* Quantity Selector */}\r\n+              <div style={{\r\n+                display: 'flex',\r\n+                alignItems: 'center',\r\n+                justifyContent: 'space-between',\r\n+                background: `${currentStyle?.colors?.surface || 'rgba(255, 255, 255, 0.05)'}20`,\r\n+                borderRadius: '6px',\r\n+                padding: '0.5rem 0.75rem'\r\n+              }}>\r\n+                <span style={{\r\n+                  fontSize: '0.8rem',\r\n+                  fontWeight: '600',\r\n+                  color: currentStyle?.colors?.text || '#FFFFFF'\r\n+                }}>\r\n+                  Qty\r\n+                </span>\r\n+                \r\n+                <div style={{ display: 'flex', alignItems: 'center', gap: '0.75rem' }}>\r\n+                  <button \r\n+                    onClick={() => adjustQuantity(-1)}\r\n+                    disabled={orderQuantity <= 1}\r\n+                    style={{\r\n+                      width: '24px',\r\n+                      height: '24px',\r\n+                      borderRadius: '50%',\r\n+                      border: `1.5px solid ${currentStyle?.colors?.accent || '#800000'}`,\r\n+                      background: 'transparent',\r\n+                      color: currentStyle?.colors?.accent || '#800000',\r\n+                      display: 'flex',\r\n+                      alignItems: 'center',\r\n+                      justifyContent: 'center',\r\n+                      cursor: orderQuantity <= 1 ? 'not-allowed' : 'pointer',\r\n+                      opacity: orderQuantity <= 1 ? 0.3 : 1\r\n+                    }}\r\n+                  >\r\n+                    <Minus size={12} />\r\n+                  </button>\r\n+                  \r\n+                  <div style={{\r\n+                    fontSize: '1rem',\r\n+                    fontWeight: 'bold',\r\n+                    color: currentStyle?.colors?.text || 'white',\r\n+                    minWidth: '24px',\r\n+                    textAlign: 'center'\r\n+                  }}>\r\n+                    {orderQuantity}\r\n+                  </div>\r\n+                \r\n+                  <button \r\n+                    onClick={() => adjustQuantity(1)}\r\n+                    disabled={orderQuantity >= parseInt(zoomedItem.quantity || 1)}\r\n+                    style={{\r\n+                      width: '24px',\r\n+                      height: '24px',\r\n+                      borderRadius: '50%',\r\n+                      border: `1.5px solid ${currentStyle?.colors?.accent || '#800000'}`,\r\n+                      background: 'transparent',\r\n+                      color: currentStyle?.colors?.accent || '#800000',\r\n+                      display: 'flex',\r\n+                      alignItems: 'center',\r\n+                      justifyContent: 'center',\r\n+                      cursor: orderQuantity >= parseInt(zoomedItem.quantity || 1) ? 'not-allowed' : 'pointer',\r\n+                      opacity: orderQuantity >= parseInt(zoomedItem.quantity || 1) ? 0.3 : 1\r\n+                    }}\r\n+                  >\r\n+                    <Plus size={12} />\r\n+                  </button>\r\n+                </div>\r\n+              </div>\r\n+                  \r\n+              {/* Order Button */}\r\n+              <button \r\n+                onClick={handleDirectOrder}\r\n+                disabled={parseInt(zoomedItem.quantity || 0) < 1 || orderQuantity > parseInt(zoomedItem.quantity || 0)}\r\n+                style={{\r\n+                  width: '100%',\r\n+                  padding: '0.75rem',\r\n+                  borderRadius: '8px',\r\n+                  border: 'none',\r\n+                  background: parseInt(zoomedItem.quantity || 0) < 1 ? \r\n+                    `${currentStyle?.colors?.accent || '#800000'}40` : \r\n+                    currentStyle?.colors?.accent || '#800000',\r\n+                  color: 'white',\r\n+                  fontSize: '0.9rem',\r\n+                  fontWeight: '600',\r\n+                  display: 'flex',\r\n+                  alignItems: 'center',\r\n+                  justifyContent: 'center',\r\n+                  gap: '0.5rem',\r\n+                  cursor: parseInt(zoomedItem.quantity || 0) < 1 ? 'not-allowed' : 'pointer',\r\n+                  transition: 'all 0.3s'\r\n+                }}\r\n+              >\r\n+                {parseInt(zoomedItem.quantity || 0) < 1 ? (\r\n+                  <>\r\n+                    <X size={16} />\r\n+                    Out of Stock\r\n+                  </>\r\n+                ) : (\r\n+                  <>\r\n+                    <ShoppingCart size={16} />\r\n+                    Order {orderQuantity > 1 && `${orderQuantity} `}· ${(parseFloat(zoomedItem.price || 0) * orderQuantity).toFixed(2)}\r\n+                  </>\r\n+                )}\r\n+              </button>\r\n+            </ZoomContent>\r\n+          </ZoomContainer>\r\n+        </ZoomOverlay>\r\n+      )}\r\n+\r\n+      {/* Chat Overlay */}\r\n+      <ChatOverlay isOpen={chatOpen} onClick={handleCloseChat} />\r\n+      \r\n+      {selectedChatItem && (\r\n+        <OrderChat \r\n+          isOpen={chatOpen} \r\n+          onClose={handleCloseChat} \r\n+          item={selectedChatItem}\r\n+          shopId={selectedChatItem.shopId}\r\n+          shopName={selectedChatItem.shopName}\r\n+          theme={currentStyle}\r\n+        />\r\n+      )}\r\n+    </PageContainer>\r\n+  );\r\n+};\r\n+\r\n+export default WelcomePage;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1759889919336,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,3687 @@\n+// src/pages/WelcomePage.js - Mobile-Optimized Version\r\n+import React from 'react';\r\n+import styled from 'styled-components';\r\n+import { useNavigate } from 'react-router-dom';\r\n+import { useEffect, useState, useRef } from 'react';\r\n+import { getFeaturedItems } from '../firebase/firebaseService';\r\n+import FeaturedItem from '../components/shop/FeaturedItem';\r\n+import { Search, Package, Navigation, Film, Filter, Store, Plus, Minus, Pin, ChevronLeft, ChevronRight, X, MessageCircle, ShoppingCart, RefreshCw, LogOut } from 'lucide-react';\r\n+import { getDistance } from 'geolib';\r\n+import OrderChat from '../components/Chat/OrderChat';\r\n+import { collection, getDocs } from 'firebase/firestore';\r\n+import { db, auth } from '../firebase/config';\r\n+import { WELCOME_STYLES } from '../theme/welcomeStyles';\r\n+import { getShopData } from '../firebase/firebaseService';\r\n+import { useAuth } from '../contexts/AuthContext';\r\n+import { useLocation } from '../contexts/LocationContext';\r\n+import LocationDialog from '../components/LocationDialog';\r\n+import ThemeDecorations from '../components/ThemeDecorations';\r\n+import { TransactionService } from '../services/TransactionService';\r\n+import { signOut } from 'firebase/auth';\r\n+\r\n+const getIPBasedLocation = async () => {\r\n+  try {\r\n+    console.log('🌐 Fetching IP-based location from ipapi.co...');\r\n+    const response = await fetch('https://ipapi.co/json/');\r\n+    \r\n+    if (!response.ok) {\r\n+      throw new Error(`HTTP error! status: ${response.status}`);\r\n+    }\r\n+    \r\n+    const data = await response.json();\r\n+    console.log('✅ IP Location data:', data);\r\n+    \r\n+    if (!data.latitude || !data.longitude) {\r\n+      throw new Error('Invalid location data received');\r\n+    }\r\n+    \r\n+    return {\r\n+      latitude: data.latitude,\r\n+      longitude: data.longitude,\r\n+      city: data.city,\r\n+      region: data.region,\r\n+      country: data.country_name,\r\n+      isIPBased: true\r\n+    };\r\n+  } catch (error) {\r\n+    console.error('❌ Error getting IP location:', error);\r\n+    \r\n+    // Fallback to a default location (Houston, TX)\r\n+    console.log('⚠️ Using fallback location: Houston, TX');\r\n+    return {\r\n+      latitude: 29.7604,\r\n+      longitude: -95.3698,\r\n+      city: 'Houston',\r\n+      region: 'Texas',\r\n+      country: 'United States',\r\n+      isIPBased: true,\r\n+      isFallback: true\r\n+    };\r\n+  }\r\n+};\r\n+\r\n+// Mobile-first styled components\r\n+const PageContainer = styled.div.attrs({ className: 'page-container' })`\r\n+  min-height: 100vh;\r\n+  background: ${props => props.theme?.colors?.background || '#000000'};\r\n+  color: ${props => props.theme?.colors?.text || '#FFFFFF'};\r\n+  position: relative;\r\n+  overflow: hidden;\r\n+  \r\n+  /* Mobile-optimized background effects */\r\n+  &::before {\r\n+    content: '';\r\n+    position: absolute;\r\n+    width: 100%;\r\n+    height: 100%;\r\n+    background: ${props => props.theme?.colors?.backgroundGradient || 'radial-gradient(circle at 20% 30%, rgba(128, 0, 0, 0.2) 0%, transparent 50%)'};\r\n+    opacity: 0.8;\r\n+    animation: ${props => props.theme?.animations?.backgroundAnimation || 'galaxySwirl 30s linear infinite'};\r\n+  }\r\n+\r\n+  /* Simplified stars for mobile performance */\r\n+  &::after {\r\n+    content: '';\r\n+    position: absolute;\r\n+    width: 100%;\r\n+    height: 100%;\r\n+    background-image: radial-gradient(circle 1px, ${props => props.theme?.colors?.text || '#FFF'} 1px, transparent 1px);\r\n+    background-size: 100px 100px;\r\n+    opacity: 0.05;\r\n+    \r\n+    @media (min-width: 768px) {\r\n+      background-size: 200px 200px;\r\n+      opacity: 0.1;\r\n+    }\r\n+  }\r\n+\r\n+  /* Reduced ping animations on mobile for performance */\r\n+  .ping {\r\n+    display: none;\r\n+    \r\n+    @media (min-width: 768px) {\r\n+      display: block;\r\n+      position: absolute;\r\n+      width: 2px;\r\n+      height: 2px;\r\n+      border-radius: 50%;\r\n+      background: ${props => props.theme?.colors?.accent || '#800000'};\r\n+      pointer-events: none;\r\n+      z-index: 0;\r\n+    }\r\n+  }\r\n+\r\n+  @keyframes galaxySwirl {\r\n+    0% { transform: rotate(0deg); }\r\n+    100% { transform: rotate(360deg); }\r\n+  }\r\n+`;\r\n+\r\n+// Simplified header with just logo and right-side controls\r\n+const Header = styled.header`\r\n+  width: 100%;\r\n+  height: 60px;\r\n+  padding: 0 1rem;\r\n+  display: flex;\r\n+  align-items: center;\r\n+  justify-content: space-between;\r\n+  background: ${props => `${props.theme?.colors?.headerBg || 'rgba(0, 0, 0, 0.9)'}F5`};\r\n+  backdrop-filter: blur(10px);\r\n+  border-bottom: 1px solid ${props => `${props.theme?.colors?.accent}4D` || 'rgba(128, 0, 0, 0.3)'};\r\n+  position: fixed;\r\n+  top: 0;\r\n+  z-index: 100;\r\n+\r\n+  @media (min-width: 768px) {\r\n+    height: 80px;\r\n+    padding: 0 2rem;\r\n+  }\r\n+`;\r\n+\r\n+const Logo = styled.div`\r\n+  color: ${props => props.theme?.colors?.accent || '#800000'};\r\n+  font-family: ${props => props.theme?.fonts?.heading || \"'Impact', sans-serif\"};\r\n+  font-size: 1.4rem;\r\n+  letter-spacing: 1px;\r\n+  transform: skew(-5deg);\r\n+  cursor: pointer;\r\n+  flex-shrink: 0;\r\n+\r\n+  @media (min-width: 768px) {\r\n+    font-size: 2rem;\r\n+    letter-spacing: 2px;\r\n+  }\r\n+`;\r\n+\r\n+const LocationIndicator2 = styled.div`\r\n+  display: flex;\r\n+  align-items: center;\r\n+  justify-content: center;\r\n+  gap: 0.75rem;\r\n+  background: ${props => `${props.theme?.colors?.surface || 'rgba(0, 0, 0, 0.4)'}CC`};\r\n+  backdrop-filter: blur(10px);\r\n+  padding: 0.75rem 1.5rem;\r\n+  border-radius: 25px;\r\n+  border: 1px solid ${props => `${props.theme?.colors?.accent}40` || 'rgba(128, 0, 0, 0.4)'};\r\n+  margin: 1.5rem auto;\r\n+  max-width: 500px;\r\n+  width: 90%;\r\n+  transition: all 0.3s ease;\r\n+  position: relative;\r\n+  \r\n+  @media (max-width: 768px) {\r\n+    width: 95%;\r\n+    padding: 0.6rem 1rem;\r\n+    gap: 0.5rem;\r\n+  }\r\n+  \r\n+  .location-icon-btn {\r\n+    background: transparent;\r\n+    border: none;\r\n+    color: ${props => props.theme?.colors?.accent || '#800000'};\r\n+    cursor: pointer;\r\n+    display: flex;\r\n+    align-items: center;\r\n+    justify-content: center;\r\n+    padding: 0.25rem;\r\n+    border-radius: 50%;\r\n+    transition: all 0.2s ease;\r\n+    flex-shrink: 0;\r\n+    \r\n+    &:hover {\r\n+      background: ${props => `${props.theme?.colors?.accent}20` || 'rgba(128, 0, 0, 0.2)'};\r\n+    }\r\n+    \r\n+    &:active {\r\n+      transform: scale(0.9);\r\n+    }\r\n+    \r\n+    &:disabled {\r\n+      opacity: 0.5;\r\n+      cursor: not-allowed;\r\n+    }\r\n+    \r\n+    svg {\r\n+      width: 20px;\r\n+      height: 20px;\r\n+      \r\n+      @media (max-width: 768px) {\r\n+        width: 18px;\r\n+        height: 18px;\r\n+      }\r\n+    }\r\n+  }\r\n+  \r\n+  .location-input {\r\n+    flex: 1;\r\n+    background: transparent;\r\n+    border: none;\r\n+    color: ${props => props.theme?.colors?.text || '#FFFFFF'};\r\n+    font-size: 0.95rem;\r\n+    outline: none;\r\n+    text-align: center;\r\n+    cursor: default;\r\n+    min-width: 0; /* Allow text to shrink */\r\n+    \r\n+    &::placeholder {\r\n+      color: ${props => `${props.theme?.colors?.text}50` || 'rgba(255, 255, 255, 0.5)'};\r\n+      font-style: italic;\r\n+    }\r\n+    \r\n+    @media (max-width: 768px) {\r\n+      font-size: 0.85rem;\r\n+    }\r\n+  }\r\n+  \r\n+  .updating-spinner {\r\n+    width: 16px;\r\n+    height: 16px;\r\n+    border: 2px solid ${props => `${props.theme?.colors?.accent}30` || 'rgba(128, 0, 0, 0.3)'};\r\n+    border-radius: 50%;\r\n+    border-top-color: ${props => props.theme?.colors?.accent || '#800000'};\r\n+    animation: spin 1s linear infinite;\r\n+  }\r\n+  \r\n+  .pin-icon-btn {\r\n+    background: transparent;\r\n+    border: none;\r\n+    color: ${props => props.theme?.colors?.accent || '#800000'};\r\n+    cursor: pointer;\r\n+    display: flex;\r\n+    align-items: center;\r\n+    justify-content: center;\r\n+    padding: 0.25rem;\r\n+    border-radius: 50%;\r\n+    transition: all 0.2s ease;\r\n+    opacity: ${props => props.isPinned ? 1 : 0.5};\r\n+    flex-shrink: 0;\r\n+    \r\n+    &:hover:not(:disabled) {\r\n+      background: ${props => `${props.theme?.colors?.accent}20` || 'rgba(128, 0, 0, 0.2)'};\r\n+      opacity: 1;\r\n+    }\r\n+    \r\n+    &:active:not(:disabled) {\r\n+      transform: scale(0.9);\r\n+    }\r\n+    \r\n+    &:disabled {\r\n+      opacity: 0.3;\r\n+      cursor: not-allowed;\r\n+    }\r\n+    \r\n+    svg {\r\n+      width: 18px;\r\n+      height: 18px;\r\n+      \r\n+      @media (max-width: 768px) {\r\n+        width: 16px;\r\n+        height: 16px;\r\n+      }\r\n+    }\r\n+  }\r\n+  \r\n+  @keyframes spin {\r\n+    to {\r\n+      transform: rotate(360deg);\r\n+    }\r\n+  }\r\n+`;\r\n+\r\n+const HeaderControls = styled.div`\r\n+  display: flex;\r\n+  align-items: center;\r\n+  gap: 0.75rem;\r\n+`;\r\n+\r\n+const HeaderButton = styled.button`\r\n+  background: transparent;\r\n+  border: none;\r\n+  color: ${props => props.theme?.colors?.accent || '#800000'};\r\n+  padding: 0.5rem;\r\n+  cursor: pointer;\r\n+  display: flex;\r\n+  align-items: center;\r\n+  justify-content: center;\r\n+  border-radius: 50%;\r\n+  transition: all 0.3s ease;\r\n+  opacity: 0.8;\r\n+  \r\n+  &:active {\r\n+    transform: scale(0.9);\r\n+    opacity: 1;\r\n+  }\r\n+  \r\n+  @media (hover: hover) {\r\n+    &:hover {\r\n+      opacity: 1;\r\n+      background: ${props => `${props.theme?.colors?.accent}10` || 'rgba(128, 0, 0, 0.1)'};\r\n+    }\r\n+  }\r\n+  \r\n+  &.pinned {\r\n+    color: ${props => props.theme?.colors?.accent || '#800000'};\r\n+    opacity: 1;\r\n+  }\r\n+  \r\n+  svg {\r\n+    width: 20px;\r\n+    height: 20px;\r\n+    \r\n+    @media (min-width: 768px) {\r\n+      width: 22px;\r\n+      height: 22px;\r\n+    }\r\n+  }\r\n+`;\r\n+\r\n+// Improved mobile main content with better spacing\r\n+const MainContent = styled.main`\r\n+  max-width: 1200px;\r\n+  margin: 0 auto;\r\n+  padding: 80px 1rem 100px 1rem;\r\n+  position: relative;\r\n+  z-index: 1;\r\n+  \r\n+  @media (min-width: 768px) {\r\n+    padding: 6rem 2rem 2rem 2rem;\r\n+  }\r\n+`;\r\n+\r\n+// Mobile-optimized welcome section\r\n+const WelcomeSection = styled.section`\r\n+  text-align: center;\r\n+  margin: 2rem 0;\r\n+  position: relative;\r\n+\r\n+  h1 {\r\n+    font-family: ${props => props.theme?.fonts?.heading || \"'Impact', sans-serif\"};\r\n+    font-size: 2.5rem;\r\n+    margin-bottom: 1rem;\r\n+    background: ${props => props.theme?.colors?.accentGradient || 'linear-gradient(45deg, #800000, #4A0404)'};\r\n+    -webkit-background-clip: text;\r\n+    -webkit-text-fill-color: transparent;\r\n+    letter-spacing: 1px;\r\n+    line-height: 1.2;\r\n+    \r\n+    @media (min-width: 768px) {\r\n+      font-size: 4.5rem;\r\n+      letter-spacing: 2px;\r\n+    }\r\n+  }\r\n+\r\n+  p {\r\n+    font-size: 1rem;\r\n+    line-height: 1.5;\r\n+    max-width: 600px;\r\n+    margin: 0 auto;\r\n+    color: ${props => `${props.theme?.colors?.text}CC` || 'rgba(255, 255, 255, 0.8)'};\r\n+    padding: 0 1rem;\r\n+    \r\n+    @media (min-width: 768px) {\r\n+      font-size: 1.2rem;\r\n+      line-height: 1.6;\r\n+      max-width: 800px;\r\n+    }\r\n+  }\r\n+`;\r\n+\r\n+// Completely redesigned ZoomOverlay - Responsive to zoom level\r\n+const ZoomOverlay = styled.div`\r\n+  position: fixed;\r\n+  top: 0;\r\n+  left: 0;\r\n+  right: 0;\r\n+  bottom: 0;\r\n+  background: ${props => `${props.theme?.colors?.background || 'rgba(0, 0, 0, 0.95)'}F5`};\r\n+  z-index: 10000;\r\n+  backdrop-filter: blur(10px);\r\n+  display: flex;\r\n+  align-items: center;\r\n+  justify-content: center;\r\n+  padding: 2rem;\r\n+  overflow: hidden;\r\n+  \r\n+  @media (max-width: 768px) {\r\n+    padding: 1rem;\r\n+  }\r\n+  \r\n+  @media (max-width: 480px) {\r\n+    padding: 0.5rem;\r\n+  }\r\n+`;\r\n+\r\n+// Redesigned ZoomContainer - 2:5 aspect ratio card, centered with ample space\r\n+const ZoomContainer = styled.div`\r\n+  position: relative;\r\n+  width: 100%;\r\n+  max-width: 500px;\r\n+  aspect-ratio: 2 / 5;\r\n+  max-height: 85vh;\r\n+  background: ${props => props.theme?.colors?.background || '#000000'};\r\n+  border-radius: 16px;\r\n+  overflow: hidden;\r\n+  border: 2px solid ${props => props.theme?.colors?.accent || '#800000'};\r\n+  box-shadow: 0 20px 60px rgba(0, 0, 0, 0.8);\r\n+  display: flex;\r\n+  flex-direction: column;\r\n+  \r\n+  @media (max-width: 768px) {\r\n+    max-width: 420px;\r\n+    border-radius: 12px;\r\n+  }\r\n+  \r\n+  @media (max-width: 480px) {\r\n+    max-width: 95%;\r\n+    border-radius: 10px;\r\n+  }\r\n+`;\r\n+\r\n+// Image section - 70% of card height\r\n+const ImageCarousel = styled.div`\r\n+  position: relative;\r\n+  width: 100%;\r\n+  height: 70%;\r\n+  background: ${props => `${props.theme?.colors?.background || '#000000'}80`};\r\n+  overflow: hidden;\r\n+  flex-shrink: 0;\r\n+  \r\n+  .image-track {\r\n+    display: flex;\r\n+    height: 100%;\r\n+    transition: transform 0.3s ease;\r\n+    transform: translateX(${props => props.currentIndex * -100}%);\r\n+  }\r\n+  \r\n+  .image-slide {\r\n+    min-width: 100%;\r\n+    height: 100%;\r\n+    display: flex;\r\n+    align-items: center;\r\n+    justify-content: center;\r\n+    \r\n+    img {\r\n+      width: 100%;\r\n+      height: 100%;\r\n+      object-fit: cover;\r\n+      background: ${props => `${props.theme?.colors?.background || '#000000'}40`};\r\n+    }\r\n+    \r\n+    .no-image {\r\n+      display: flex;\r\n+      flex-direction: column;\r\n+      align-items: center;\r\n+      gap: 0.75rem;\r\n+      color: ${props => props.theme?.colors?.text || '#FFFFFF'};\r\n+      opacity: 0.3;\r\n+      \r\n+      p {\r\n+        margin: 0;\r\n+        font-size: 0.85rem;\r\n+      }\r\n+    }\r\n+  }\r\n+  \r\n+  .carousel-dots {\r\n+    position: absolute;\r\n+    bottom: 1rem;\r\n+    left: 50%;\r\n+    transform: translateX(-50%);\r\n+    display: flex;\r\n+    gap: 0.4rem;\r\n+    z-index: 2;\r\n+    padding: 0.4rem 0.75rem;\r\n+    background: ${props => `${props.theme?.colors?.background || 'rgba(0, 0, 0, 0.6)'}CC`};\r\n+    border-radius: 20px;\r\n+    backdrop-filter: blur(8px);\r\n+  }\r\n+  \r\n+  .dot {\r\n+    width: 6px;\r\n+    height: 6px;\r\n+    border-radius: 50%;\r\n+    background: ${props => props.theme?.colors?.text || '#FFFFFF'};\r\n+    border: none;\r\n+    padding: 0;\r\n+    cursor: pointer;\r\n+    transition: all 0.2s ease;\r\n+    \r\n+    &:hover {\r\n+      transform: scale(1.2);\r\n+    }\r\n+  }\r\n+  \r\n+  .carousel-button {\r\n+    position: absolute;\r\n+    top: 50%;\r\n+    transform: translateY(-50%);\r\n+    background: ${props => `${props.theme?.colors?.background || 'rgba(0, 0, 0, 0.7)'}DD`};\r\n+    border: 1px solid ${props => `${props.theme?.colors?.accent}40` || 'rgba(255, 255, 255, 0.2)'};\r\n+    border-radius: 50%;\r\n+    width: 40px;\r\n+    height: 40px;\r\n+    display: flex;\r\n+    align-items: center;\r\n+    justify-content: center;\r\n+    color: ${props => props.theme?.colors?.text || 'white'};\r\n+    cursor: pointer;\r\n+    opacity: 0;\r\n+    transition: all 0.3s ease;\r\n+    z-index: 2;\r\n+    \r\n+    &:hover {\r\n+      opacity: 1 !important;\r\n+      background: ${props => props.theme?.colors?.accent || '#800000'};\r\n+      transform: translateY(-50%) scale(1.1);\r\n+    }\r\n+    \r\n+    &.prev {\r\n+      left: 1rem;\r\n+    }\r\n+    \r\n+    &.next {\r\n+      right: 1rem;\r\n+    }\r\n+    \r\n+    &:disabled {\r\n+      opacity: 0 !important;\r\n+      cursor: not-allowed;\r\n+    }\r\n+    \r\n+    @media (max-width: 480px) {\r\n+      width: 32px;\r\n+      height: 32px;\r\n+      \r\n+      &.prev {\r\n+        left: 0.5rem;\r\n+      }\r\n+      \r\n+      &.next {\r\n+        right: 0.5rem;\r\n+      }\r\n+      \r\n+      svg {\r\n+        width: 16px;\r\n+        height: 16px;\r\n+      }\r\n+    }\r\n+  }\r\n+  \r\n+  &:hover .carousel-button {\r\n+    opacity: 0.7;\r\n+  }\r\n+  \r\n+  .close-overlay-button {\r\n+    position: absolute;\r\n+    top: 1rem;\r\n+    right: 1rem;\r\n+    background: ${props => `${props.theme?.colors?.background || 'rgba(0, 0, 0, 0.8)'}DD`};\r\n+    border: 1px solid ${props => `${props.theme?.colors?.accent}60` || 'rgba(255, 255, 255, 0.3)'};\r\n+    border-radius: 50%;\r\n+    width: 40px;\r\n+    height: 40px;\r\n+    display: flex;\r\n+    align-items: center;\r\n+    justify-content: center;\r\n+    color: white;\r\n+    cursor: pointer;\r\n+    transition: all 0.2s ease;\r\n+    backdrop-filter: blur(8px);\r\n+    z-index: 3;\r\n+    opacity: 0.8;\r\n+    \r\n+    &:hover {\r\n+      opacity: 1;\r\n+      background: ${props => props.theme?.colors?.accent || '#800000'};\r\n+      border-color: ${props => props.theme?.colors?.accent || '#800000'};\r\n+      transform: scale(1.1);\r\n+    }\r\n+    \r\n+    &:active {\r\n+      transform: scale(0.95);\r\n+    }\r\n+    \r\n+    @media (max-width: 480px) {\r\n+      width: 32px;\r\n+      height: 32px;\r\n+      top: 0.75rem;\r\n+      right: 0.75rem;\r\n+      \r\n+      svg {\r\n+        width: 16px;\r\n+        height: 16px;\r\n+      }\r\n+    }\r\n+  }\r\n+`;\r\n+\r\n+// Details section - 30% of card height\r\n+const ZoomContent = styled.div`\r\n+  height: 30%;\r\n+  overflow-y: auto;\r\n+  overflow-x: hidden;\r\n+  padding: 1rem;\r\n+  -webkit-overflow-scrolling: touch;\r\n+  display: flex;\r\n+  flex-direction: column;\r\n+  gap: 0.75rem;\r\n+  background: ${props => props.theme?.colors?.background || '#000000'};\r\n+  \r\n+  /* Custom scrollbar */\r\n+  &::-webkit-scrollbar {\r\n+    width: 4px;\r\n+  }\r\n+  \r\n+  &::-webkit-scrollbar-track {\r\n+    background: transparent;\r\n+  }\r\n+  \r\n+  &::-webkit-scrollbar-thumb {\r\n+    background: ${props => `${props.theme?.colors?.accent || '#800000'}60`};\r\n+    border-radius: 2px;\r\n+    \r\n+    &:hover {\r\n+      background: ${props => props.theme?.colors?.accent || '#800000'};\r\n+    }\r\n+  }\r\n+  \r\n+  @media (max-width: 480px) {\r\n+    padding: 0.875rem;\r\n+    gap: 0.625rem;\r\n+  }\r\n+`;\r\n+\r\n+\r\n+// Update ZoomHeader - Remove it entirely or hide it\r\n+const ZoomHeader = styled.div`\r\n+  display: none; // Hide the header completely\r\n+`;\r\n+\r\n+// Mobile-optimized profile section\r\n+const ProfileSection = styled.div`\r\n+  display: flex;\r\n+  flex-direction: column;\r\n+  align-items: center;\r\n+  margin-bottom: 1.5rem;\r\n+`;\r\n+\r\n+const ProfileImage = styled.div`\r\n+  width: 120px;\r\n+  height: 120px;\r\n+  border-radius: 50%;\r\n+  overflow: hidden;\r\n+  margin-bottom: 1rem;\r\n+  border: 4px solid ${props => props.theme?.colors?.accent || '#800000'};\r\n+  box-shadow: 0 0 20px ${props => `${props.theme?.colors?.accent}40` || 'rgba(128, 0, 0, 0.25)'};\r\n+  \r\n+  @media (min-width: 768px) {\r\n+    width: 200px;\r\n+    height: 189px;\r\n+    border: 6px solid ${props => props.theme?.colors?.accent || '#800000'};\r\n+  }\r\n+  \r\n+  img {\r\n+    width: 100%;\r\n+    height: 100%;\r\n+    object-fit: cover;\r\n+  }\r\n+`;\r\n+\r\n+// Add to styled components section in WelcomePage.js\r\n+const LocationIndicator = styled.div`\r\n+  position: fixed;\r\n+  top: 90px;\r\n+  left: 2rem;\r\n+  display: flex;\r\n+  align-items: center;\r\n+  background: rgba(0, 0, 0, 0.7);\r\n+  padding: 0.5rem 1rem;\r\n+  border-radius: 20px;\r\n+  border: 1px solid ${props => `${props.theme?.colors?.accent}30` || 'rgba(128, 0, 0, 0.3)'};\r\n+  backdrop-filter: blur(4px);\r\n+  color: ${props => props.theme?.colors?.text || '#FFFFFF'};\r\n+  font-size: 0.9rem;\r\n+  z-index: 10;\r\n+  cursor: pointer;\r\n+  transition: all 0.3s ease;\r\n+  max-width: 300px;\r\n+  \r\n+  /* Hide on mobile, show only on desktop for debugging */\r\n+  @media (max-width: 768px) {\r\n+  width: auto;\r\n+    padding: 1rem 2.5rem;\r\n+    font-size: 1rem;\r\n+  } \r\n+  \r\n+  &:hover {\r\n+    background: rgba(0, 0, 0, 0.8);\r\n+    transform: translateY(-2px);\r\n+  }\r\n+  \r\n+  .location-icon {\r\n+    color: ${props => props.theme?.colors?.accent || '#800000'};\r\n+    margin-right: 0.75rem;\r\n+  }\r\n+  \r\n+  .location-text {\r\n+    white-space: nowrap;\r\n+    overflow: hidden;\r\n+    text-overflow: ellipsis;\r\n+  }\r\n+  \r\n+  .updating {\r\n+    margin-left: 0.5rem;\r\n+    width: 16px;\r\n+    height: 16px;\r\n+    border: 2px solid rgba(128, 0, 0, 0.2);\r\n+    border-radius: 50%;\r\n+    border-top-color: ${props => props.theme?.colors?.accent || '#800000'};\r\n+    animation: spin 1s linear infinite;\r\n+  }\r\n+`;\r\n+\r\n+const ShopName = styled.h2`\r\n+  font-family: ${props => props.theme?.fonts?.heading || \"'Impact', sans-serif\"};\r\n+  font-size: 2.5rem;\r\n+  background: ${props => props.theme?.colors?.accentGradient || 'linear-gradient(45deg, #800000, #4A0404)'};\r\n+  -webkit-background-clip: text;\r\n+  -webkit-text-fill-color: transparent;\r\n+  margin: 0 0 0.5rem 0;\r\n+  line-height: 1.2;\r\n+  \r\n+  @media (min-width: 768px) {\r\n+    font-size: 5.4rem;\r\n+    margin: 0 0 1rem 0;\r\n+  }\r\n+`;\r\n+\r\n+// Mobile-friendly action buttons\r\n+const ActionButtonContainer = styled.div`\r\n+  display: flex;\r\n+  flex-direction: column;\r\n+  gap: 1rem;\r\n+  width: 100%;\r\n+  max-width: 300px;\r\n+  margin: 2rem auto;\r\n+  \r\n+  @media (min-width: 480px) {\r\n+    flex-direction: row;\r\n+    justify-content: center;\r\n+    max-width: none;\r\n+  }\r\n+`;\r\n+\r\n+const ActionButton = styled.button`\r\n+  background: ${props => props.variant === 'outline' ? 'transparent' : \r\n+    props.theme?.colors?.accentGradient || 'linear-gradient(45deg, #800000, #4A0404)'};\r\n+  border: ${props => props.variant === 'outline' ? \r\n+    `2px solid ${props.theme?.colors?.accent || '#800000'}` : 'none'};\r\n+  padding: 1rem 1.5rem;\r\n+  border-radius: 30px;\r\n+  color: ${props => props.variant === 'outline' ? \r\n+    props.theme?.colors?.accent || '#800000' : 'white'};\r\n+  font-weight: bold;\r\n+  cursor: pointer;\r\n+  transition: all 0.3s;\r\n+  text-transform: uppercase;\r\n+  letter-spacing: 1px;\r\n+  font-size: 0.9rem;\r\n+  width: 100%;\r\n+  \r\n+  @media (min-width: 480px) {\r\n+    width: auto;\r\n+    padding: 1rem 2.5rem;\r\n+    font-size: 1rem;\r\n+  }\r\n+\r\n+  &:active {\r\n+    transform: scale(0.98);\r\n+  }\r\n+\r\n+  @media (hover: hover) {\r\n+    &:hover {\r\n+      transform: translateY(-2px);\r\n+      box-shadow: 0 5px 15px ${props => `${props.theme?.colors?.accent}4D` || 'rgba(128, 0, 0, 0.3)'};\r\n+    }\r\n+  }\r\n+`;\r\n+\r\n+// Mobile-optimized tab container with horizontal scroll\r\n+const TabContainer = styled.div`\r\n+  display: flex;\r\n+  gap: 0.5rem;\r\n+  margin: 2rem 0;\r\n+  overflow-x: auto;\r\n+  padding: 0.5rem 0;\r\n+  -webkit-overflow-scrolling: touch;\r\n+  \r\n+  &::-webkit-scrollbar {\r\n+    height: 4px;\r\n+  }\r\n+  \r\n+  &::-webkit-scrollbar-track {\r\n+    background: transparent;\r\n+  }\r\n+  \r\n+  &::-webkit-scrollbar-thumb {\r\n+    background: ${props => props.theme?.colors?.accent || '#800000'};\r\n+    border-radius: 2px;\r\n+  }\r\n+  \r\n+  @media (min-width: 768px) {\r\n+    justify-content: center;\r\n+    gap: 1rem;\r\n+    overflow-x: visible;\r\n+  }\r\n+`;\r\n+\r\n+const Tab = styled.button`\r\n+  background: ${props => props.active ? \r\n+    props.theme?.colors?.tabActiveBg || 'rgba(128, 0, 0, 0.2)' : 'transparent'};\r\n+  border: 1px solid ${props => props.active ? \r\n+    props.theme?.colors?.tabBorder || '#800000' : \r\n+    `${props.theme?.colors?.accent}4D` || 'rgba(128, 0, 0, 0.3)'};\r\n+  color: ${props => props.active ? \r\n+    props.theme?.colors?.text || '#FFFFFF' : \r\n+    `${props.theme?.colors?.text}99` || 'rgba(255, 255, 255, 0.6)'};\r\n+  padding: 0.6rem 1rem;\r\n+  border-radius: 20px;\r\n+  cursor: pointer;\r\n+  transition: all 0.3s;\r\n+  text-transform: uppercase;\r\n+  letter-spacing: 0.5px;\r\n+  font-weight: 500;\r\n+  font-size: 0.8rem;\r\n+  white-space: nowrap;\r\n+  display: flex;\r\n+  align-items: center;\r\n+  gap: 0.3rem;\r\n+  flex-shrink: 0;\r\n+  \r\n+  @media (min-width: 768px) {\r\n+    padding: 0.8rem 1.5rem;\r\n+    font-size: 0.9rem;\r\n+    letter-spacing: 1px;\r\n+    gap: 0.5rem;\r\n+  }\r\n+\r\n+  &:active {\r\n+    transform: scale(0.98);\r\n+  }\r\n+\r\n+  svg {\r\n+    width: 14px;\r\n+    height: 14px;\r\n+    \r\n+    @media (min-width: 768px) {\r\n+      width: 16px;\r\n+      height: 16px;\r\n+    }\r\n+  }\r\n+`;\r\n+\r\n+// Mobile-optimized grid with better touch targets\r\n+const GridContainer = styled.div`\r\n+  display: grid;\r\n+  grid-template-columns: repeat(2, 1fr);\r\n+  gap: 0.75rem;\r\n+  margin-top: 1.5rem;\r\n+  padding: 0 0.25rem;\r\n+  \r\n+  @media (min-width: 480px) {\r\n+    gap: 1rem;\r\n+    padding: 0;\r\n+  }\r\n+  \r\n+  @media (min-width: 768px) {\r\n+    grid-template-columns: repeat(auto-fill, minmax(220px, 1fr));\r\n+    gap: 1.5rem;\r\n+  }\r\n+  \r\n+  @media (min-width: 1024px) {\r\n+    grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));\r\n+    gap: 2rem;\r\n+  }\r\n+`;\r\n+\r\n+// Mobile search with better UX\r\n+const SearchContainer = styled.div`\r\n+  display: flex;\r\n+  flex-direction: column;\r\n+  gap: 0.75rem;\r\n+  width: 100%;\r\n+  padding: 0 0.5rem;\r\n+  \r\n+  @media (min-width: 600px) {\r\n+    flex-direction: row;\r\n+    align-items: center;\r\n+    max-width: 800px;\r\n+    margin: 0 auto;\r\n+    padding: 0;\r\n+  }\r\n+`;\r\n+\r\n+const SearchInput = styled.input`\r\n+  width: 100%;\r\n+  background: rgba(255, 255, 255, 0.05);\r\n+  border: 1px solid rgba(128, 0, 0, 0.2);\r\n+  border-radius: 25px;\r\n+  padding: 0.8rem 1rem;\r\n+  color: white;\r\n+  font-size: 1rem;\r\n+  -webkit-appearance: none;\r\n+  \r\n+  &:focus {\r\n+    outline: none;\r\n+    border-color: rgba(128, 0, 0, 0.4);\r\n+    background: rgba(255, 255, 255, 0.08);\r\n+  }\r\n+\r\n+  &::placeholder {\r\n+    color: rgba(255, 255, 255, 0.4);\r\n+  }\r\n+  \r\n+  @media (min-width: 600px) {\r\n+    flex: 1;\r\n+  }\r\n+`;\r\n+\r\n+const SearchButtonGroup = styled.div`\r\n+  display: flex;\r\n+  gap: 0.5rem;\r\n+  width: 100%;\r\n+  \r\n+  @media (min-width: 600px) {\r\n+    width: auto;\r\n+  }\r\n+`;\r\n+\r\n+const SearchButton = styled.button`\r\n+  flex: 1;\r\n+  background: ${props => props.variant === 'live' ? 'transparent' : 'rgba(128, 0, 0, 0.2)'};\r\n+  border: 1px solid rgba(128, 0, 0, 0.3);\r\n+  padding: 0.8rem 1rem;\r\n+  border-radius: 25px;\r\n+  color: white;\r\n+  font-size: 0.9rem;\r\n+  display: flex;\r\n+  align-items: center;\r\n+  justify-content: center;\r\n+  gap: 0.4rem;\r\n+  cursor: pointer;\r\n+  transition: all 0.2s ease;\r\n+  white-space: nowrap;\r\n+  -webkit-tap-highlight-color: transparent;\r\n+  \r\n+  @media (min-width: 600px) {\r\n+    flex: unset;\r\n+    padding: 0.8rem 1.2rem;\r\n+  }\r\n+\r\n+  &:active {\r\n+    transform: scale(0.98);\r\n+    background: rgba(128, 0, 0, 0.3);\r\n+  }\r\n+\r\n+  &:disabled {\r\n+    opacity: 0.5;\r\n+    cursor: not-allowed;\r\n+  }\r\n+\r\n+  svg {\r\n+    width: 16px;\r\n+    height: 16px;\r\n+  }\r\n+`;\r\n+\r\n+// Mobile-friendly slider with native scroll\r\n+const SliderContainer = styled.div`\r\n+  width: 100%;\r\n+  overflow-x: auto;\r\n+  overflow-y: hidden;\r\n+  position: relative;\r\n+  margin: 1.5rem 0;\r\n+  -webkit-overflow-scrolling: touch;\r\n+  scroll-snap-type: x mandatory;\r\n+  scroll-behavior: smooth;\r\n+  \r\n+  &::-webkit-scrollbar {\r\n+    height: 4px;\r\n+  }\r\n+  \r\n+  &::-webkit-scrollbar-track {\r\n+    background: ${props => `${props.theme?.colors?.background || '#000000'}80`};\r\n+    border-radius: 10px;\r\n+  }\r\n+  \r\n+  &::-webkit-scrollbar-thumb {\r\n+    background: ${props => props.theme?.colors?.accent || '#800000'};\r\n+    border-radius: 10px;\r\n+  }\r\n+  \r\n+  /* Hide scroll buttons on mobile */\r\n+  .scroll-button {\r\n+    display: none;\r\n+    \r\n+    @media (min-width: 768px) {\r\n+      display: flex;\r\n+    }\r\n+  }\r\n+`;\r\n+\r\n+const Slider = styled.div`\r\n+  display: flex;\r\n+  width: fit-content;\r\n+  padding: 0.5rem 0;\r\n+`;\r\n+\r\n+const SlideItem = styled.div`\r\n+  flex: 0 0 160px;\r\n+  margin-right: 0.75rem;\r\n+  scroll-snap-align: start;\r\n+  \r\n+  @media (min-width: 480px) {\r\n+    flex: 0 0 200px;\r\n+    margin-right: 1rem;\r\n+  }\r\n+  \r\n+  @media (min-width: 768px) {\r\n+    flex: 0 0 250px;\r\n+    margin-right: 1.5rem;\r\n+  }\r\n+  \r\n+  @media (min-width: 1024px) {\r\n+    flex: 0 0 300px;\r\n+    margin-right: 2rem;\r\n+  }\r\n+`;\r\n+\r\n+// Add styles for better item display\r\n+const ItemDetailsSection = styled.div`\r\n+  margin-bottom: 1.5rem;\r\n+`;\r\n+\r\n+const ItemHeader = styled.div`\r\n+  margin-bottom: 1.5rem;\r\n+  \r\n+  h3 {\r\n+    font-size: 1.5rem;\r\n+    margin: 0 0 0.5rem 0;\r\n+    font-family: ${props => props.theme?.fonts?.heading || 'inherit'};\r\n+    color: ${props => props.theme?.colors?.text || '#FFFFFF'};\r\n+    \r\n+    @media (min-width: 768px) {\r\n+      font-size: 1.8rem;\r\n+    }\r\n+  }\r\n+\r\n+  .price {\r\n+    font-size: 1.3rem;\r\n+    font-weight: bold;\r\n+    color: ${props => props.theme?.colors?.accent || '#800000'};\r\n+    margin-bottom: 1rem;\r\n+    \r\n+    @media (min-width: 768px) {\r\n+      font-size: 1.5rem;\r\n+    }\r\n+  }\r\n+`;\r\n+\r\n+const CategoryBadge = styled.div`\r\n+  display: inline-block;\r\n+  background: ${props => `${props.theme?.colors?.accent || '#800000'}20`};\r\n+  color: ${props => props.theme?.colors?.accent || '#800000'};\r\n+  padding: 0.25rem 0.75rem;\r\n+  border-radius: 12px;\r\n+  font-size: 0.75rem;\r\n+  font-weight: 500;\r\n+  text-transform: uppercase;\r\n+  letter-spacing: 0.5px;\r\n+  margin-bottom: 1rem;\r\n+`;\r\n+\r\n+const StockStatus = styled.div`\r\n+  display: flex;\r\n+  align-items: center;\r\n+  gap: 0.5rem;\r\n+  margin-bottom: 1rem;\r\n+  font-size: 0.9rem;\r\n+  \r\n+  .stock-indicator {\r\n+    width: 8px;\r\n+    height: 8px;\r\n+    border-radius: 50%;\r\n+    background: ${props => props.inStock ? '#4CAF50' : '#FF5252'};\r\n+  }\r\n+  \r\n+  .stock-text {\r\n+    color: ${props => props.inStock ? '#4CAF50' : '#FF5252'};\r\n+    font-weight: 500;\r\n+  }\r\n+`;\r\n+\r\n+const ItemDescription = styled.div`\r\n+  font-size: 0.95rem;\r\n+  opacity: 0.9;\r\n+  margin-bottom: 1.5rem;\r\n+  line-height: 1.6;\r\n+  color: ${props => props.theme?.colors?.text || '#FFFFFF'};\r\n+`;\r\n+\r\n+const ItemLocation = styled.div`\r\n+  display: flex;\r\n+  align-items: center;\r\n+  gap: 0.5rem;\r\n+  font-size: 0.9rem;\r\n+  opacity: 0.8;\r\n+  margin-bottom: 1.5rem;\r\n+  color: ${props => props.theme?.colors?.text || '#FFFFFF'};\r\n+`;\r\n+\r\n+const ShopInfo = styled.div`\r\n+  padding: 0.75rem;\r\n+  background: ${props => `${props.theme?.colors?.surface || 'rgba(255, 255, 255, 0.05)'}50`};\r\n+  border-radius: 8px;\r\n+  margin-bottom: 1.5rem;\r\n+  font-size: 0.9rem;\r\n+  color: ${props => props.theme?.colors?.text || '#FFFFFF'};\r\n+  \r\n+  strong {\r\n+    color: ${props => props.theme?.colors?.accent || '#800000'};\r\n+  }\r\n+`;\r\n+\r\n+// Update ActionButtons to only show Order button\r\n+const ActionButtons = styled.div`\r\n+  display: flex;\r\n+  gap: 0.75rem;\r\n+  margin-top: 1.5rem;\r\n+  \r\n+  button {\r\n+    flex: 1;\r\n+    padding: 0.75rem;\r\n+    border: none;\r\n+    border-radius: 8px;\r\n+    font-weight: bold;\r\n+    cursor: pointer;\r\n+    transition: all 0.3s;\r\n+    display: flex;\r\n+    align-items: center;\r\n+    justify-content: center;\r\n+    gap: 0.5rem;\r\n+    font-size: 0.9rem;\r\n+    \r\n+    @media (min-width: 768px) {\r\n+      padding: 1rem;\r\n+      font-size: 1rem;\r\n+    }\r\n+    \r\n+    &.order {\r\n+      background: ${props => props.theme?.colors?.accent || '#800000'};\r\n+      color: white;\r\n+      \r\n+      &:hover:not(:disabled) {\r\n+        background: ${props => props.theme?.colors?.primary || '#4A0404'};\r\n+        transform: translateY(-2px);\r\n+      }\r\n+      \r\n+      &:disabled {\r\n+        opacity: 0.5;\r\n+        cursor: not-allowed;\r\n+        transform: none;\r\n+      }\r\n+    }\r\n+    \r\n+    svg {\r\n+      width: 16px;\r\n+      height: 16px;\r\n+    }\r\n+  }\r\n+`;\r\n+\r\n+// Mobile-friendly floating controls - removed since they're now in header\r\n+const StyleIndicator = styled.div`\r\n+  position: fixed;\r\n+  bottom: 1rem;\r\n+  right: 1rem;\r\n+  background: ${props => `${props.theme?.colors?.background || '#000000'}E5`};\r\n+  backdrop-filter: blur(10px);\r\n+  color: white;\r\n+  padding: 0.5rem 1rem;\r\n+  border-radius: 20px;\r\n+  font-size: 0.8rem;\r\n+  display: flex;\r\n+  align-items: center;\r\n+  gap: 0.5rem;\r\n+  border: 1px solid ${props => `${props.theme?.colors?.accent}40` || 'rgba(128, 0, 0, 0.4)'};\r\n+  z-index: 90;\r\n+  \r\n+  @media (min-width: 768px) {\r\n+    font-size: 0.9rem;\r\n+  }\r\n+  \r\n+  .style-number {\r\n+    font-weight: bold;\r\n+    font-size: 1rem;\r\n+    color: ${props => props.theme?.colors?.accent || '#800000'};\r\n+    \r\n+    @media (min-width: 768px) {\r\n+      font-size: 1.2rem;\r\n+    }\r\n+  }\r\n+`;\r\n+\r\n+// Quantity selector optimized for mobile\r\n+const QuantitySelector = styled.div`\r\n+  display: flex;\r\n+  align-items: center;\r\n+  justify-content: space-between;\r\n+  background: ${props => `${props.theme?.colors?.surface || 'rgba(255, 255, 255, 0.05)'}50`};\r\n+  border-radius: 12px;\r\n+  padding: 1rem;\r\n+  margin: 1rem 0;\r\n+  \r\n+  .quantity-label {\r\n+    font-weight: bold;\r\n+    color: ${props => props.theme?.colors?.text || '#FFFFFF'};\r\n+    font-size: 0.9rem;\r\n+  }\r\n+  \r\n+  .quantity-controls {\r\n+    display: flex;\r\n+    align-items: center;\r\n+    gap: 1rem;\r\n+    \r\n+    .quantity-btn {\r\n+      width: 40px;\r\n+      height: 40px;\r\n+      border-radius: 50%;\r\n+      border: 2px solid ${props => props.theme?.colors?.accent || '#800000'};\r\n+      background: transparent;\r\n+      color: ${props => props.theme?.colors?.accent || '#800000'};\r\n+      display: flex;\r\n+      align-items: center;\r\n+      justify-content: center;\r\n+      cursor: pointer;\r\n+      transition: all 0.3s;\r\n+      -webkit-tap-highlight-color: transparent;\r\n+      \r\n+      &:active:not(:disabled) {\r\n+        transform: scale(0.9);\r\n+        background: ${props => props.theme?.colors?.accent || '#800000'};\r\n+        color: white;\r\n+      }\r\n+      \r\n+      &:disabled {\r\n+        opacity: 0.3;\r\n+        cursor: not-allowed;\r\n+      }\r\n+      \r\n+      svg {\r\n+        width: 18px;\r\n+        height: 18px;\r\n+      }\r\n+    }\r\n+    \r\n+    .quantity-display {\r\n+      font-size: 1.3rem;\r\n+      font-weight: bold;\r\n+      color: ${props => props.theme?.colors?.text || 'white'};\r\n+      min-width: 40px;\r\n+      text-align: center;\r\n+    }\r\n+  }\r\n+`;\r\n+\r\n+// Other styled components remain the same but with mobile optimizations...\r\n+const LoadingSpinner = styled.div`\r\n+  width: 40px;\r\n+  height: 40px;\r\n+  margin: 2rem auto;\r\n+  border: 3px solid rgba(128, 0, 0, 0.1);\r\n+  border-radius: 50%;\r\n+  border-top-color: #800000;\r\n+  animation: spin 1s linear infinite;\r\n+\r\n+  @keyframes spin {\r\n+    to {\r\n+      transform: rotate(360deg);\r\n+    }\r\n+  }\r\n+`;\r\n+\r\n+const EmptyGridMessage = styled.div`\r\n+  text-align: center;\r\n+  padding: 2rem 1rem;\r\n+  background: rgba(0, 0, 0, 0.2);\r\n+  border-radius: 12px;\r\n+  border: 1px solid rgba(128, 0, 0, 0.1);\r\n+  color: rgba(255, 255, 255, 0.7);\r\n+  grid-column: 1/-1;\r\n+\r\n+  h3 {\r\n+    font-size: 1.1rem;\r\n+    margin-bottom: 0.5rem;\r\n+    color: rgba(255, 255, 255, 0.9);\r\n+  }\r\n+\r\n+  p {\r\n+    font-size: 0.9rem;\r\n+    line-height: 1.5;\r\n+  }\r\n+`;\r\n+\r\n+const MotivationalMessage = styled.p`\r\n+  font-size: 1.1rem;\r\n+  line-height: 1.5;\r\n+  max-width: 600px;\r\n+  margin: 2rem auto 0;\r\n+  color: ${props => props.theme?.colors?.text || '#FFFFFF'};\r\n+  font-weight: 400;\r\n+  text-align: center;\r\n+  padding: 1rem 1.5rem;\r\n+  letter-spacing: 0.3px;\r\n+  position: relative;\r\n+  \r\n+  @media (min-width: 768px) {\r\n+    font-size: 1.4rem;\r\n+    line-height: 1.6;\r\n+    max-width: 800px;\r\n+    margin: 3rem auto 0;\r\n+    padding: 1.5rem 2rem;\r\n+    letter-spacing: 0.5px;\r\n+  }\r\n+  \r\n+  &::before, &::after {\r\n+    content: '\"';\r\n+    font-family: ${props => props.theme?.fonts?.heading || \"'Georgia', serif\"};\r\n+    font-size: 2rem;\r\n+    position: absolute;\r\n+    opacity: 0.2;\r\n+    color: ${props => props.theme?.colors?.accent || '#800000'};\r\n+    \r\n+    @media (min-width: 768px) {\r\n+      font-size: 3rem;\r\n+    }\r\n+  }\r\n+  \r\n+  &::before {\r\n+    top: -0.5rem;\r\n+    left: 0.5rem;\r\n+    \r\n+    @media (min-width: 768px) {\r\n+      top: -1.5rem;\r\n+      left: -1rem;\r\n+    }\r\n+  }\r\n+  \r\n+  &::after {\r\n+    bottom: -1.5rem;\r\n+    right: 0.5rem;\r\n+    \r\n+    @media (min-width: 768px) {\r\n+      bottom: -2.5rem;\r\n+      right: -1rem;\r\n+    }\r\n+  }\r\n+`;\r\n+\r\n+// 1. Replace the CategoryGrid styled component with these two new components:\r\n+\r\n+const CategoryGridWrapper = styled.div`\r\n+  margin-bottom: 2rem;\r\n+  \r\n+  /* Desktop: Regular grid */\r\n+  @media (min-width: 769px) {\r\n+    display: grid;\r\n+    grid-template-columns: repeat(5, 1fr);\r\n+    gap: 1rem;\r\n+  }\r\n+  \r\n+  @media (max-width: 1200px) and (min-width: 769px) {\r\n+    grid-template-columns: repeat(4, 1fr);\r\n+  }\r\n+  \r\n+  @media (max-width: 900px) and (min-width: 769px) {\r\n+    grid-template-columns: repeat(3, 1fr);\r\n+  }\r\n+  \r\n+  /* Mobile: Scrollable rows */\r\n+  @media (max-width: 768px) {\r\n+    display: flex;\r\n+    flex-direction: column;\r\n+    gap: 1rem;\r\n+  }\r\n+`;\r\n+\r\n+// Replace the CategoryScrollableGrid styled component with this corrected version:\r\n+\r\n+const CategoryScrollableGrid = styled.div`\r\n+  display: none;\r\n+  \r\n+  @media (max-width: 768px) {\r\n+    display: grid;\r\n+    grid-auto-flow: column;\r\n+    grid-template-rows: repeat(2, 1fr);\r\n+    grid-template-columns: repeat(5, minmax(280px, 1fr)); /* Increased from 200px */\r\n+    gap: 1rem; /* Increased from 0.75rem */\r\n+    overflow-x: auto;\r\n+    overflow-y: hidden;\r\n+    padding-bottom: 0.5rem;\r\n+    scroll-snap-type: x mandatory;\r\n+    -webkit-overflow-scrolling: touch;\r\n+    min-height: 85vh; /* Add minimum height to stretch vertically */\r\n+    \r\n+    &::-webkit-scrollbar {\r\n+      height: 4px;\r\n+    }\r\n+    \r\n+    &::-webkit-scrollbar-track {\r\n+      background: ${props => `${props.theme?.colors?.background || '#000000'}80`};\r\n+      border-radius: 10px;\r\n+    }\r\n+    \r\n+    &::-webkit-scrollbar-thumb {\r\n+      background: ${props => props.theme?.colors?.accent || '#800000'};\r\n+      border-radius: 10px;\r\n+    }\r\n+    \r\n+    > * {\r\n+      scroll-snap-align: start;\r\n+      min-width: 0;\r\n+      height: 100%; /* Make items stretch to full height */\r\n+    }\r\n+  }\r\n+  \r\n+  @media (max-width: 480px) {\r\n+    grid-template-columns: repeat(5, minmax(240px, 1fr)); /* Increased from 160px */\r\n+    gap: 0.75rem;\r\n+  }\r\n+`;\r\n+\r\n+// 4. Add this CSS to handle responsive display (add to your styled components section):\r\n+const GlobalStyle = styled.div`\r\n+  @media (min-width: 769px) {\r\n+    .mobile-only {\r\n+      display: none !important;\r\n+    }\r\n+  }\r\n+  \r\n+  @media (max-width: 768px) {\r\n+    .desktop-only {\r\n+      display: none !important;\r\n+    }\r\n+  }\r\n+`;\r\n+\r\n+const CategoryHeader = styled.div`\r\n+  display: flex;\r\n+  justify-content: space-between;\r\n+  align-items: center;\r\n+  margin-bottom: 0.75rem;\r\n+  padding: 0 0.5rem;\r\n+  \r\n+  @media (min-width: 768px) {\r\n+    margin-bottom: 1rem;\r\n+    padding: 0;\r\n+  }\r\n+  \r\n+  h2 {\r\n+    font-family: ${props => props.theme?.fonts?.heading || 'inherit'};\r\n+    font-size: 1.3rem;\r\n+    color: ${props => props.theme?.colors?.accent || '#800000'};\r\n+    margin: 0;\r\n+    \r\n+    @media (min-width: 768px) {\r\n+      font-size: 1.8rem;\r\n+    }\r\n+  }\r\n+  \r\n+  .view-all {\r\n+    font-size: 0.8rem;\r\n+    color: ${props => props.theme?.colors?.accent || '#800000'};\r\n+    opacity: 0.8;\r\n+    cursor: pointer;\r\n+    display: flex;\r\n+    align-items: center;\r\n+    gap: 0.3rem;\r\n+    transition: all 0.3s ease;\r\n+    \r\n+    @media (min-width: 768px) {\r\n+      font-size: 0.9rem;\r\n+      gap: 0.5rem;\r\n+    }\r\n+    \r\n+    &:active {\r\n+      opacity: 1;\r\n+      transform: translateX(3px);\r\n+    }\r\n+  }\r\n+`;\r\n+\r\n+const ChatOverlay = styled.div`\r\n+  position: fixed;\r\n+  top: 0;\r\n+  left: 0;\r\n+  right: 0;\r\n+  bottom: 0;\r\n+  background: rgba(0, 0, 0, 0.5);\r\n+  z-index: 999;\r\n+  opacity: ${props => props.isOpen ? 1 : 0};\r\n+  pointer-events: ${props => props.isOpen ? 'auto' : 'none'};\r\n+  transition: opacity 0.3s ease;\r\n+`;\r\n+\r\n+// Add these styled components after StyleIndicator\r\n+\r\n+const SortContainer = styled.div`\r\n+  position: relative;\r\n+  display: inline-block;\r\n+`;\r\n+\r\n+const SortDropdown = styled.div`\r\n+  position: absolute;\r\n+  top: calc(100% + 0.5rem);\r\n+  right: 0;\r\n+  background: ${props => props.theme?.colors?.background || '#000000'};\r\n+  border: 2px solid ${props => props.theme?.colors?.accent || '#800000'};\r\n+  border-radius: 12px;\r\n+  padding: 0.75rem;\r\n+  min-width: 220px;\r\n+  z-index: 1000;\r\n+  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.8),\r\n+              0 0 20px ${props => `${props.theme?.colors?.accent}40` || 'rgba(128, 0, 0, 0.25)'};\r\n+  opacity: ${props => props.isOpen ? 1 : 0};\r\n+  visibility: ${props => props.isOpen ? 'visible' : 'hidden'};\r\n+  transform: ${props => props.isOpen ? 'translateY(0)' : 'translateY(-10px)'};\r\n+  transition: all 0.3s ease;\r\n+  \r\n+  @media (max-width: 768px) {\r\n+    min-width: 200px;\r\n+    right: 0;\r\n+  }\r\n+`;\r\n+\r\n+const SortOption = styled.button`\r\n+  width: 100%;\r\n+  padding: 0.75rem 1rem;\r\n+  background: ${props => props.active ? \r\n+    props.theme?.colors?.accent || '#800000' : \r\n+    'transparent'};\r\n+  border: none;\r\n+  border-radius: 8px;\r\n+  color: ${props => props.active ? \r\n+    '#FFFFFF' : \r\n+    props.theme?.colors?.text || '#FFFFFF'};\r\n+  font-size: 0.95rem;\r\n+  font-weight: ${props => props.active ? '600' : '500'};\r\n+  text-align: left;\r\n+  cursor: pointer;\r\n+  transition: all 0.2s ease;\r\n+  display: flex;\r\n+  align-items: center;\r\n+  gap: 0.75rem;\r\n+  font-family: ${props => props.theme?.fonts?.body || 'inherit'};\r\n+  min-height: 50px; /* Added for two-line content */\r\n+  \r\n+  &:hover {\r\n+    background: ${props => props.active ?\r\n+      props.theme?.colors?.primary || '#4A0404' :\r\n+      `${props.theme?.colors?.accent}20` || 'rgba(128, 0, 0, 0.2)'};\r\n+    transform: translateX(2px);\r\n+  }\r\n+  \r\n+  &:active {\r\n+    transform: scale(0.98);\r\n+  }\r\n+  \r\n+  svg {\r\n+    width: 16px;\r\n+    height: 16px;\r\n+    flex-shrink: 0;\r\n+    align-self: flex-start; /* Align icon to top when two lines */\r\n+    margin-top: 2px;\r\n+  }\r\n+  \r\n+  @media (max-width: 768px) {\r\n+    padding: 0.65rem 0.85rem;\r\n+    font-size: 0.9rem;\r\n+    min-height: 46px;\r\n+    \r\n+    svg {\r\n+      width: 14px;\r\n+      height: 14px;\r\n+    }\r\n+  }\r\n+`;\r\n+\r\n+const SortHeader = styled.div`\r\n+  display: flex;\r\n+  justify-content: space-between;\r\n+  align-items: center;\r\n+  margin-bottom: 1rem;\r\n+  \r\n+  @media (max-width: 768px) {\r\n+    flex-direction: column;\r\n+    align-items: flex-start;\r\n+    gap: 0.75rem;\r\n+  }\r\n+`;\r\n+\r\n+// Motivational messages\r\n+const MOTIVATIONAL_MESSAGES = [\r\n+  \"Build your vision, Elevate humanity.\",\r\n+  \"Create greatness, Inspire progress.\",\r\n+  \"Master your craft, Serve with passion.\",\r\n+  \"Own your success, Empower those around you.\",\r\n+  \"Rule with wisdom, Lead with heart.\",\r\n+  \"Shape your future, Change lives along the way.\",\r\n+  \"Rise above, Lift others higher.\",\r\n+  \"Conquer your dreams, Build a better world.\",\r\n+  \"Lead by example, Serve with strength.\",\r\n+  \"Pursue greatness, Give back in abundance.\"\r\n+];\r\n+\r\n+const WelcomePage = () => {\r\n+  const navigate = useNavigate();\r\n+  const [motivationalMessage, setMotivationalMessage] = useState(\"\");\r\n+  const [activeTab, setActiveTab] = useState('featured');\r\n+  const [featuredItems, setFeaturedItems] = useState([]);\r\n+  const [loading, setLoading] = useState(true);\r\n+  const [error, setError] = useState(null);\r\n+  const [nearbyItems, setNearbyItems] = useState([]);\r\n+  const [featuredMedia, setFeaturedMedia] = useState([]);\r\n+  const [hasSearched, setHasSearched] = useState(false);\r\n+  const [searchAddress, setSearchAddress] = useState('');\r\n+  const [searching, setSearching] = useState(false);\r\n+  const [locationChecked, setLocationChecked] = useState(false);\r\n+  const [showLocationPrompt, setShowLocationPrompt] = useState(false);\r\n+  const [currentZipCode, setCurrentZipCode] = useState(null);\r\n+  const [currentPage, setCurrentPage] = useState(1);\r\n+  const [totalItems, setTotalItems] = useState(0);\r\n+  const [currentStyle, setCurrentStyle] = useState(null);\r\n+  const itemsPerPage = 6;\r\n+  const [isPinned, setIsPinned] = useState(false);\r\n+  const [isRefreshing, setIsRefreshing] = useState(false);\r\n+  const [orderQuantity, setOrderQuantity] = useState(1);\r\n+  const [sortBy, setSortBy] = useState('recent'); // 'recent', 'proximity', 'price-low', 'price-high'\r\n+  const [sortMenuOpen, setSortMenuOpen] = useState(false);\r\n+\r\n+\r\n+  \r\n+  const { user, isAuthenticated } = useAuth();\r\n+  const [shopData, setShopData] = useState(null);\r\n+  const [currentMessageIndex, setCurrentMessageIndex] = useState(0);\r\n+  const [isMessageVisible, setIsMessageVisible] = useState(true);\r\n+  const [isSliderPaused, setIsSliderPaused] = useState(false);\r\n+  const [sliderPosition, setSliderPosition] = useState(0);\r\n+  const sliderRef = useRef(null);\r\n+  const sliderAnimationRef = useRef(null);\r\n+  const [zoomedItem, setZoomedItem] = useState(null);\r\n+  const [chatOpen, setChatOpen] = useState(false);\r\n+  const [selectedChatItem, setSelectedChatItem] = useState(null);\r\n+  const [currentImageIndex, setCurrentImageIndex] = useState(0);\r\n+  const { userLocation, locationPermission, requestLocation } = useLocation();\r\n+  const [updatingLocation, setUpdatingLocation] = useState(false);\r\n+  const [featuredSearchTerm, setFeaturedSearchTerm] = useState('');\r\n+  const [searchResults, setSearchResults] = useState([]);\r\n+  const [isSearching, setIsSearching] = useState(false);\r\n+  const [hasSearchResults, setHasSearchResults] = useState(false);\r\n+  const [categories, setCategories] = useState({\r\n+    'Electronics & Tech': [],\r\n+    'Clothing & Accessories': [],\r\n+    'Home & Garden': [],\r\n+    'Sports & Outdoors': [],\r\n+    'Books & Media': [],\r\n+    'Toys & Games': [],\r\n+    'Health & Beauty': [],\r\n+    'Automotive': [],\r\n+    'Collectibles & Art': [],\r\n+    'Food & Beverages': [],\r\n+    'Other': []\r\n+  });\r\n+// Replace the existing state variables related to ZIP with city/region states\r\n+const [cityRegion, setCityRegion] = useState('');\r\n+const [isCityPinned, setIsCityPinned] = useState(false);\r\n+const [isConvertingToCity, setIsConvertingToCity] = useState(false);\r\n+const [cityInputValue, setCityInputValue] = useState('');\r\n+const [effectiveLocation, setEffectiveLocation] = useState(null);\r\n+const [isIPLocation, setIsIPLocation] = useState(false);\r\n+\r\n+useEffect(() => {\r\n+  const initializeLocation = async () => {\r\n+    console.log('🔍 Initializing location...');\r\n+    console.log('userLocation:', userLocation);\r\n+    \r\n+    if (userLocation) {\r\n+      // User has shared precise location\r\n+      console.log('✅ Using GPS location:', userLocation);\r\n+      setEffectiveLocation(userLocation);\r\n+      setIsIPLocation(false);\r\n+    } else {\r\n+      // Use IP-based location\r\n+      console.log('🌐 Fetching IP-based location...');\r\n+      const ipLocation = await getIPBasedLocation();\r\n+      console.log('IP Location result:', ipLocation);\r\n+      \r\n+      if (ipLocation) {\r\n+        console.log('✅ Using IP location:', ipLocation);\r\n+        setEffectiveLocation(ipLocation);\r\n+        setIsIPLocation(true);\r\n+      } else {\r\n+        console.error('❌ Failed to get IP location');\r\n+      }\r\n+    }\r\n+  };\r\n+  \r\n+  initializeLocation();\r\n+}, [userLocation]);\r\n+\r\n+useEffect(() => {\r\n+  console.log('🔄 effectiveLocation changed:', effectiveLocation);\r\n+  console.log('activeTab:', activeTab);\r\n+  \r\n+  if (activeTab === 'featured' && effectiveLocation) {\r\n+    console.log('📦 Loading items with location...');\r\n+    loadCategorizedItems();\r\n+  }\r\n+}, [effectiveLocation, activeTab]);\r\n+\r\n+const loadCategorizedItems = async () => {\r\n+  console.log('🔄 loadCategorizedItems called');\r\n+  console.log('effectiveLocation:', effectiveLocation);\r\n+  console.log('sortBy:', sortBy);\r\n+  \r\n+  try {\r\n+    setLoading(true);\r\n+    setError(null);\r\n+\r\n+    console.log('📡 Fetching items from Firebase...');\r\n+    const allItems = await getFeaturedItems(48);\r\n+    console.log('✅ Fetched items:', allItems.length);\r\n+    \r\n+    const currentUserId = user?.uid;\r\n+    \r\n+    // Filter out current user's items AND invalid items\r\n+    const filteredItems = allItems.filter(item => {\r\n+      const isNotCurrentUser = item.shopId !== currentUserId;\r\n+      const hasImages = item.images && item.images.length > 0 && item.images.some(img => img);\r\n+      const hasValidPrice = item.price && !isNaN(parseFloat(item.price)) && parseFloat(item.price) > 0;\r\n+      const hasStock = !item.deleted && (!item.quantity || parseInt(item.quantity) > 0);\r\n+      \r\n+      return isNotCurrentUser && hasImages && hasValidPrice && hasStock;\r\n+    });\r\n+    \r\n+    console.log('✅ Filtered items:', filteredItems.length);\r\n+\r\n+    let itemsWithDistance = filteredItems;\r\n+    \r\n+    // Calculate distances if we have location\r\n+    if (effectiveLocation) {\r\n+      console.log('📍 Calculating distances...');\r\n+      itemsWithDistance = filteredItems.map(item => {\r\n+        let itemCoords = item.coordinates;\r\n+        if (!itemCoords && item.address) {\r\n+          const coordsMatch = item.address.match(/^(-?\\d+\\.?\\d*),\\s*(-?\\d+\\.?\\d*)$/);\r\n+          if (coordsMatch) {\r\n+            itemCoords = {\r\n+              lat: parseFloat(coordsMatch[1]),\r\n+              lng: parseFloat(coordsMatch[2])\r\n+            };\r\n+          }\r\n+        }\r\n+\r\n+        if (itemCoords?.lat && itemCoords?.lng) {\r\n+          try {\r\n+            const distanceInMeters = getDistance(\r\n+              { latitude: effectiveLocation.latitude, longitude: effectiveLocation.longitude },\r\n+              { latitude: itemCoords.lat, longitude: itemCoords.lng }\r\n+            );\r\n+            const distanceInMiles = (distanceInMeters / 1609.34).toFixed(1);\r\n+\r\n+            return {\r\n+              ...item,\r\n+              coordinates: itemCoords,\r\n+              distance: distanceInMeters,\r\n+              distanceInMiles,\r\n+              formattedDistance: `${distanceInMiles} mi`\r\n+            };\r\n+          } catch (e) {\r\n+            console.warn('Error calculating distance for item:', e);\r\n+            return item;\r\n+          }\r\n+        }\r\n+        return item;\r\n+      });\r\n+    } else {\r\n+      console.warn('⚠️ No effectiveLocation available for distance calculation');\r\n+    }\r\n+\r\n+    // Apply sorting\r\n+    console.log('🔄 Applying sort:', sortBy);\r\n+    const sortedItems = applySorting(itemsWithDistance, sortBy);\r\n+    console.log('✅ Sorted items:', sortedItems.length);\r\n+\r\n+    // Categorize items\r\n+    const categorizedItems = {\r\n+      'Electronics & Tech': [],\r\n+      'Clothing & Accessories': [],\r\n+      'Home & Garden': [],\r\n+      'Sports & Outdoors': [],\r\n+      'Books & Media': [],\r\n+      'Toys & Games': [],\r\n+      'Health & Beauty': [],\r\n+      'Automotive': [],\r\n+      'Collectibles & Art': [],\r\n+      'Food & Beverages': [],\r\n+      'Other': []\r\n+    };\r\n+\r\n+    sortedItems.forEach(item => {\r\n+      const category = item.category || 'Other';\r\n+      if (categorizedItems[category]) {\r\n+        categorizedItems[category].push(item);\r\n+      } else {\r\n+        categorizedItems['Other'].push(item);\r\n+      }\r\n+    });\r\n+\r\n+    Object.keys(categorizedItems).forEach(category => {\r\n+      categorizedItems[category] = categorizedItems[category].slice(0, 10);\r\n+    });\r\n+\r\n+    console.log('✅ Setting categories:', Object.keys(categorizedItems).map(k => `${k}: ${categorizedItems[k].length}`));\r\n+    setCategories(categorizedItems);\r\n+    setFeaturedItems(sortedItems.slice(0, 10));\r\n+    setTotalItems(filteredItems.length);\r\n+\r\n+    setLoading(false);\r\n+  } catch (error) {\r\n+    console.error('❌ Error loading categorized items:', error);\r\n+    setError('Failed to load items. Please try again later.');\r\n+    setLoading(false);\r\n+  }\r\n+};\r\n+\r\n+// Add this useEffect with other effects\r\n+\r\n+useEffect(() => {\r\n+  const handleClickOutside = (event) => {\r\n+    if (sortMenuOpen && !event.target.closest('.sort-container')) {\r\n+      setSortMenuOpen(false);\r\n+    }\r\n+  };\r\n+\r\n+  document.addEventListener('mousedown', handleClickOutside);\r\n+  return () => document.removeEventListener('mousedown', handleClickOutside);\r\n+}, [sortMenuOpen]);\r\n+\r\n+const applySorting = (items, sortType) => {\r\n+  let sortedItems = [...items];\r\n+  \r\n+  switch (sortType) {\r\n+    case 'proximity':\r\n+      if (!userLocation) {\r\n+        // If no location, request it\r\n+        requestLocation();\r\n+        return sortedItems;\r\n+      }\r\n+      // Sort by distance (closest first) - no distance filter\r\n+      sortedItems.sort((a, b) => {\r\n+        const distA = a.distance || Infinity;\r\n+        const distB = b.distance || Infinity;\r\n+        return distA - distB;\r\n+      });\r\n+      break;\r\n+      \r\n+    case 'price-low':\r\n+      // REMOVED 30-mile filter - sort all items by price (low to high)\r\n+      sortedItems.sort((a, b) => {\r\n+        const priceA = parseFloat(a.price) || 0;\r\n+        const priceB = parseFloat(b.price) || 0;\r\n+        return priceA - priceB;\r\n+      });\r\n+      break;\r\n+      \r\n+    case 'price-high':\r\n+      // REMOVED 30-mile filter - sort all items by price (high to low)\r\n+      sortedItems.sort((a, b) => {\r\n+        const priceA = parseFloat(a.price) || 0;\r\n+        const priceB = parseFloat(b.price) || 0;\r\n+        return priceB - priceA;\r\n+      });\r\n+      break;\r\n+      \r\n+    case 'recent':\r\n+    default:\r\n+      // REMOVED 30-mile filter - sort all items by most recent\r\n+      sortedItems.sort((a, b) => {\r\n+        const dateA = a.createdAt ? new Date(a.createdAt) : new Date(0);\r\n+        const dateB = b.createdAt ? new Date(b.createdAt) : new Date(0);\r\n+        return dateB - dateA;\r\n+      });\r\n+      break;\r\n+  }\r\n+  \r\n+  return sortedItems;\r\n+};\r\n+\r\n+const getSortLabel = (sortType) => {\r\n+  switch (sortType) {\r\n+    case 'proximity': return 'Closest First';\r\n+    case 'price-low': return 'Price: Low to High';\r\n+    case 'price-high': return 'Price: High to Low';\r\n+    case 'recent':\r\n+    default: return 'Most Recent';\r\n+  }\r\n+};\r\n+\r\n+// Replace convertCoordsToZip with this new function\r\n+const convertCoordsToCity = async (lat, lon) => {\r\n+  try {\r\n+    setIsConvertingToCity(true);\r\n+    setError(null);\r\n+    \r\n+    const response = await fetch(\r\n+      `https://nominatim.openstreetmap.org/reverse?lat=${lat}&lon=${lon}&format=json&zoom=10&addressdetails=1`,\r\n+      {\r\n+        headers: {\r\n+          'Accept': 'application/json',\r\n+          'User-Agent': 'KalKode Marketplace'\r\n+        }\r\n+      }\r\n+    );\r\n+    \r\n+    if (!response.ok) {\r\n+      throw new Error('Failed to fetch location data');\r\n+    }\r\n+    \r\n+    const data = await response.json();\r\n+    console.log('Nominatim response:', data);\r\n+    \r\n+    if (!data || !data.address) {\r\n+      setCityRegion('Not available');\r\n+      setCityInputValue('');\r\n+      return null;\r\n+    }\r\n+    \r\n+    const address = data.address;\r\n+    const city = address.city || address.town || address.village || address.county;\r\n+    const state = address.state;\r\n+    \r\n+    // Major cities list (you can expand this)\r\n+    const majorCities = [\r\n+      'Houston', 'Dallas', 'Austin', 'San Antonio', 'Fort Worth',\r\n+      'Los Angeles', 'New York', 'Chicago', 'Phoenix', 'Philadelphia',\r\n+      'San Diego', 'San Jose', 'Jacksonville', 'Columbus', 'Charlotte'\r\n+    ];\r\n+    \r\n+    let locationString = '';\r\n+    \r\n+    if (city && majorCities.some(major => city.includes(major))) {\r\n+      // For major cities, determine direction from city center\r\n+      const cityName = majorCities.find(major => city.includes(major));\r\n+      \r\n+      // Get city center coordinates (you could make this more precise with a lookup table)\r\n+      const cityCenterResponse = await fetch(\r\n+        `https://nominatim.openstreetmap.org/search?city=${cityName}&state=${state}&format=json&limit=1`,\r\n+        {\r\n+          headers: {\r\n+            'Accept': 'application/json',\r\n+            'User-Agent': 'KalKode Marketplace'\r\n+          }\r\n+        }\r\n+      );\r\n+      \r\n+      const cityCenterData = await cityCenterResponse.json();\r\n+      \r\n+      if (cityCenterData && cityCenterData[0]) {\r\n+        const centerLat = parseFloat(cityCenterData[0].lat);\r\n+        const centerLon = parseFloat(cityCenterData[0].lon);\r\n+        \r\n+        // Calculate direction\r\n+        const direction = getDirection(lat, lon, centerLat, centerLon);\r\n+        locationString = `${direction} ${cityName}, ${getStateAbbreviation(state)}`;\r\n+      } else {\r\n+        locationString = `${cityName}, ${getStateAbbreviation(state)}`;\r\n+      }\r\n+    } else if (state) {\r\n+      // For non-major cities, use state with direction\r\n+      // Get state center (approximate)\r\n+      const stateCenterResponse = await fetch(\r\n+        `https://nominatim.openstreetmap.org/search?state=${state}&country=USA&format=json&limit=1`,\r\n+        {\r\n+          headers: {\r\n+            'Accept': 'application/json',\r\n+            'User-Agent': 'KalKode Marketplace'\r\n+          }\r\n+        }\r\n+      );\r\n+      \r\n+      const stateCenterData = await stateCenterResponse.json();\r\n+      \r\n+      if (stateCenterData && stateCenterData[0]) {\r\n+        const centerLat = parseFloat(stateCenterData[0].lat);\r\n+        const centerLon = parseFloat(stateCenterData[0].lon);\r\n+        \r\n+        const direction = getDirection(lat, lon, centerLat, centerLon);\r\n+        locationString = city ? \r\n+          `${city}, ${direction} ${getStateAbbreviation(state)}` :\r\n+          `${direction} ${getStateAbbreviation(state)}`;\r\n+      } else {\r\n+        locationString = city ? \r\n+          `${city}, ${getStateAbbreviation(state)}` :\r\n+          getStateAbbreviation(state);\r\n+      }\r\n+    } else {\r\n+      locationString = city || 'Unknown Location';\r\n+    }\r\n+    \r\n+    setCityRegion(locationString);\r\n+    setCityInputValue(locationString);\r\n+    \r\n+    console.log(`Coordinates ${lat}, ${lon} → ${locationString}`);\r\n+    \r\n+    return locationString;\r\n+    \r\n+  } catch (error) {\r\n+    console.error('Error converting coordinates to city:', error);\r\n+    setCityRegion('Error');\r\n+    setCityInputValue('');\r\n+    setError('Failed to get location information');\r\n+    return null;\r\n+  } finally {\r\n+    setIsConvertingToCity(false);\r\n+  }\r\n+};\r\n+\r\n+// Helper function to determine direction (N, S, E, W, NE, NW, SE, SW)\r\n+const getDirection = (lat1, lon1, lat2, lon2) => {\r\n+  const latDiff = lat1 - lat2;\r\n+  const lonDiff = lon1 - lon2;\r\n+  \r\n+  const absLatDiff = Math.abs(latDiff);\r\n+  const absLonDiff = Math.abs(lonDiff);\r\n+  \r\n+  // If differences are very small, consider it center\r\n+  if (absLatDiff < 0.1 && absLonDiff < 0.1) {\r\n+    return '';\r\n+  }\r\n+  \r\n+  // Determine primary direction\r\n+  let direction = '';\r\n+  \r\n+  // North/South\r\n+  if (absLatDiff > absLonDiff * 0.5) {\r\n+    direction += latDiff > 0 ? 'N' : 'S';\r\n+  }\r\n+  \r\n+  // East/West\r\n+  if (absLonDiff > absLatDiff * 0.5) {\r\n+    direction += lonDiff > 0 ? 'E' : 'W';\r\n+  }\r\n+  \r\n+  return direction || 'Central';\r\n+};\r\n+\r\n+// Helper function to get state abbreviations\r\n+const getStateAbbreviation = (stateName) => {\r\n+  const stateMap = {\r\n+    'Alabama': 'AL', 'Alaska': 'AK', 'Arizona': 'AZ', 'Arkansas': 'AR',\r\n+    'California': 'CA', 'Colorado': 'CO', 'Connecticut': 'CT', 'Delaware': 'DE',\r\n+    'Florida': 'FL', 'Georgia': 'GA', 'Hawaii': 'HI', 'Idaho': 'ID',\r\n+    'Illinois': 'IL', 'Indiana': 'IN', 'Iowa': 'IA', 'Kansas': 'KS',\r\n+    'Kentucky': 'KY', 'Louisiana': 'LA', 'Maine': 'ME', 'Maryland': 'MD',\r\n+    'Massachusetts': 'MA', 'Michigan': 'MI', 'Minnesota': 'MN', 'Mississippi': 'MS',\r\n+    'Missouri': 'MO', 'Montana': 'MT', 'Nebraska': 'NE', 'Nevada': 'NV',\r\n+    'New Hampshire': 'NH', 'New Jersey': 'NJ', 'New Mexico': 'NM', 'New York': 'NY',\r\n+    'North Carolina': 'NC', 'North Dakota': 'ND', 'Ohio': 'OH', 'Oklahoma': 'OK',\r\n+    'Oregon': 'OR', 'Pennsylvania': 'PA', 'Rhode Island': 'RI', 'South Carolina': 'SC',\r\n+    'South Dakota': 'SD', 'Tennessee': 'TN', 'Texas': 'TX', 'Utah': 'UT',\r\n+    'Vermont': 'VT', 'Virginia': 'VA', 'Washington': 'WA', 'West Virginia': 'WV',\r\n+    'Wisconsin': 'WI', 'Wyoming': 'WY'\r\n+  };\r\n+  \r\n+  return stateMap[stateName] || stateName;\r\n+};\r\n+\r\n+// Replace handleLocationToZip with handleLocationToCity\r\n+const handleLocationToCity = async () => {\r\n+  try {\r\n+    setIsConvertingToCity(true);\r\n+    setError(null);\r\n+    \r\n+    // Request fresh location from browser\r\n+    const freshLocation = await new Promise((resolve, reject) => {\r\n+      if (!navigator.geolocation) {\r\n+        reject(new Error('Geolocation not supported'));\r\n+        return;\r\n+      }\r\n+      \r\n+      navigator.geolocation.getCurrentPosition(\r\n+        (position) => {\r\n+          resolve({\r\n+            latitude: position.coords.latitude,\r\n+            longitude: position.coords.longitude\r\n+          });\r\n+        },\r\n+        (error) => {\r\n+          reject(error);\r\n+        },\r\n+        {\r\n+          enableHighAccuracy: true,\r\n+          timeout: 10000,\r\n+          maximumAge: 0\r\n+        }\r\n+      );\r\n+    });\r\n+    \r\n+    // Convert fresh coordinates to city/region\r\n+    await convertCoordsToCity(freshLocation.latitude, freshLocation.longitude);\r\n+    \r\n+  } catch (error) {\r\n+    console.error('Error getting fresh location:', error);\r\n+    \r\n+    // Fallback: use stored location if available\r\n+    if (userLocation) {\r\n+      console.log('Using stored location as fallback');\r\n+      await convertCoordsToCity(userLocation.latitude, userLocation.longitude);\r\n+    } else {\r\n+      setError('Location not available. Please enable location services.');\r\n+    }\r\n+  } finally {\r\n+    setIsConvertingToCity(false);\r\n+  }\r\n+};\r\n+\r\n+// Replace handleToggleZipPin with handleToggleCityPin\r\n+const handleToggleCityPin = () => {\r\n+  if (isCityPinned) {\r\n+    localStorage.removeItem('pinnedCityRegion');\r\n+    setIsCityPinned(false);\r\n+    setCityRegion('');\r\n+    setCityInputValue('');\r\n+  } else {\r\n+    if (cityRegion && cityRegion !== 'Not available' && cityRegion !== 'Error') {\r\n+      localStorage.setItem('pinnedCityRegion', cityRegion);\r\n+      setIsCityPinned(true);\r\n+    }\r\n+  }\r\n+};\r\n+\r\n+// Update the useEffect that loads pinned location on mount\r\n+useEffect(() => {\r\n+  const pinnedCity = localStorage.getItem('pinnedCityRegion');\r\n+  if (pinnedCity) {\r\n+    setCityRegion(pinnedCity);\r\n+    setCityInputValue(pinnedCity);\r\n+    setIsCityPinned(true);\r\n+  }\r\n+}, []);\r\n+\r\n+\r\n+  // Handle opening shop\r\n+  const handleOpenShop = () => {\r\n+    navigate('/shop/create/template');\r\n+  };\r\n+\r\n+  // Refresh theme\r\n+  const refreshTheme = () => {\r\n+    if (isRefreshing) return;\r\n+    \r\n+    setIsRefreshing(true);\r\n+    const styles = Object.values(WELCOME_STYLES);\r\n+    const otherStyles = styles.filter(style => style.id !== currentStyle.id);\r\n+    \r\n+    if (otherStyles.length > 0) {\r\n+      const randomStyle = otherStyles[Math.floor(Math.random() * otherStyles.length)];\r\n+      setCurrentStyle(randomStyle);\r\n+      \r\n+      if (isPinned) {\r\n+        localStorage.removeItem('pinnedStyleId');\r\n+        setIsPinned(false);\r\n+      }\r\n+    }\r\n+    \r\n+    setTimeout(() => setIsRefreshing(false), 500);\r\n+  };\r\n+\r\n+  // Toggle pin style\r\n+  const togglePinStyle = () => {\r\n+    if (isPinned) {\r\n+      localStorage.removeItem('pinnedStyleId');\r\n+      setIsPinned(false);\r\n+      \r\n+      const styles = Object.values(WELCOME_STYLES).filter(\r\n+        style => style.id !== currentStyle.id\r\n+      );\r\n+      \r\n+      if (styles.length > 0) {\r\n+        const randomStyle = styles[Math.floor(Math.random() * styles.length)];\r\n+        setCurrentStyle(randomStyle);\r\n+      }\r\n+    } else {\r\n+      localStorage.setItem('pinnedStyleId', currentStyle.id.toString());\r\n+      setIsPinned(true);\r\n+    }\r\n+  };\r\n+\r\n+  // Handle location update\r\n+  const handleLocationUpdate = () => {\r\n+    setUpdatingLocation(true);\r\n+    requestLocation();\r\n+  };\r\n+\r\n+  // Get location display text\r\n+  const getLocationDisplayText = () => {\r\n+    if (!userLocation) {\r\n+      return \"Location: Not available\";\r\n+    }\r\n+    return `Location: ${userLocation.latitude.toFixed(4)}, ${userLocation.longitude.toFixed(4)}`;\r\n+  };\r\n+\r\n+  // Search featured items\r\n+  const searchFeaturedItems = async (searchTerm) => {\r\n+    if (!searchTerm.trim()) {\r\n+      setSearchResults([]);\r\n+      setHasSearchResults(false);\r\n+      return;\r\n+    }\r\n+  \r\n+    try {\r\n+      setIsSearching(true);\r\n+      setError(null);\r\n+    \r\n+      const shopsRef = collection(db, 'shops');\r\n+      const snapshot = await getDocs(shopsRef);\r\n+      \r\n+      let allMatchingItems = [];\r\n+      const currentUserId = user?.uid;\r\n+      \r\n+      snapshot.docs.forEach(doc => {\r\n+        const shopData = doc.data();\r\n+        \r\n+        if (doc.id === currentUserId) {\r\n+          return;\r\n+        }\r\n+        \r\n+        if (shopData?.items && Array.isArray(shopData.items)) {\r\n+          shopData.items\r\n+            .filter(item => !item.deleted)\r\n+            .forEach(item => {\r\n+              const itemName = (item.name || '').toLowerCase();\r\n+              const itemDescription = (item.description || '').toLowerCase();\r\n+              const searchLower = searchTerm.toLowerCase();\r\n+              \r\n+              if (itemName.includes(searchLower) || itemDescription.includes(searchLower)) {\r\n+                allMatchingItems.push({\r\n+                  ...item,\r\n+                  shopId: doc.id,\r\n+                  shopName: shopData.name || 'Unknown Shop',\r\n+                  shopTheme: shopData.theme\r\n+                });\r\n+              }\r\n+            });\r\n+        }\r\n+      });\r\n+    \r\n+      if (userLocation) {\r\n+        allMatchingItems = allMatchingItems.map(item => {\r\n+          if (item.coordinates && item.coordinates.lat && item.coordinates.lng) {\r\n+            try {\r\n+              const distanceInMeters = getDistance(\r\n+                { latitude: userLocation.latitude, longitude: userLocation.longitude },\r\n+                { latitude: item.coordinates.lat, longitude: item.coordinates.lng }\r\n+              );\r\n+              const distanceInMiles = (distanceInMeters / 1609.34).toFixed(1);\r\n+              \r\n+              return {\r\n+                ...item,\r\n+                distance: distanceInMeters,\r\n+                distanceInMiles,\r\n+                formattedDistance: `${distanceInMiles} mi`\r\n+              };\r\n+            } catch (e) {\r\n+              console.warn('Error calculating distance for item:', e);\r\n+              return item;\r\n+            }\r\n+          }\r\n+          return item;\r\n+        });\r\n+      }\r\n+    \r\n+      setSearchResults(allMatchingItems);\r\n+      setHasSearchResults(true);\r\n+      \r\n+      if (allMatchingItems.length === 0) {\r\n+        setError(`No items found matching \"${searchTerm}\"`);\r\n+      }\r\n+    } catch (error) {\r\n+      console.error('Error searching items:', error);\r\n+      setError('Failed to search items. Please try again later.');\r\n+    } finally {\r\n+      setIsSearching(false);\r\n+    }\r\n+  };\r\n+\r\n+\r\n+  // Handle featured search\r\n+  const handleFeaturedSearch = () => {\r\n+    if (featuredSearchTerm.trim()) {\r\n+      searchFeaturedItems(featuredSearchTerm);\r\n+    }\r\n+  };\r\n+\r\n+  const handleRowScroll = (categoryName, rowNumber, scrollLeft) => {\r\n+  const row1Id = `${categoryName}-row1`;\r\n+  const row2Id = `${categoryName}-row2`;\r\n+  \r\n+  const row1Element = document.getElementById(row1Id);\r\n+  const row2Element = document.getElementById(row2Id);\r\n+  \r\n+  if (rowNumber === 1 && row2Element) {\r\n+    row2Element.scrollLeft = scrollLeft;\r\n+  } else if (rowNumber === 2 && row1Element) {\r\n+    row1Element.scrollLeft = scrollLeft;\r\n+  }\r\n+};\r\n+\r\n+  const handleClearFeaturedSearch = () => {\r\n+    setFeaturedSearchTerm('');\r\n+    setSearchResults([]);\r\n+    setHasSearchResults(false);\r\n+    setError(null);\r\n+  };\r\n+\r\n+  // Fetch nearby items\r\n+  const fetchNearbyItems = async () => {\r\n+    if (!userLocation) {\r\n+      setError('Location information is not available');\r\n+      setSearching(false);\r\n+      return;\r\n+    }\r\n+  \r\n+    try {\r\n+      setLoading(true);\r\n+      const shopsRef = collection(db, 'shops');\r\n+      const snapshot = await getDocs(shopsRef);\r\n+      \r\n+      let itemsInRadius = [];\r\n+      const currentUserId = user?.uid;\r\n+      \r\n+      snapshot.docs.forEach(doc => {\r\n+        const shopData = doc.data();\r\n+        \r\n+        if (doc.id === currentUserId) {\r\n+          return;\r\n+        }\r\n+        \r\n+        if (shopData?.items && Array.isArray(shopData.items)) {\r\n+          shopData.items\r\n+            .filter(item => !item.deleted)\r\n+            .forEach(item => {\r\n+              let itemCoords = item.coordinates;\r\n+              if (!itemCoords && item.address) {\r\n+                const coordsMatch = item.address.match(/^(-?\\d+\\.?\\d*),\\s*(-?\\d+\\.?\\d*)$/);\r\n+                if (coordsMatch) {\r\n+                  itemCoords = {\r\n+                    lat: parseFloat(coordsMatch[1]),\r\n+                    lng: parseFloat(coordsMatch[2])\r\n+                  };\r\n+                }\r\n+              }\r\n+  \r\n+              if (itemCoords?.lat && itemCoords?.lng) {\r\n+                try {\r\n+                  const distanceInMeters = getDistance(\r\n+                    { latitude: userLocation.latitude, longitude: userLocation.longitude },\r\n+                    { latitude: itemCoords.lat, longitude: itemCoords.lng }\r\n+                  );\r\n+  \r\n+                  const distanceInMiles = (distanceInMeters / 1609.34).toFixed(1);\r\n+                  \r\n+                  itemsInRadius.push({\r\n+                    ...item,\r\n+                    shopId: doc.id,\r\n+                    shopName: shopData.name || 'Unknown Shop',\r\n+                    coordinates: itemCoords,\r\n+                    distance: distanceInMeters,\r\n+                    distanceInMiles,\r\n+                    formattedDistance: `${distanceInMiles} mi`,\r\n+                    theme: shopData.theme\r\n+                  });\r\n+                } catch (e) {\r\n+                  console.warn('Error calculating distance for item:', e);\r\n+                }\r\n+              }\r\n+            });\r\n+        }\r\n+      });\r\n+  \r\n+      itemsInRadius.sort((a, b) => a.distance - b.distance);\r\n+      itemsInRadius = itemsInRadius.slice(0, 10);\r\n+  \r\n+      setNearbyItems(itemsInRadius);\r\n+      setHasSearched(true);\r\n+      \r\n+      if (itemsInRadius.length === 0) {\r\n+        setError('No items found in your area');\r\n+      }\r\n+    } catch (error) {\r\n+      console.error('Error fetching nearby items:', error);\r\n+      setError('Failed to load nearby items. Please try again later.');\r\n+    } finally {\r\n+      setLoading(false);\r\n+      setSearching(false);\r\n+    }\r\n+  };\r\n+\r\n+  // Handle live location\r\n+  const handleLiveLocation = () => {\r\n+    setSearching(true);\r\n+    setError(null);\r\n+    \r\n+    if (userLocation) {\r\n+      fetchNearbyItems();\r\n+      setHasSearched(true);\r\n+    } else {\r\n+      requestLocation();\r\n+    }\r\n+  };\r\n+\r\n+  // Handle address search\r\n+  const handleAddressSearch = async () => {\r\n+    if (!searchAddress.trim()) {\r\n+      setError('Please enter an address');\r\n+      return;\r\n+    }\r\n+  \r\n+    setSearching(true);\r\n+    setError(null);\r\n+    setHasSearched(true);\r\n+    \r\n+    try {\r\n+      const encodedAddress = encodeURIComponent(searchAddress);\r\n+      const response = await fetch(\r\n+        `https://nominatim.openstreetmap.org/search?q=${encodedAddress}&format=json&limit=1`,\r\n+        {\r\n+          headers: {\r\n+            'Accept': 'application/json',\r\n+            'User-Agent': 'KalKode Marketplace'\r\n+          }\r\n+        }\r\n+      );\r\n+      \r\n+      const data = await response.json();\r\n+  \r\n+      if (data && data[0]) {\r\n+        const coordinates = {\r\n+          latitude: parseFloat(data[0].lat),\r\n+          longitude: parseFloat(data[0].lon)\r\n+        };\r\n+        \r\n+        await fetchNearbyItems(coordinates);\r\n+      } else {\r\n+        throw new Error('Location not found. Please try a different address.');\r\n+      }\r\n+  \r\n+    } catch (error) {\r\n+      console.error('Error searching address:', error);\r\n+      setError(error.message || 'Unable to search this location. Please try again.');\r\n+    } finally {\r\n+      setSearching(false);\r\n+    }\r\n+  };\r\n+\r\n+  // Handle item click\r\n+  const handleItemClick = (item) => {\r\n+    setZoomedItem(item);\r\n+    setOrderQuantity(1);\r\n+    setCurrentImageIndex(0); // Reset image index\r\n+    \r\n+    const scrollY = window.scrollY;\r\n+    document.body.style.position = 'fixed';\r\n+    document.body.style.top = `-${scrollY}px`;\r\n+    document.body.style.width = '100%';\r\n+    document.body.style.overflow = 'hidden';\r\n+    \r\n+    document.body.setAttribute('data-scroll-y', scrollY);\r\n+  };\r\n+\r\n+  // Handle close zoom\r\n+  const handleCloseZoom = () => {\r\n+    setZoomedItem(null);\r\n+    setCurrentImageIndex(0);\r\n+    \r\n+    const scrollY = document.body.getAttribute('data-scroll-y') || '0';\r\n+    document.body.style.position = '';\r\n+    document.body.style.top = '';\r\n+    document.body.style.width = '';\r\n+    document.body.style.overflow = '';\r\n+    document.body.removeAttribute('data-scroll-y');\r\n+    \r\n+    window.scrollTo(0, parseInt(scrollY));\r\n+  };\r\n+\r\n+  // Adjust quantity\r\n+  const adjustQuantity = (delta) => {\r\n+    const maxQuantity = parseInt(zoomedItem?.quantity) || 1;\r\n+    const newQuantity = Math.max(1, Math.min(maxQuantity, orderQuantity + delta));\r\n+    setOrderQuantity(newQuantity);\r\n+  };\r\n+\r\n+  // Handle direct order\r\n+  const handleDirectOrder = async () => {\r\n+    if (!zoomedItem) return;\r\n+    \r\n+    if (!isAuthenticated) {\r\n+       navigate('/auth', { \r\n+        state: { \r\n+          mode: 'login',\r\n+          from: window.location.pathname\r\n+        }\r\n+      });\r\n+       return;\r\n+     }\r\n+    \r\n+    try {\r\n+      const result = await TransactionService.initiateQuantityTransaction(\r\n+        zoomedItem.id,\r\n+        zoomedItem.shopId,\r\n+        parseFloat(zoomedItem.price),\r\n+        orderQuantity,\r\n+        'inperson'\r\n+      );\r\n+      \r\n+      if (result.transactionId) {\r\n+        handleCloseZoom();\r\n+        navigate(`/messages?chat=${result.transactionId}`);\r\n+      }\r\n+    } catch (error) {\r\n+      console.error('Error placing order:', error);\r\n+      alert('Error placing order: ' + error.message);\r\n+    }\r\n+  };\r\n+\r\n+  // Handle order click\r\n+  const handleOrderClick = (item) => {\r\n+    setSelectedChatItem(item);\r\n+    setChatOpen(true);\r\n+    \r\n+    if (zoomedItem) {\r\n+      setZoomedItem(null);\r\n+      const scrollY = document.body.getAttribute('data-scroll-y') || '0';\r\n+      document.body.style.position = '';\r\n+      document.body.style.top = '';\r\n+      document.body.style.width = '';\r\n+      document.body.style.overflow = '';\r\n+      document.body.removeAttribute('data-scroll-y');\r\n+      window.scrollTo(0, parseInt(scrollY));\r\n+    }\r\n+  };\r\n+\r\n+  // Handle close chat\r\n+  const handleCloseChat = () => {\r\n+    setChatOpen(false);\r\n+    setSelectedChatItem(null);\r\n+    \r\n+    document.body.style.position = '';\r\n+    document.body.style.top = '';\r\n+    document.body.style.width = '';\r\n+    document.body.style.overflow = '';\r\n+    document.body.removeAttribute('data-scroll-y');\r\n+  };\r\n+\r\n+  // Handle inquire click\r\n+  const handleInquireClick = () => {\r\n+    alert('Inquiry feature coming soon!');\r\n+  };\r\n+\r\n+  // Handle logout\r\n+  const handleLogout = async () => {\r\n+    try {\r\n+      await signOut(auth);\r\n+      navigate('/');\r\n+    } catch (error) {\r\n+      console.error('Error signing out:', error);\r\n+    }\r\n+  };\r\n+\r\n+  // Handle login\r\n+  const handleLogin = () => {\r\n+    navigate('/auth', { \r\n+      state: { \r\n+        mode: 'login',\r\n+        from: window.location.pathname\r\n+      }\r\n+    });\r\n+  };\r\n+\r\n+  // Effects\r\n+  useEffect(() => {\r\n+    const fetchShopData = async () => {\r\n+      if (user && user.uid) {\r\n+        try {\r\n+          const data = await getShopData(user.uid);\r\n+          setShopData(data);\r\n+        } catch (error) {\r\n+          console.error('Error fetching shop data:', error);\r\n+        }\r\n+      }\r\n+    };\r\n+    \r\n+    if (isAuthenticated) {\r\n+      fetchShopData();\r\n+    }\r\n+  }, [user, isAuthenticated]);\r\n+\r\n+  useEffect(() => {\r\n+    if (isAuthenticated) {\r\n+      const randomIndex = Math.floor(Math.random() * MOTIVATIONAL_MESSAGES.length);\r\n+      setMotivationalMessage(MOTIVATIONAL_MESSAGES[randomIndex]);\r\n+    }\r\n+  }, [isAuthenticated]);\r\n+\r\n+  useEffect(() => {\r\n+    const pinnedStyleId = localStorage.getItem('pinnedStyleId');\r\n+    \r\n+    if (pinnedStyleId) {\r\n+      const pinnedStyle = Object.values(WELCOME_STYLES).find(\r\n+        style => style.id.toString() === pinnedStyleId\r\n+      );\r\n+      \r\n+      if (pinnedStyle) {\r\n+        setCurrentStyle(pinnedStyle);\r\n+        setIsPinned(true);\r\n+        return;\r\n+      }\r\n+    }\r\n+    \r\n+    const styles = Object.values(WELCOME_STYLES);\r\n+    const randomStyle = styles[Math.floor(Math.random() * styles.length)];\r\n+    setCurrentStyle(randomStyle);\r\n+  }, []);\r\n+\r\n+  useEffect(() => {\r\n+    if (activeTab === 'nearby' && userLocation) {\r\n+      fetchNearbyItems();\r\n+      setHasSearched(true);\r\n+    }\r\n+  }, [activeTab, userLocation]);\r\n+\r\n+  useEffect(() => {\r\n+    if (locationPermission === 'pending') {\r\n+      requestLocation();\r\n+    }\r\n+  }, []);\r\n+\r\n+  useEffect(() => {\r\n+    if (userLocation) {\r\n+      if (activeTab === 'nearby') {\r\n+        fetchNearbyItems();\r\n+        setHasSearched(true);\r\n+      }\r\n+      \r\n+      if (activeTab === 'featured') {\r\n+        loadCategorizedItems();\r\n+      }\r\n+      \r\n+      setUpdatingLocation(false);\r\n+    }\r\n+  }, [userLocation, activeTab]);\r\n+\r\n+  useEffect(() => {\r\n+  const loadTabContent = async () => {\r\n+    console.log('📑 Loading tab content...', { activeTab, effectiveLocation });\r\n+    \r\n+    try {\r\n+      setLoading(true);\r\n+      setError(null);\r\n+  \r\n+      switch (activeTab) {\r\n+        case 'featured':\r\n+          // ✅ Wait for effectiveLocation before loading items\r\n+          if (effectiveLocation) {\r\n+            console.log('📦 Loading featured items...');\r\n+            await loadCategorizedItems();\r\n+          } else {\r\n+            console.log('⏳ Waiting for location...');\r\n+            setLoading(false);\r\n+          }\r\n+          return;\r\n+        case 'nearby':\r\n+          setLoading(false);\r\n+          break;\r\n+        case 'media':\r\n+          setLoading(false);\r\n+          break;\r\n+        default:\r\n+          setLoading(false);\r\n+      }\r\n+    } catch (error) {\r\n+      console.error('Error loading content:', error);\r\n+      setError('Failed to load content. Please try again later.');\r\n+      setLoading(false);\r\n+    }\r\n+  };\r\n+\r\n+  loadTabContent();\r\n+}, [activeTab, user?.uid, effectiveLocation]); // ✅ Added effectiveLocation dependency\r\n+\r\n+  useEffect(() => {\r\n+    if (activeTab === 'featured') {\r\n+      loadCategorizedItems();\r\n+    }\r\n+    \r\n+    const refreshInterval = setInterval(() => {\r\n+      if (activeTab === 'featured') {\r\n+        loadCategorizedItems();\r\n+      }\r\n+    }, 300000);\r\n+\r\n+    return () => clearInterval(refreshInterval);\r\n+  }, [activeTab, currentPage]);\r\n+\r\n+  // Ping animation effect (disabled on mobile for performance)\r\n+  useEffect(() => {\r\n+    if (window.innerWidth < 768) return;\r\n+    \r\n+    const container = document.querySelector('.page-container');\r\n+    if (!container) return;\r\n+\r\n+    const createPing = () => {\r\n+      const ping = document.createElement('div');\r\n+      ping.className = 'ping';\r\n+      \r\n+      ping.style.left = `${Math.random() * 100}%`;\r\n+      ping.style.top = `${Math.random() * 100}%`;\r\n+      ping.style.zIndex = '0';\r\n+      \r\n+      container.appendChild(ping);\r\n+      \r\n+      setTimeout(() => {\r\n+        if (ping && ping.parentNode) {\r\n+          ping.remove();\r\n+        }\r\n+      }, 3000);\r\n+    };\r\n+\r\n+    const createPingGroup = (count) => {\r\n+      for (let i = 0; i < count; i++) {\r\n+        setTimeout(() => {\r\n+          createPing();\r\n+        }, i * 200);\r\n+      }\r\n+    };\r\n+\r\n+    const pingCounts = [10, 30, 20];\r\n+    let currentIndex = 0;\r\n+\r\n+    const interval = setInterval(() => {\r\n+      const count = pingCounts[currentIndex];\r\n+      createPingGroup(count);\r\n+      currentIndex = (currentIndex + 1) % pingCounts.length;\r\n+    }, 3000);\r\n+    \r\n+    return () => {\r\n+      clearInterval(interval);\r\n+      const pings = container.getElementsByClassName('ping');\r\n+      while (pings.length > 0) {\r\n+        pings[0].remove();\r\n+      }\r\n+    };\r\n+  }, []);\r\n+\r\n+  // Cleanup on unmount\r\n+  useEffect(() => {\r\n+    return () => {\r\n+      document.body.style.position = '';\r\n+      document.body.style.top = '';\r\n+      document.body.style.width = '';\r\n+      document.body.style.overflow = '';\r\n+      document.body.removeAttribute('data-scroll-y');\r\n+      \r\n+      if (sliderAnimationRef.current) {\r\n+        cancelAnimationFrame(sliderAnimationRef.current);\r\n+      }\r\n+    };\r\n+  }, []);\r\n+\r\n+  if (!currentStyle) return null;\r\n+\r\n+  return (\r\n+    <PageContainer className=\"page-container\" theme={currentStyle}>\r\n+      <ThemeDecorations theme={currentStyle} />\r\n+      <Header theme={currentStyle}>\r\n+        <Logo onClick={() => navigate('/')} theme={currentStyle}>\r\n+          KALKODE\r\n+        </Logo>\r\n+\r\n+        <HeaderControls>\r\n+          <HeaderButton \r\n+            onClick={refreshTheme}\r\n+            theme={currentStyle}\r\n+            title=\"Random theme\"\r\n+          >\r\n+            <RefreshCw size={20} className={isRefreshing ? \"spinning\" : \"\"} />\r\n+          </HeaderButton>\r\n+          \r\n+          <HeaderButton \r\n+            onClick={togglePinStyle} \r\n+            theme={currentStyle}\r\n+            className={isPinned ? \"pinned\" : \"\"}\r\n+            title={isPinned ? \"Unpin theme\" : \"Pin theme\"}\r\n+          >\r\n+            <Pin size={20} fill={isPinned ? currentStyle.colors.accent : \"none\"} />\r\n+          </HeaderButton>\r\n+          \r\n+          {isAuthenticated && (\r\n+            <HeaderButton \r\n+              onClick={handleLogout}\r\n+              theme={currentStyle}\r\n+              title=\"Logout\"\r\n+            >\r\n+              <LogOut size={20} />\r\n+            </HeaderButton>\r\n+          )}\r\n+        </HeaderControls>\r\n+      </Header>\r\n+\r\n+      <MainContent isAuthenticated={isAuthenticated}>\r\n+        <WelcomeSection theme={currentStyle}>\r\n+          {isAuthenticated && shopData ? (\r\n+            <>\r\n+              <ProfileSection>\r\n+                <ProfileImage theme={currentStyle}>\r\n+                  {shopData.profile ? (\r\n+                    <img src={shopData.profile} alt={shopData.name || 'Shop Profile'} />\r\n+                  ) : (\r\n+                    <div style={{ \r\n+                      width: '100%', \r\n+                      height: '100%', \r\n+                      background: currentStyle?.colors?.accent || '#800000',\r\n+                      display: 'flex',\r\n+                      alignItems: 'center',\r\n+                      justifyContent: 'center',\r\n+                      color: '#fff',\r\n+                      fontSize: '2rem'\r\n+                    }}>\r\n+                      {(shopData.name?.charAt(0) || user.email?.charAt(0) || 'S').toUpperCase()}\r\n+                    </div>\r\n+                  )}\r\n+                </ProfileImage>\r\n+                <ShopName theme={currentStyle}>{shopData.name || 'My Shop'}</ShopName>\r\n+              </ProfileSection>         \r\n+\r\n+              <MotivationalMessage theme={currentStyle}>\r\n+                {motivationalMessage}\r\n+              </MotivationalMessage>\r\n+            </>\r\n+          ) : (\r\n+            <>\r\n+              <h1>Welcome to KalKode</h1>\r\n+              <p>Trade With Your Community.</p>\r\n+\r\n+              <ActionButtonContainer>\r\n+                <ActionButton theme={currentStyle} onClick={handleOpenShop}>\r\n+                  Open Up Shop\r\n+                </ActionButton>\r\n+                <ActionButton \r\n+                  theme={currentStyle}\r\n+                  onClick={handleLogin}\r\n+                  variant=\"outline\"\r\n+                >\r\n+                  Sign In\r\n+                </ActionButton>\r\n+              </ActionButtonContainer>\r\n+            </>\r\n+          )}\r\n+\r\n+\r\n+        </WelcomeSection>\r\n+\r\n+        <TabContainer>\r\n+          <Tab \r\n+            theme={currentStyle}\r\n+            active={activeTab === 'featured'} \r\n+            onClick={() => setActiveTab('featured')}\r\n+          >\r\n+            <Package size={16} />\r\n+            Featured\r\n+          </Tab>\r\n+          <Tab\r\n+            theme={currentStyle} \r\n+            active={activeTab === 'nearby'} \r\n+            onClick={() => setActiveTab('nearby')}\r\n+          >\r\n+            <Navigation size={16} />\r\n+            Nearby\r\n+          </Tab>\r\n+          <Tab\r\n+            theme={currentStyle} \r\n+            active={activeTab === 'media'} \r\n+            onClick={() => setActiveTab('media')}\r\n+          >\r\n+            <Film size={16} />\r\n+            Media\r\n+          </Tab>\r\n+        </TabContainer>\r\n+\r\n+\r\n+        <LocationIndicator2 theme={currentStyle} isPinned={isCityPinned}>\r\n+          <button \r\n+            className=\"location-icon-btn\"\r\n+            onClick={handleLocationToCity}\r\n+            disabled={isConvertingToCity}\r\n+            title=\"Get region from current location\"\r\n+          >\r\n+            {isConvertingToCity ? (\r\n+              <div className=\"updating-spinner\" />\r\n+            ) : (\r\n+              <Navigation size={20} />\r\n+            )}\r\n+          </button>\r\n+          \r\n+          <input\r\n+            type=\"text\"\r\n+            className=\"location-input\"\r\n+            value={cityInputValue}\r\n+            onChange={(e) => setCityInputValue(e.target.value)}\r\n+            placeholder={\r\n+              isIPLocation ? \r\n+                `${effectiveLocation?.city || 'Location'} (IP-based)` : \r\n+                cityRegion ? cityRegion : \"Click location icon to share\"\r\n+            }\r\n+            readOnly\r\n+          />\r\n+\r\n+          <button\r\n+            className=\"pin-icon-btn\"\r\n+            onClick={handleToggleCityPin}\r\n+            disabled={!cityRegion || cityRegion === 'Not available' || cityRegion === 'Error'}\r\n+            title={isCityPinned ? \"Unpin location\" : \"Pin location\"}\r\n+          >\r\n+            <Pin \r\n+              size={18} \r\n+              fill={isCityPinned ? currentStyle.colors.accent : \"none\"}\r\n+            />\r\n+          </button>\r\n+        </LocationIndicator2>\r\n+\r\n+\r\n+        {/* Nearby Items Tab */}\r\n+        {activeTab === 'nearby' && (\r\n+          <>\r\n+            <SearchContainer>\r\n+              <SearchInput\r\n+                type=\"text\"\r\n+                placeholder=\"Enter address or ZIP code...\"\r\n+                value={searchAddress}\r\n+                onChange={(e) => setSearchAddress(e.target.value)}\r\n+                onKeyPress={(e) => e.key === 'Enter' && handleAddressSearch()}\r\n+              />\r\n+              <SearchButtonGroup>\r\n+                <SearchButton \r\n+                  onClick={handleAddressSearch}\r\n+                  disabled={searching || !searchAddress.trim()}\r\n+                >\r\n+                  <Navigation size={16} />\r\n+                  Search\r\n+                </SearchButton>\r\n+                <SearchButton \r\n+                  onClick={handleLiveLocation}\r\n+                  disabled={searching}\r\n+                  variant=\"live\"\r\n+                >\r\n+                  <Navigation size={16} />\r\n+                  Current\r\n+                </SearchButton>\r\n+              </SearchButtonGroup>\r\n+            </SearchContainer>\r\n+\r\n+            <GridContainer>\r\n+              {error ? (\r\n+                <EmptyGridMessage>\r\n+                  <h3>Oops!</h3>\r\n+                  <p>{error}</p>\r\n+                </EmptyGridMessage>\r\n+              ) : loading ? (\r\n+                <div style={{ textAlign: 'center', gridColumn: '1/-1' }}>\r\n+                  <LoadingSpinner />\r\n+                </div>\r\n+              ) : !hasSearched ? (\r\n+                <EmptyGridMessage>\r\n+                  <h3>Find Items Near You</h3>\r\n+                  <p>Enter your address or use current location to discover items in your area</p>\r\n+                </EmptyGridMessage>\r\n+              ) : nearbyItems.length === 0 ? (\r\n+                <EmptyGridMessage>\r\n+                  <h3>No Items Found</h3>\r\n+                  <p>No items found in this location. Try searching a different area.</p>\r\n+                </EmptyGridMessage>\r\n+              ) : (              \r\n+                nearbyItems.map(item => (\r\n+                  <FeaturedItem \r\n+                    key={`${item.shopId}-${item.id}`} \r\n+                    item={{\r\n+                      ...item,\r\n+                      location: item.formattedDistance\r\n+                    }}\r\n+                    showDistance={true}\r\n+                    theme={currentStyle}\r\n+                    onItemClick={handleItemClick}\r\n+                  />\r\n+                ))\r\n+              )}\r\n+            </GridContainer>\r\n+          </>\r\n+        )}\r\n+\r\n+        {/* Featured Items Tab */}\r\n+        {activeTab === 'featured' && (\r\n+          <>\r\n+            {/* Search container with Filter */}\r\n+            <SearchContainer>\r\n+              <SearchInput\r\n+                type=\"text\"\r\n+                placeholder=\"Search for items...\"\r\n+                value={featuredSearchTerm}\r\n+                onChange={(e) => setFeaturedSearchTerm(e.target.value)}\r\n+                onKeyPress={(e) => e.key === 'Enter' && handleFeaturedSearch()}\r\n+              />\r\n+              <SearchButtonGroup>\r\n+                <SearchButton \r\n+                  onClick={handleFeaturedSearch}\r\n+                  disabled={isSearching || !featuredSearchTerm.trim()}\r\n+                >\r\n+                  <Search size={16} />\r\n+                  Search\r\n+                </SearchButton>\r\n+                {hasSearchResults && (\r\n+                  <SearchButton onClick={handleClearFeaturedSearch} variant=\"live\">\r\n+                    <X size={16} />\r\n+                    Clear\r\n+                  </SearchButton>\r\n+                )}\r\n+\r\n+                {/* Filter Button */}\r\n+                <SortContainer className=\"sort-container\">\r\n+                  <SearchButton \r\n+                    onClick={() => setSortMenuOpen(!sortMenuOpen)}\r\n+                    style={{ position: 'relative' }}\r\n+                  >\r\n+                    <Filter size={16} />\r\n+                    {sortBy !== 'recent' && (\r\n+                      <div style={{\r\n+                        position: 'absolute',\r\n+                        top: '4px',\r\n+                        right: '4px',\r\n+                        width: '6px',\r\n+                        height: '6px',\r\n+                        borderRadius: '50%',\r\n+                        background: currentStyle?.colors?.accent || '#800000'\r\n+                      }} />\r\n+                    )}\r\n+                  </SearchButton>\r\n+                  \r\n+                  <SortDropdown theme={currentStyle} isOpen={sortMenuOpen}>\r\n+  <div style={{\r\n+    padding: '0.5rem 1rem 0.75rem',\r\n+    fontSize: '0.75rem',\r\n+    fontWeight: '700',\r\n+    textTransform: 'uppercase',\r\n+    letterSpacing: '1px',\r\n+    color: currentStyle?.colors?.accent || '#800000',\r\n+    borderBottom: `2px solid ${currentStyle?.colors?.accent || '#800000'}`,\r\n+    marginBottom: '0.75rem',\r\n+    fontFamily: currentStyle?.fonts?.heading || 'inherit'\r\n+  }}>\r\n+    Sort By\r\n+  </div>\r\n+\r\n+  <SortOption \r\n+    theme={currentStyle}\r\n+    active={sortBy === 'recent'}\r\n+    onClick={() => {\r\n+      if (!userLocation) {\r\n+        requestLocation();\r\n+        return;\r\n+      }\r\n+      setSortBy('recent');\r\n+      setSortMenuOpen(false);\r\n+      loadCategorizedItems();\r\n+    }}\r\n+  >\r\n+    <Package size={16} />\r\n+    <div style={{ display: 'flex', flexDirection: 'column', flex: 1 }}>\r\n+      <span>Most Recent</span>\r\n+      <span style={{ \r\n+        fontSize: '0.7rem', \r\n+        opacity: 0.7,\r\n+        fontWeight: '400'\r\n+      }}>\r\n+        All items, newest first\r\n+      </span>\r\n+    </div>\r\n+    {!userLocation && (\r\n+      <span style={{ \r\n+        fontSize: '0.65rem', \r\n+        opacity: 0.6,\r\n+        marginLeft: 'auto',\r\n+        fontStyle: 'italic'\r\n+      }}>\r\n+        (needs location)\r\n+      </span>\r\n+    )}\r\n+  </SortOption>\r\n+  \r\n+  <SortOption \r\n+    theme={currentStyle}\r\n+    active={sortBy === 'proximity'}\r\n+    onClick={() => {\r\n+      if (!userLocation) {\r\n+        requestLocation();\r\n+      }\r\n+      setSortBy('proximity');\r\n+      setSortMenuOpen(false);\r\n+      loadCategorizedItems();\r\n+    }}\r\n+  >\r\n+    <Navigation size={16} />\r\n+    <div style={{ display: 'flex', flexDirection: 'column', flex: 1 }}>\r\n+      <span>Closest First</span>\r\n+      <span style={{ \r\n+        fontSize: '0.7rem', \r\n+        opacity: 0.7,\r\n+        fontWeight: '400'\r\n+      }}>\r\n+        All items by distance\r\n+      </span>\r\n+    </div>\r\n+    {!userLocation && (\r\n+      <span style={{ \r\n+        fontSize: '0.65rem', \r\n+        opacity: 0.6,\r\n+        marginLeft: 'auto',\r\n+        fontStyle: 'italic'\r\n+      }}>\r\n+        (needs location)\r\n+      </span>\r\n+    )}\r\n+  </SortOption>\r\n+  \r\n+  <SortOption \r\n+    theme={currentStyle}\r\n+    active={sortBy === 'price-low'}\r\n+    onClick={() => {\r\n+      if (!userLocation) {\r\n+        requestLocation();\r\n+        return;\r\n+      }\r\n+      setSortBy('price-low');\r\n+      setSortMenuOpen(false);\r\n+      loadCategorizedItems();\r\n+    }}\r\n+  >\r\n+    <span style={{ fontSize: '1rem', fontWeight: '600' }}>$</span>\r\n+    <div style={{ display: 'flex', flexDirection: 'column', flex: 1 }}>\r\n+      <span>Price: Low to High</span>\r\n+      <span style={{ \r\n+        fontSize: '0.7rem', \r\n+        opacity: 0.7,\r\n+        fontWeight: '400'\r\n+      }}>\r\n+        All items by price\r\n+      </span>\r\n+    </div>\r\n+    {!userLocation && (\r\n+      <span style={{ \r\n+        fontSize: '0.65rem', \r\n+        opacity: 0.6,\r\n+        marginLeft: 'auto',\r\n+        fontStyle: 'italic'\r\n+      }}>\r\n+        (needs location)\r\n+      </span>\r\n+    )}\r\n+  </SortOption>\r\n+  \r\n+  <SortOption \r\n+    theme={currentStyle}\r\n+    active={sortBy === 'price-high'}\r\n+    onClick={() => {\r\n+      if (!userLocation) {\r\n+        requestLocation();\r\n+        return;\r\n+      }\r\n+      setSortBy('price-high');\r\n+      setSortMenuOpen(false);\r\n+      loadCategorizedItems();\r\n+    }}\r\n+  >\r\n+    <span style={{ fontSize: '1rem', fontWeight: '600' }}>$$$</span>\r\n+    <div style={{ display: 'flex', flexDirection: 'column', flex: 1 }}>\r\n+      <span>Price: High to Low</span>\r\n+      <span style={{ \r\n+        fontSize: '0.7rem', \r\n+        opacity: 0.7,\r\n+        fontWeight: '400'\r\n+      }}>\r\n+        All items by price\r\n+      </span>\r\n+    </div>\r\n+    {!userLocation && (\r\n+      <span style={{ \r\n+        fontSize: '0.65rem', \r\n+        opacity: 0.6,\r\n+        marginLeft: 'auto',\r\n+        fontStyle: 'italic'\r\n+      }}>\r\n+        (needs location)\r\n+      </span>\r\n+    )}\r\n+  </SortOption>\r\n+</SortDropdown>\r\n+                </SortContainer>\r\n+              </SearchButtonGroup>\r\n+            </SearchContainer>\r\n+\r\n+            {/* Show search results or default categorized view */}\r\n+            {hasSearchResults ? (\r\n+              <div>\r\n+                <CategoryHeader theme={currentStyle}>\r\n+                  <h2>Search Results ({searchResults.length})</h2>\r\n+                </CategoryHeader>\r\n+\r\n+                {error ? (\r\n+                  <EmptyGridMessage>\r\n+                    <h3>No Results Found</h3>\r\n+                    <p>{error}</p>\r\n+                  </EmptyGridMessage>\r\n+                ) : isSearching ? (\r\n+                  <div style={{ textAlign: 'center', padding: '2rem' }}>\r\n+                    <LoadingSpinner />\r\n+                  </div>\r\n+                ) : searchResults.length === 0 ? (\r\n+                  <EmptyGridMessage>\r\n+                    <h3>No Items Found</h3>\r\n+                    <p>No items match your search criteria.</p>\r\n+                  </EmptyGridMessage>\r\n+                ) : (\r\n+                  <GridContainer>\r\n+                    {searchResults.map(item => (\r\n+                      <FeaturedItem \r\n+                        key={`search-${item.shopId}-${item.id}`} \r\n+                        item={item}\r\n+                        theme={currentStyle}\r\n+                        onItemClick={handleItemClick}\r\n+                        showDistance={true}\r\n+                      />\r\n+                    ))}\r\n+                  </GridContainer>\r\n+                )}\r\n+              </div>\r\n+            ) : (\r\n+              <div>\r\n+                {/* Featured Items Slider */}\r\n+                <CategoryHeader theme={currentStyle}>\r\n+                  <h2>Featured Items</h2>\r\n+                  <span className=\"view-all\">\r\n+                    {featuredItems.length} items\r\n+                  </span>\r\n+                </CategoryHeader>\r\n+\r\n+                <CategoryGridWrapper>\r\n+                {/* Desktop: Show all items in grid */}\r\n+                <div className=\"desktop-grid\" style={{ display: 'contents' }}>\r\n+                  {featuredItems.map(item => (\r\n+                    <div key={`featured-${item.shopId}-${item.id}`} className=\"desktop-only\" \r\n+                         style={{ display: window.innerWidth > 768 ? 'block' : 'none' }}>\r\n+                      <FeaturedItem\r\n+                        item={item}\r\n+                        theme={currentStyle}\r\n+                        onItemClick={handleItemClick}\r\n+                        showDistance={true}\r\n+                      />\r\n+                    </div>\r\n+                  ))}\r\n+                </div>\r\n+                \r\n+                {/* Mobile: Show all 10 items in a 2-row scrollable grid */}\r\n+                <CategoryScrollableGrid theme={currentStyle} className=\"mobile-only\">\r\n+                  {featuredItems.map(item => (\r\n+                    <FeaturedItem\r\n+                      key={`featured-mobile-${item.shopId}-${item.id}`}\r\n+                      item={item}\r\n+                      theme={currentStyle}\r\n+                      onItemClick={handleItemClick}\r\n+                      showDistance={true}\r\n+                    />\r\n+                  ))}\r\n+                </CategoryScrollableGrid>\r\n+              </CategoryGridWrapper>\r\n+                \r\n+              {Object.entries(categories).map(([categoryName, items]) => {\r\n+          if (items.length === 0) return null;\r\n+                      \r\n+          return (\r\n+            <div key={categoryName} style={{ marginTop: '3rem' }}>\r\n+              <CategoryHeader theme={currentStyle}>\r\n+                <h2>{categoryName}</h2>\r\n+                <span className=\"view-all\">\r\n+                  {items.length} items\r\n+                </span>\r\n+              </CategoryHeader>\r\n+          \r\n+              <CategoryGridWrapper>\r\n+                {/* Desktop: Show all items in grid */}\r\n+                <div className=\"desktop-grid\" style={{ display: 'contents' }}>\r\n+                  {items.map(item => (\r\n+                    <div key={`${categoryName}-${item.shopId}-${item.id}`} className=\"desktop-only\"\r\n+                         style={{ display: window.innerWidth > 768 ? 'block' : 'none' }}>\r\n+                      <FeaturedItem\r\n+                        item={item}\r\n+                        theme={currentStyle}\r\n+                        onItemClick={handleItemClick}\r\n+                        showDistance={true}\r\n+                      />\r\n+                    </div>\r\n+                  ))}\r\n+                </div>\r\n+                \r\n+                {/* Mobile: Show all items in a scrollable grid (1 or 2 rows based on count) */}\r\n+                <CategoryScrollableGrid theme={currentStyle} className=\"mobile-only\" itemCount={items.length}>\r\n+                  {items.map(item => (\r\n+                    <FeaturedItem\r\n+                      key={`${categoryName}-mobile-${item.shopId}-${item.id}`}\r\n+                      item={item}\r\n+                      theme={currentStyle}\r\n+                      onItemClick={handleItemClick}\r\n+                      showDistance={true}\r\n+                    />\r\n+                  ))}\r\n+                </CategoryScrollableGrid>\r\n+              </CategoryGridWrapper>\r\n+            </div>\r\n+          );\r\n+        })}\r\n+              </div>\r\n+            )}\r\n+          </>\r\n+        )}\r\n+\r\n+        {/* Media Tab */}\r\n+        {activeTab === 'media' && (\r\n+          <EmptyGridMessage>\r\n+            <h3>Featured Media</h3>\r\n+            <p>Coming soon! Discover videos and content from local creators.</p>\r\n+          </EmptyGridMessage>\r\n+        )}\r\n+      </MainContent>\r\n+\r\n+      {/* Style Indicator Only */}\r\n+      <StyleIndicator theme={currentStyle}>\r\n+        <span className=\"style-number\">{currentStyle.id}</span>\r\n+        <span>{currentStyle.name}</span>\r\n+      </StyleIndicator>\r\n+\r\n+      {/* Zoomed Item View - Updated to match ShopPublicView */}\r\n+      {/* Zoomed Item View - 75/25 Split */}\r\n+      {/* Zoomed Item View - 70/30 Split with 2:5 Card */}\r\n+      {zoomedItem && (\r\n+        <ZoomOverlay onClick={handleCloseZoom} theme={currentStyle}>\r\n+          <ZoomContainer \r\n+            theme={currentStyle}\r\n+            onClick={(e) => e.stopPropagation()}\r\n+          >\r\n+            {/* 70% - Image Carousel */}\r\n+            <ImageCarousel \r\n+              theme={currentStyle} \r\n+              currentIndex={currentImageIndex}\r\n+            >\r\n+              {/* Close button */}\r\n+              <button \r\n+                className=\"close-overlay-button\"\r\n+                onClick={handleCloseZoom}\r\n+                aria-label=\"Close\"\r\n+              >\r\n+                <X size={20} />\r\n+              </button>\r\n+            \r\n+              <div className=\"image-track\">\r\n+                {zoomedItem.images && zoomedItem.images.filter(Boolean).length > 0 ? (\r\n+                  zoomedItem.images.filter(Boolean).map((image, index) => (\r\n+                    <div key={index} className=\"image-slide\">\r\n+                      <img src={image} alt={`${zoomedItem.name} ${index + 1}`} />\r\n+                    </div>\r\n+                  ))\r\n+                ) : (\r\n+                  <div className=\"image-slide\">\r\n+                    <div className=\"no-image\">\r\n+                      <Package size={40} />\r\n+                      <p>No image</p>\r\n+                    </div>\r\n+                  </div>\r\n+                )}\r\n+              </div>\r\n+              \r\n+              {/* Navigation */}\r\n+              {zoomedItem.images && zoomedItem.images.filter(Boolean).length > 1 && (\r\n+                <>\r\n+                  <button \r\n+                    className=\"carousel-button prev\"\r\n+                    onClick={() => setCurrentImageIndex(prev => \r\n+                      prev === 0 ? zoomedItem.images.filter(Boolean).length - 1 : prev - 1\r\n+                    )}\r\n+                    aria-label=\"Previous\"\r\n+                  >\r\n+                    <ChevronLeft size={20} />\r\n+                  </button>\r\n+                  <button \r\n+                    className=\"carousel-button next\"\r\n+                    onClick={() => setCurrentImageIndex(prev => \r\n+                      prev === zoomedItem.images.filter(Boolean).length - 1 ? 0 : prev + 1\r\n+                    )}\r\n+                    aria-label=\"Next\"\r\n+                  >\r\n+                    <ChevronRight size={20} />\r\n+                  </button>\r\n+                  \r\n+                  <div className=\"carousel-dots\">\r\n+                    {zoomedItem.images.filter(Boolean).map((_, index) => (\r\n+                      <button\r\n+                        key={index}\r\n+                        className=\"dot\"\r\n+                        style={{ opacity: index === currentImageIndex ? 1 : 0.3 }}\r\n+                        onClick={() => setCurrentImageIndex(index)}\r\n+                        aria-label={`Image ${index + 1}`}\r\n+                      />\r\n+                    ))}\r\n+                  </div>\r\n+                </>\r\n+              )}\r\n+            </ImageCarousel>\r\n+            \r\n+            {/* 30% - Compact Details */}\r\n+            <ZoomContent theme={currentStyle}>\r\n+              {/* Name & Price Row */}\r\n+              <div style={{ \r\n+                display: 'flex', \r\n+                justifyContent: 'space-between', \r\n+                alignItems: 'baseline',\r\n+                gap: '0.75rem'\r\n+              }}>\r\n+                <h3 style={{\r\n+                  fontSize: '1.1rem',\r\n+                  margin: 0,\r\n+                  fontWeight: '600',\r\n+                  color: currentStyle?.colors?.text || '#FFFFFF',\r\n+                  flex: 1,\r\n+                  overflow: 'hidden',\r\n+                  textOverflow: 'ellipsis',\r\n+                  whiteSpace: 'nowrap'\r\n+                }}>\r\n+                  {zoomedItem.name}\r\n+                </h3>\r\n+                \r\n+                <div style={{\r\n+                  fontSize: '1.2rem',\r\n+                  fontWeight: 'bold',\r\n+                  color: currentStyle?.colors?.accent || '#800000',\r\n+                  whiteSpace: 'nowrap'\r\n+                }}>\r\n+                  ${parseFloat(zoomedItem.price || 0).toFixed(2)}\r\n+                </div>\r\n+              </div>\r\n+              \r\n+              {/* Info Row: Distance • Shop • Stock */}\r\n+              <div style={{\r\n+                display: 'flex',\r\n+                alignItems: 'center',\r\n+                gap: '0.75rem',\r\n+                fontSize: '0.75rem',\r\n+                flexWrap: 'wrap',\r\n+                color: currentStyle?.colors?.text || '#FFFFFF',\r\n+                opacity: 0.8\r\n+              }}>\r\n+                {zoomedItem.formattedDistance && (\r\n+                  <>\r\n+                    <div style={{ display: 'flex', alignItems: 'center', gap: '0.25rem' }}>\r\n+                      <Navigation size={11} />\r\n+                      <span>{zoomedItem.formattedDistance}</span>\r\n+                    </div>\r\n+                    <span>•</span>\r\n+                  </>\r\n+                )}\r\n+                \r\n+                {zoomedItem.shopName && (\r\n+                  <>\r\n+                    <div \r\n+                      style={{ \r\n+                        display: 'flex', \r\n+                        alignItems: 'center', \r\n+                        gap: '0.25rem',\r\n+                        cursor: 'pointer',\r\n+                        textDecoration: 'underline'\r\n+                      }}\r\n+                      onClick={(e) => {\r\n+                        e.stopPropagation();\r\n+                        navigate(`/shop/${zoomedItem.shopId}/view`);\r\n+                      }}\r\n+                    >\r\n+                      <Store size={11} />\r\n+                      <span>{zoomedItem.shopName}</span>\r\n+                    </div>\r\n+                    <span>•</span>\r\n+                  </>\r\n+                )}\r\n+                \r\n+                {zoomedItem.quantity !== undefined && (\r\n+                  <div style={{ display: 'flex', alignItems: 'center', gap: '0.25rem' }}>\r\n+                    <div style={{\r\n+                      width: '5px',\r\n+                      height: '5px',\r\n+                      borderRadius: '50%',\r\n+                      background: parseInt(zoomedItem.quantity) > 0 ? '#4CAF50' : '#FF5252'\r\n+                    }} />\r\n+                    <span style={{\r\n+                      color: parseInt(zoomedItem.quantity) > 0 ? '#4CAF50' : '#FF5252',\r\n+                      fontWeight: '500'\r\n+                    }}>\r\n+                      {parseInt(zoomedItem.quantity) > 0 ? \r\n+                        `${zoomedItem.quantity} in stock` : \r\n+                        'Out of stock'\r\n+                      }\r\n+                    </span>\r\n+                  </div>\r\n+                )}\r\n+              </div>\r\n+              \r\n+              {/* Quantity Selector */}\r\n+              <div style={{\r\n+                display: 'flex',\r\n+                alignItems: 'center',\r\n+                justifyContent: 'space-between',\r\n+                background: `${currentStyle?.colors?.surface || 'rgba(255, 255, 255, 0.05)'}20`,\r\n+                borderRadius: '6px',\r\n+                padding: '0.5rem 0.75rem'\r\n+              }}>\r\n+                <span style={{\r\n+                  fontSize: '0.8rem',\r\n+                  fontWeight: '600',\r\n+                  color: currentStyle?.colors?.text || '#FFFFFF'\r\n+                }}>\r\n+                  Qty\r\n+                </span>\r\n+                \r\n+                <div style={{ display: 'flex', alignItems: 'center', gap: '0.75rem' }}>\r\n+                  <button \r\n+                    onClick={() => adjustQuantity(-1)}\r\n+                    disabled={orderQuantity <= 1}\r\n+                    style={{\r\n+                      width: '24px',\r\n+                      height: '24px',\r\n+                      borderRadius: '50%',\r\n+                      border: `1.5px solid ${currentStyle?.colors?.accent || '#800000'}`,\r\n+                      background: 'transparent',\r\n+                      color: currentStyle?.colors?.accent || '#800000',\r\n+                      display: 'flex',\r\n+                      alignItems: 'center',\r\n+                      justifyContent: 'center',\r\n+                      cursor: orderQuantity <= 1 ? 'not-allowed' : 'pointer',\r\n+                      opacity: orderQuantity <= 1 ? 0.3 : 1\r\n+                    }}\r\n+                  >\r\n+                    <Minus size={12} />\r\n+                  </button>\r\n+                  \r\n+                  <div style={{\r\n+                    fontSize: '1rem',\r\n+                    fontWeight: 'bold',\r\n+                    color: currentStyle?.colors?.text || 'white',\r\n+                    minWidth: '24px',\r\n+                    textAlign: 'center'\r\n+                  }}>\r\n+                    {orderQuantity}\r\n+                  </div>\r\n+                \r\n+                  <button \r\n+                    onClick={() => adjustQuantity(1)}\r\n+                    disabled={orderQuantity >= parseInt(zoomedItem.quantity || 1)}\r\n+                    style={{\r\n+                      width: '24px',\r\n+                      height: '24px',\r\n+                      borderRadius: '50%',\r\n+                      border: `1.5px solid ${currentStyle?.colors?.accent || '#800000'}`,\r\n+                      background: 'transparent',\r\n+                      color: currentStyle?.colors?.accent || '#800000',\r\n+                      display: 'flex',\r\n+                      alignItems: 'center',\r\n+                      justifyContent: 'center',\r\n+                      cursor: orderQuantity >= parseInt(zoomedItem.quantity || 1) ? 'not-allowed' : 'pointer',\r\n+                      opacity: orderQuantity >= parseInt(zoomedItem.quantity || 1) ? 0.3 : 1\r\n+                    }}\r\n+                  >\r\n+                    <Plus size={12} />\r\n+                  </button>\r\n+                </div>\r\n+              </div>\r\n+                  \r\n+              {/* Order Button */}\r\n+              <button \r\n+                onClick={handleDirectOrder}\r\n+                disabled={parseInt(zoomedItem.quantity || 0) < 1 || orderQuantity > parseInt(zoomedItem.quantity || 0)}\r\n+                style={{\r\n+                  width: '100%',\r\n+                  padding: '0.75rem',\r\n+                  borderRadius: '8px',\r\n+                  border: 'none',\r\n+                  background: parseInt(zoomedItem.quantity || 0) < 1 ? \r\n+                    `${currentStyle?.colors?.accent || '#800000'}40` : \r\n+                    currentStyle?.colors?.accent || '#800000',\r\n+                  color: 'white',\r\n+                  fontSize: '0.9rem',\r\n+                  fontWeight: '600',\r\n+                  display: 'flex',\r\n+                  alignItems: 'center',\r\n+                  justifyContent: 'center',\r\n+                  gap: '0.5rem',\r\n+                  cursor: parseInt(zoomedItem.quantity || 0) < 1 ? 'not-allowed' : 'pointer',\r\n+                  transition: 'all 0.3s'\r\n+                }}\r\n+              >\r\n+                {parseInt(zoomedItem.quantity || 0) < 1 ? (\r\n+                  <>\r\n+                    <X size={16} />\r\n+                    Out of Stock\r\n+                  </>\r\n+                ) : (\r\n+                  <>\r\n+                    <ShoppingCart size={16} />\r\n+                    Order {orderQuantity > 1 && `${orderQuantity} `}· ${(parseFloat(zoomedItem.price || 0) * orderQuantity).toFixed(2)}\r\n+                  </>\r\n+                )}\r\n+              </button>\r\n+            </ZoomContent>\r\n+          </ZoomContainer>\r\n+        </ZoomOverlay>\r\n+      )}\r\n+\r\n+      {/* Chat Overlay */}\r\n+      <ChatOverlay isOpen={chatOpen} onClick={handleCloseChat} />\r\n+      \r\n+      {selectedChatItem && (\r\n+        <OrderChat \r\n+          isOpen={chatOpen} \r\n+          onClose={handleCloseChat} \r\n+          item={selectedChatItem}\r\n+          shopId={selectedChatItem.shopId}\r\n+          shopName={selectedChatItem.shopName}\r\n+          theme={currentStyle}\r\n+        />\r\n+      )}\r\n+    </PageContainer>\r\n+  );\r\n+};\r\n+\r\n+export default WelcomePage;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1759889938108,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,3687 @@\n+// src/pages/WelcomePage.js - Mobile-Optimized Version\r\n+import React from 'react';\r\n+import styled from 'styled-components';\r\n+import { useNavigate } from 'react-router-dom';\r\n+import { useEffect, useState, useRef } from 'react';\r\n+import { getFeaturedItems } from '../firebase/firebaseService';\r\n+import FeaturedItem from '../components/shop/FeaturedItem';\r\n+import { Search, Package, Navigation, Film, Filter, Store, Plus, Minus, Pin, ChevronLeft, ChevronRight, X, MessageCircle, ShoppingCart, RefreshCw, LogOut } from 'lucide-react';\r\n+import { getDistance } from 'geolib';\r\n+import OrderChat from '../components/Chat/OrderChat';\r\n+import { collection, getDocs } from 'firebase/firestore';\r\n+import { db, auth } from '../firebase/config';\r\n+import { WELCOME_STYLES } from '../theme/welcomeStyles';\r\n+import { getShopData } from '../firebase/firebaseService';\r\n+import { useAuth } from '../contexts/AuthContext';\r\n+import { useLocation } from '../contexts/LocationContext';\r\n+import LocationDialog from '../components/LocationDialog';\r\n+import ThemeDecorations from '../components/ThemeDecorations';\r\n+import { TransactionService } from '../services/TransactionService';\r\n+import { signOut } from 'firebase/auth';\r\n+\r\n+const getIPBasedLocation = async () => {\r\n+  try {\r\n+    console.log('🌐 Fetching IP-based location from ipapi.co...');\r\n+    const response = await fetch('https://ipapi.co/json/');\r\n+    \r\n+    if (!response.ok) {\r\n+      throw new Error(`HTTP error! status: ${response.status}`);\r\n+    }\r\n+    \r\n+    const data = await response.json();\r\n+    console.log('✅ IP Location data:', data);\r\n+    \r\n+    if (!data.latitude || !data.longitude) {\r\n+      throw new Error('Invalid location data received');\r\n+    }\r\n+    \r\n+    return {\r\n+      latitude: data.latitude,\r\n+      longitude: data.longitude,\r\n+      city: data.city,\r\n+      region: data.region,\r\n+      country: data.country_name,\r\n+      isIPBased: true\r\n+    };\r\n+  } catch (error) {\r\n+    console.error('❌ Error getting IP location:', error);\r\n+    \r\n+    // Fallback to a default location (Houston, TX)\r\n+    console.log('⚠️ Using fallback location: Houston, TX');\r\n+    return {\r\n+      latitude: 29.7604,\r\n+      longitude: -95.3698,\r\n+      city: 'Houston',\r\n+      region: 'Texas',\r\n+      country: 'United States',\r\n+      isIPBased: true,\r\n+      isFallback: true\r\n+    };\r\n+  }\r\n+};\r\n+\r\n+// Mobile-first styled components\r\n+const PageContainer = styled.div.attrs({ className: 'page-container' })`\r\n+  min-height: 100vh;\r\n+  background: ${props => props.theme?.colors?.background || '#000000'};\r\n+  color: ${props => props.theme?.colors?.text || '#FFFFFF'};\r\n+  position: relative;\r\n+  overflow: hidden;\r\n+  \r\n+  /* Mobile-optimized background effects */\r\n+  &::before {\r\n+    content: '';\r\n+    position: absolute;\r\n+    width: 100%;\r\n+    height: 100%;\r\n+    background: ${props => props.theme?.colors?.backgroundGradient || 'radial-gradient(circle at 20% 30%, rgba(128, 0, 0, 0.2) 0%, transparent 50%)'};\r\n+    opacity: 0.8;\r\n+    animation: ${props => props.theme?.animations?.backgroundAnimation || 'galaxySwirl 30s linear infinite'};\r\n+  }\r\n+\r\n+  /* Simplified stars for mobile performance */\r\n+  &::after {\r\n+    content: '';\r\n+    position: absolute;\r\n+    width: 100%;\r\n+    height: 100%;\r\n+    background-image: radial-gradient(circle 1px, ${props => props.theme?.colors?.text || '#FFF'} 1px, transparent 1px);\r\n+    background-size: 100px 100px;\r\n+    opacity: 0.05;\r\n+    \r\n+    @media (min-width: 768px) {\r\n+      background-size: 200px 200px;\r\n+      opacity: 0.1;\r\n+    }\r\n+  }\r\n+\r\n+  /* Reduced ping animations on mobile for performance */\r\n+  .ping {\r\n+    display: none;\r\n+    \r\n+    @media (min-width: 768px) {\r\n+      display: block;\r\n+      position: absolute;\r\n+      width: 2px;\r\n+      height: 2px;\r\n+      border-radius: 50%;\r\n+      background: ${props => props.theme?.colors?.accent || '#800000'};\r\n+      pointer-events: none;\r\n+      z-index: 0;\r\n+    }\r\n+  }\r\n+\r\n+  @keyframes galaxySwirl {\r\n+    0% { transform: rotate(0deg); }\r\n+    100% { transform: rotate(360deg); }\r\n+  }\r\n+`;\r\n+\r\n+// Simplified header with just logo and right-side controls\r\n+const Header = styled.header`\r\n+  width: 100%;\r\n+  height: 60px;\r\n+  padding: 0 1rem;\r\n+  display: flex;\r\n+  align-items: center;\r\n+  justify-content: space-between;\r\n+  background: ${props => `${props.theme?.colors?.headerBg || 'rgba(0, 0, 0, 0.9)'}F5`};\r\n+  backdrop-filter: blur(10px);\r\n+  border-bottom: 1px solid ${props => `${props.theme?.colors?.accent}4D` || 'rgba(128, 0, 0, 0.3)'};\r\n+  position: fixed;\r\n+  top: 0;\r\n+  z-index: 100;\r\n+\r\n+  @media (min-width: 768px) {\r\n+    height: 80px;\r\n+    padding: 0 2rem;\r\n+  }\r\n+`;\r\n+\r\n+const Logo = styled.div`\r\n+  color: ${props => props.theme?.colors?.accent || '#800000'};\r\n+  font-family: ${props => props.theme?.fonts?.heading || \"'Impact', sans-serif\"};\r\n+  font-size: 1.4rem;\r\n+  letter-spacing: 1px;\r\n+  transform: skew(-5deg);\r\n+  cursor: pointer;\r\n+  flex-shrink: 0;\r\n+\r\n+  @media (min-width: 768px) {\r\n+    font-size: 2rem;\r\n+    letter-spacing: 2px;\r\n+  }\r\n+`;\r\n+\r\n+const LocationIndicator2 = styled.div`\r\n+  display: flex;\r\n+  align-items: center;\r\n+  justify-content: center;\r\n+  gap: 0.75rem;\r\n+  background: ${props => `${props.theme?.colors?.surface || 'rgba(0, 0, 0, 0.4)'}CC`};\r\n+  backdrop-filter: blur(10px);\r\n+  padding: 0.75rem 1.5rem;\r\n+  border-radius: 25px;\r\n+  border: 1px solid ${props => `${props.theme?.colors?.accent}40` || 'rgba(128, 0, 0, 0.4)'};\r\n+  margin: 1.5rem auto;\r\n+  max-width: 500px;\r\n+  width: 90%;\r\n+  transition: all 0.3s ease;\r\n+  position: relative;\r\n+  \r\n+  @media (max-width: 768px) {\r\n+    width: 95%;\r\n+    padding: 0.6rem 1rem;\r\n+    gap: 0.5rem;\r\n+  }\r\n+  \r\n+  .location-icon-btn {\r\n+    background: transparent;\r\n+    border: none;\r\n+    color: ${props => props.theme?.colors?.accent || '#800000'};\r\n+    cursor: pointer;\r\n+    display: flex;\r\n+    align-items: center;\r\n+    justify-content: center;\r\n+    padding: 0.25rem;\r\n+    border-radius: 50%;\r\n+    transition: all 0.2s ease;\r\n+    flex-shrink: 0;\r\n+    \r\n+    &:hover {\r\n+      background: ${props => `${props.theme?.colors?.accent}20` || 'rgba(128, 0, 0, 0.2)'};\r\n+    }\r\n+    \r\n+    &:active {\r\n+      transform: scale(0.9);\r\n+    }\r\n+    \r\n+    &:disabled {\r\n+      opacity: 0.5;\r\n+      cursor: not-allowed;\r\n+    }\r\n+    \r\n+    svg {\r\n+      width: 20px;\r\n+      height: 20px;\r\n+      \r\n+      @media (max-width: 768px) {\r\n+        width: 18px;\r\n+        height: 18px;\r\n+      }\r\n+    }\r\n+  }\r\n+  \r\n+  .location-input {\r\n+    flex: 1;\r\n+    background: transparent;\r\n+    border: none;\r\n+    color: ${props => props.theme?.colors?.text || '#FFFFFF'};\r\n+    font-size: 0.95rem;\r\n+    outline: none;\r\n+    text-align: center;\r\n+    cursor: default;\r\n+    min-width: 0; /* Allow text to shrink */\r\n+    \r\n+    &::placeholder {\r\n+      color: ${props => `${props.theme?.colors?.text}50` || 'rgba(255, 255, 255, 0.5)'};\r\n+      font-style: italic;\r\n+    }\r\n+    \r\n+    @media (max-width: 768px) {\r\n+      font-size: 0.85rem;\r\n+    }\r\n+  }\r\n+  \r\n+  .updating-spinner {\r\n+    width: 16px;\r\n+    height: 16px;\r\n+    border: 2px solid ${props => `${props.theme?.colors?.accent}30` || 'rgba(128, 0, 0, 0.3)'};\r\n+    border-radius: 50%;\r\n+    border-top-color: ${props => props.theme?.colors?.accent || '#800000'};\r\n+    animation: spin 1s linear infinite;\r\n+  }\r\n+  \r\n+  .pin-icon-btn {\r\n+    background: transparent;\r\n+    border: none;\r\n+    color: ${props => props.theme?.colors?.accent || '#800000'};\r\n+    cursor: pointer;\r\n+    display: flex;\r\n+    align-items: center;\r\n+    justify-content: center;\r\n+    padding: 0.25rem;\r\n+    border-radius: 50%;\r\n+    transition: all 0.2s ease;\r\n+    opacity: ${props => props.isPinned ? 1 : 0.5};\r\n+    flex-shrink: 0;\r\n+    \r\n+    &:hover:not(:disabled) {\r\n+      background: ${props => `${props.theme?.colors?.accent}20` || 'rgba(128, 0, 0, 0.2)'};\r\n+      opacity: 1;\r\n+    }\r\n+    \r\n+    &:active:not(:disabled) {\r\n+      transform: scale(0.9);\r\n+    }\r\n+    \r\n+    &:disabled {\r\n+      opacity: 0.3;\r\n+      cursor: not-allowed;\r\n+    }\r\n+    \r\n+    svg {\r\n+      width: 18px;\r\n+      height: 18px;\r\n+      \r\n+      @media (max-width: 768px) {\r\n+        width: 16px;\r\n+        height: 16px;\r\n+      }\r\n+    }\r\n+  }\r\n+  \r\n+  @keyframes spin {\r\n+    to {\r\n+      transform: rotate(360deg);\r\n+    }\r\n+  }\r\n+`;\r\n+\r\n+const HeaderControls = styled.div`\r\n+  display: flex;\r\n+  align-items: center;\r\n+  gap: 0.75rem;\r\n+`;\r\n+\r\n+const HeaderButton = styled.button`\r\n+  background: transparent;\r\n+  border: none;\r\n+  color: ${props => props.theme?.colors?.accent || '#800000'};\r\n+  padding: 0.5rem;\r\n+  cursor: pointer;\r\n+  display: flex;\r\n+  align-items: center;\r\n+  justify-content: center;\r\n+  border-radius: 50%;\r\n+  transition: all 0.3s ease;\r\n+  opacity: 0.8;\r\n+  \r\n+  &:active {\r\n+    transform: scale(0.9);\r\n+    opacity: 1;\r\n+  }\r\n+  \r\n+  @media (hover: hover) {\r\n+    &:hover {\r\n+      opacity: 1;\r\n+      background: ${props => `${props.theme?.colors?.accent}10` || 'rgba(128, 0, 0, 0.1)'};\r\n+    }\r\n+  }\r\n+  \r\n+  &.pinned {\r\n+    color: ${props => props.theme?.colors?.accent || '#800000'};\r\n+    opacity: 1;\r\n+  }\r\n+  \r\n+  svg {\r\n+    width: 20px;\r\n+    height: 20px;\r\n+    \r\n+    @media (min-width: 768px) {\r\n+      width: 22px;\r\n+      height: 22px;\r\n+    }\r\n+  }\r\n+`;\r\n+\r\n+// Improved mobile main content with better spacing\r\n+const MainContent = styled.main`\r\n+  max-width: 1200px;\r\n+  margin: 0 auto;\r\n+  padding: 80px 1rem 100px 1rem;\r\n+  position: relative;\r\n+  z-index: 1;\r\n+  \r\n+  @media (min-width: 768px) {\r\n+    padding: 6rem 2rem 2rem 2rem;\r\n+  }\r\n+`;\r\n+\r\n+// Mobile-optimized welcome section\r\n+const WelcomeSection = styled.section`\r\n+  text-align: center;\r\n+  margin: 2rem 0;\r\n+  position: relative;\r\n+\r\n+  h1 {\r\n+    font-family: ${props => props.theme?.fonts?.heading || \"'Impact', sans-serif\"};\r\n+    font-size: 2.5rem;\r\n+    margin-bottom: 1rem;\r\n+    background: ${props => props.theme?.colors?.accentGradient || 'linear-gradient(45deg, #800000, #4A0404)'};\r\n+    -webkit-background-clip: text;\r\n+    -webkit-text-fill-color: transparent;\r\n+    letter-spacing: 1px;\r\n+    line-height: 1.2;\r\n+    \r\n+    @media (min-width: 768px) {\r\n+      font-size: 4.5rem;\r\n+      letter-spacing: 2px;\r\n+    }\r\n+  }\r\n+\r\n+  p {\r\n+    font-size: 1rem;\r\n+    line-height: 1.5;\r\n+    max-width: 600px;\r\n+    margin: 0 auto;\r\n+    color: ${props => `${props.theme?.colors?.text}CC` || 'rgba(255, 255, 255, 0.8)'};\r\n+    padding: 0 1rem;\r\n+    \r\n+    @media (min-width: 768px) {\r\n+      font-size: 1.2rem;\r\n+      line-height: 1.6;\r\n+      max-width: 800px;\r\n+    }\r\n+  }\r\n+`;\r\n+\r\n+// Completely redesigned ZoomOverlay - Responsive to zoom level\r\n+const ZoomOverlay = styled.div`\r\n+  position: fixed;\r\n+  top: 0;\r\n+  left: 0;\r\n+  right: 0;\r\n+  bottom: 0;\r\n+  background: ${props => `${props.theme?.colors?.background || 'rgba(0, 0, 0, 0.95)'}F5`};\r\n+  z-index: 10000;\r\n+  backdrop-filter: blur(10px);\r\n+  display: flex;\r\n+  align-items: center;\r\n+  justify-content: center;\r\n+  padding: 2rem;\r\n+  overflow: hidden;\r\n+  \r\n+  @media (max-width: 768px) {\r\n+    padding: 1rem;\r\n+  }\r\n+  \r\n+  @media (max-width: 480px) {\r\n+    padding: 0.5rem;\r\n+  }\r\n+`;\r\n+\r\n+// Redesigned ZoomContainer - 2:5 aspect ratio card, centered with ample space\r\n+const ZoomContainer = styled.div`\r\n+  position: relative;\r\n+  width: 100%;\r\n+  max-width: 500px;\r\n+  aspect-ratio: 2 / 5;\r\n+  max-height: 85vh;\r\n+  background: ${props => props.theme?.colors?.background || '#000000'};\r\n+  border-radius: 16px;\r\n+  overflow: hidden;\r\n+  border: 2px solid ${props => props.theme?.colors?.accent || '#800000'};\r\n+  box-shadow: 0 20px 60px rgba(0, 0, 0, 0.8);\r\n+  display: flex;\r\n+  flex-direction: column;\r\n+  \r\n+  @media (max-width: 768px) {\r\n+    max-width: 420px;\r\n+    border-radius: 12px;\r\n+  }\r\n+  \r\n+  @media (max-width: 480px) {\r\n+    max-width: 95%;\r\n+    border-radius: 10px;\r\n+  }\r\n+`;\r\n+\r\n+// Image section - 70% of card height\r\n+const ImageCarousel = styled.div`\r\n+  position: relative;\r\n+  width: 100%;\r\n+  height: 70%;\r\n+  background: ${props => `${props.theme?.colors?.background || '#000000'}80`};\r\n+  overflow: hidden;\r\n+  flex-shrink: 0;\r\n+  \r\n+  .image-track {\r\n+    display: flex;\r\n+    height: 100%;\r\n+    transition: transform 0.3s ease;\r\n+    transform: translateX(${props => props.currentIndex * -100}%);\r\n+  }\r\n+  \r\n+  .image-slide {\r\n+    min-width: 100%;\r\n+    height: 100%;\r\n+    display: flex;\r\n+    align-items: center;\r\n+    justify-content: center;\r\n+    \r\n+    img {\r\n+      width: 100%;\r\n+      height: 100%;\r\n+      object-fit: cover;\r\n+      background: ${props => `${props.theme?.colors?.background || '#000000'}40`};\r\n+    }\r\n+    \r\n+    .no-image {\r\n+      display: flex;\r\n+      flex-direction: column;\r\n+      align-items: center;\r\n+      gap: 0.75rem;\r\n+      color: ${props => props.theme?.colors?.text || '#FFFFFF'};\r\n+      opacity: 0.3;\r\n+      \r\n+      p {\r\n+        margin: 0;\r\n+        font-size: 0.85rem;\r\n+      }\r\n+    }\r\n+  }\r\n+  \r\n+  .carousel-dots {\r\n+    position: absolute;\r\n+    bottom: 1rem;\r\n+    left: 50%;\r\n+    transform: translateX(-50%);\r\n+    display: flex;\r\n+    gap: 0.4rem;\r\n+    z-index: 2;\r\n+    padding: 0.4rem 0.75rem;\r\n+    background: ${props => `${props.theme?.colors?.background || 'rgba(0, 0, 0, 0.6)'}CC`};\r\n+    border-radius: 20px;\r\n+    backdrop-filter: blur(8px);\r\n+  }\r\n+  \r\n+  .dot {\r\n+    width: 6px;\r\n+    height: 6px;\r\n+    border-radius: 50%;\r\n+    background: ${props => props.theme?.colors?.text || '#FFFFFF'};\r\n+    border: none;\r\n+    padding: 0;\r\n+    cursor: pointer;\r\n+    transition: all 0.2s ease;\r\n+    \r\n+    &:hover {\r\n+      transform: scale(1.2);\r\n+    }\r\n+  }\r\n+  \r\n+  .carousel-button {\r\n+    position: absolute;\r\n+    top: 50%;\r\n+    transform: translateY(-50%);\r\n+    background: ${props => `${props.theme?.colors?.background || 'rgba(0, 0, 0, 0.7)'}DD`};\r\n+    border: 1px solid ${props => `${props.theme?.colors?.accent}40` || 'rgba(255, 255, 255, 0.2)'};\r\n+    border-radius: 50%;\r\n+    width: 40px;\r\n+    height: 40px;\r\n+    display: flex;\r\n+    align-items: center;\r\n+    justify-content: center;\r\n+    color: ${props => props.theme?.colors?.text || 'white'};\r\n+    cursor: pointer;\r\n+    opacity: 0;\r\n+    transition: all 0.3s ease;\r\n+    z-index: 2;\r\n+    \r\n+    &:hover {\r\n+      opacity: 1 !important;\r\n+      background: ${props => props.theme?.colors?.accent || '#800000'};\r\n+      transform: translateY(-50%) scale(1.1);\r\n+    }\r\n+    \r\n+    &.prev {\r\n+      left: 1rem;\r\n+    }\r\n+    \r\n+    &.next {\r\n+      right: 1rem;\r\n+    }\r\n+    \r\n+    &:disabled {\r\n+      opacity: 0 !important;\r\n+      cursor: not-allowed;\r\n+    }\r\n+    \r\n+    @media (max-width: 480px) {\r\n+      width: 32px;\r\n+      height: 32px;\r\n+      \r\n+      &.prev {\r\n+        left: 0.5rem;\r\n+      }\r\n+      \r\n+      &.next {\r\n+        right: 0.5rem;\r\n+      }\r\n+      \r\n+      svg {\r\n+        width: 16px;\r\n+        height: 16px;\r\n+      }\r\n+    }\r\n+  }\r\n+  \r\n+  &:hover .carousel-button {\r\n+    opacity: 0.7;\r\n+  }\r\n+  \r\n+  .close-overlay-button {\r\n+    position: absolute;\r\n+    top: 1rem;\r\n+    right: 1rem;\r\n+    background: ${props => `${props.theme?.colors?.background || 'rgba(0, 0, 0, 0.8)'}DD`};\r\n+    border: 1px solid ${props => `${props.theme?.colors?.accent}60` || 'rgba(255, 255, 255, 0.3)'};\r\n+    border-radius: 50%;\r\n+    width: 40px;\r\n+    height: 40px;\r\n+    display: flex;\r\n+    align-items: center;\r\n+    justify-content: center;\r\n+    color: white;\r\n+    cursor: pointer;\r\n+    transition: all 0.2s ease;\r\n+    backdrop-filter: blur(8px);\r\n+    z-index: 3;\r\n+    opacity: 0.8;\r\n+    \r\n+    &:hover {\r\n+      opacity: 1;\r\n+      background: ${props => props.theme?.colors?.accent || '#800000'};\r\n+      border-color: ${props => props.theme?.colors?.accent || '#800000'};\r\n+      transform: scale(1.1);\r\n+    }\r\n+    \r\n+    &:active {\r\n+      transform: scale(0.95);\r\n+    }\r\n+    \r\n+    @media (max-width: 480px) {\r\n+      width: 32px;\r\n+      height: 32px;\r\n+      top: 0.75rem;\r\n+      right: 0.75rem;\r\n+      \r\n+      svg {\r\n+        width: 16px;\r\n+        height: 16px;\r\n+      }\r\n+    }\r\n+  }\r\n+`;\r\n+\r\n+// Details section - 30% of card height\r\n+const ZoomContent = styled.div`\r\n+  height: 30%;\r\n+  overflow-y: auto;\r\n+  overflow-x: hidden;\r\n+  padding: 1rem;\r\n+  -webkit-overflow-scrolling: touch;\r\n+  display: flex;\r\n+  flex-direction: column;\r\n+  gap: 0.75rem;\r\n+  background: ${props => props.theme?.colors?.background || '#000000'};\r\n+  \r\n+  /* Custom scrollbar */\r\n+  &::-webkit-scrollbar {\r\n+    width: 4px;\r\n+  }\r\n+  \r\n+  &::-webkit-scrollbar-track {\r\n+    background: transparent;\r\n+  }\r\n+  \r\n+  &::-webkit-scrollbar-thumb {\r\n+    background: ${props => `${props.theme?.colors?.accent || '#800000'}60`};\r\n+    border-radius: 2px;\r\n+    \r\n+    &:hover {\r\n+      background: ${props => props.theme?.colors?.accent || '#800000'};\r\n+    }\r\n+  }\r\n+  \r\n+  @media (max-width: 480px) {\r\n+    padding: 0.875rem;\r\n+    gap: 0.625rem;\r\n+  }\r\n+`;\r\n+\r\n+\r\n+// Update ZoomHeader - Remove it entirely or hide it\r\n+const ZoomHeader = styled.div`\r\n+  display: none; // Hide the header completely\r\n+`;\r\n+\r\n+// Mobile-optimized profile section\r\n+const ProfileSection = styled.div`\r\n+  display: flex;\r\n+  flex-direction: column;\r\n+  align-items: center;\r\n+  margin-bottom: 1.5rem;\r\n+`;\r\n+\r\n+const ProfileImage = styled.div`\r\n+  width: 120px;\r\n+  height: 120px;\r\n+  border-radius: 50%;\r\n+  overflow: hidden;\r\n+  margin-bottom: 1rem;\r\n+  border: 4px solid ${props => props.theme?.colors?.accent || '#800000'};\r\n+  box-shadow: 0 0 20px ${props => `${props.theme?.colors?.accent}40` || 'rgba(128, 0, 0, 0.25)'};\r\n+  \r\n+  @media (min-width: 768px) {\r\n+    width: 200px;\r\n+    height: 189px;\r\n+    border: 6px solid ${props => props.theme?.colors?.accent || '#800000'};\r\n+  }\r\n+  \r\n+  img {\r\n+    width: 100%;\r\n+    height: 100%;\r\n+    object-fit: cover;\r\n+  }\r\n+`;\r\n+\r\n+// Add to styled components section in WelcomePage.js\r\n+const LocationIndicator = styled.div`\r\n+  position: fixed;\r\n+  top: 90px;\r\n+  left: 2rem;\r\n+  display: flex;\r\n+  align-items: center;\r\n+  background: rgba(0, 0, 0, 0.7);\r\n+  padding: 0.5rem 1rem;\r\n+  border-radius: 20px;\r\n+  border: 1px solid ${props => `${props.theme?.colors?.accent}30` || 'rgba(128, 0, 0, 0.3)'};\r\n+  backdrop-filter: blur(4px);\r\n+  color: ${props => props.theme?.colors?.text || '#FFFFFF'};\r\n+  font-size: 0.9rem;\r\n+  z-index: 10;\r\n+  cursor: pointer;\r\n+  transition: all 0.3s ease;\r\n+  max-width: 300px;\r\n+  \r\n+  /* Hide on mobile, show only on desktop for debugging */\r\n+  @media (max-width: 768px) {\r\n+  width: auto;\r\n+    padding: 1rem 2.5rem;\r\n+    font-size: 1rem;\r\n+  } \r\n+  \r\n+  &:hover {\r\n+    background: rgba(0, 0, 0, 0.8);\r\n+    transform: translateY(-2px);\r\n+  }\r\n+  \r\n+  .location-icon {\r\n+    color: ${props => props.theme?.colors?.accent || '#800000'};\r\n+    margin-right: 0.75rem;\r\n+  }\r\n+  \r\n+  .location-text {\r\n+    white-space: nowrap;\r\n+    overflow: hidden;\r\n+    text-overflow: ellipsis;\r\n+  }\r\n+  \r\n+  .updating {\r\n+    margin-left: 0.5rem;\r\n+    width: 16px;\r\n+    height: 16px;\r\n+    border: 2px solid rgba(128, 0, 0, 0.2);\r\n+    border-radius: 50%;\r\n+    border-top-color: ${props => props.theme?.colors?.accent || '#800000'};\r\n+    animation: spin 1s linear infinite;\r\n+  }\r\n+`;\r\n+\r\n+const ShopName = styled.h2`\r\n+  font-family: ${props => props.theme?.fonts?.heading || \"'Impact', sans-serif\"};\r\n+  font-size: 2.5rem;\r\n+  background: ${props => props.theme?.colors?.accentGradient || 'linear-gradient(45deg, #800000, #4A0404)'};\r\n+  -webkit-background-clip: text;\r\n+  -webkit-text-fill-color: transparent;\r\n+  margin: 0 0 0.5rem 0;\r\n+  line-height: 1.2;\r\n+  \r\n+  @media (min-width: 768px) {\r\n+    font-size: 5.4rem;\r\n+    margin: 0 0 1rem 0;\r\n+  }\r\n+`;\r\n+\r\n+// Mobile-friendly action buttons\r\n+const ActionButtonContainer = styled.div`\r\n+  display: flex;\r\n+  flex-direction: column;\r\n+  gap: 1rem;\r\n+  width: 100%;\r\n+  max-width: 300px;\r\n+  margin: 2rem auto;\r\n+  \r\n+  @media (min-width: 480px) {\r\n+    flex-direction: row;\r\n+    justify-content: center;\r\n+    max-width: none;\r\n+  }\r\n+`;\r\n+\r\n+const ActionButton = styled.button`\r\n+  background: ${props => props.variant === 'outline' ? 'transparent' : \r\n+    props.theme?.colors?.accentGradient || 'linear-gradient(45deg, #800000, #4A0404)'};\r\n+  border: ${props => props.variant === 'outline' ? \r\n+    `2px solid ${props.theme?.colors?.accent || '#800000'}` : 'none'};\r\n+  padding: 1rem 1.5rem;\r\n+  border-radius: 30px;\r\n+  color: ${props => props.variant === 'outline' ? \r\n+    props.theme?.colors?.accent || '#800000' : 'white'};\r\n+  font-weight: bold;\r\n+  cursor: pointer;\r\n+  transition: all 0.3s;\r\n+  text-transform: uppercase;\r\n+  letter-spacing: 1px;\r\n+  font-size: 0.9rem;\r\n+  width: 100%;\r\n+  \r\n+  @media (min-width: 480px) {\r\n+    width: auto;\r\n+    padding: 1rem 2.5rem;\r\n+    font-size: 1rem;\r\n+  }\r\n+\r\n+  &:active {\r\n+    transform: scale(0.98);\r\n+  }\r\n+\r\n+  @media (hover: hover) {\r\n+    &:hover {\r\n+      transform: translateY(-2px);\r\n+      box-shadow: 0 5px 15px ${props => `${props.theme?.colors?.accent}4D` || 'rgba(128, 0, 0, 0.3)'};\r\n+    }\r\n+  }\r\n+`;\r\n+\r\n+// Mobile-optimized tab container with horizontal scroll\r\n+const TabContainer = styled.div`\r\n+  display: flex;\r\n+  gap: 0.5rem;\r\n+  margin: 2rem 0;\r\n+  overflow-x: auto;\r\n+  padding: 0.5rem 0;\r\n+  -webkit-overflow-scrolling: touch;\r\n+  \r\n+  &::-webkit-scrollbar {\r\n+    height: 4px;\r\n+  }\r\n+  \r\n+  &::-webkit-scrollbar-track {\r\n+    background: transparent;\r\n+  }\r\n+  \r\n+  &::-webkit-scrollbar-thumb {\r\n+    background: ${props => props.theme?.colors?.accent || '#800000'};\r\n+    border-radius: 2px;\r\n+  }\r\n+  \r\n+  @media (min-width: 768px) {\r\n+    justify-content: center;\r\n+    gap: 1rem;\r\n+    overflow-x: visible;\r\n+  }\r\n+`;\r\n+\r\n+const Tab = styled.button`\r\n+  background: ${props => props.active ? \r\n+    props.theme?.colors?.tabActiveBg || 'rgba(128, 0, 0, 0.2)' : 'transparent'};\r\n+  border: 1px solid ${props => props.active ? \r\n+    props.theme?.colors?.tabBorder || '#800000' : \r\n+    `${props.theme?.colors?.accent}4D` || 'rgba(128, 0, 0, 0.3)'};\r\n+  color: ${props => props.active ? \r\n+    props.theme?.colors?.text || '#FFFFFF' : \r\n+    `${props.theme?.colors?.text}99` || 'rgba(255, 255, 255, 0.6)'};\r\n+  padding: 0.6rem 1rem;\r\n+  border-radius: 20px;\r\n+  cursor: pointer;\r\n+  transition: all 0.3s;\r\n+  text-transform: uppercase;\r\n+  letter-spacing: 0.5px;\r\n+  font-weight: 500;\r\n+  font-size: 0.8rem;\r\n+  white-space: nowrap;\r\n+  display: flex;\r\n+  align-items: center;\r\n+  gap: 0.3rem;\r\n+  flex-shrink: 0;\r\n+  \r\n+  @media (min-width: 768px) {\r\n+    padding: 0.8rem 1.5rem;\r\n+    font-size: 0.9rem;\r\n+    letter-spacing: 1px;\r\n+    gap: 0.5rem;\r\n+  }\r\n+\r\n+  &:active {\r\n+    transform: scale(0.98);\r\n+  }\r\n+\r\n+  svg {\r\n+    width: 14px;\r\n+    height: 14px;\r\n+    \r\n+    @media (min-width: 768px) {\r\n+      width: 16px;\r\n+      height: 16px;\r\n+    }\r\n+  }\r\n+`;\r\n+\r\n+// Mobile-optimized grid with better touch targets\r\n+const GridContainer = styled.div`\r\n+  display: grid;\r\n+  grid-template-columns: repeat(2, 1fr);\r\n+  gap: 0.75rem;\r\n+  margin-top: 1.5rem;\r\n+  padding: 0 0.25rem;\r\n+  \r\n+  @media (min-width: 480px) {\r\n+    gap: 1rem;\r\n+    padding: 0;\r\n+  }\r\n+  \r\n+  @media (min-width: 768px) {\r\n+    grid-template-columns: repeat(auto-fill, minmax(220px, 1fr));\r\n+    gap: 1.5rem;\r\n+  }\r\n+  \r\n+  @media (min-width: 1024px) {\r\n+    grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));\r\n+    gap: 2rem;\r\n+  }\r\n+`;\r\n+\r\n+// Mobile search with better UX\r\n+const SearchContainer = styled.div`\r\n+  display: flex;\r\n+  flex-direction: column;\r\n+  gap: 0.75rem;\r\n+  width: 100%;\r\n+  padding: 0 0.5rem;\r\n+  \r\n+  @media (min-width: 600px) {\r\n+    flex-direction: row;\r\n+    align-items: center;\r\n+    max-width: 800px;\r\n+    margin: 0 auto;\r\n+    padding: 0;\r\n+  }\r\n+`;\r\n+\r\n+const SearchInput = styled.input`\r\n+  width: 100%;\r\n+  background: rgba(255, 255, 255, 0.05);\r\n+  border: 1px solid rgba(128, 0, 0, 0.2);\r\n+  border-radius: 25px;\r\n+  padding: 0.8rem 1rem;\r\n+  color: white;\r\n+  font-size: 1rem;\r\n+  -webkit-appearance: none;\r\n+  \r\n+  &:focus {\r\n+    outline: none;\r\n+    border-color: rgba(128, 0, 0, 0.4);\r\n+    background: rgba(255, 255, 255, 0.08);\r\n+  }\r\n+\r\n+  &::placeholder {\r\n+    color: rgba(255, 255, 255, 0.4);\r\n+  }\r\n+  \r\n+  @media (min-width: 600px) {\r\n+    flex: 1;\r\n+  }\r\n+`;\r\n+\r\n+const SearchButtonGroup = styled.div`\r\n+  display: flex;\r\n+  gap: 0.5rem;\r\n+  width: 100%;\r\n+  \r\n+  @media (min-width: 600px) {\r\n+    width: auto;\r\n+  }\r\n+`;\r\n+\r\n+const SearchButton = styled.button`\r\n+  flex: 1;\r\n+  background: ${props => props.variant === 'live' ? 'transparent' : 'rgba(128, 0, 0, 0.2)'};\r\n+  border: 1px solid rgba(128, 0, 0, 0.3);\r\n+  padding: 0.8rem 1rem;\r\n+  border-radius: 25px;\r\n+  color: white;\r\n+  font-size: 0.9rem;\r\n+  display: flex;\r\n+  align-items: center;\r\n+  justify-content: center;\r\n+  gap: 0.4rem;\r\n+  cursor: pointer;\r\n+  transition: all 0.2s ease;\r\n+  white-space: nowrap;\r\n+  -webkit-tap-highlight-color: transparent;\r\n+  \r\n+  @media (min-width: 600px) {\r\n+    flex: unset;\r\n+    padding: 0.8rem 1.2rem;\r\n+  }\r\n+\r\n+  &:active {\r\n+    transform: scale(0.98);\r\n+    background: rgba(128, 0, 0, 0.3);\r\n+  }\r\n+\r\n+  &:disabled {\r\n+    opacity: 0.5;\r\n+    cursor: not-allowed;\r\n+  }\r\n+\r\n+  svg {\r\n+    width: 16px;\r\n+    height: 16px;\r\n+  }\r\n+`;\r\n+\r\n+// Mobile-friendly slider with native scroll\r\n+const SliderContainer = styled.div`\r\n+  width: 100%;\r\n+  overflow-x: auto;\r\n+  overflow-y: hidden;\r\n+  position: relative;\r\n+  margin: 1.5rem 0;\r\n+  -webkit-overflow-scrolling: touch;\r\n+  scroll-snap-type: x mandatory;\r\n+  scroll-behavior: smooth;\r\n+  \r\n+  &::-webkit-scrollbar {\r\n+    height: 4px;\r\n+  }\r\n+  \r\n+  &::-webkit-scrollbar-track {\r\n+    background: ${props => `${props.theme?.colors?.background || '#000000'}80`};\r\n+    border-radius: 10px;\r\n+  }\r\n+  \r\n+  &::-webkit-scrollbar-thumb {\r\n+    background: ${props => props.theme?.colors?.accent || '#800000'};\r\n+    border-radius: 10px;\r\n+  }\r\n+  \r\n+  /* Hide scroll buttons on mobile */\r\n+  .scroll-button {\r\n+    display: none;\r\n+    \r\n+    @media (min-width: 768px) {\r\n+      display: flex;\r\n+    }\r\n+  }\r\n+`;\r\n+\r\n+const Slider = styled.div`\r\n+  display: flex;\r\n+  width: fit-content;\r\n+  padding: 0.5rem 0;\r\n+`;\r\n+\r\n+const SlideItem = styled.div`\r\n+  flex: 0 0 160px;\r\n+  margin-right: 0.75rem;\r\n+  scroll-snap-align: start;\r\n+  \r\n+  @media (min-width: 480px) {\r\n+    flex: 0 0 200px;\r\n+    margin-right: 1rem;\r\n+  }\r\n+  \r\n+  @media (min-width: 768px) {\r\n+    flex: 0 0 250px;\r\n+    margin-right: 1.5rem;\r\n+  }\r\n+  \r\n+  @media (min-width: 1024px) {\r\n+    flex: 0 0 300px;\r\n+    margin-right: 2rem;\r\n+  }\r\n+`;\r\n+\r\n+// Add styles for better item display\r\n+const ItemDetailsSection = styled.div`\r\n+  margin-bottom: 1.5rem;\r\n+`;\r\n+\r\n+const ItemHeader = styled.div`\r\n+  margin-bottom: 1.5rem;\r\n+  \r\n+  h3 {\r\n+    font-size: 1.5rem;\r\n+    margin: 0 0 0.5rem 0;\r\n+    font-family: ${props => props.theme?.fonts?.heading || 'inherit'};\r\n+    color: ${props => props.theme?.colors?.text || '#FFFFFF'};\r\n+    \r\n+    @media (min-width: 768px) {\r\n+      font-size: 1.8rem;\r\n+    }\r\n+  }\r\n+\r\n+  .price {\r\n+    font-size: 1.3rem;\r\n+    font-weight: bold;\r\n+    color: ${props => props.theme?.colors?.accent || '#800000'};\r\n+    margin-bottom: 1rem;\r\n+    \r\n+    @media (min-width: 768px) {\r\n+      font-size: 1.5rem;\r\n+    }\r\n+  }\r\n+`;\r\n+\r\n+const CategoryBadge = styled.div`\r\n+  display: inline-block;\r\n+  background: ${props => `${props.theme?.colors?.accent || '#800000'}20`};\r\n+  color: ${props => props.theme?.colors?.accent || '#800000'};\r\n+  padding: 0.25rem 0.75rem;\r\n+  border-radius: 12px;\r\n+  font-size: 0.75rem;\r\n+  font-weight: 500;\r\n+  text-transform: uppercase;\r\n+  letter-spacing: 0.5px;\r\n+  margin-bottom: 1rem;\r\n+`;\r\n+\r\n+const StockStatus = styled.div`\r\n+  display: flex;\r\n+  align-items: center;\r\n+  gap: 0.5rem;\r\n+  margin-bottom: 1rem;\r\n+  font-size: 0.9rem;\r\n+  \r\n+  .stock-indicator {\r\n+    width: 8px;\r\n+    height: 8px;\r\n+    border-radius: 50%;\r\n+    background: ${props => props.inStock ? '#4CAF50' : '#FF5252'};\r\n+  }\r\n+  \r\n+  .stock-text {\r\n+    color: ${props => props.inStock ? '#4CAF50' : '#FF5252'};\r\n+    font-weight: 500;\r\n+  }\r\n+`;\r\n+\r\n+const ItemDescription = styled.div`\r\n+  font-size: 0.95rem;\r\n+  opacity: 0.9;\r\n+  margin-bottom: 1.5rem;\r\n+  line-height: 1.6;\r\n+  color: ${props => props.theme?.colors?.text || '#FFFFFF'};\r\n+`;\r\n+\r\n+const ItemLocation = styled.div`\r\n+  display: flex;\r\n+  align-items: center;\r\n+  gap: 0.5rem;\r\n+  font-size: 0.9rem;\r\n+  opacity: 0.8;\r\n+  margin-bottom: 1.5rem;\r\n+  color: ${props => props.theme?.colors?.text || '#FFFFFF'};\r\n+`;\r\n+\r\n+const ShopInfo = styled.div`\r\n+  padding: 0.75rem;\r\n+  background: ${props => `${props.theme?.colors?.surface || 'rgba(255, 255, 255, 0.05)'}50`};\r\n+  border-radius: 8px;\r\n+  margin-bottom: 1.5rem;\r\n+  font-size: 0.9rem;\r\n+  color: ${props => props.theme?.colors?.text || '#FFFFFF'};\r\n+  \r\n+  strong {\r\n+    color: ${props => props.theme?.colors?.accent || '#800000'};\r\n+  }\r\n+`;\r\n+\r\n+// Update ActionButtons to only show Order button\r\n+const ActionButtons = styled.div`\r\n+  display: flex;\r\n+  gap: 0.75rem;\r\n+  margin-top: 1.5rem;\r\n+  \r\n+  button {\r\n+    flex: 1;\r\n+    padding: 0.75rem;\r\n+    border: none;\r\n+    border-radius: 8px;\r\n+    font-weight: bold;\r\n+    cursor: pointer;\r\n+    transition: all 0.3s;\r\n+    display: flex;\r\n+    align-items: center;\r\n+    justify-content: center;\r\n+    gap: 0.5rem;\r\n+    font-size: 0.9rem;\r\n+    \r\n+    @media (min-width: 768px) {\r\n+      padding: 1rem;\r\n+      font-size: 1rem;\r\n+    }\r\n+    \r\n+    &.order {\r\n+      background: ${props => props.theme?.colors?.accent || '#800000'};\r\n+      color: white;\r\n+      \r\n+      &:hover:not(:disabled) {\r\n+        background: ${props => props.theme?.colors?.primary || '#4A0404'};\r\n+        transform: translateY(-2px);\r\n+      }\r\n+      \r\n+      &:disabled {\r\n+        opacity: 0.5;\r\n+        cursor: not-allowed;\r\n+        transform: none;\r\n+      }\r\n+    }\r\n+    \r\n+    svg {\r\n+      width: 16px;\r\n+      height: 16px;\r\n+    }\r\n+  }\r\n+`;\r\n+\r\n+// Mobile-friendly floating controls - removed since they're now in header\r\n+const StyleIndicator = styled.div`\r\n+  position: fixed;\r\n+  bottom: 1rem;\r\n+  right: 1rem;\r\n+  background: ${props => `${props.theme?.colors?.background || '#000000'}E5`};\r\n+  backdrop-filter: blur(10px);\r\n+  color: white;\r\n+  padding: 0.5rem 1rem;\r\n+  border-radius: 20px;\r\n+  font-size: 0.8rem;\r\n+  display: flex;\r\n+  align-items: center;\r\n+  gap: 0.5rem;\r\n+  border: 1px solid ${props => `${props.theme?.colors?.accent}40` || 'rgba(128, 0, 0, 0.4)'};\r\n+  z-index: 90;\r\n+  \r\n+  @media (min-width: 768px) {\r\n+    font-size: 0.9rem;\r\n+  }\r\n+  \r\n+  .style-number {\r\n+    font-weight: bold;\r\n+    font-size: 1rem;\r\n+    color: ${props => props.theme?.colors?.accent || '#800000'};\r\n+    \r\n+    @media (min-width: 768px) {\r\n+      font-size: 1.2rem;\r\n+    }\r\n+  }\r\n+`;\r\n+\r\n+// Quantity selector optimized for mobile\r\n+const QuantitySelector = styled.div`\r\n+  display: flex;\r\n+  align-items: center;\r\n+  justify-content: space-between;\r\n+  background: ${props => `${props.theme?.colors?.surface || 'rgba(255, 255, 255, 0.05)'}50`};\r\n+  border-radius: 12px;\r\n+  padding: 1rem;\r\n+  margin: 1rem 0;\r\n+  \r\n+  .quantity-label {\r\n+    font-weight: bold;\r\n+    color: ${props => props.theme?.colors?.text || '#FFFFFF'};\r\n+    font-size: 0.9rem;\r\n+  }\r\n+  \r\n+  .quantity-controls {\r\n+    display: flex;\r\n+    align-items: center;\r\n+    gap: 1rem;\r\n+    \r\n+    .quantity-btn {\r\n+      width: 40px;\r\n+      height: 40px;\r\n+      border-radius: 50%;\r\n+      border: 2px solid ${props => props.theme?.colors?.accent || '#800000'};\r\n+      background: transparent;\r\n+      color: ${props => props.theme?.colors?.accent || '#800000'};\r\n+      display: flex;\r\n+      align-items: center;\r\n+      justify-content: center;\r\n+      cursor: pointer;\r\n+      transition: all 0.3s;\r\n+      -webkit-tap-highlight-color: transparent;\r\n+      \r\n+      &:active:not(:disabled) {\r\n+        transform: scale(0.9);\r\n+        background: ${props => props.theme?.colors?.accent || '#800000'};\r\n+        color: white;\r\n+      }\r\n+      \r\n+      &:disabled {\r\n+        opacity: 0.3;\r\n+        cursor: not-allowed;\r\n+      }\r\n+      \r\n+      svg {\r\n+        width: 18px;\r\n+        height: 18px;\r\n+      }\r\n+    }\r\n+    \r\n+    .quantity-display {\r\n+      font-size: 1.3rem;\r\n+      font-weight: bold;\r\n+      color: ${props => props.theme?.colors?.text || 'white'};\r\n+      min-width: 40px;\r\n+      text-align: center;\r\n+    }\r\n+  }\r\n+`;\r\n+\r\n+// Other styled components remain the same but with mobile optimizations...\r\n+const LoadingSpinner = styled.div`\r\n+  width: 40px;\r\n+  height: 40px;\r\n+  margin: 2rem auto;\r\n+  border: 3px solid rgba(128, 0, 0, 0.1);\r\n+  border-radius: 50%;\r\n+  border-top-color: #800000;\r\n+  animation: spin 1s linear infinite;\r\n+\r\n+  @keyframes spin {\r\n+    to {\r\n+      transform: rotate(360deg);\r\n+    }\r\n+  }\r\n+`;\r\n+\r\n+const EmptyGridMessage = styled.div`\r\n+  text-align: center;\r\n+  padding: 2rem 1rem;\r\n+  background: rgba(0, 0, 0, 0.2);\r\n+  border-radius: 12px;\r\n+  border: 1px solid rgba(128, 0, 0, 0.1);\r\n+  color: rgba(255, 255, 255, 0.7);\r\n+  grid-column: 1/-1;\r\n+\r\n+  h3 {\r\n+    font-size: 1.1rem;\r\n+    margin-bottom: 0.5rem;\r\n+    color: rgba(255, 255, 255, 0.9);\r\n+  }\r\n+\r\n+  p {\r\n+    font-size: 0.9rem;\r\n+    line-height: 1.5;\r\n+  }\r\n+`;\r\n+\r\n+const MotivationalMessage = styled.p`\r\n+  font-size: 1.1rem;\r\n+  line-height: 1.5;\r\n+  max-width: 600px;\r\n+  margin: 2rem auto 0;\r\n+  color: ${props => props.theme?.colors?.text || '#FFFFFF'};\r\n+  font-weight: 400;\r\n+  text-align: center;\r\n+  padding: 1rem 1.5rem;\r\n+  letter-spacing: 0.3px;\r\n+  position: relative;\r\n+  \r\n+  @media (min-width: 768px) {\r\n+    font-size: 1.4rem;\r\n+    line-height: 1.6;\r\n+    max-width: 800px;\r\n+    margin: 3rem auto 0;\r\n+    padding: 1.5rem 2rem;\r\n+    letter-spacing: 0.5px;\r\n+  }\r\n+  \r\n+  &::before, &::after {\r\n+    content: '\"';\r\n+    font-family: ${props => props.theme?.fonts?.heading || \"'Georgia', serif\"};\r\n+    font-size: 2rem;\r\n+    position: absolute;\r\n+    opacity: 0.2;\r\n+    color: ${props => props.theme?.colors?.accent || '#800000'};\r\n+    \r\n+    @media (min-width: 768px) {\r\n+      font-size: 3rem;\r\n+    }\r\n+  }\r\n+  \r\n+  &::before {\r\n+    top: -0.5rem;\r\n+    left: 0.5rem;\r\n+    \r\n+    @media (min-width: 768px) {\r\n+      top: -1.5rem;\r\n+      left: -1rem;\r\n+    }\r\n+  }\r\n+  \r\n+  &::after {\r\n+    bottom: -1.5rem;\r\n+    right: 0.5rem;\r\n+    \r\n+    @media (min-width: 768px) {\r\n+      bottom: -2.5rem;\r\n+      right: -1rem;\r\n+    }\r\n+  }\r\n+`;\r\n+\r\n+// 1. Replace the CategoryGrid styled component with these two new components:\r\n+\r\n+const CategoryGridWrapper = styled.div`\r\n+  margin-bottom: 2rem;\r\n+  \r\n+  /* Desktop: Regular grid */\r\n+  @media (min-width: 769px) {\r\n+    display: grid;\r\n+    grid-template-columns: repeat(5, 1fr);\r\n+    gap: 1rem;\r\n+  }\r\n+  \r\n+  @media (max-width: 1200px) and (min-width: 769px) {\r\n+    grid-template-columns: repeat(4, 1fr);\r\n+  }\r\n+  \r\n+  @media (max-width: 900px) and (min-width: 769px) {\r\n+    grid-template-columns: repeat(3, 1fr);\r\n+  }\r\n+  \r\n+  /* Mobile: Scrollable rows */\r\n+  @media (max-width: 768px) {\r\n+    display: flex;\r\n+    flex-direction: column;\r\n+    gap: 1rem;\r\n+  }\r\n+`;\r\n+\r\n+// Replace the CategoryScrollableGrid styled component with this corrected version:\r\n+\r\n+const CategoryScrollableGrid = styled.div`\r\n+  display: none;\r\n+  \r\n+  @media (max-width: 768px) {\r\n+    display: grid;\r\n+    grid-auto-flow: column;\r\n+    grid-template-rows: repeat(2, 1fr);\r\n+    grid-template-columns: repeat(5, minmax(280px, 1fr)); /* Increased from 200px */\r\n+    gap: 1rem; /* Increased from 0.75rem */\r\n+    overflow-x: auto;\r\n+    overflow-y: hidden;\r\n+    padding-bottom: 0.5rem;\r\n+    scroll-snap-type: x mandatory;\r\n+    -webkit-overflow-scrolling: touch;\r\n+    min-height: 85vh; /* Add minimum height to stretch vertically */\r\n+    \r\n+    &::-webkit-scrollbar {\r\n+      height: 4px;\r\n+    }\r\n+    \r\n+    &::-webkit-scrollbar-track {\r\n+      background: ${props => `${props.theme?.colors?.background || '#000000'}80`};\r\n+      border-radius: 10px;\r\n+    }\r\n+    \r\n+    &::-webkit-scrollbar-thumb {\r\n+      background: ${props => props.theme?.colors?.accent || '#800000'};\r\n+      border-radius: 10px;\r\n+    }\r\n+    \r\n+    > * {\r\n+      scroll-snap-align: start;\r\n+      min-width: 0;\r\n+      height: 100%; /* Make items stretch to full height */\r\n+    }\r\n+  }\r\n+  \r\n+  @media (max-width: 480px) {\r\n+    grid-template-columns: repeat(5, minmax(240px, 1fr)); /* Increased from 160px */\r\n+    gap: 0.75rem;\r\n+  }\r\n+`;\r\n+\r\n+// 4. Add this CSS to handle responsive display (add to your styled components section):\r\n+const GlobalStyle = styled.div`\r\n+  @media (min-width: 769px) {\r\n+    .mobile-only {\r\n+      display: none !important;\r\n+    }\r\n+  }\r\n+  \r\n+  @media (max-width: 768px) {\r\n+    .desktop-only {\r\n+      display: none !important;\r\n+    }\r\n+  }\r\n+`;\r\n+\r\n+const CategoryHeader = styled.div`\r\n+  display: flex;\r\n+  justify-content: space-between;\r\n+  align-items: center;\r\n+  margin-bottom: 0.75rem;\r\n+  padding: 0 0.5rem;\r\n+  \r\n+  @media (min-width: 768px) {\r\n+    margin-bottom: 1rem;\r\n+    padding: 0;\r\n+  }\r\n+  \r\n+  h2 {\r\n+    font-family: ${props => props.theme?.fonts?.heading || 'inherit'};\r\n+    font-size: 1.3rem;\r\n+    color: ${props => props.theme?.colors?.accent || '#800000'};\r\n+    margin: 0;\r\n+    \r\n+    @media (min-width: 768px) {\r\n+      font-size: 1.8rem;\r\n+    }\r\n+  }\r\n+  \r\n+  .view-all {\r\n+    font-size: 0.8rem;\r\n+    color: ${props => props.theme?.colors?.accent || '#800000'};\r\n+    opacity: 0.8;\r\n+    cursor: pointer;\r\n+    display: flex;\r\n+    align-items: center;\r\n+    gap: 0.3rem;\r\n+    transition: all 0.3s ease;\r\n+    \r\n+    @media (min-width: 768px) {\r\n+      font-size: 0.9rem;\r\n+      gap: 0.5rem;\r\n+    }\r\n+    \r\n+    &:active {\r\n+      opacity: 1;\r\n+      transform: translateX(3px);\r\n+    }\r\n+  }\r\n+`;\r\n+\r\n+const ChatOverlay = styled.div`\r\n+  position: fixed;\r\n+  top: 0;\r\n+  left: 0;\r\n+  right: 0;\r\n+  bottom: 0;\r\n+  background: rgba(0, 0, 0, 0.5);\r\n+  z-index: 999;\r\n+  opacity: ${props => props.isOpen ? 1 : 0};\r\n+  pointer-events: ${props => props.isOpen ? 'auto' : 'none'};\r\n+  transition: opacity 0.3s ease;\r\n+`;\r\n+\r\n+// Add these styled components after StyleIndicator\r\n+\r\n+const SortContainer = styled.div`\r\n+  position: relative;\r\n+  display: inline-block;\r\n+`;\r\n+\r\n+const SortDropdown = styled.div`\r\n+  position: absolute;\r\n+  top: calc(100% + 0.5rem);\r\n+  right: 0;\r\n+  background: ${props => props.theme?.colors?.background || '#000000'};\r\n+  border: 2px solid ${props => props.theme?.colors?.accent || '#800000'};\r\n+  border-radius: 12px;\r\n+  padding: 0.75rem;\r\n+  min-width: 220px;\r\n+  z-index: 1000;\r\n+  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.8),\r\n+              0 0 20px ${props => `${props.theme?.colors?.accent}40` || 'rgba(128, 0, 0, 0.25)'};\r\n+  opacity: ${props => props.isOpen ? 1 : 0};\r\n+  visibility: ${props => props.isOpen ? 'visible' : 'hidden'};\r\n+  transform: ${props => props.isOpen ? 'translateY(0)' : 'translateY(-10px)'};\r\n+  transition: all 0.3s ease;\r\n+  \r\n+  @media (max-width: 768px) {\r\n+    min-width: 200px;\r\n+    right: 0;\r\n+  }\r\n+`;\r\n+\r\n+const SortOption = styled.button`\r\n+  width: 100%;\r\n+  padding: 0.75rem 1rem;\r\n+  background: ${props => props.active ? \r\n+    props.theme?.colors?.accent || '#800000' : \r\n+    'transparent'};\r\n+  border: none;\r\n+  border-radius: 8px;\r\n+  color: ${props => props.active ? \r\n+    '#FFFFFF' : \r\n+    props.theme?.colors?.text || '#FFFFFF'};\r\n+  font-size: 0.95rem;\r\n+  font-weight: ${props => props.active ? '600' : '500'};\r\n+  text-align: left;\r\n+  cursor: pointer;\r\n+  transition: all 0.2s ease;\r\n+  display: flex;\r\n+  align-items: center;\r\n+  gap: 0.75rem;\r\n+  font-family: ${props => props.theme?.fonts?.body || 'inherit'};\r\n+  min-height: 50px; /* Added for two-line content */\r\n+  \r\n+  &:hover {\r\n+    background: ${props => props.active ?\r\n+      props.theme?.colors?.primary || '#4A0404' :\r\n+      `${props.theme?.colors?.accent}20` || 'rgba(128, 0, 0, 0.2)'};\r\n+    transform: translateX(2px);\r\n+  }\r\n+  \r\n+  &:active {\r\n+    transform: scale(0.98);\r\n+  }\r\n+  \r\n+  svg {\r\n+    width: 16px;\r\n+    height: 16px;\r\n+    flex-shrink: 0;\r\n+    align-self: flex-start; /* Align icon to top when two lines */\r\n+    margin-top: 2px;\r\n+  }\r\n+  \r\n+  @media (max-width: 768px) {\r\n+    padding: 0.65rem 0.85rem;\r\n+    font-size: 0.9rem;\r\n+    min-height: 46px;\r\n+    \r\n+    svg {\r\n+      width: 14px;\r\n+      height: 14px;\r\n+    }\r\n+  }\r\n+`;\r\n+\r\n+const SortHeader = styled.div`\r\n+  display: flex;\r\n+  justify-content: space-between;\r\n+  align-items: center;\r\n+  margin-bottom: 1rem;\r\n+  \r\n+  @media (max-width: 768px) {\r\n+    flex-direction: column;\r\n+    align-items: flex-start;\r\n+    gap: 0.75rem;\r\n+  }\r\n+`;\r\n+\r\n+// Motivational messages\r\n+const MOTIVATIONAL_MESSAGES = [\r\n+  \"Build your vision, Elevate humanity.\",\r\n+  \"Create greatness, Inspire progress.\",\r\n+  \"Master your craft, Serve with passion.\",\r\n+  \"Own your success, Empower those around you.\",\r\n+  \"Rule with wisdom, Lead with heart.\",\r\n+  \"Shape your future, Change lives along the way.\",\r\n+  \"Rise above, Lift others higher.\",\r\n+  \"Conquer your dreams, Build a better world.\",\r\n+  \"Lead by example, Serve with strength.\",\r\n+  \"Pursue greatness, Give back in abundance.\"\r\n+];\r\n+\r\n+const WelcomePage = () => {\r\n+  const navigate = useNavigate();\r\n+  const [motivationalMessage, setMotivationalMessage] = useState(\"\");\r\n+  const [activeTab, setActiveTab] = useState('featured');\r\n+  const [featuredItems, setFeaturedItems] = useState([]);\r\n+  const [loading, setLoading] = useState(true);\r\n+  const [error, setError] = useState(null);\r\n+  const [nearbyItems, setNearbyItems] = useState([]);\r\n+  const [featuredMedia, setFeaturedMedia] = useState([]);\r\n+  const [hasSearched, setHasSearched] = useState(false);\r\n+  const [searchAddress, setSearchAddress] = useState('');\r\n+  const [searching, setSearching] = useState(false);\r\n+  const [locationChecked, setLocationChecked] = useState(false);\r\n+  const [showLocationPrompt, setShowLocationPrompt] = useState(false);\r\n+  const [currentZipCode, setCurrentZipCode] = useState(null);\r\n+  const [currentPage, setCurrentPage] = useState(1);\r\n+  const [totalItems, setTotalItems] = useState(0);\r\n+  const [currentStyle, setCurrentStyle] = useState(null);\r\n+  const itemsPerPage = 6;\r\n+  const [isPinned, setIsPinned] = useState(false);\r\n+  const [isRefreshing, setIsRefreshing] = useState(false);\r\n+  const [orderQuantity, setOrderQuantity] = useState(1);\r\n+  const [sortBy, setSortBy] = useState('recent'); // 'recent', 'proximity', 'price-low', 'price-high'\r\n+  const [sortMenuOpen, setSortMenuOpen] = useState(false);\r\n+\r\n+\r\n+  \r\n+  const { user, isAuthenticated } = useAuth();\r\n+  const [shopData, setShopData] = useState(null);\r\n+  const [currentMessageIndex, setCurrentMessageIndex] = useState(0);\r\n+  const [isMessageVisible, setIsMessageVisible] = useState(true);\r\n+  const [isSliderPaused, setIsSliderPaused] = useState(false);\r\n+  const [sliderPosition, setSliderPosition] = useState(0);\r\n+  const sliderRef = useRef(null);\r\n+  const sliderAnimationRef = useRef(null);\r\n+  const [zoomedItem, setZoomedItem] = useState(null);\r\n+  const [chatOpen, setChatOpen] = useState(false);\r\n+  const [selectedChatItem, setSelectedChatItem] = useState(null);\r\n+  const [currentImageIndex, setCurrentImageIndex] = useState(0);\r\n+  const { userLocation, locationPermission, requestLocation } = useLocation();\r\n+  const [updatingLocation, setUpdatingLocation] = useState(false);\r\n+  const [featuredSearchTerm, setFeaturedSearchTerm] = useState('');\r\n+  const [searchResults, setSearchResults] = useState([]);\r\n+  const [isSearching, setIsSearching] = useState(false);\r\n+  const [hasSearchResults, setHasSearchResults] = useState(false);\r\n+  const [categories, setCategories] = useState({\r\n+    'Electronics & Tech': [],\r\n+    'Clothing & Accessories': [],\r\n+    'Home & Garden': [],\r\n+    'Sports & Outdoors': [],\r\n+    'Books & Media': [],\r\n+    'Toys & Games': [],\r\n+    'Health & Beauty': [],\r\n+    'Automotive': [],\r\n+    'Collectibles & Art': [],\r\n+    'Food & Beverages': [],\r\n+    'Other': []\r\n+  });\r\n+// Replace the existing state variables related to ZIP with city/region states\r\n+const [cityRegion, setCityRegion] = useState('');\r\n+const [isCityPinned, setIsCityPinned] = useState(false);\r\n+const [isConvertingToCity, setIsConvertingToCity] = useState(false);\r\n+const [cityInputValue, setCityInputValue] = useState('');\r\n+const [effectiveLocation, setEffectiveLocation] = useState(null);\r\n+const [isIPLocation, setIsIPLocation] = useState(false);\r\n+\r\n+useEffect(() => {\r\n+  const initializeLocation = async () => {\r\n+    console.log('🔍 Initializing location...');\r\n+    console.log('userLocation:', userLocation);\r\n+    \r\n+    if (userLocation) {\r\n+      // User has shared precise location\r\n+      console.log('✅ Using GPS location:', userLocation);\r\n+      setEffectiveLocation(userLocation);\r\n+      setIsIPLocation(false);\r\n+    } else {\r\n+      // Use IP-based location\r\n+      console.log('🌐 Fetching IP-based location...');\r\n+      const ipLocation = await getIPBasedLocation();\r\n+      console.log('IP Location result:', ipLocation);\r\n+      \r\n+      if (ipLocation) {\r\n+        console.log('✅ Using IP location:', ipLocation);\r\n+        setEffectiveLocation(ipLocation);\r\n+        setIsIPLocation(true);\r\n+      } else {\r\n+        console.error('❌ Failed to get IP location');\r\n+      }\r\n+    }\r\n+  };\r\n+  \r\n+  initializeLocation();\r\n+}, [userLocation]);\r\n+\r\n+useEffect(() => {\r\n+  console.log('🔄 effectiveLocation changed:', effectiveLocation);\r\n+  console.log('activeTab:', activeTab);\r\n+  \r\n+  if (activeTab === 'featured' && effectiveLocation) {\r\n+    console.log('📦 Loading items with location...');\r\n+    loadCategorizedItems();\r\n+  }\r\n+}, [effectiveLocation, activeTab]);\r\n+\r\n+const loadCategorizedItems = async () => {\r\n+  console.log('🔄 loadCategorizedItems called');\r\n+  console.log('effectiveLocation:', effectiveLocation);\r\n+  console.log('sortBy:', sortBy);\r\n+  \r\n+  try {\r\n+    setLoading(true);\r\n+    setError(null);\r\n+\r\n+    console.log('📡 Fetching items from Firebase...');\r\n+    const allItems = await getFeaturedItems(48);\r\n+    console.log('✅ Fetched items:', allItems.length);\r\n+    \r\n+    const currentUserId = user?.uid;\r\n+    \r\n+    // Filter out current user's items AND invalid items\r\n+    const filteredItems = allItems.filter(item => {\r\n+      const isNotCurrentUser = item.shopId !== currentUserId;\r\n+      const hasImages = item.images && item.images.length > 0 && item.images.some(img => img);\r\n+      const hasValidPrice = item.price && !isNaN(parseFloat(item.price)) && parseFloat(item.price) > 0;\r\n+      const hasStock = !item.deleted && (!item.quantity || parseInt(item.quantity) > 0);\r\n+      \r\n+      return isNotCurrentUser && hasImages && hasValidPrice && hasStock;\r\n+    });\r\n+    \r\n+    console.log('✅ Filtered items:', filteredItems.length);\r\n+\r\n+    let itemsWithDistance = filteredItems;\r\n+    \r\n+    // Calculate distances if we have location\r\n+    if (effectiveLocation) {\r\n+      console.log('📍 Calculating distances...');\r\n+      itemsWithDistance = filteredItems.map(item => {\r\n+        let itemCoords = item.coordinates;\r\n+        if (!itemCoords && item.address) {\r\n+          const coordsMatch = item.address.match(/^(-?\\d+\\.?\\d*),\\s*(-?\\d+\\.?\\d*)$/);\r\n+          if (coordsMatch) {\r\n+            itemCoords = {\r\n+              lat: parseFloat(coordsMatch[1]),\r\n+              lng: parseFloat(coordsMatch[2])\r\n+            };\r\n+          }\r\n+        }\r\n+\r\n+        if (itemCoords?.lat && itemCoords?.lng) {\r\n+          try {\r\n+            const distanceInMeters = getDistance(\r\n+              { latitude: effectiveLocation.latitude, longitude: effectiveLocation.longitude },\r\n+              { latitude: itemCoords.lat, longitude: itemCoords.lng }\r\n+            );\r\n+            const distanceInMiles = (distanceInMeters / 1609.34).toFixed(1);\r\n+\r\n+            return {\r\n+              ...item,\r\n+              coordinates: itemCoords,\r\n+              distance: distanceInMeters,\r\n+              distanceInMiles,\r\n+              formattedDistance: `${distanceInMiles} mi`\r\n+            };\r\n+          } catch (e) {\r\n+            console.warn('Error calculating distance for item:', e);\r\n+            return item;\r\n+          }\r\n+        }\r\n+        return item;\r\n+      });\r\n+    } else {\r\n+      console.warn('⚠️ No effectiveLocation available for distance calculation');\r\n+    }\r\n+\r\n+    // Apply sorting\r\n+    console.log('🔄 Applying sort:', sortBy);\r\n+    const sortedItems = applySorting(itemsWithDistance, sortBy);\r\n+    console.log('✅ Sorted items:', sortedItems.length);\r\n+\r\n+    // Categorize items\r\n+    const categorizedItems = {\r\n+      'Electronics & Tech': [],\r\n+      'Clothing & Accessories': [],\r\n+      'Home & Garden': [],\r\n+      'Sports & Outdoors': [],\r\n+      'Books & Media': [],\r\n+      'Toys & Games': [],\r\n+      'Health & Beauty': [],\r\n+      'Automotive': [],\r\n+      'Collectibles & Art': [],\r\n+      'Food & Beverages': [],\r\n+      'Other': []\r\n+    };\r\n+\r\n+    sortedItems.forEach(item => {\r\n+      const category = item.category || 'Other';\r\n+      if (categorizedItems[category]) {\r\n+        categorizedItems[category].push(item);\r\n+      } else {\r\n+        categorizedItems['Other'].push(item);\r\n+      }\r\n+    });\r\n+\r\n+    Object.keys(categorizedItems).forEach(category => {\r\n+      categorizedItems[category] = categorizedItems[category].slice(0, 10);\r\n+    });\r\n+\r\n+    console.log('✅ Setting categories:', Object.keys(categorizedItems).map(k => `${k}: ${categorizedItems[k].length}`));\r\n+    setCategories(categorizedItems);\r\n+    setFeaturedItems(sortedItems.slice(0, 10));\r\n+    setTotalItems(filteredItems.length);\r\n+\r\n+    setLoading(false);\r\n+  } catch (error) {\r\n+    console.error('❌ Error loading categorized items:', error);\r\n+    setError('Failed to load items. Please try again later.');\r\n+    setLoading(false);\r\n+  }\r\n+};\r\n+\r\n+// Add this useEffect with other effects\r\n+\r\n+useEffect(() => {\r\n+  const handleClickOutside = (event) => {\r\n+    if (sortMenuOpen && !event.target.closest('.sort-container')) {\r\n+      setSortMenuOpen(false);\r\n+    }\r\n+  };\r\n+\r\n+  document.addEventListener('mousedown', handleClickOutside);\r\n+  return () => document.removeEventListener('mousedown', handleClickOutside);\r\n+}, [sortMenuOpen]);\r\n+\r\n+const applySorting = (items, sortType) => {\r\n+  let sortedItems = [...items];\r\n+  \r\n+  switch (sortType) {\r\n+    case 'proximity':\r\n+      if (!userLocation) {\r\n+        // If no location, request it\r\n+        requestLocation();\r\n+        return sortedItems;\r\n+      }\r\n+      // Sort by distance (closest first) - no distance filter\r\n+      sortedItems.sort((a, b) => {\r\n+        const distA = a.distance || Infinity;\r\n+        const distB = b.distance || Infinity;\r\n+        return distA - distB;\r\n+      });\r\n+      break;\r\n+      \r\n+    case 'price-low':\r\n+      // REMOVED 30-mile filter - sort all items by price (low to high)\r\n+      sortedItems.sort((a, b) => {\r\n+        const priceA = parseFloat(a.price) || 0;\r\n+        const priceB = parseFloat(b.price) || 0;\r\n+        return priceA - priceB;\r\n+      });\r\n+      break;\r\n+      \r\n+    case 'price-high':\r\n+      // REMOVED 30-mile filter - sort all items by price (high to low)\r\n+      sortedItems.sort((a, b) => {\r\n+        const priceA = parseFloat(a.price) || 0;\r\n+        const priceB = parseFloat(b.price) || 0;\r\n+        return priceB - priceA;\r\n+      });\r\n+      break;\r\n+      \r\n+    case 'recent':\r\n+    default:\r\n+      // REMOVED 30-mile filter - sort all items by most recent\r\n+      sortedItems.sort((a, b) => {\r\n+        const dateA = a.createdAt ? new Date(a.createdAt) : new Date(0);\r\n+        const dateB = b.createdAt ? new Date(b.createdAt) : new Date(0);\r\n+        return dateB - dateA;\r\n+      });\r\n+      break;\r\n+  }\r\n+  \r\n+  return sortedItems;\r\n+};\r\n+\r\n+const getSortLabel = (sortType) => {\r\n+  switch (sortType) {\r\n+    case 'proximity': return 'Closest First';\r\n+    case 'price-low': return 'Price: Low to High';\r\n+    case 'price-high': return 'Price: High to Low';\r\n+    case 'recent':\r\n+    default: return 'Most Recent';\r\n+  }\r\n+};\r\n+\r\n+// Replace convertCoordsToZip with this new function\r\n+const convertCoordsToCity = async (lat, lon) => {\r\n+  try {\r\n+    setIsConvertingToCity(true);\r\n+    setError(null);\r\n+    \r\n+    const response = await fetch(\r\n+      `https://nominatim.openstreetmap.org/reverse?lat=${lat}&lon=${lon}&format=json&zoom=10&addressdetails=1`,\r\n+      {\r\n+        headers: {\r\n+          'Accept': 'application/json',\r\n+          'User-Agent': 'KalKode Marketplace'\r\n+        }\r\n+      }\r\n+    );\r\n+    \r\n+    if (!response.ok) {\r\n+      throw new Error('Failed to fetch location data');\r\n+    }\r\n+    \r\n+    const data = await response.json();\r\n+    console.log('Nominatim response:', data);\r\n+    \r\n+    if (!data || !data.address) {\r\n+      setCityRegion('Not available');\r\n+      setCityInputValue('');\r\n+      return null;\r\n+    }\r\n+    \r\n+    const address = data.address;\r\n+    const city = address.city || address.town || address.village || address.county;\r\n+    const state = address.state;\r\n+    \r\n+    // Major cities list (you can expand this)\r\n+    const majorCities = [\r\n+      'Houston', 'Dallas', 'Austin', 'San Antonio', 'Fort Worth',\r\n+      'Los Angeles', 'New York', 'Chicago', 'Phoenix', 'Philadelphia',\r\n+      'San Diego', 'San Jose', 'Jacksonville', 'Columbus', 'Charlotte'\r\n+    ];\r\n+    \r\n+    let locationString = '';\r\n+    \r\n+    if (city && majorCities.some(major => city.includes(major))) {\r\n+      // For major cities, determine direction from city center\r\n+      const cityName = majorCities.find(major => city.includes(major));\r\n+      \r\n+      // Get city center coordinates (you could make this more precise with a lookup table)\r\n+      const cityCenterResponse = await fetch(\r\n+        `https://nominatim.openstreetmap.org/search?city=${cityName}&state=${state}&format=json&limit=1`,\r\n+        {\r\n+          headers: {\r\n+            'Accept': 'application/json',\r\n+            'User-Agent': 'KalKode Marketplace'\r\n+          }\r\n+        }\r\n+      );\r\n+      \r\n+      const cityCenterData = await cityCenterResponse.json();\r\n+      \r\n+      if (cityCenterData && cityCenterData[0]) {\r\n+        const centerLat = parseFloat(cityCenterData[0].lat);\r\n+        const centerLon = parseFloat(cityCenterData[0].lon);\r\n+        \r\n+        // Calculate direction\r\n+        const direction = getDirection(lat, lon, centerLat, centerLon);\r\n+        locationString = `${direction} ${cityName}, ${getStateAbbreviation(state)}`;\r\n+      } else {\r\n+        locationString = `${cityName}, ${getStateAbbreviation(state)}`;\r\n+      }\r\n+    } else if (state) {\r\n+      // For non-major cities, use state with direction\r\n+      // Get state center (approximate)\r\n+      const stateCenterResponse = await fetch(\r\n+        `https://nominatim.openstreetmap.org/search?state=${state}&country=USA&format=json&limit=1`,\r\n+        {\r\n+          headers: {\r\n+            'Accept': 'application/json',\r\n+            'User-Agent': 'KalKode Marketplace'\r\n+          }\r\n+        }\r\n+      );\r\n+      \r\n+      const stateCenterData = await stateCenterResponse.json();\r\n+      \r\n+      if (stateCenterData && stateCenterData[0]) {\r\n+        const centerLat = parseFloat(stateCenterData[0].lat);\r\n+        const centerLon = parseFloat(stateCenterData[0].lon);\r\n+        \r\n+        const direction = getDirection(lat, lon, centerLat, centerLon);\r\n+        locationString = city ? \r\n+          `${city}, ${direction} ${getStateAbbreviation(state)}` :\r\n+          `${direction} ${getStateAbbreviation(state)}`;\r\n+      } else {\r\n+        locationString = city ? \r\n+          `${city}, ${getStateAbbreviation(state)}` :\r\n+          getStateAbbreviation(state);\r\n+      }\r\n+    } else {\r\n+      locationString = city || 'Unknown Location';\r\n+    }\r\n+    \r\n+    setCityRegion(locationString);\r\n+    setCityInputValue(locationString);\r\n+    \r\n+    console.log(`Coordinates ${lat}, ${lon} → ${locationString}`);\r\n+    \r\n+    return locationString;\r\n+    \r\n+  } catch (error) {\r\n+    console.error('Error converting coordinates to city:', error);\r\n+    setCityRegion('Error');\r\n+    setCityInputValue('');\r\n+    setError('Failed to get location information');\r\n+    return null;\r\n+  } finally {\r\n+    setIsConvertingToCity(false);\r\n+  }\r\n+};\r\n+\r\n+// Helper function to determine direction (N, S, E, W, NE, NW, SE, SW)\r\n+const getDirection = (lat1, lon1, lat2, lon2) => {\r\n+  const latDiff = lat1 - lat2;\r\n+  const lonDiff = lon1 - lon2;\r\n+  \r\n+  const absLatDiff = Math.abs(latDiff);\r\n+  const absLonDiff = Math.abs(lonDiff);\r\n+  \r\n+  // If differences are very small, consider it center\r\n+  if (absLatDiff < 0.1 && absLonDiff < 0.1) {\r\n+    return '';\r\n+  }\r\n+  \r\n+  // Determine primary direction\r\n+  let direction = '';\r\n+  \r\n+  // North/South\r\n+  if (absLatDiff > absLonDiff * 0.5) {\r\n+    direction += latDiff > 0 ? 'N' : 'S';\r\n+  }\r\n+  \r\n+  // East/West\r\n+  if (absLonDiff > absLatDiff * 0.5) {\r\n+    direction += lonDiff > 0 ? 'E' : 'W';\r\n+  }\r\n+  \r\n+  return direction || 'Central';\r\n+};\r\n+\r\n+// Helper function to get state abbreviations\r\n+const getStateAbbreviation = (stateName) => {\r\n+  const stateMap = {\r\n+    'Alabama': 'AL', 'Alaska': 'AK', 'Arizona': 'AZ', 'Arkansas': 'AR',\r\n+    'California': 'CA', 'Colorado': 'CO', 'Connecticut': 'CT', 'Delaware': 'DE',\r\n+    'Florida': 'FL', 'Georgia': 'GA', 'Hawaii': 'HI', 'Idaho': 'ID',\r\n+    'Illinois': 'IL', 'Indiana': 'IN', 'Iowa': 'IA', 'Kansas': 'KS',\r\n+    'Kentucky': 'KY', 'Louisiana': 'LA', 'Maine': 'ME', 'Maryland': 'MD',\r\n+    'Massachusetts': 'MA', 'Michigan': 'MI', 'Minnesota': 'MN', 'Mississippi': 'MS',\r\n+    'Missouri': 'MO', 'Montana': 'MT', 'Nebraska': 'NE', 'Nevada': 'NV',\r\n+    'New Hampshire': 'NH', 'New Jersey': 'NJ', 'New Mexico': 'NM', 'New York': 'NY',\r\n+    'North Carolina': 'NC', 'North Dakota': 'ND', 'Ohio': 'OH', 'Oklahoma': 'OK',\r\n+    'Oregon': 'OR', 'Pennsylvania': 'PA', 'Rhode Island': 'RI', 'South Carolina': 'SC',\r\n+    'South Dakota': 'SD', 'Tennessee': 'TN', 'Texas': 'TX', 'Utah': 'UT',\r\n+    'Vermont': 'VT', 'Virginia': 'VA', 'Washington': 'WA', 'West Virginia': 'WV',\r\n+    'Wisconsin': 'WI', 'Wyoming': 'WY'\r\n+  };\r\n+  \r\n+  return stateMap[stateName] || stateName;\r\n+};\r\n+\r\n+// Replace handleLocationToZip with handleLocationToCity\r\n+const handleLocationToCity = async () => {\r\n+  try {\r\n+    setIsConvertingToCity(true);\r\n+    setError(null);\r\n+    \r\n+    // Request fresh location from browser\r\n+    const freshLocation = await new Promise((resolve, reject) => {\r\n+      if (!navigator.geolocation) {\r\n+        reject(new Error('Geolocation not supported'));\r\n+        return;\r\n+      }\r\n+      \r\n+      navigator.geolocation.getCurrentPosition(\r\n+        (position) => {\r\n+          resolve({\r\n+            latitude: position.coords.latitude,\r\n+            longitude: position.coords.longitude\r\n+          });\r\n+        },\r\n+        (error) => {\r\n+          reject(error);\r\n+        },\r\n+        {\r\n+          enableHighAccuracy: true,\r\n+          timeout: 10000,\r\n+          maximumAge: 0\r\n+        }\r\n+      );\r\n+    });\r\n+    \r\n+    // Convert fresh coordinates to city/region\r\n+    await convertCoordsToCity(freshLocation.latitude, freshLocation.longitude);\r\n+    \r\n+  } catch (error) {\r\n+    console.error('Error getting fresh location:', error);\r\n+    \r\n+    // Fallback: use stored location if available\r\n+    if (userLocation) {\r\n+      console.log('Using stored location as fallback');\r\n+      await convertCoordsToCity(userLocation.latitude, userLocation.longitude);\r\n+    } else {\r\n+      setError('Location not available. Please enable location services.');\r\n+    }\r\n+  } finally {\r\n+    setIsConvertingToCity(false);\r\n+  }\r\n+};\r\n+\r\n+// Replace handleToggleZipPin with handleToggleCityPin\r\n+const handleToggleCityPin = () => {\r\n+  if (isCityPinned) {\r\n+    localStorage.removeItem('pinnedCityRegion');\r\n+    setIsCityPinned(false);\r\n+    setCityRegion('');\r\n+    setCityInputValue('');\r\n+  } else {\r\n+    if (cityRegion && cityRegion !== 'Not available' && cityRegion !== 'Error') {\r\n+      localStorage.setItem('pinnedCityRegion', cityRegion);\r\n+      setIsCityPinned(true);\r\n+    }\r\n+  }\r\n+};\r\n+\r\n+// Update the useEffect that loads pinned location on mount\r\n+useEffect(() => {\r\n+  const pinnedCity = localStorage.getItem('pinnedCityRegion');\r\n+  if (pinnedCity) {\r\n+    setCityRegion(pinnedCity);\r\n+    setCityInputValue(pinnedCity);\r\n+    setIsCityPinned(true);\r\n+  }\r\n+}, []);\r\n+\r\n+\r\n+  // Handle opening shop\r\n+  const handleOpenShop = () => {\r\n+    navigate('/shop/create/template');\r\n+  };\r\n+\r\n+  // Refresh theme\r\n+  const refreshTheme = () => {\r\n+    if (isRefreshing) return;\r\n+    \r\n+    setIsRefreshing(true);\r\n+    const styles = Object.values(WELCOME_STYLES);\r\n+    const otherStyles = styles.filter(style => style.id !== currentStyle.id);\r\n+    \r\n+    if (otherStyles.length > 0) {\r\n+      const randomStyle = otherStyles[Math.floor(Math.random() * otherStyles.length)];\r\n+      setCurrentStyle(randomStyle);\r\n+      \r\n+      if (isPinned) {\r\n+        localStorage.removeItem('pinnedStyleId');\r\n+        setIsPinned(false);\r\n+      }\r\n+    }\r\n+    \r\n+    setTimeout(() => setIsRefreshing(false), 500);\r\n+  };\r\n+\r\n+  // Toggle pin style\r\n+  const togglePinStyle = () => {\r\n+    if (isPinned) {\r\n+      localStorage.removeItem('pinnedStyleId');\r\n+      setIsPinned(false);\r\n+      \r\n+      const styles = Object.values(WELCOME_STYLES).filter(\r\n+        style => style.id !== currentStyle.id\r\n+      );\r\n+      \r\n+      if (styles.length > 0) {\r\n+        const randomStyle = styles[Math.floor(Math.random() * styles.length)];\r\n+        setCurrentStyle(randomStyle);\r\n+      }\r\n+    } else {\r\n+      localStorage.setItem('pinnedStyleId', currentStyle.id.toString());\r\n+      setIsPinned(true);\r\n+    }\r\n+  };\r\n+\r\n+  // Handle location update\r\n+  const handleLocationUpdate = () => {\r\n+    setUpdatingLocation(true);\r\n+    requestLocation();\r\n+  };\r\n+\r\n+  // Get location display text\r\n+  const getLocationDisplayText = () => {\r\n+    if (!userLocation) {\r\n+      return \"Location: Not available\";\r\n+    }\r\n+    return `Location: ${userLocation.latitude.toFixed(4)}, ${userLocation.longitude.toFixed(4)}`;\r\n+  };\r\n+\r\n+  // Search featured items\r\n+  const searchFeaturedItems = async (searchTerm) => {\r\n+    if (!searchTerm.trim()) {\r\n+      setSearchResults([]);\r\n+      setHasSearchResults(false);\r\n+      return;\r\n+    }\r\n+  \r\n+    try {\r\n+      setIsSearching(true);\r\n+      setError(null);\r\n+    \r\n+      const shopsRef = collection(db, 'shops');\r\n+      const snapshot = await getDocs(shopsRef);\r\n+      \r\n+      let allMatchingItems = [];\r\n+      const currentUserId = user?.uid;\r\n+      \r\n+      snapshot.docs.forEach(doc => {\r\n+        const shopData = doc.data();\r\n+        \r\n+        if (doc.id === currentUserId) {\r\n+          return;\r\n+        }\r\n+        \r\n+        if (shopData?.items && Array.isArray(shopData.items)) {\r\n+          shopData.items\r\n+            .filter(item => !item.deleted)\r\n+            .forEach(item => {\r\n+              const itemName = (item.name || '').toLowerCase();\r\n+              const itemDescription = (item.description || '').toLowerCase();\r\n+              const searchLower = searchTerm.toLowerCase();\r\n+              \r\n+              if (itemName.includes(searchLower) || itemDescription.includes(searchLower)) {\r\n+                allMatchingItems.push({\r\n+                  ...item,\r\n+                  shopId: doc.id,\r\n+                  shopName: shopData.name || 'Unknown Shop',\r\n+                  shopTheme: shopData.theme\r\n+                });\r\n+              }\r\n+            });\r\n+        }\r\n+      });\r\n+    \r\n+      if (userLocation) {\r\n+        allMatchingItems = allMatchingItems.map(item => {\r\n+          if (item.coordinates && item.coordinates.lat && item.coordinates.lng) {\r\n+            try {\r\n+              const distanceInMeters = getDistance(\r\n+                { latitude: userLocation.latitude, longitude: userLocation.longitude },\r\n+                { latitude: item.coordinates.lat, longitude: item.coordinates.lng }\r\n+              );\r\n+              const distanceInMiles = (distanceInMeters / 1609.34).toFixed(1);\r\n+              \r\n+              return {\r\n+                ...item,\r\n+                distance: distanceInMeters,\r\n+                distanceInMiles,\r\n+                formattedDistance: `${distanceInMiles} mi`\r\n+              };\r\n+            } catch (e) {\r\n+              console.warn('Error calculating distance for item:', e);\r\n+              return item;\r\n+            }\r\n+          }\r\n+          return item;\r\n+        });\r\n+      }\r\n+    \r\n+      setSearchResults(allMatchingItems);\r\n+      setHasSearchResults(true);\r\n+      \r\n+      if (allMatchingItems.length === 0) {\r\n+        setError(`No items found matching \"${searchTerm}\"`);\r\n+      }\r\n+    } catch (error) {\r\n+      console.error('Error searching items:', error);\r\n+      setError('Failed to search items. Please try again later.');\r\n+    } finally {\r\n+      setIsSearching(false);\r\n+    }\r\n+  };\r\n+\r\n+\r\n+  // Handle featured search\r\n+  const handleFeaturedSearch = () => {\r\n+    if (featuredSearchTerm.trim()) {\r\n+      searchFeaturedItems(featuredSearchTerm);\r\n+    }\r\n+  };\r\n+\r\n+  const handleRowScroll = (categoryName, rowNumber, scrollLeft) => {\r\n+  const row1Id = `${categoryName}-row1`;\r\n+  const row2Id = `${categoryName}-row2`;\r\n+  \r\n+  const row1Element = document.getElementById(row1Id);\r\n+  const row2Element = document.getElementById(row2Id);\r\n+  \r\n+  if (rowNumber === 1 && row2Element) {\r\n+    row2Element.scrollLeft = scrollLeft;\r\n+  } else if (rowNumber === 2 && row1Element) {\r\n+    row1Element.scrollLeft = scrollLeft;\r\n+  }\r\n+};\r\n+\r\n+  const handleClearFeaturedSearch = () => {\r\n+    setFeaturedSearchTerm('');\r\n+    setSearchResults([]);\r\n+    setHasSearchResults(false);\r\n+    setError(null);\r\n+  };\r\n+\r\n+  // Fetch nearby items\r\n+  const fetchNearbyItems = async () => {\r\n+    if (!userLocation) {\r\n+      setError('Location information is not available');\r\n+      setSearching(false);\r\n+      return;\r\n+    }\r\n+  \r\n+    try {\r\n+      setLoading(true);\r\n+      const shopsRef = collection(db, 'shops');\r\n+      const snapshot = await getDocs(shopsRef);\r\n+      \r\n+      let itemsInRadius = [];\r\n+      const currentUserId = user?.uid;\r\n+      \r\n+      snapshot.docs.forEach(doc => {\r\n+        const shopData = doc.data();\r\n+        \r\n+        if (doc.id === currentUserId) {\r\n+          return;\r\n+        }\r\n+        \r\n+        if (shopData?.items && Array.isArray(shopData.items)) {\r\n+          shopData.items\r\n+            .filter(item => !item.deleted)\r\n+            .forEach(item => {\r\n+              let itemCoords = item.coordinates;\r\n+              if (!itemCoords && item.address) {\r\n+                const coordsMatch = item.address.match(/^(-?\\d+\\.?\\d*),\\s*(-?\\d+\\.?\\d*)$/);\r\n+                if (coordsMatch) {\r\n+                  itemCoords = {\r\n+                    lat: parseFloat(coordsMatch[1]),\r\n+                    lng: parseFloat(coordsMatch[2])\r\n+                  };\r\n+                }\r\n+              }\r\n+  \r\n+              if (itemCoords?.lat && itemCoords?.lng) {\r\n+                try {\r\n+                  const distanceInMeters = getDistance(\r\n+                    { latitude: userLocation.latitude, longitude: userLocation.longitude },\r\n+                    { latitude: itemCoords.lat, longitude: itemCoords.lng }\r\n+                  );\r\n+  \r\n+                  const distanceInMiles = (distanceInMeters / 1609.34).toFixed(1);\r\n+                  \r\n+                  itemsInRadius.push({\r\n+                    ...item,\r\n+                    shopId: doc.id,\r\n+                    shopName: shopData.name || 'Unknown Shop',\r\n+                    coordinates: itemCoords,\r\n+                    distance: distanceInMeters,\r\n+                    distanceInMiles,\r\n+                    formattedDistance: `${distanceInMiles} mi`,\r\n+                    theme: shopData.theme\r\n+                  });\r\n+                } catch (e) {\r\n+                  console.warn('Error calculating distance for item:', e);\r\n+                }\r\n+              }\r\n+            });\r\n+        }\r\n+      });\r\n+  \r\n+      itemsInRadius.sort((a, b) => a.distance - b.distance);\r\n+      itemsInRadius = itemsInRadius.slice(0, 10);\r\n+  \r\n+      setNearbyItems(itemsInRadius);\r\n+      setHasSearched(true);\r\n+      \r\n+      if (itemsInRadius.length === 0) {\r\n+        setError('No items found in your area');\r\n+      }\r\n+    } catch (error) {\r\n+      console.error('Error fetching nearby items:', error);\r\n+      setError('Failed to load nearby items. Please try again later.');\r\n+    } finally {\r\n+      setLoading(false);\r\n+      setSearching(false);\r\n+    }\r\n+  };\r\n+\r\n+  // Handle live location\r\n+  const handleLiveLocation = () => {\r\n+    setSearching(true);\r\n+    setError(null);\r\n+    \r\n+    if (userLocation) {\r\n+      fetchNearbyItems();\r\n+      setHasSearched(true);\r\n+    } else {\r\n+      requestLocation();\r\n+    }\r\n+  };\r\n+\r\n+  // Handle address search\r\n+  const handleAddressSearch = async () => {\r\n+    if (!searchAddress.trim()) {\r\n+      setError('Please enter an address');\r\n+      return;\r\n+    }\r\n+  \r\n+    setSearching(true);\r\n+    setError(null);\r\n+    setHasSearched(true);\r\n+    \r\n+    try {\r\n+      const encodedAddress = encodeURIComponent(searchAddress);\r\n+      const response = await fetch(\r\n+        `https://nominatim.openstreetmap.org/search?q=${encodedAddress}&format=json&limit=1`,\r\n+        {\r\n+          headers: {\r\n+            'Accept': 'application/json',\r\n+            'User-Agent': 'KalKode Marketplace'\r\n+          }\r\n+        }\r\n+      );\r\n+      \r\n+      const data = await response.json();\r\n+  \r\n+      if (data && data[0]) {\r\n+        const coordinates = {\r\n+          latitude: parseFloat(data[0].lat),\r\n+          longitude: parseFloat(data[0].lon)\r\n+        };\r\n+        \r\n+        await fetchNearbyItems(coordinates);\r\n+      } else {\r\n+        throw new Error('Location not found. Please try a different address.');\r\n+      }\r\n+  \r\n+    } catch (error) {\r\n+      console.error('Error searching address:', error);\r\n+      setError(error.message || 'Unable to search this location. Please try again.');\r\n+    } finally {\r\n+      setSearching(false);\r\n+    }\r\n+  };\r\n+\r\n+  // Handle item click\r\n+  const handleItemClick = (item) => {\r\n+    setZoomedItem(item);\r\n+    setOrderQuantity(1);\r\n+    setCurrentImageIndex(0); // Reset image index\r\n+    \r\n+    const scrollY = window.scrollY;\r\n+    document.body.style.position = 'fixed';\r\n+    document.body.style.top = `-${scrollY}px`;\r\n+    document.body.style.width = '100%';\r\n+    document.body.style.overflow = 'hidden';\r\n+    \r\n+    document.body.setAttribute('data-scroll-y', scrollY);\r\n+  };\r\n+\r\n+  // Handle close zoom\r\n+  const handleCloseZoom = () => {\r\n+    setZoomedItem(null);\r\n+    setCurrentImageIndex(0);\r\n+    \r\n+    const scrollY = document.body.getAttribute('data-scroll-y') || '0';\r\n+    document.body.style.position = '';\r\n+    document.body.style.top = '';\r\n+    document.body.style.width = '';\r\n+    document.body.style.overflow = '';\r\n+    document.body.removeAttribute('data-scroll-y');\r\n+    \r\n+    window.scrollTo(0, parseInt(scrollY));\r\n+  };\r\n+\r\n+  // Adjust quantity\r\n+  const adjustQuantity = (delta) => {\r\n+    const maxQuantity = parseInt(zoomedItem?.quantity) || 1;\r\n+    const newQuantity = Math.max(1, Math.min(maxQuantity, orderQuantity + delta));\r\n+    setOrderQuantity(newQuantity);\r\n+  };\r\n+\r\n+  // Handle direct order\r\n+  const handleDirectOrder = async () => {\r\n+    if (!zoomedItem) return;\r\n+    \r\n+    if (!isAuthenticated) {\r\n+       navigate('/auth', { \r\n+        state: { \r\n+          mode: 'login',\r\n+          from: window.location.pathname\r\n+        }\r\n+      });\r\n+       return;\r\n+     }\r\n+    \r\n+    try {\r\n+      const result = await TransactionService.initiateQuantityTransaction(\r\n+        zoomedItem.id,\r\n+        zoomedItem.shopId,\r\n+        parseFloat(zoomedItem.price),\r\n+        orderQuantity,\r\n+        'inperson'\r\n+      );\r\n+      \r\n+      if (result.transactionId) {\r\n+        handleCloseZoom();\r\n+        navigate(`/messages?chat=${result.transactionId}`);\r\n+      }\r\n+    } catch (error) {\r\n+      console.error('Error placing order:', error);\r\n+      alert('Error placing order: ' + error.message);\r\n+    }\r\n+  };\r\n+\r\n+  // Handle order click\r\n+  const handleOrderClick = (item) => {\r\n+    setSelectedChatItem(item);\r\n+    setChatOpen(true);\r\n+    \r\n+    if (zoomedItem) {\r\n+      setZoomedItem(null);\r\n+      const scrollY = document.body.getAttribute('data-scroll-y') || '0';\r\n+      document.body.style.position = '';\r\n+      document.body.style.top = '';\r\n+      document.body.style.width = '';\r\n+      document.body.style.overflow = '';\r\n+      document.body.removeAttribute('data-scroll-y');\r\n+      window.scrollTo(0, parseInt(scrollY));\r\n+    }\r\n+  };\r\n+\r\n+  // Handle close chat\r\n+  const handleCloseChat = () => {\r\n+    setChatOpen(false);\r\n+    setSelectedChatItem(null);\r\n+    \r\n+    document.body.style.position = '';\r\n+    document.body.style.top = '';\r\n+    document.body.style.width = '';\r\n+    document.body.style.overflow = '';\r\n+    document.body.removeAttribute('data-scroll-y');\r\n+  };\r\n+\r\n+  // Handle inquire click\r\n+  const handleInquireClick = () => {\r\n+    alert('Inquiry feature coming soon!');\r\n+  };\r\n+\r\n+  // Handle logout\r\n+  const handleLogout = async () => {\r\n+    try {\r\n+      await signOut(auth);\r\n+      navigate('/');\r\n+    } catch (error) {\r\n+      console.error('Error signing out:', error);\r\n+    }\r\n+  };\r\n+\r\n+  // Handle login\r\n+  const handleLogin = () => {\r\n+    navigate('/auth', { \r\n+      state: { \r\n+        mode: 'login',\r\n+        from: window.location.pathname\r\n+      }\r\n+    });\r\n+  };\r\n+\r\n+  // Effects\r\n+  useEffect(() => {\r\n+    const fetchShopData = async () => {\r\n+      if (user && user.uid) {\r\n+        try {\r\n+          const data = await getShopData(user.uid);\r\n+          setShopData(data);\r\n+        } catch (error) {\r\n+          console.error('Error fetching shop data:', error);\r\n+        }\r\n+      }\r\n+    };\r\n+    \r\n+    if (isAuthenticated) {\r\n+      fetchShopData();\r\n+    }\r\n+  }, [user, isAuthenticated]);\r\n+\r\n+  useEffect(() => {\r\n+    if (isAuthenticated) {\r\n+      const randomIndex = Math.floor(Math.random() * MOTIVATIONAL_MESSAGES.length);\r\n+      setMotivationalMessage(MOTIVATIONAL_MESSAGES[randomIndex]);\r\n+    }\r\n+  }, [isAuthenticated]);\r\n+\r\n+  useEffect(() => {\r\n+    const pinnedStyleId = localStorage.getItem('pinnedStyleId');\r\n+    \r\n+    if (pinnedStyleId) {\r\n+      const pinnedStyle = Object.values(WELCOME_STYLES).find(\r\n+        style => style.id.toString() === pinnedStyleId\r\n+      );\r\n+      \r\n+      if (pinnedStyle) {\r\n+        setCurrentStyle(pinnedStyle);\r\n+        setIsPinned(true);\r\n+        return;\r\n+      }\r\n+    }\r\n+    \r\n+    const styles = Object.values(WELCOME_STYLES);\r\n+    const randomStyle = styles[Math.floor(Math.random() * styles.length)];\r\n+    setCurrentStyle(randomStyle);\r\n+  }, []);\r\n+\r\n+  useEffect(() => {\r\n+    if (activeTab === 'nearby' && userLocation) {\r\n+      fetchNearbyItems();\r\n+      setHasSearched(true);\r\n+    }\r\n+  }, [activeTab, userLocation]);\r\n+\r\n+  useEffect(() => {\r\n+    if (locationPermission === 'pending') {\r\n+      requestLocation();\r\n+    }\r\n+  }, []);\r\n+\r\n+  useEffect(() => {\r\n+    if (userLocation) {\r\n+      if (activeTab === 'nearby') {\r\n+        fetchNearbyItems();\r\n+        setHasSearched(true);\r\n+      }\r\n+      \r\n+      if (activeTab === 'featured') {\r\n+        loadCategorizedItems();\r\n+      }\r\n+      \r\n+      setUpdatingLocation(false);\r\n+    }\r\n+  }, [userLocation, activeTab]);\r\n+\r\n+  useEffect(() => {\r\n+  const loadTabContent = async () => {\r\n+    console.log('📑 Loading tab content...', { activeTab, effectiveLocation });\r\n+    \r\n+    try {\r\n+      setLoading(true);\r\n+      setError(null);\r\n+  \r\n+      switch (activeTab) {\r\n+        case 'featured':\r\n+          // ✅ Wait for effectiveLocation before loading items\r\n+          if (effectiveLocation) {\r\n+            console.log('📦 Loading featured items...');\r\n+            await loadCategorizedItems();\r\n+          } else {\r\n+            console.log('⏳ Waiting for location...');\r\n+            setLoading(false);\r\n+          }\r\n+          return;\r\n+        case 'nearby':\r\n+          setLoading(false);\r\n+          break;\r\n+        case 'media':\r\n+          setLoading(false);\r\n+          break;\r\n+        default:\r\n+          setLoading(false);\r\n+      }\r\n+    } catch (error) {\r\n+      console.error('Error loading content:', error);\r\n+      setError('Failed to load content. Please try again later.');\r\n+      setLoading(false);\r\n+    }\r\n+  };\r\n+\r\n+  loadTabContent();\r\n+}, [activeTab, user?.uid, effectiveLocation]); // ✅ Added effectiveLocation dependency\r\n+\r\n+  useEffect(() => {\r\n+    if (activeTab === 'featured') {\r\n+      loadCategorizedItems();\r\n+    }\r\n+    \r\n+    const refreshInterval = setInterval(() => {\r\n+      if (activeTab === 'featured') {\r\n+        loadCategorizedItems();\r\n+      }\r\n+    }, 300000);\r\n+\r\n+    return () => clearInterval(refreshInterval);\r\n+  }, [activeTab, currentPage]);\r\n+\r\n+  // Ping animation effect (disabled on mobile for performance)\r\n+  useEffect(() => {\r\n+    if (window.innerWidth < 768) return;\r\n+    \r\n+    const container = document.querySelector('.page-container');\r\n+    if (!container) return;\r\n+\r\n+    const createPing = () => {\r\n+      const ping = document.createElement('div');\r\n+      ping.className = 'ping';\r\n+      \r\n+      ping.style.left = `${Math.random() * 100}%`;\r\n+      ping.style.top = `${Math.random() * 100}%`;\r\n+      ping.style.zIndex = '0';\r\n+      \r\n+      container.appendChild(ping);\r\n+      \r\n+      setTimeout(() => {\r\n+        if (ping && ping.parentNode) {\r\n+          ping.remove();\r\n+        }\r\n+      }, 3000);\r\n+    };\r\n+\r\n+    const createPingGroup = (count) => {\r\n+      for (let i = 0; i < count; i++) {\r\n+        setTimeout(() => {\r\n+          createPing();\r\n+        }, i * 200);\r\n+      }\r\n+    };\r\n+\r\n+    const pingCounts = [10, 30, 20];\r\n+    let currentIndex = 0;\r\n+\r\n+    const interval = setInterval(() => {\r\n+      const count = pingCounts[currentIndex];\r\n+      createPingGroup(count);\r\n+      currentIndex = (currentIndex + 1) % pingCounts.length;\r\n+    }, 3000);\r\n+    \r\n+    return () => {\r\n+      clearInterval(interval);\r\n+      const pings = container.getElementsByClassName('ping');\r\n+      while (pings.length > 0) {\r\n+        pings[0].remove();\r\n+      }\r\n+    };\r\n+  }, []);\r\n+\r\n+  // Cleanup on unmount\r\n+  useEffect(() => {\r\n+    return () => {\r\n+      document.body.style.position = '';\r\n+      document.body.style.top = '';\r\n+      document.body.style.width = '';\r\n+      document.body.style.overflow = '';\r\n+      document.body.removeAttribute('data-scroll-y');\r\n+      \r\n+      if (sliderAnimationRef.current) {\r\n+        cancelAnimationFrame(sliderAnimationRef.current);\r\n+      }\r\n+    };\r\n+  }, []);\r\n+\r\n+  if (!currentStyle) return null;\r\n+\r\n+  return (\r\n+    <PageContainer className=\"page-container\" theme={currentStyle}>\r\n+      <ThemeDecorations theme={currentStyle} />\r\n+      <Header theme={currentStyle}>\r\n+        <Logo onClick={() => navigate('/')} theme={currentStyle}>\r\n+          KALKODE\r\n+        </Logo>\r\n+\r\n+        <HeaderControls>\r\n+          <HeaderButton \r\n+            onClick={refreshTheme}\r\n+            theme={currentStyle}\r\n+            title=\"Random theme\"\r\n+          >\r\n+            <RefreshCw size={20} className={isRefreshing ? \"spinning\" : \"\"} />\r\n+          </HeaderButton>\r\n+          \r\n+          <HeaderButton \r\n+            onClick={togglePinStyle} \r\n+            theme={currentStyle}\r\n+            className={isPinned ? \"pinned\" : \"\"}\r\n+            title={isPinned ? \"Unpin theme\" : \"Pin theme\"}\r\n+          >\r\n+            <Pin size={20} fill={isPinned ? currentStyle.colors.accent : \"none\"} />\r\n+          </HeaderButton>\r\n+          \r\n+          {isAuthenticated && (\r\n+            <HeaderButton \r\n+              onClick={handleLogout}\r\n+              theme={currentStyle}\r\n+              title=\"Logout\"\r\n+            >\r\n+              <LogOut size={20} />\r\n+            </HeaderButton>\r\n+          )}\r\n+        </HeaderControls>\r\n+      </Header>\r\n+\r\n+      <MainContent isAuthenticated={isAuthenticated}>\r\n+        <WelcomeSection theme={currentStyle}>\r\n+          {isAuthenticated && shopData ? (\r\n+            <>\r\n+              <ProfileSection>\r\n+                <ProfileImage theme={currentStyle}>\r\n+                  {shopData.profile ? (\r\n+                    <img src={shopData.profile} alt={shopData.name || 'Shop Profile'} />\r\n+                  ) : (\r\n+                    <div style={{ \r\n+                      width: '100%', \r\n+                      height: '100%', \r\n+                      background: currentStyle?.colors?.accent || '#800000',\r\n+                      display: 'flex',\r\n+                      alignItems: 'center',\r\n+                      justifyContent: 'center',\r\n+                      color: '#fff',\r\n+                      fontSize: '2rem'\r\n+                    }}>\r\n+                      {(shopData.name?.charAt(0) || user.email?.charAt(0) || 'S').toUpperCase()}\r\n+                    </div>\r\n+                  )}\r\n+                </ProfileImage>\r\n+                <ShopName theme={currentStyle}>{shopData.name || 'My Shop'}</ShopName>\r\n+              </ProfileSection>         \r\n+\r\n+              <MotivationalMessage theme={currentStyle}>\r\n+                {motivationalMessage}\r\n+              </MotivationalMessage>\r\n+            </>\r\n+          ) : (\r\n+            <>\r\n+              <h1>Welcome to KalKode</h1>\r\n+              <p>Trade With Your Community.</p>\r\n+\r\n+              <ActionButtonContainer>\r\n+                <ActionButton theme={currentStyle} onClick={handleOpenShop}>\r\n+                  Open Up Shop\r\n+                </ActionButton>\r\n+                <ActionButton \r\n+                  theme={currentStyle}\r\n+                  onClick={handleLogin}\r\n+                  variant=\"outline\"\r\n+                >\r\n+                  Sign In\r\n+                </ActionButton>\r\n+              </ActionButtonContainer>\r\n+            </>\r\n+          )}\r\n+\r\n+\r\n+        </WelcomeSection>\r\n+\r\n+        <TabContainer>\r\n+          <Tab \r\n+            theme={currentStyle}\r\n+            active={activeTab === 'featured'} \r\n+            onClick={() => setActiveTab('featured')}\r\n+          >\r\n+            <Package size={16} />\r\n+            Featured\r\n+          </Tab>\r\n+          <Tab\r\n+            theme={currentStyle} \r\n+            active={activeTab === 'nearby'} \r\n+            onClick={() => setActiveTab('nearby')}\r\n+          >\r\n+            <Navigation size={16} />\r\n+            Nearby\r\n+          </Tab>\r\n+          <Tab\r\n+            theme={currentStyle} \r\n+            active={activeTab === 'media'} \r\n+            onClick={() => setActiveTab('media')}\r\n+          >\r\n+            <Film size={16} />\r\n+            Media\r\n+          </Tab>\r\n+        </TabContainer>\r\n+\r\n+\r\n+        <LocationIndicator2 theme={currentStyle} isPinned={isCityPinned}>\r\n+          <button \r\n+            className=\"location-icon-btn\"\r\n+            onClick={handleLocationToCity}\r\n+            disabled={isConvertingToCity}\r\n+            title=\"Get region from current location\"\r\n+          >\r\n+            {isConvertingToCity ? (\r\n+              <div className=\"updating-spinner\" />\r\n+            ) : (\r\n+              <Navigation size={20} />\r\n+            )}\r\n+          </button>\r\n+          \r\n+          <input\r\n+            type=\"text\"\r\n+            className=\"location-input\"\r\n+            value={cityInputValue}\r\n+            onChange={(e) => setCityInputValue(e.target.value)}\r\n+            placeholder={\r\n+              isIPLocation ? \r\n+                `${effectiveLocation?.city || 'Location'} (IP-based)` : \r\n+                cityRegion ? cityRegion : \"Click location icon to share\"\r\n+            }\r\n+            readOnly\r\n+          />\r\n+\r\n+          <button\r\n+            className=\"pin-icon-btn\"\r\n+            onClick={handleToggleCityPin}\r\n+            disabled={!cityRegion || cityRegion === 'Not available' || cityRegion === 'Error'}\r\n+            title={isCityPinned ? \"Unpin location\" : \"Pin location\"}\r\n+          >\r\n+            <Pin \r\n+              size={18} \r\n+              fill={isCityPinned ? currentStyle.colors.accent : \"none\"}\r\n+            />\r\n+          </button>\r\n+        </LocationIndicator2>\r\n+\r\n+\r\n+        {/* Nearby Items Tab */}\r\n+        {activeTab === 'nearby' && (\r\n+          <>\r\n+            <SearchContainer>\r\n+              <SearchInput\r\n+                type=\"text\"\r\n+                placeholder=\"Enter address or ZIP code...\"\r\n+                value={searchAddress}\r\n+                onChange={(e) => setSearchAddress(e.target.value)}\r\n+                onKeyPress={(e) => e.key === 'Enter' && handleAddressSearch()}\r\n+              />\r\n+              <SearchButtonGroup>\r\n+                <SearchButton \r\n+                  onClick={handleAddressSearch}\r\n+                  disabled={searching || !searchAddress.trim()}\r\n+                >\r\n+                  <Navigation size={16} />\r\n+                  Search\r\n+                </SearchButton>\r\n+                <SearchButton \r\n+                  onClick={handleLiveLocation}\r\n+                  disabled={searching}\r\n+                  variant=\"live\"\r\n+                >\r\n+                  <Navigation size={16} />\r\n+                  Current\r\n+                </SearchButton>\r\n+              </SearchButtonGroup>\r\n+            </SearchContainer>\r\n+\r\n+            <GridContainer>\r\n+              {error ? (\r\n+                <EmptyGridMessage>\r\n+                  <h3>Oops!</h3>\r\n+                  <p>{error}</p>\r\n+                </EmptyGridMessage>\r\n+              ) : loading ? (\r\n+                <div style={{ textAlign: 'center', gridColumn: '1/-1' }}>\r\n+                  <LoadingSpinner />\r\n+                </div>\r\n+              ) : !hasSearched ? (\r\n+                <EmptyGridMessage>\r\n+                  <h3>Find Items Near You</h3>\r\n+                  <p>Enter your address or use current location to discover items in your area</p>\r\n+                </EmptyGridMessage>\r\n+              ) : nearbyItems.length === 0 ? (\r\n+                <EmptyGridMessage>\r\n+                  <h3>No Items Found</h3>\r\n+                  <p>No items found in this location. Try searching a different area.</p>\r\n+                </EmptyGridMessage>\r\n+              ) : (              \r\n+                nearbyItems.map(item => (\r\n+                  <FeaturedItem \r\n+                    key={`${item.shopId}-${item.id}`} \r\n+                    item={{\r\n+                      ...item,\r\n+                      location: item.formattedDistance\r\n+                    }}\r\n+                    showDistance={true}\r\n+                    theme={currentStyle}\r\n+                    onItemClick={handleItemClick}\r\n+                  />\r\n+                ))\r\n+              )}\r\n+            </GridContainer>\r\n+          </>\r\n+        )}\r\n+\r\n+        {/* Featured Items Tab */}\r\n+        {activeTab === 'featured' && (\r\n+          <>\r\n+            {/* Search container with Filter */}\r\n+            <SearchContainer>\r\n+              <SearchInput\r\n+                type=\"text\"\r\n+                placeholder=\"Search for items...\"\r\n+                value={featuredSearchTerm}\r\n+                onChange={(e) => setFeaturedSearchTerm(e.target.value)}\r\n+                onKeyPress={(e) => e.key === 'Enter' && handleFeaturedSearch()}\r\n+              />\r\n+              <SearchButtonGroup>\r\n+                <SearchButton \r\n+                  onClick={handleFeaturedSearch}\r\n+                  disabled={isSearching || !featuredSearchTerm.trim()}\r\n+                >\r\n+                  <Search size={16} />\r\n+                  Search\r\n+                </SearchButton>\r\n+                {hasSearchResults && (\r\n+                  <SearchButton onClick={handleClearFeaturedSearch} variant=\"live\">\r\n+                    <X size={16} />\r\n+                    Clear\r\n+                  </SearchButton>\r\n+                )}\r\n+\r\n+                {/* Filter Button */}\r\n+                <SortContainer className=\"sort-container\">\r\n+                  <SearchButton \r\n+                    onClick={() => setSortMenuOpen(!sortMenuOpen)}\r\n+                    style={{ position: 'relative' }}\r\n+                  >\r\n+                    <Filter size={16} />\r\n+                    {sortBy !== 'recent' && (\r\n+                      <div style={{\r\n+                        position: 'absolute',\r\n+                        top: '4px',\r\n+                        right: '4px',\r\n+                        width: '6px',\r\n+                        height: '6px',\r\n+                        borderRadius: '50%',\r\n+                        background: currentStyle?.colors?.accent || '#800000'\r\n+                      }} />\r\n+                    )}\r\n+                  </SearchButton>\r\n+                  \r\n+                  <SortDropdown theme={currentStyle} isOpen={sortMenuOpen}>\r\n+                    <div style={{\r\n+                      padding: '0.5rem 1rem 0.75rem',\r\n+                      fontSize: '0.75rem',\r\n+                      fontWeight: '700',\r\n+                      textTransform: 'uppercase',\r\n+                      letterSpacing: '1px',\r\n+                      color: currentStyle?.colors?.accent || '#800000',\r\n+                      borderBottom: `2px solid ${currentStyle?.colors?.accent || '#800000'}`,\r\n+                      marginBottom: '0.75rem',\r\n+                      fontFamily: currentStyle?.fonts?.heading || 'inherit'\r\n+                    }}>\r\n+                      Sort By\r\n+                    </div>\r\n+                  \r\n+                    <SortOption \r\n+                      theme={currentStyle}\r\n+                      active={sortBy === 'recent'}\r\n+                      onClick={() => {\r\n+                        if (!userLocation) {\r\n+                          requestLocation();\r\n+                          return;\r\n+                        }\r\n+                        setSortBy('recent');\r\n+                        setSortMenuOpen(false);\r\n+                        loadCategorizedItems();\r\n+                      }}\r\n+                    >\r\n+                      <Package size={16} />\r\n+                      <div style={{ display: 'flex', flexDirection: 'column', flex: 1 }}>\r\n+                        <span>Most Recent</span>\r\n+                        <span style={{ \r\n+                          fontSize: '0.7rem', \r\n+                          opacity: 0.7,\r\n+                          fontWeight: '400'\r\n+                        }}>\r\n+                          All items, newest first\r\n+                        </span>\r\n+                      </div>\r\n+                      {!userLocation && (\r\n+                        <span style={{ \r\n+                          fontSize: '0.65rem', \r\n+                          opacity: 0.6,\r\n+                          marginLeft: 'auto',\r\n+                          fontStyle: 'italic'\r\n+                        }}>\r\n+                          (needs location)\r\n+                        </span>\r\n+                      )}\r\n+                    </SortOption>\r\n+                    \r\n+                    <SortOption \r\n+                      theme={currentStyle}\r\n+                      active={sortBy === 'proximity'}\r\n+                      onClick={() => {\r\n+                        if (!userLocation) {\r\n+                          requestLocation();\r\n+                        }\r\n+                        setSortBy('proximity');\r\n+                        setSortMenuOpen(false);\r\n+                        loadCategorizedItems();\r\n+                      }}\r\n+                    >\r\n+                      <Navigation size={16} />\r\n+                      <div style={{ display: 'flex', flexDirection: 'column', flex: 1 }}>\r\n+                        <span>Closest First</span>\r\n+                        <span style={{ \r\n+                          fontSize: '0.7rem', \r\n+                          opacity: 0.7,\r\n+                          fontWeight: '400'\r\n+                        }}>\r\n+                          All items by distance\r\n+                        </span>\r\n+                      </div>\r\n+                      {!userLocation && (\r\n+                        <span style={{ \r\n+                          fontSize: '0.65rem', \r\n+                          opacity: 0.6,\r\n+                          marginLeft: 'auto',\r\n+                          fontStyle: 'italic'\r\n+                        }}>\r\n+                          (needs location)\r\n+                        </span>\r\n+                      )}\r\n+                    </SortOption>\r\n+                    \r\n+                    <SortOption \r\n+                      theme={currentStyle}\r\n+                      active={sortBy === 'price-low'}\r\n+                      onClick={() => {\r\n+                        if (!userLocation) {\r\n+                          requestLocation();\r\n+                          return;\r\n+                        }\r\n+                        setSortBy('price-low');\r\n+                        setSortMenuOpen(false);\r\n+                        loadCategorizedItems();\r\n+                      }}\r\n+                    >\r\n+                      <span style={{ fontSize: '1rem', fontWeight: '600' }}>$</span>\r\n+                      <div style={{ display: 'flex', flexDirection: 'column', flex: 1 }}>\r\n+                        <span>Price: Low to High</span>\r\n+                        <span style={{ \r\n+                          fontSize: '0.7rem', \r\n+                          opacity: 0.7,\r\n+                          fontWeight: '400'\r\n+                        }}>\r\n+                          All items by price\r\n+                        </span>\r\n+                      </div>\r\n+                      {!userLocation && (\r\n+                        <span style={{ \r\n+                          fontSize: '0.65rem', \r\n+                          opacity: 0.6,\r\n+                          marginLeft: 'auto',\r\n+                          fontStyle: 'italic'\r\n+                        }}>\r\n+                          (needs location)\r\n+                        </span>\r\n+                      )}\r\n+                    </SortOption>\r\n+                    \r\n+                    <SortOption \r\n+                      theme={currentStyle}\r\n+                      active={sortBy === 'price-high'}\r\n+                      onClick={() => {\r\n+                        if (!userLocation) {\r\n+                          requestLocation();\r\n+                          return;\r\n+                        }\r\n+                        setSortBy('price-high');\r\n+                        setSortMenuOpen(false);\r\n+                        loadCategorizedItems();\r\n+                      }}\r\n+                    >\r\n+                      <span style={{ fontSize: '1rem', fontWeight: '600' }}>$$$</span>\r\n+                      <div style={{ display: 'flex', flexDirection: 'column', flex: 1 }}>\r\n+                        <span>Price: High to Low</span>\r\n+                        <span style={{ \r\n+                          fontSize: '0.7rem', \r\n+                          opacity: 0.7,\r\n+                          fontWeight: '400'\r\n+                        }}>\r\n+                          All items by price\r\n+                        </span>\r\n+                      </div>\r\n+                      {!userLocation && (\r\n+                        <span style={{ \r\n+                          fontSize: '0.65rem', \r\n+                          opacity: 0.6,\r\n+                          marginLeft: 'auto',\r\n+                          fontStyle: 'italic'\r\n+                        }}>\r\n+                          (needs location)\r\n+                        </span>\r\n+                      )}\r\n+                    </SortOption>\r\n+                  </SortDropdown>\r\n+                </SortContainer>\r\n+              </SearchButtonGroup>\r\n+            </SearchContainer>\r\n+\r\n+            {/* Show search results or default categorized view */}\r\n+            {hasSearchResults ? (\r\n+              <div>\r\n+                <CategoryHeader theme={currentStyle}>\r\n+                  <h2>Search Results ({searchResults.length})</h2>\r\n+                </CategoryHeader>\r\n+\r\n+                {error ? (\r\n+                  <EmptyGridMessage>\r\n+                    <h3>No Results Found</h3>\r\n+                    <p>{error}</p>\r\n+                  </EmptyGridMessage>\r\n+                ) : isSearching ? (\r\n+                  <div style={{ textAlign: 'center', padding: '2rem' }}>\r\n+                    <LoadingSpinner />\r\n+                  </div>\r\n+                ) : searchResults.length === 0 ? (\r\n+                  <EmptyGridMessage>\r\n+                    <h3>No Items Found</h3>\r\n+                    <p>No items match your search criteria.</p>\r\n+                  </EmptyGridMessage>\r\n+                ) : (\r\n+                  <GridContainer>\r\n+                    {searchResults.map(item => (\r\n+                      <FeaturedItem \r\n+                        key={`search-${item.shopId}-${item.id}`} \r\n+                        item={item}\r\n+                        theme={currentStyle}\r\n+                        onItemClick={handleItemClick}\r\n+                        showDistance={true}\r\n+                      />\r\n+                    ))}\r\n+                  </GridContainer>\r\n+                )}\r\n+              </div>\r\n+            ) : (\r\n+              <div>\r\n+                {/* Featured Items Slider */}\r\n+                <CategoryHeader theme={currentStyle}>\r\n+                  <h2>Featured Items</h2>\r\n+                  <span className=\"view-all\">\r\n+                    {featuredItems.length} items\r\n+                  </span>\r\n+                </CategoryHeader>\r\n+\r\n+                <CategoryGridWrapper>\r\n+                {/* Desktop: Show all items in grid */}\r\n+                <div className=\"desktop-grid\" style={{ display: 'contents' }}>\r\n+                  {featuredItems.map(item => (\r\n+                    <div key={`featured-${item.shopId}-${item.id}`} className=\"desktop-only\" \r\n+                         style={{ display: window.innerWidth > 768 ? 'block' : 'none' }}>\r\n+                      <FeaturedItem\r\n+                        item={item}\r\n+                        theme={currentStyle}\r\n+                        onItemClick={handleItemClick}\r\n+                        showDistance={true}\r\n+                      />\r\n+                    </div>\r\n+                  ))}\r\n+                </div>\r\n+                \r\n+                {/* Mobile: Show all 10 items in a 2-row scrollable grid */}\r\n+                <CategoryScrollableGrid theme={currentStyle} className=\"mobile-only\">\r\n+                  {featuredItems.map(item => (\r\n+                    <FeaturedItem\r\n+                      key={`featured-mobile-${item.shopId}-${item.id}`}\r\n+                      item={item}\r\n+                      theme={currentStyle}\r\n+                      onItemClick={handleItemClick}\r\n+                      showDistance={true}\r\n+                    />\r\n+                  ))}\r\n+                </CategoryScrollableGrid>\r\n+              </CategoryGridWrapper>\r\n+                \r\n+              {Object.entries(categories).map(([categoryName, items]) => {\r\n+          if (items.length === 0) return null;\r\n+                      \r\n+          return (\r\n+            <div key={categoryName} style={{ marginTop: '3rem' }}>\r\n+              <CategoryHeader theme={currentStyle}>\r\n+                <h2>{categoryName}</h2>\r\n+                <span className=\"view-all\">\r\n+                  {items.length} items\r\n+                </span>\r\n+              </CategoryHeader>\r\n+          \r\n+              <CategoryGridWrapper>\r\n+                {/* Desktop: Show all items in grid */}\r\n+                <div className=\"desktop-grid\" style={{ display: 'contents' }}>\r\n+                  {items.map(item => (\r\n+                    <div key={`${categoryName}-${item.shopId}-${item.id}`} className=\"desktop-only\"\r\n+                         style={{ display: window.innerWidth > 768 ? 'block' : 'none' }}>\r\n+                      <FeaturedItem\r\n+                        item={item}\r\n+                        theme={currentStyle}\r\n+                        onItemClick={handleItemClick}\r\n+                        showDistance={true}\r\n+                      />\r\n+                    </div>\r\n+                  ))}\r\n+                </div>\r\n+                \r\n+                {/* Mobile: Show all items in a scrollable grid (1 or 2 rows based on count) */}\r\n+                <CategoryScrollableGrid theme={currentStyle} className=\"mobile-only\" itemCount={items.length}>\r\n+                  {items.map(item => (\r\n+                    <FeaturedItem\r\n+                      key={`${categoryName}-mobile-${item.shopId}-${item.id}`}\r\n+                      item={item}\r\n+                      theme={currentStyle}\r\n+                      onItemClick={handleItemClick}\r\n+                      showDistance={true}\r\n+                    />\r\n+                  ))}\r\n+                </CategoryScrollableGrid>\r\n+              </CategoryGridWrapper>\r\n+            </div>\r\n+          );\r\n+        })}\r\n+              </div>\r\n+            )}\r\n+          </>\r\n+        )}\r\n+\r\n+        {/* Media Tab */}\r\n+        {activeTab === 'media' && (\r\n+          <EmptyGridMessage>\r\n+            <h3>Featured Media</h3>\r\n+            <p>Coming soon! Discover videos and content from local creators.</p>\r\n+          </EmptyGridMessage>\r\n+        )}\r\n+      </MainContent>\r\n+\r\n+      {/* Style Indicator Only */}\r\n+      <StyleIndicator theme={currentStyle}>\r\n+        <span className=\"style-number\">{currentStyle.id}</span>\r\n+        <span>{currentStyle.name}</span>\r\n+      </StyleIndicator>\r\n+\r\n+      {/* Zoomed Item View - Updated to match ShopPublicView */}\r\n+      {/* Zoomed Item View - 75/25 Split */}\r\n+      {/* Zoomed Item View - 70/30 Split with 2:5 Card */}\r\n+      {zoomedItem && (\r\n+        <ZoomOverlay onClick={handleCloseZoom} theme={currentStyle}>\r\n+          <ZoomContainer \r\n+            theme={currentStyle}\r\n+            onClick={(e) => e.stopPropagation()}\r\n+          >\r\n+            {/* 70% - Image Carousel */}\r\n+            <ImageCarousel \r\n+              theme={currentStyle} \r\n+              currentIndex={currentImageIndex}\r\n+            >\r\n+              {/* Close button */}\r\n+              <button \r\n+                className=\"close-overlay-button\"\r\n+                onClick={handleCloseZoom}\r\n+                aria-label=\"Close\"\r\n+              >\r\n+                <X size={20} />\r\n+              </button>\r\n+            \r\n+              <div className=\"image-track\">\r\n+                {zoomedItem.images && zoomedItem.images.filter(Boolean).length > 0 ? (\r\n+                  zoomedItem.images.filter(Boolean).map((image, index) => (\r\n+                    <div key={index} className=\"image-slide\">\r\n+                      <img src={image} alt={`${zoomedItem.name} ${index + 1}`} />\r\n+                    </div>\r\n+                  ))\r\n+                ) : (\r\n+                  <div className=\"image-slide\">\r\n+                    <div className=\"no-image\">\r\n+                      <Package size={40} />\r\n+                      <p>No image</p>\r\n+                    </div>\r\n+                  </div>\r\n+                )}\r\n+              </div>\r\n+              \r\n+              {/* Navigation */}\r\n+              {zoomedItem.images && zoomedItem.images.filter(Boolean).length > 1 && (\r\n+                <>\r\n+                  <button \r\n+                    className=\"carousel-button prev\"\r\n+                    onClick={() => setCurrentImageIndex(prev => \r\n+                      prev === 0 ? zoomedItem.images.filter(Boolean).length - 1 : prev - 1\r\n+                    )}\r\n+                    aria-label=\"Previous\"\r\n+                  >\r\n+                    <ChevronLeft size={20} />\r\n+                  </button>\r\n+                  <button \r\n+                    className=\"carousel-button next\"\r\n+                    onClick={() => setCurrentImageIndex(prev => \r\n+                      prev === zoomedItem.images.filter(Boolean).length - 1 ? 0 : prev + 1\r\n+                    )}\r\n+                    aria-label=\"Next\"\r\n+                  >\r\n+                    <ChevronRight size={20} />\r\n+                  </button>\r\n+                  \r\n+                  <div className=\"carousel-dots\">\r\n+                    {zoomedItem.images.filter(Boolean).map((_, index) => (\r\n+                      <button\r\n+                        key={index}\r\n+                        className=\"dot\"\r\n+                        style={{ opacity: index === currentImageIndex ? 1 : 0.3 }}\r\n+                        onClick={() => setCurrentImageIndex(index)}\r\n+                        aria-label={`Image ${index + 1}`}\r\n+                      />\r\n+                    ))}\r\n+                  </div>\r\n+                </>\r\n+              )}\r\n+            </ImageCarousel>\r\n+            \r\n+            {/* 30% - Compact Details */}\r\n+            <ZoomContent theme={currentStyle}>\r\n+              {/* Name & Price Row */}\r\n+              <div style={{ \r\n+                display: 'flex', \r\n+                justifyContent: 'space-between', \r\n+                alignItems: 'baseline',\r\n+                gap: '0.75rem'\r\n+              }}>\r\n+                <h3 style={{\r\n+                  fontSize: '1.1rem',\r\n+                  margin: 0,\r\n+                  fontWeight: '600',\r\n+                  color: currentStyle?.colors?.text || '#FFFFFF',\r\n+                  flex: 1,\r\n+                  overflow: 'hidden',\r\n+                  textOverflow: 'ellipsis',\r\n+                  whiteSpace: 'nowrap'\r\n+                }}>\r\n+                  {zoomedItem.name}\r\n+                </h3>\r\n+                \r\n+                <div style={{\r\n+                  fontSize: '1.2rem',\r\n+                  fontWeight: 'bold',\r\n+                  color: currentStyle?.colors?.accent || '#800000',\r\n+                  whiteSpace: 'nowrap'\r\n+                }}>\r\n+                  ${parseFloat(zoomedItem.price || 0).toFixed(2)}\r\n+                </div>\r\n+              </div>\r\n+              \r\n+              {/* Info Row: Distance • Shop • Stock */}\r\n+              <div style={{\r\n+                display: 'flex',\r\n+                alignItems: 'center',\r\n+                gap: '0.75rem',\r\n+                fontSize: '0.75rem',\r\n+                flexWrap: 'wrap',\r\n+                color: currentStyle?.colors?.text || '#FFFFFF',\r\n+                opacity: 0.8\r\n+              }}>\r\n+                {zoomedItem.formattedDistance && (\r\n+                  <>\r\n+                    <div style={{ display: 'flex', alignItems: 'center', gap: '0.25rem' }}>\r\n+                      <Navigation size={11} />\r\n+                      <span>{zoomedItem.formattedDistance}</span>\r\n+                    </div>\r\n+                    <span>•</span>\r\n+                  </>\r\n+                )}\r\n+                \r\n+                {zoomedItem.shopName && (\r\n+                  <>\r\n+                    <div \r\n+                      style={{ \r\n+                        display: 'flex', \r\n+                        alignItems: 'center', \r\n+                        gap: '0.25rem',\r\n+                        cursor: 'pointer',\r\n+                        textDecoration: 'underline'\r\n+                      }}\r\n+                      onClick={(e) => {\r\n+                        e.stopPropagation();\r\n+                        navigate(`/shop/${zoomedItem.shopId}/view`);\r\n+                      }}\r\n+                    >\r\n+                      <Store size={11} />\r\n+                      <span>{zoomedItem.shopName}</span>\r\n+                    </div>\r\n+                    <span>•</span>\r\n+                  </>\r\n+                )}\r\n+                \r\n+                {zoomedItem.quantity !== undefined && (\r\n+                  <div style={{ display: 'flex', alignItems: 'center', gap: '0.25rem' }}>\r\n+                    <div style={{\r\n+                      width: '5px',\r\n+                      height: '5px',\r\n+                      borderRadius: '50%',\r\n+                      background: parseInt(zoomedItem.quantity) > 0 ? '#4CAF50' : '#FF5252'\r\n+                    }} />\r\n+                    <span style={{\r\n+                      color: parseInt(zoomedItem.quantity) > 0 ? '#4CAF50' : '#FF5252',\r\n+                      fontWeight: '500'\r\n+                    }}>\r\n+                      {parseInt(zoomedItem.quantity) > 0 ? \r\n+                        `${zoomedItem.quantity} in stock` : \r\n+                        'Out of stock'\r\n+                      }\r\n+                    </span>\r\n+                  </div>\r\n+                )}\r\n+              </div>\r\n+              \r\n+              {/* Quantity Selector */}\r\n+              <div style={{\r\n+                display: 'flex',\r\n+                alignItems: 'center',\r\n+                justifyContent: 'space-between',\r\n+                background: `${currentStyle?.colors?.surface || 'rgba(255, 255, 255, 0.05)'}20`,\r\n+                borderRadius: '6px',\r\n+                padding: '0.5rem 0.75rem'\r\n+              }}>\r\n+                <span style={{\r\n+                  fontSize: '0.8rem',\r\n+                  fontWeight: '600',\r\n+                  color: currentStyle?.colors?.text || '#FFFFFF'\r\n+                }}>\r\n+                  Qty\r\n+                </span>\r\n+                \r\n+                <div style={{ display: 'flex', alignItems: 'center', gap: '0.75rem' }}>\r\n+                  <button \r\n+                    onClick={() => adjustQuantity(-1)}\r\n+                    disabled={orderQuantity <= 1}\r\n+                    style={{\r\n+                      width: '24px',\r\n+                      height: '24px',\r\n+                      borderRadius: '50%',\r\n+                      border: `1.5px solid ${currentStyle?.colors?.accent || '#800000'}`,\r\n+                      background: 'transparent',\r\n+                      color: currentStyle?.colors?.accent || '#800000',\r\n+                      display: 'flex',\r\n+                      alignItems: 'center',\r\n+                      justifyContent: 'center',\r\n+                      cursor: orderQuantity <= 1 ? 'not-allowed' : 'pointer',\r\n+                      opacity: orderQuantity <= 1 ? 0.3 : 1\r\n+                    }}\r\n+                  >\r\n+                    <Minus size={12} />\r\n+                  </button>\r\n+                  \r\n+                  <div style={{\r\n+                    fontSize: '1rem',\r\n+                    fontWeight: 'bold',\r\n+                    color: currentStyle?.colors?.text || 'white',\r\n+                    minWidth: '24px',\r\n+                    textAlign: 'center'\r\n+                  }}>\r\n+                    {orderQuantity}\r\n+                  </div>\r\n+                \r\n+                  <button \r\n+                    onClick={() => adjustQuantity(1)}\r\n+                    disabled={orderQuantity >= parseInt(zoomedItem.quantity || 1)}\r\n+                    style={{\r\n+                      width: '24px',\r\n+                      height: '24px',\r\n+                      borderRadius: '50%',\r\n+                      border: `1.5px solid ${currentStyle?.colors?.accent || '#800000'}`,\r\n+                      background: 'transparent',\r\n+                      color: currentStyle?.colors?.accent || '#800000',\r\n+                      display: 'flex',\r\n+                      alignItems: 'center',\r\n+                      justifyContent: 'center',\r\n+                      cursor: orderQuantity >= parseInt(zoomedItem.quantity || 1) ? 'not-allowed' : 'pointer',\r\n+                      opacity: orderQuantity >= parseInt(zoomedItem.quantity || 1) ? 0.3 : 1\r\n+                    }}\r\n+                  >\r\n+                    <Plus size={12} />\r\n+                  </button>\r\n+                </div>\r\n+              </div>\r\n+                  \r\n+              {/* Order Button */}\r\n+              <button \r\n+                onClick={handleDirectOrder}\r\n+                disabled={parseInt(zoomedItem.quantity || 0) < 1 || orderQuantity > parseInt(zoomedItem.quantity || 0)}\r\n+                style={{\r\n+                  width: '100%',\r\n+                  padding: '0.75rem',\r\n+                  borderRadius: '8px',\r\n+                  border: 'none',\r\n+                  background: parseInt(zoomedItem.quantity || 0) < 1 ? \r\n+                    `${currentStyle?.colors?.accent || '#800000'}40` : \r\n+                    currentStyle?.colors?.accent || '#800000',\r\n+                  color: 'white',\r\n+                  fontSize: '0.9rem',\r\n+                  fontWeight: '600',\r\n+                  display: 'flex',\r\n+                  alignItems: 'center',\r\n+                  justifyContent: 'center',\r\n+                  gap: '0.5rem',\r\n+                  cursor: parseInt(zoomedItem.quantity || 0) < 1 ? 'not-allowed' : 'pointer',\r\n+                  transition: 'all 0.3s'\r\n+                }}\r\n+              >\r\n+                {parseInt(zoomedItem.quantity || 0) < 1 ? (\r\n+                  <>\r\n+                    <X size={16} />\r\n+                    Out of Stock\r\n+                  </>\r\n+                ) : (\r\n+                  <>\r\n+                    <ShoppingCart size={16} />\r\n+                    Order {orderQuantity > 1 && `${orderQuantity} `}· ${(parseFloat(zoomedItem.price || 0) * orderQuantity).toFixed(2)}\r\n+                  </>\r\n+                )}\r\n+              </button>\r\n+            </ZoomContent>\r\n+          </ZoomContainer>\r\n+        </ZoomOverlay>\r\n+      )}\r\n+\r\n+      {/* Chat Overlay */}\r\n+      <ChatOverlay isOpen={chatOpen} onClick={handleCloseChat} />\r\n+      \r\n+      {selectedChatItem && (\r\n+        <OrderChat \r\n+          isOpen={chatOpen} \r\n+          onClose={handleCloseChat} \r\n+          item={selectedChatItem}\r\n+          shopId={selectedChatItem.shopId}\r\n+          shopName={selectedChatItem.shopName}\r\n+          theme={currentStyle}\r\n+        />\r\n+      )}\r\n+    </PageContainer>\r\n+  );\r\n+};\r\n+\r\n+export default WelcomePage;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1759889976876,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2104,9 +2104,8 @@\n   \r\n   return stateMap[stateName] || stateName;\r\n };\r\n \r\n-// Replace handleLocationToZip with handleLocationToCity\r\n const handleLocationToCity = async () => {\r\n   try {\r\n     setIsConvertingToCity(true);\r\n     setError(null);\r\n@@ -2138,15 +2137,30 @@\n     \r\n     // Convert fresh coordinates to city/region\r\n     await convertCoordsToCity(freshLocation.latitude, freshLocation.longitude);\r\n     \r\n+    // ✅ UPDATE: Set effectiveLocation to trigger item re-fetch\r\n+    setEffectiveLocation(freshLocation);\r\n+    setIsIPLocation(false);\r\n+    \r\n+    // ✅ UPDATE: Re-fetch items with new location\r\n+    console.log('🔄 Re-fetching items with new location...');\r\n+    if (activeTab === 'featured') {\r\n+      await loadCategorizedItems();\r\n+    }\r\n+    \r\n   } catch (error) {\r\n     console.error('Error getting fresh location:', error);\r\n     \r\n     // Fallback: use stored location if available\r\n     if (userLocation) {\r\n       console.log('Using stored location as fallback');\r\n       await convertCoordsToCity(userLocation.latitude, userLocation.longitude);\r\n+      \r\n+      // ✅ UPDATE: Still re-fetch with stored location\r\n+      if (activeTab === 'featured') {\r\n+        await loadCategorizedItems();\r\n+      }\r\n     } else {\r\n       setError('Location not available. Please enable location services.');\r\n     }\r\n   } finally {\r\n"
                },
                {
                    "date": 1759890000028,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,3708 @@\n+// src/pages/WelcomePage.js - Mobile-Optimized Version\r\n+import React from 'react';\r\n+import styled from 'styled-components';\r\n+import { useNavigate } from 'react-router-dom';\r\n+import { useEffect, useState, useRef } from 'react';\r\n+import { getFeaturedItems } from '../firebase/firebaseService';\r\n+import FeaturedItem from '../components/shop/FeaturedItem';\r\n+import { Search, Package, Navigation, Film, Filter, Store, Plus, Minus, Pin, ChevronLeft, ChevronRight, X, MessageCircle, ShoppingCart, RefreshCw, LogOut } from 'lucide-react';\r\n+import { getDistance } from 'geolib';\r\n+import OrderChat from '../components/Chat/OrderChat';\r\n+import { collection, getDocs } from 'firebase/firestore';\r\n+import { db, auth } from '../firebase/config';\r\n+import { WELCOME_STYLES } from '../theme/welcomeStyles';\r\n+import { getShopData } from '../firebase/firebaseService';\r\n+import { useAuth } from '../contexts/AuthContext';\r\n+import { useLocation } from '../contexts/LocationContext';\r\n+import LocationDialog from '../components/LocationDialog';\r\n+import ThemeDecorations from '../components/ThemeDecorations';\r\n+import { TransactionService } from '../services/TransactionService';\r\n+import { signOut } from 'firebase/auth';\r\n+\r\n+const getIPBasedLocation = async () => {\r\n+  try {\r\n+    console.log('🌐 Fetching IP-based location from ipapi.co...');\r\n+    const response = await fetch('https://ipapi.co/json/');\r\n+    \r\n+    if (!response.ok) {\r\n+      throw new Error(`HTTP error! status: ${response.status}`);\r\n+    }\r\n+    \r\n+    const data = await response.json();\r\n+    console.log('✅ IP Location data:', data);\r\n+    \r\n+    if (!data.latitude || !data.longitude) {\r\n+      throw new Error('Invalid location data received');\r\n+    }\r\n+    \r\n+    return {\r\n+      latitude: data.latitude,\r\n+      longitude: data.longitude,\r\n+      city: data.city,\r\n+      region: data.region,\r\n+      country: data.country_name,\r\n+      isIPBased: true\r\n+    };\r\n+  } catch (error) {\r\n+    console.error('❌ Error getting IP location:', error);\r\n+    \r\n+    // Fallback to a default location (Houston, TX)\r\n+    console.log('⚠️ Using fallback location: Houston, TX');\r\n+    return {\r\n+      latitude: 29.7604,\r\n+      longitude: -95.3698,\r\n+      city: 'Houston',\r\n+      region: 'Texas',\r\n+      country: 'United States',\r\n+      isIPBased: true,\r\n+      isFallback: true\r\n+    };\r\n+  }\r\n+};\r\n+\r\n+// Mobile-first styled components\r\n+const PageContainer = styled.div.attrs({ className: 'page-container' })`\r\n+  min-height: 100vh;\r\n+  background: ${props => props.theme?.colors?.background || '#000000'};\r\n+  color: ${props => props.theme?.colors?.text || '#FFFFFF'};\r\n+  position: relative;\r\n+  overflow: hidden;\r\n+  \r\n+  /* Mobile-optimized background effects */\r\n+  &::before {\r\n+    content: '';\r\n+    position: absolute;\r\n+    width: 100%;\r\n+    height: 100%;\r\n+    background: ${props => props.theme?.colors?.backgroundGradient || 'radial-gradient(circle at 20% 30%, rgba(128, 0, 0, 0.2) 0%, transparent 50%)'};\r\n+    opacity: 0.8;\r\n+    animation: ${props => props.theme?.animations?.backgroundAnimation || 'galaxySwirl 30s linear infinite'};\r\n+  }\r\n+\r\n+  /* Simplified stars for mobile performance */\r\n+  &::after {\r\n+    content: '';\r\n+    position: absolute;\r\n+    width: 100%;\r\n+    height: 100%;\r\n+    background-image: radial-gradient(circle 1px, ${props => props.theme?.colors?.text || '#FFF'} 1px, transparent 1px);\r\n+    background-size: 100px 100px;\r\n+    opacity: 0.05;\r\n+    \r\n+    @media (min-width: 768px) {\r\n+      background-size: 200px 200px;\r\n+      opacity: 0.1;\r\n+    }\r\n+  }\r\n+\r\n+  /* Reduced ping animations on mobile for performance */\r\n+  .ping {\r\n+    display: none;\r\n+    \r\n+    @media (min-width: 768px) {\r\n+      display: block;\r\n+      position: absolute;\r\n+      width: 2px;\r\n+      height: 2px;\r\n+      border-radius: 50%;\r\n+      background: ${props => props.theme?.colors?.accent || '#800000'};\r\n+      pointer-events: none;\r\n+      z-index: 0;\r\n+    }\r\n+  }\r\n+\r\n+  @keyframes galaxySwirl {\r\n+    0% { transform: rotate(0deg); }\r\n+    100% { transform: rotate(360deg); }\r\n+  }\r\n+`;\r\n+\r\n+// Simplified header with just logo and right-side controls\r\n+const Header = styled.header`\r\n+  width: 100%;\r\n+  height: 60px;\r\n+  padding: 0 1rem;\r\n+  display: flex;\r\n+  align-items: center;\r\n+  justify-content: space-between;\r\n+  background: ${props => `${props.theme?.colors?.headerBg || 'rgba(0, 0, 0, 0.9)'}F5`};\r\n+  backdrop-filter: blur(10px);\r\n+  border-bottom: 1px solid ${props => `${props.theme?.colors?.accent}4D` || 'rgba(128, 0, 0, 0.3)'};\r\n+  position: fixed;\r\n+  top: 0;\r\n+  z-index: 100;\r\n+\r\n+  @media (min-width: 768px) {\r\n+    height: 80px;\r\n+    padding: 0 2rem;\r\n+  }\r\n+`;\r\n+\r\n+const Logo = styled.div`\r\n+  color: ${props => props.theme?.colors?.accent || '#800000'};\r\n+  font-family: ${props => props.theme?.fonts?.heading || \"'Impact', sans-serif\"};\r\n+  font-size: 1.4rem;\r\n+  letter-spacing: 1px;\r\n+  transform: skew(-5deg);\r\n+  cursor: pointer;\r\n+  flex-shrink: 0;\r\n+\r\n+  @media (min-width: 768px) {\r\n+    font-size: 2rem;\r\n+    letter-spacing: 2px;\r\n+  }\r\n+`;\r\n+\r\n+const LocationIndicator2 = styled.div`\r\n+  display: flex;\r\n+  align-items: center;\r\n+  justify-content: center;\r\n+  gap: 0.75rem;\r\n+  background: ${props => `${props.theme?.colors?.surface || 'rgba(0, 0, 0, 0.4)'}CC`};\r\n+  backdrop-filter: blur(10px);\r\n+  padding: 0.75rem 1.5rem;\r\n+  border-radius: 25px;\r\n+  border: 1px solid ${props => `${props.theme?.colors?.accent}40` || 'rgba(128, 0, 0, 0.4)'};\r\n+  margin: 1.5rem auto;\r\n+  max-width: 500px;\r\n+  width: 90%;\r\n+  transition: all 0.3s ease;\r\n+  position: relative;\r\n+  \r\n+  @media (max-width: 768px) {\r\n+    width: 95%;\r\n+    padding: 0.6rem 1rem;\r\n+    gap: 0.5rem;\r\n+  }\r\n+  \r\n+  .location-icon-btn {\r\n+    background: transparent;\r\n+    border: none;\r\n+    color: ${props => props.theme?.colors?.accent || '#800000'};\r\n+    cursor: pointer;\r\n+    display: flex;\r\n+    align-items: center;\r\n+    justify-content: center;\r\n+    padding: 0.25rem;\r\n+    border-radius: 50%;\r\n+    transition: all 0.2s ease;\r\n+    flex-shrink: 0;\r\n+    \r\n+    &:hover {\r\n+      background: ${props => `${props.theme?.colors?.accent}20` || 'rgba(128, 0, 0, 0.2)'};\r\n+    }\r\n+    \r\n+    &:active {\r\n+      transform: scale(0.9);\r\n+    }\r\n+    \r\n+    &:disabled {\r\n+      opacity: 0.5;\r\n+      cursor: not-allowed;\r\n+    }\r\n+    \r\n+    svg {\r\n+      width: 20px;\r\n+      height: 20px;\r\n+      \r\n+      @media (max-width: 768px) {\r\n+        width: 18px;\r\n+        height: 18px;\r\n+      }\r\n+    }\r\n+  }\r\n+  \r\n+  .location-input {\r\n+    flex: 1;\r\n+    background: transparent;\r\n+    border: none;\r\n+    color: ${props => props.theme?.colors?.text || '#FFFFFF'};\r\n+    font-size: 0.95rem;\r\n+    outline: none;\r\n+    text-align: center;\r\n+    cursor: default;\r\n+    min-width: 0; /* Allow text to shrink */\r\n+    \r\n+    &::placeholder {\r\n+      color: ${props => `${props.theme?.colors?.text}50` || 'rgba(255, 255, 255, 0.5)'};\r\n+      font-style: italic;\r\n+    }\r\n+    \r\n+    @media (max-width: 768px) {\r\n+      font-size: 0.85rem;\r\n+    }\r\n+  }\r\n+  \r\n+  .updating-spinner {\r\n+    width: 16px;\r\n+    height: 16px;\r\n+    border: 2px solid ${props => `${props.theme?.colors?.accent}30` || 'rgba(128, 0, 0, 0.3)'};\r\n+    border-radius: 50%;\r\n+    border-top-color: ${props => props.theme?.colors?.accent || '#800000'};\r\n+    animation: spin 1s linear infinite;\r\n+  }\r\n+  \r\n+  .pin-icon-btn {\r\n+    background: transparent;\r\n+    border: none;\r\n+    color: ${props => props.theme?.colors?.accent || '#800000'};\r\n+    cursor: pointer;\r\n+    display: flex;\r\n+    align-items: center;\r\n+    justify-content: center;\r\n+    padding: 0.25rem;\r\n+    border-radius: 50%;\r\n+    transition: all 0.2s ease;\r\n+    opacity: ${props => props.isPinned ? 1 : 0.5};\r\n+    flex-shrink: 0;\r\n+    \r\n+    &:hover:not(:disabled) {\r\n+      background: ${props => `${props.theme?.colors?.accent}20` || 'rgba(128, 0, 0, 0.2)'};\r\n+      opacity: 1;\r\n+    }\r\n+    \r\n+    &:active:not(:disabled) {\r\n+      transform: scale(0.9);\r\n+    }\r\n+    \r\n+    &:disabled {\r\n+      opacity: 0.3;\r\n+      cursor: not-allowed;\r\n+    }\r\n+    \r\n+    svg {\r\n+      width: 18px;\r\n+      height: 18px;\r\n+      \r\n+      @media (max-width: 768px) {\r\n+        width: 16px;\r\n+        height: 16px;\r\n+      }\r\n+    }\r\n+  }\r\n+  \r\n+  @keyframes spin {\r\n+    to {\r\n+      transform: rotate(360deg);\r\n+    }\r\n+  }\r\n+`;\r\n+\r\n+const HeaderControls = styled.div`\r\n+  display: flex;\r\n+  align-items: center;\r\n+  gap: 0.75rem;\r\n+`;\r\n+\r\n+const HeaderButton = styled.button`\r\n+  background: transparent;\r\n+  border: none;\r\n+  color: ${props => props.theme?.colors?.accent || '#800000'};\r\n+  padding: 0.5rem;\r\n+  cursor: pointer;\r\n+  display: flex;\r\n+  align-items: center;\r\n+  justify-content: center;\r\n+  border-radius: 50%;\r\n+  transition: all 0.3s ease;\r\n+  opacity: 0.8;\r\n+  \r\n+  &:active {\r\n+    transform: scale(0.9);\r\n+    opacity: 1;\r\n+  }\r\n+  \r\n+  @media (hover: hover) {\r\n+    &:hover {\r\n+      opacity: 1;\r\n+      background: ${props => `${props.theme?.colors?.accent}10` || 'rgba(128, 0, 0, 0.1)'};\r\n+    }\r\n+  }\r\n+  \r\n+  &.pinned {\r\n+    color: ${props => props.theme?.colors?.accent || '#800000'};\r\n+    opacity: 1;\r\n+  }\r\n+  \r\n+  svg {\r\n+    width: 20px;\r\n+    height: 20px;\r\n+    \r\n+    @media (min-width: 768px) {\r\n+      width: 22px;\r\n+      height: 22px;\r\n+    }\r\n+  }\r\n+`;\r\n+\r\n+// Improved mobile main content with better spacing\r\n+const MainContent = styled.main`\r\n+  max-width: 1200px;\r\n+  margin: 0 auto;\r\n+  padding: 80px 1rem 100px 1rem;\r\n+  position: relative;\r\n+  z-index: 1;\r\n+  \r\n+  @media (min-width: 768px) {\r\n+    padding: 6rem 2rem 2rem 2rem;\r\n+  }\r\n+`;\r\n+\r\n+// Mobile-optimized welcome section\r\n+const WelcomeSection = styled.section`\r\n+  text-align: center;\r\n+  margin: 2rem 0;\r\n+  position: relative;\r\n+\r\n+  h1 {\r\n+    font-family: ${props => props.theme?.fonts?.heading || \"'Impact', sans-serif\"};\r\n+    font-size: 2.5rem;\r\n+    margin-bottom: 1rem;\r\n+    background: ${props => props.theme?.colors?.accentGradient || 'linear-gradient(45deg, #800000, #4A0404)'};\r\n+    -webkit-background-clip: text;\r\n+    -webkit-text-fill-color: transparent;\r\n+    letter-spacing: 1px;\r\n+    line-height: 1.2;\r\n+    \r\n+    @media (min-width: 768px) {\r\n+      font-size: 4.5rem;\r\n+      letter-spacing: 2px;\r\n+    }\r\n+  }\r\n+\r\n+  p {\r\n+    font-size: 1rem;\r\n+    line-height: 1.5;\r\n+    max-width: 600px;\r\n+    margin: 0 auto;\r\n+    color: ${props => `${props.theme?.colors?.text}CC` || 'rgba(255, 255, 255, 0.8)'};\r\n+    padding: 0 1rem;\r\n+    \r\n+    @media (min-width: 768px) {\r\n+      font-size: 1.2rem;\r\n+      line-height: 1.6;\r\n+      max-width: 800px;\r\n+    }\r\n+  }\r\n+`;\r\n+\r\n+// Completely redesigned ZoomOverlay - Responsive to zoom level\r\n+const ZoomOverlay = styled.div`\r\n+  position: fixed;\r\n+  top: 0;\r\n+  left: 0;\r\n+  right: 0;\r\n+  bottom: 0;\r\n+  background: ${props => `${props.theme?.colors?.background || 'rgba(0, 0, 0, 0.95)'}F5`};\r\n+  z-index: 10000;\r\n+  backdrop-filter: blur(10px);\r\n+  display: flex;\r\n+  align-items: center;\r\n+  justify-content: center;\r\n+  padding: 2rem;\r\n+  overflow: hidden;\r\n+  \r\n+  @media (max-width: 768px) {\r\n+    padding: 1rem;\r\n+  }\r\n+  \r\n+  @media (max-width: 480px) {\r\n+    padding: 0.5rem;\r\n+  }\r\n+`;\r\n+\r\n+// Redesigned ZoomContainer - 2:5 aspect ratio card, centered with ample space\r\n+const ZoomContainer = styled.div`\r\n+  position: relative;\r\n+  width: 100%;\r\n+  max-width: 500px;\r\n+  aspect-ratio: 2 / 5;\r\n+  max-height: 85vh;\r\n+  background: ${props => props.theme?.colors?.background || '#000000'};\r\n+  border-radius: 16px;\r\n+  overflow: hidden;\r\n+  border: 2px solid ${props => props.theme?.colors?.accent || '#800000'};\r\n+  box-shadow: 0 20px 60px rgba(0, 0, 0, 0.8);\r\n+  display: flex;\r\n+  flex-direction: column;\r\n+  \r\n+  @media (max-width: 768px) {\r\n+    max-width: 420px;\r\n+    border-radius: 12px;\r\n+  }\r\n+  \r\n+  @media (max-width: 480px) {\r\n+    max-width: 95%;\r\n+    border-radius: 10px;\r\n+  }\r\n+`;\r\n+\r\n+// Image section - 70% of card height\r\n+const ImageCarousel = styled.div`\r\n+  position: relative;\r\n+  width: 100%;\r\n+  height: 70%;\r\n+  background: ${props => `${props.theme?.colors?.background || '#000000'}80`};\r\n+  overflow: hidden;\r\n+  flex-shrink: 0;\r\n+  \r\n+  .image-track {\r\n+    display: flex;\r\n+    height: 100%;\r\n+    transition: transform 0.3s ease;\r\n+    transform: translateX(${props => props.currentIndex * -100}%);\r\n+  }\r\n+  \r\n+  .image-slide {\r\n+    min-width: 100%;\r\n+    height: 100%;\r\n+    display: flex;\r\n+    align-items: center;\r\n+    justify-content: center;\r\n+    \r\n+    img {\r\n+      width: 100%;\r\n+      height: 100%;\r\n+      object-fit: cover;\r\n+      background: ${props => `${props.theme?.colors?.background || '#000000'}40`};\r\n+    }\r\n+    \r\n+    .no-image {\r\n+      display: flex;\r\n+      flex-direction: column;\r\n+      align-items: center;\r\n+      gap: 0.75rem;\r\n+      color: ${props => props.theme?.colors?.text || '#FFFFFF'};\r\n+      opacity: 0.3;\r\n+      \r\n+      p {\r\n+        margin: 0;\r\n+        font-size: 0.85rem;\r\n+      }\r\n+    }\r\n+  }\r\n+  \r\n+  .carousel-dots {\r\n+    position: absolute;\r\n+    bottom: 1rem;\r\n+    left: 50%;\r\n+    transform: translateX(-50%);\r\n+    display: flex;\r\n+    gap: 0.4rem;\r\n+    z-index: 2;\r\n+    padding: 0.4rem 0.75rem;\r\n+    background: ${props => `${props.theme?.colors?.background || 'rgba(0, 0, 0, 0.6)'}CC`};\r\n+    border-radius: 20px;\r\n+    backdrop-filter: blur(8px);\r\n+  }\r\n+  \r\n+  .dot {\r\n+    width: 6px;\r\n+    height: 6px;\r\n+    border-radius: 50%;\r\n+    background: ${props => props.theme?.colors?.text || '#FFFFFF'};\r\n+    border: none;\r\n+    padding: 0;\r\n+    cursor: pointer;\r\n+    transition: all 0.2s ease;\r\n+    \r\n+    &:hover {\r\n+      transform: scale(1.2);\r\n+    }\r\n+  }\r\n+  \r\n+  .carousel-button {\r\n+    position: absolute;\r\n+    top: 50%;\r\n+    transform: translateY(-50%);\r\n+    background: ${props => `${props.theme?.colors?.background || 'rgba(0, 0, 0, 0.7)'}DD`};\r\n+    border: 1px solid ${props => `${props.theme?.colors?.accent}40` || 'rgba(255, 255, 255, 0.2)'};\r\n+    border-radius: 50%;\r\n+    width: 40px;\r\n+    height: 40px;\r\n+    display: flex;\r\n+    align-items: center;\r\n+    justify-content: center;\r\n+    color: ${props => props.theme?.colors?.text || 'white'};\r\n+    cursor: pointer;\r\n+    opacity: 0;\r\n+    transition: all 0.3s ease;\r\n+    z-index: 2;\r\n+    \r\n+    &:hover {\r\n+      opacity: 1 !important;\r\n+      background: ${props => props.theme?.colors?.accent || '#800000'};\r\n+      transform: translateY(-50%) scale(1.1);\r\n+    }\r\n+    \r\n+    &.prev {\r\n+      left: 1rem;\r\n+    }\r\n+    \r\n+    &.next {\r\n+      right: 1rem;\r\n+    }\r\n+    \r\n+    &:disabled {\r\n+      opacity: 0 !important;\r\n+      cursor: not-allowed;\r\n+    }\r\n+    \r\n+    @media (max-width: 480px) {\r\n+      width: 32px;\r\n+      height: 32px;\r\n+      \r\n+      &.prev {\r\n+        left: 0.5rem;\r\n+      }\r\n+      \r\n+      &.next {\r\n+        right: 0.5rem;\r\n+      }\r\n+      \r\n+      svg {\r\n+        width: 16px;\r\n+        height: 16px;\r\n+      }\r\n+    }\r\n+  }\r\n+  \r\n+  &:hover .carousel-button {\r\n+    opacity: 0.7;\r\n+  }\r\n+  \r\n+  .close-overlay-button {\r\n+    position: absolute;\r\n+    top: 1rem;\r\n+    right: 1rem;\r\n+    background: ${props => `${props.theme?.colors?.background || 'rgba(0, 0, 0, 0.8)'}DD`};\r\n+    border: 1px solid ${props => `${props.theme?.colors?.accent}60` || 'rgba(255, 255, 255, 0.3)'};\r\n+    border-radius: 50%;\r\n+    width: 40px;\r\n+    height: 40px;\r\n+    display: flex;\r\n+    align-items: center;\r\n+    justify-content: center;\r\n+    color: white;\r\n+    cursor: pointer;\r\n+    transition: all 0.2s ease;\r\n+    backdrop-filter: blur(8px);\r\n+    z-index: 3;\r\n+    opacity: 0.8;\r\n+    \r\n+    &:hover {\r\n+      opacity: 1;\r\n+      background: ${props => props.theme?.colors?.accent || '#800000'};\r\n+      border-color: ${props => props.theme?.colors?.accent || '#800000'};\r\n+      transform: scale(1.1);\r\n+    }\r\n+    \r\n+    &:active {\r\n+      transform: scale(0.95);\r\n+    }\r\n+    \r\n+    @media (max-width: 480px) {\r\n+      width: 32px;\r\n+      height: 32px;\r\n+      top: 0.75rem;\r\n+      right: 0.75rem;\r\n+      \r\n+      svg {\r\n+        width: 16px;\r\n+        height: 16px;\r\n+      }\r\n+    }\r\n+  }\r\n+`;\r\n+\r\n+// Details section - 30% of card height\r\n+const ZoomContent = styled.div`\r\n+  height: 30%;\r\n+  overflow-y: auto;\r\n+  overflow-x: hidden;\r\n+  padding: 1rem;\r\n+  -webkit-overflow-scrolling: touch;\r\n+  display: flex;\r\n+  flex-direction: column;\r\n+  gap: 0.75rem;\r\n+  background: ${props => props.theme?.colors?.background || '#000000'};\r\n+  \r\n+  /* Custom scrollbar */\r\n+  &::-webkit-scrollbar {\r\n+    width: 4px;\r\n+  }\r\n+  \r\n+  &::-webkit-scrollbar-track {\r\n+    background: transparent;\r\n+  }\r\n+  \r\n+  &::-webkit-scrollbar-thumb {\r\n+    background: ${props => `${props.theme?.colors?.accent || '#800000'}60`};\r\n+    border-radius: 2px;\r\n+    \r\n+    &:hover {\r\n+      background: ${props => props.theme?.colors?.accent || '#800000'};\r\n+    }\r\n+  }\r\n+  \r\n+  @media (max-width: 480px) {\r\n+    padding: 0.875rem;\r\n+    gap: 0.625rem;\r\n+  }\r\n+`;\r\n+\r\n+\r\n+// Update ZoomHeader - Remove it entirely or hide it\r\n+const ZoomHeader = styled.div`\r\n+  display: none; // Hide the header completely\r\n+`;\r\n+\r\n+// Mobile-optimized profile section\r\n+const ProfileSection = styled.div`\r\n+  display: flex;\r\n+  flex-direction: column;\r\n+  align-items: center;\r\n+  margin-bottom: 1.5rem;\r\n+`;\r\n+\r\n+const ProfileImage = styled.div`\r\n+  width: 120px;\r\n+  height: 120px;\r\n+  border-radius: 50%;\r\n+  overflow: hidden;\r\n+  margin-bottom: 1rem;\r\n+  border: 4px solid ${props => props.theme?.colors?.accent || '#800000'};\r\n+  box-shadow: 0 0 20px ${props => `${props.theme?.colors?.accent}40` || 'rgba(128, 0, 0, 0.25)'};\r\n+  \r\n+  @media (min-width: 768px) {\r\n+    width: 200px;\r\n+    height: 189px;\r\n+    border: 6px solid ${props => props.theme?.colors?.accent || '#800000'};\r\n+  }\r\n+  \r\n+  img {\r\n+    width: 100%;\r\n+    height: 100%;\r\n+    object-fit: cover;\r\n+  }\r\n+`;\r\n+\r\n+// Add to styled components section in WelcomePage.js\r\n+const LocationIndicator = styled.div`\r\n+  position: fixed;\r\n+  top: 90px;\r\n+  left: 2rem;\r\n+  display: flex;\r\n+  align-items: center;\r\n+  background: rgba(0, 0, 0, 0.7);\r\n+  padding: 0.5rem 1rem;\r\n+  border-radius: 20px;\r\n+  border: 1px solid ${props => `${props.theme?.colors?.accent}30` || 'rgba(128, 0, 0, 0.3)'};\r\n+  backdrop-filter: blur(4px);\r\n+  color: ${props => props.theme?.colors?.text || '#FFFFFF'};\r\n+  font-size: 0.9rem;\r\n+  z-index: 10;\r\n+  cursor: pointer;\r\n+  transition: all 0.3s ease;\r\n+  max-width: 300px;\r\n+  \r\n+  /* Hide on mobile, show only on desktop for debugging */\r\n+  @media (max-width: 768px) {\r\n+  width: auto;\r\n+    padding: 1rem 2.5rem;\r\n+    font-size: 1rem;\r\n+  } \r\n+  \r\n+  &:hover {\r\n+    background: rgba(0, 0, 0, 0.8);\r\n+    transform: translateY(-2px);\r\n+  }\r\n+  \r\n+  .location-icon {\r\n+    color: ${props => props.theme?.colors?.accent || '#800000'};\r\n+    margin-right: 0.75rem;\r\n+  }\r\n+  \r\n+  .location-text {\r\n+    white-space: nowrap;\r\n+    overflow: hidden;\r\n+    text-overflow: ellipsis;\r\n+  }\r\n+  \r\n+  .updating {\r\n+    margin-left: 0.5rem;\r\n+    width: 16px;\r\n+    height: 16px;\r\n+    border: 2px solid rgba(128, 0, 0, 0.2);\r\n+    border-radius: 50%;\r\n+    border-top-color: ${props => props.theme?.colors?.accent || '#800000'};\r\n+    animation: spin 1s linear infinite;\r\n+  }\r\n+`;\r\n+\r\n+const ShopName = styled.h2`\r\n+  font-family: ${props => props.theme?.fonts?.heading || \"'Impact', sans-serif\"};\r\n+  font-size: 2.5rem;\r\n+  background: ${props => props.theme?.colors?.accentGradient || 'linear-gradient(45deg, #800000, #4A0404)'};\r\n+  -webkit-background-clip: text;\r\n+  -webkit-text-fill-color: transparent;\r\n+  margin: 0 0 0.5rem 0;\r\n+  line-height: 1.2;\r\n+  \r\n+  @media (min-width: 768px) {\r\n+    font-size: 5.4rem;\r\n+    margin: 0 0 1rem 0;\r\n+  }\r\n+`;\r\n+\r\n+// Mobile-friendly action buttons\r\n+const ActionButtonContainer = styled.div`\r\n+  display: flex;\r\n+  flex-direction: column;\r\n+  gap: 1rem;\r\n+  width: 100%;\r\n+  max-width: 300px;\r\n+  margin: 2rem auto;\r\n+  \r\n+  @media (min-width: 480px) {\r\n+    flex-direction: row;\r\n+    justify-content: center;\r\n+    max-width: none;\r\n+  }\r\n+`;\r\n+\r\n+const ActionButton = styled.button`\r\n+  background: ${props => props.variant === 'outline' ? 'transparent' : \r\n+    props.theme?.colors?.accentGradient || 'linear-gradient(45deg, #800000, #4A0404)'};\r\n+  border: ${props => props.variant === 'outline' ? \r\n+    `2px solid ${props.theme?.colors?.accent || '#800000'}` : 'none'};\r\n+  padding: 1rem 1.5rem;\r\n+  border-radius: 30px;\r\n+  color: ${props => props.variant === 'outline' ? \r\n+    props.theme?.colors?.accent || '#800000' : 'white'};\r\n+  font-weight: bold;\r\n+  cursor: pointer;\r\n+  transition: all 0.3s;\r\n+  text-transform: uppercase;\r\n+  letter-spacing: 1px;\r\n+  font-size: 0.9rem;\r\n+  width: 100%;\r\n+  \r\n+  @media (min-width: 480px) {\r\n+    width: auto;\r\n+    padding: 1rem 2.5rem;\r\n+    font-size: 1rem;\r\n+  }\r\n+\r\n+  &:active {\r\n+    transform: scale(0.98);\r\n+  }\r\n+\r\n+  @media (hover: hover) {\r\n+    &:hover {\r\n+      transform: translateY(-2px);\r\n+      box-shadow: 0 5px 15px ${props => `${props.theme?.colors?.accent}4D` || 'rgba(128, 0, 0, 0.3)'};\r\n+    }\r\n+  }\r\n+`;\r\n+\r\n+// Mobile-optimized tab container with horizontal scroll\r\n+const TabContainer = styled.div`\r\n+  display: flex;\r\n+  gap: 0.5rem;\r\n+  margin: 2rem 0;\r\n+  overflow-x: auto;\r\n+  padding: 0.5rem 0;\r\n+  -webkit-overflow-scrolling: touch;\r\n+  \r\n+  &::-webkit-scrollbar {\r\n+    height: 4px;\r\n+  }\r\n+  \r\n+  &::-webkit-scrollbar-track {\r\n+    background: transparent;\r\n+  }\r\n+  \r\n+  &::-webkit-scrollbar-thumb {\r\n+    background: ${props => props.theme?.colors?.accent || '#800000'};\r\n+    border-radius: 2px;\r\n+  }\r\n+  \r\n+  @media (min-width: 768px) {\r\n+    justify-content: center;\r\n+    gap: 1rem;\r\n+    overflow-x: visible;\r\n+  }\r\n+`;\r\n+\r\n+const Tab = styled.button`\r\n+  background: ${props => props.active ? \r\n+    props.theme?.colors?.tabActiveBg || 'rgba(128, 0, 0, 0.2)' : 'transparent'};\r\n+  border: 1px solid ${props => props.active ? \r\n+    props.theme?.colors?.tabBorder || '#800000' : \r\n+    `${props.theme?.colors?.accent}4D` || 'rgba(128, 0, 0, 0.3)'};\r\n+  color: ${props => props.active ? \r\n+    props.theme?.colors?.text || '#FFFFFF' : \r\n+    `${props.theme?.colors?.text}99` || 'rgba(255, 255, 255, 0.6)'};\r\n+  padding: 0.6rem 1rem;\r\n+  border-radius: 20px;\r\n+  cursor: pointer;\r\n+  transition: all 0.3s;\r\n+  text-transform: uppercase;\r\n+  letter-spacing: 0.5px;\r\n+  font-weight: 500;\r\n+  font-size: 0.8rem;\r\n+  white-space: nowrap;\r\n+  display: flex;\r\n+  align-items: center;\r\n+  gap: 0.3rem;\r\n+  flex-shrink: 0;\r\n+  \r\n+  @media (min-width: 768px) {\r\n+    padding: 0.8rem 1.5rem;\r\n+    font-size: 0.9rem;\r\n+    letter-spacing: 1px;\r\n+    gap: 0.5rem;\r\n+  }\r\n+\r\n+  &:active {\r\n+    transform: scale(0.98);\r\n+  }\r\n+\r\n+  svg {\r\n+    width: 14px;\r\n+    height: 14px;\r\n+    \r\n+    @media (min-width: 768px) {\r\n+      width: 16px;\r\n+      height: 16px;\r\n+    }\r\n+  }\r\n+`;\r\n+\r\n+// Mobile-optimized grid with better touch targets\r\n+const GridContainer = styled.div`\r\n+  display: grid;\r\n+  grid-template-columns: repeat(2, 1fr);\r\n+  gap: 0.75rem;\r\n+  margin-top: 1.5rem;\r\n+  padding: 0 0.25rem;\r\n+  \r\n+  @media (min-width: 480px) {\r\n+    gap: 1rem;\r\n+    padding: 0;\r\n+  }\r\n+  \r\n+  @media (min-width: 768px) {\r\n+    grid-template-columns: repeat(auto-fill, minmax(220px, 1fr));\r\n+    gap: 1.5rem;\r\n+  }\r\n+  \r\n+  @media (min-width: 1024px) {\r\n+    grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));\r\n+    gap: 2rem;\r\n+  }\r\n+`;\r\n+\r\n+// Mobile search with better UX\r\n+const SearchContainer = styled.div`\r\n+  display: flex;\r\n+  flex-direction: column;\r\n+  gap: 0.75rem;\r\n+  width: 100%;\r\n+  padding: 0 0.5rem;\r\n+  \r\n+  @media (min-width: 600px) {\r\n+    flex-direction: row;\r\n+    align-items: center;\r\n+    max-width: 800px;\r\n+    margin: 0 auto;\r\n+    padding: 0;\r\n+  }\r\n+`;\r\n+\r\n+const SearchInput = styled.input`\r\n+  width: 100%;\r\n+  background: rgba(255, 255, 255, 0.05);\r\n+  border: 1px solid rgba(128, 0, 0, 0.2);\r\n+  border-radius: 25px;\r\n+  padding: 0.8rem 1rem;\r\n+  color: white;\r\n+  font-size: 1rem;\r\n+  -webkit-appearance: none;\r\n+  \r\n+  &:focus {\r\n+    outline: none;\r\n+    border-color: rgba(128, 0, 0, 0.4);\r\n+    background: rgba(255, 255, 255, 0.08);\r\n+  }\r\n+\r\n+  &::placeholder {\r\n+    color: rgba(255, 255, 255, 0.4);\r\n+  }\r\n+  \r\n+  @media (min-width: 600px) {\r\n+    flex: 1;\r\n+  }\r\n+`;\r\n+\r\n+const SearchButtonGroup = styled.div`\r\n+  display: flex;\r\n+  gap: 0.5rem;\r\n+  width: 100%;\r\n+  \r\n+  @media (min-width: 600px) {\r\n+    width: auto;\r\n+  }\r\n+`;\r\n+\r\n+const SearchButton = styled.button`\r\n+  flex: 1;\r\n+  background: ${props => props.variant === 'live' ? 'transparent' : 'rgba(128, 0, 0, 0.2)'};\r\n+  border: 1px solid rgba(128, 0, 0, 0.3);\r\n+  padding: 0.8rem 1rem;\r\n+  border-radius: 25px;\r\n+  color: white;\r\n+  font-size: 0.9rem;\r\n+  display: flex;\r\n+  align-items: center;\r\n+  justify-content: center;\r\n+  gap: 0.4rem;\r\n+  cursor: pointer;\r\n+  transition: all 0.2s ease;\r\n+  white-space: nowrap;\r\n+  -webkit-tap-highlight-color: transparent;\r\n+  \r\n+  @media (min-width: 600px) {\r\n+    flex: unset;\r\n+    padding: 0.8rem 1.2rem;\r\n+  }\r\n+\r\n+  &:active {\r\n+    transform: scale(0.98);\r\n+    background: rgba(128, 0, 0, 0.3);\r\n+  }\r\n+\r\n+  &:disabled {\r\n+    opacity: 0.5;\r\n+    cursor: not-allowed;\r\n+  }\r\n+\r\n+  svg {\r\n+    width: 16px;\r\n+    height: 16px;\r\n+  }\r\n+`;\r\n+\r\n+// Mobile-friendly slider with native scroll\r\n+const SliderContainer = styled.div`\r\n+  width: 100%;\r\n+  overflow-x: auto;\r\n+  overflow-y: hidden;\r\n+  position: relative;\r\n+  margin: 1.5rem 0;\r\n+  -webkit-overflow-scrolling: touch;\r\n+  scroll-snap-type: x mandatory;\r\n+  scroll-behavior: smooth;\r\n+  \r\n+  &::-webkit-scrollbar {\r\n+    height: 4px;\r\n+  }\r\n+  \r\n+  &::-webkit-scrollbar-track {\r\n+    background: ${props => `${props.theme?.colors?.background || '#000000'}80`};\r\n+    border-radius: 10px;\r\n+  }\r\n+  \r\n+  &::-webkit-scrollbar-thumb {\r\n+    background: ${props => props.theme?.colors?.accent || '#800000'};\r\n+    border-radius: 10px;\r\n+  }\r\n+  \r\n+  /* Hide scroll buttons on mobile */\r\n+  .scroll-button {\r\n+    display: none;\r\n+    \r\n+    @media (min-width: 768px) {\r\n+      display: flex;\r\n+    }\r\n+  }\r\n+`;\r\n+\r\n+const Slider = styled.div`\r\n+  display: flex;\r\n+  width: fit-content;\r\n+  padding: 0.5rem 0;\r\n+`;\r\n+\r\n+const SlideItem = styled.div`\r\n+  flex: 0 0 160px;\r\n+  margin-right: 0.75rem;\r\n+  scroll-snap-align: start;\r\n+  \r\n+  @media (min-width: 480px) {\r\n+    flex: 0 0 200px;\r\n+    margin-right: 1rem;\r\n+  }\r\n+  \r\n+  @media (min-width: 768px) {\r\n+    flex: 0 0 250px;\r\n+    margin-right: 1.5rem;\r\n+  }\r\n+  \r\n+  @media (min-width: 1024px) {\r\n+    flex: 0 0 300px;\r\n+    margin-right: 2rem;\r\n+  }\r\n+`;\r\n+\r\n+// Add styles for better item display\r\n+const ItemDetailsSection = styled.div`\r\n+  margin-bottom: 1.5rem;\r\n+`;\r\n+\r\n+const ItemHeader = styled.div`\r\n+  margin-bottom: 1.5rem;\r\n+  \r\n+  h3 {\r\n+    font-size: 1.5rem;\r\n+    margin: 0 0 0.5rem 0;\r\n+    font-family: ${props => props.theme?.fonts?.heading || 'inherit'};\r\n+    color: ${props => props.theme?.colors?.text || '#FFFFFF'};\r\n+    \r\n+    @media (min-width: 768px) {\r\n+      font-size: 1.8rem;\r\n+    }\r\n+  }\r\n+\r\n+  .price {\r\n+    font-size: 1.3rem;\r\n+    font-weight: bold;\r\n+    color: ${props => props.theme?.colors?.accent || '#800000'};\r\n+    margin-bottom: 1rem;\r\n+    \r\n+    @media (min-width: 768px) {\r\n+      font-size: 1.5rem;\r\n+    }\r\n+  }\r\n+`;\r\n+\r\n+const CategoryBadge = styled.div`\r\n+  display: inline-block;\r\n+  background: ${props => `${props.theme?.colors?.accent || '#800000'}20`};\r\n+  color: ${props => props.theme?.colors?.accent || '#800000'};\r\n+  padding: 0.25rem 0.75rem;\r\n+  border-radius: 12px;\r\n+  font-size: 0.75rem;\r\n+  font-weight: 500;\r\n+  text-transform: uppercase;\r\n+  letter-spacing: 0.5px;\r\n+  margin-bottom: 1rem;\r\n+`;\r\n+\r\n+const StockStatus = styled.div`\r\n+  display: flex;\r\n+  align-items: center;\r\n+  gap: 0.5rem;\r\n+  margin-bottom: 1rem;\r\n+  font-size: 0.9rem;\r\n+  \r\n+  .stock-indicator {\r\n+    width: 8px;\r\n+    height: 8px;\r\n+    border-radius: 50%;\r\n+    background: ${props => props.inStock ? '#4CAF50' : '#FF5252'};\r\n+  }\r\n+  \r\n+  .stock-text {\r\n+    color: ${props => props.inStock ? '#4CAF50' : '#FF5252'};\r\n+    font-weight: 500;\r\n+  }\r\n+`;\r\n+\r\n+const ItemDescription = styled.div`\r\n+  font-size: 0.95rem;\r\n+  opacity: 0.9;\r\n+  margin-bottom: 1.5rem;\r\n+  line-height: 1.6;\r\n+  color: ${props => props.theme?.colors?.text || '#FFFFFF'};\r\n+`;\r\n+\r\n+const ItemLocation = styled.div`\r\n+  display: flex;\r\n+  align-items: center;\r\n+  gap: 0.5rem;\r\n+  font-size: 0.9rem;\r\n+  opacity: 0.8;\r\n+  margin-bottom: 1.5rem;\r\n+  color: ${props => props.theme?.colors?.text || '#FFFFFF'};\r\n+`;\r\n+\r\n+const ShopInfo = styled.div`\r\n+  padding: 0.75rem;\r\n+  background: ${props => `${props.theme?.colors?.surface || 'rgba(255, 255, 255, 0.05)'}50`};\r\n+  border-radius: 8px;\r\n+  margin-bottom: 1.5rem;\r\n+  font-size: 0.9rem;\r\n+  color: ${props => props.theme?.colors?.text || '#FFFFFF'};\r\n+  \r\n+  strong {\r\n+    color: ${props => props.theme?.colors?.accent || '#800000'};\r\n+  }\r\n+`;\r\n+\r\n+// Update ActionButtons to only show Order button\r\n+const ActionButtons = styled.div`\r\n+  display: flex;\r\n+  gap: 0.75rem;\r\n+  margin-top: 1.5rem;\r\n+  \r\n+  button {\r\n+    flex: 1;\r\n+    padding: 0.75rem;\r\n+    border: none;\r\n+    border-radius: 8px;\r\n+    font-weight: bold;\r\n+    cursor: pointer;\r\n+    transition: all 0.3s;\r\n+    display: flex;\r\n+    align-items: center;\r\n+    justify-content: center;\r\n+    gap: 0.5rem;\r\n+    font-size: 0.9rem;\r\n+    \r\n+    @media (min-width: 768px) {\r\n+      padding: 1rem;\r\n+      font-size: 1rem;\r\n+    }\r\n+    \r\n+    &.order {\r\n+      background: ${props => props.theme?.colors?.accent || '#800000'};\r\n+      color: white;\r\n+      \r\n+      &:hover:not(:disabled) {\r\n+        background: ${props => props.theme?.colors?.primary || '#4A0404'};\r\n+        transform: translateY(-2px);\r\n+      }\r\n+      \r\n+      &:disabled {\r\n+        opacity: 0.5;\r\n+        cursor: not-allowed;\r\n+        transform: none;\r\n+      }\r\n+    }\r\n+    \r\n+    svg {\r\n+      width: 16px;\r\n+      height: 16px;\r\n+    }\r\n+  }\r\n+`;\r\n+\r\n+// Mobile-friendly floating controls - removed since they're now in header\r\n+const StyleIndicator = styled.div`\r\n+  position: fixed;\r\n+  bottom: 1rem;\r\n+  right: 1rem;\r\n+  background: ${props => `${props.theme?.colors?.background || '#000000'}E5`};\r\n+  backdrop-filter: blur(10px);\r\n+  color: white;\r\n+  padding: 0.5rem 1rem;\r\n+  border-radius: 20px;\r\n+  font-size: 0.8rem;\r\n+  display: flex;\r\n+  align-items: center;\r\n+  gap: 0.5rem;\r\n+  border: 1px solid ${props => `${props.theme?.colors?.accent}40` || 'rgba(128, 0, 0, 0.4)'};\r\n+  z-index: 90;\r\n+  \r\n+  @media (min-width: 768px) {\r\n+    font-size: 0.9rem;\r\n+  }\r\n+  \r\n+  .style-number {\r\n+    font-weight: bold;\r\n+    font-size: 1rem;\r\n+    color: ${props => props.theme?.colors?.accent || '#800000'};\r\n+    \r\n+    @media (min-width: 768px) {\r\n+      font-size: 1.2rem;\r\n+    }\r\n+  }\r\n+`;\r\n+\r\n+// Quantity selector optimized for mobile\r\n+const QuantitySelector = styled.div`\r\n+  display: flex;\r\n+  align-items: center;\r\n+  justify-content: space-between;\r\n+  background: ${props => `${props.theme?.colors?.surface || 'rgba(255, 255, 255, 0.05)'}50`};\r\n+  border-radius: 12px;\r\n+  padding: 1rem;\r\n+  margin: 1rem 0;\r\n+  \r\n+  .quantity-label {\r\n+    font-weight: bold;\r\n+    color: ${props => props.theme?.colors?.text || '#FFFFFF'};\r\n+    font-size: 0.9rem;\r\n+  }\r\n+  \r\n+  .quantity-controls {\r\n+    display: flex;\r\n+    align-items: center;\r\n+    gap: 1rem;\r\n+    \r\n+    .quantity-btn {\r\n+      width: 40px;\r\n+      height: 40px;\r\n+      border-radius: 50%;\r\n+      border: 2px solid ${props => props.theme?.colors?.accent || '#800000'};\r\n+      background: transparent;\r\n+      color: ${props => props.theme?.colors?.accent || '#800000'};\r\n+      display: flex;\r\n+      align-items: center;\r\n+      justify-content: center;\r\n+      cursor: pointer;\r\n+      transition: all 0.3s;\r\n+      -webkit-tap-highlight-color: transparent;\r\n+      \r\n+      &:active:not(:disabled) {\r\n+        transform: scale(0.9);\r\n+        background: ${props => props.theme?.colors?.accent || '#800000'};\r\n+        color: white;\r\n+      }\r\n+      \r\n+      &:disabled {\r\n+        opacity: 0.3;\r\n+        cursor: not-allowed;\r\n+      }\r\n+      \r\n+      svg {\r\n+        width: 18px;\r\n+        height: 18px;\r\n+      }\r\n+    }\r\n+    \r\n+    .quantity-display {\r\n+      font-size: 1.3rem;\r\n+      font-weight: bold;\r\n+      color: ${props => props.theme?.colors?.text || 'white'};\r\n+      min-width: 40px;\r\n+      text-align: center;\r\n+    }\r\n+  }\r\n+`;\r\n+\r\n+// Other styled components remain the same but with mobile optimizations...\r\n+const LoadingSpinner = styled.div`\r\n+  width: 40px;\r\n+  height: 40px;\r\n+  margin: 2rem auto;\r\n+  border: 3px solid rgba(128, 0, 0, 0.1);\r\n+  border-radius: 50%;\r\n+  border-top-color: #800000;\r\n+  animation: spin 1s linear infinite;\r\n+\r\n+  @keyframes spin {\r\n+    to {\r\n+      transform: rotate(360deg);\r\n+    }\r\n+  }\r\n+`;\r\n+\r\n+const EmptyGridMessage = styled.div`\r\n+  text-align: center;\r\n+  padding: 2rem 1rem;\r\n+  background: rgba(0, 0, 0, 0.2);\r\n+  border-radius: 12px;\r\n+  border: 1px solid rgba(128, 0, 0, 0.1);\r\n+  color: rgba(255, 255, 255, 0.7);\r\n+  grid-column: 1/-1;\r\n+\r\n+  h3 {\r\n+    font-size: 1.1rem;\r\n+    margin-bottom: 0.5rem;\r\n+    color: rgba(255, 255, 255, 0.9);\r\n+  }\r\n+\r\n+  p {\r\n+    font-size: 0.9rem;\r\n+    line-height: 1.5;\r\n+  }\r\n+`;\r\n+\r\n+const MotivationalMessage = styled.p`\r\n+  font-size: 1.1rem;\r\n+  line-height: 1.5;\r\n+  max-width: 600px;\r\n+  margin: 2rem auto 0;\r\n+  color: ${props => props.theme?.colors?.text || '#FFFFFF'};\r\n+  font-weight: 400;\r\n+  text-align: center;\r\n+  padding: 1rem 1.5rem;\r\n+  letter-spacing: 0.3px;\r\n+  position: relative;\r\n+  \r\n+  @media (min-width: 768px) {\r\n+    font-size: 1.4rem;\r\n+    line-height: 1.6;\r\n+    max-width: 800px;\r\n+    margin: 3rem auto 0;\r\n+    padding: 1.5rem 2rem;\r\n+    letter-spacing: 0.5px;\r\n+  }\r\n+  \r\n+  &::before, &::after {\r\n+    content: '\"';\r\n+    font-family: ${props => props.theme?.fonts?.heading || \"'Georgia', serif\"};\r\n+    font-size: 2rem;\r\n+    position: absolute;\r\n+    opacity: 0.2;\r\n+    color: ${props => props.theme?.colors?.accent || '#800000'};\r\n+    \r\n+    @media (min-width: 768px) {\r\n+      font-size: 3rem;\r\n+    }\r\n+  }\r\n+  \r\n+  &::before {\r\n+    top: -0.5rem;\r\n+    left: 0.5rem;\r\n+    \r\n+    @media (min-width: 768px) {\r\n+      top: -1.5rem;\r\n+      left: -1rem;\r\n+    }\r\n+  }\r\n+  \r\n+  &::after {\r\n+    bottom: -1.5rem;\r\n+    right: 0.5rem;\r\n+    \r\n+    @media (min-width: 768px) {\r\n+      bottom: -2.5rem;\r\n+      right: -1rem;\r\n+    }\r\n+  }\r\n+`;\r\n+\r\n+// 1. Replace the CategoryGrid styled component with these two new components:\r\n+\r\n+const CategoryGridWrapper = styled.div`\r\n+  margin-bottom: 2rem;\r\n+  \r\n+  /* Desktop: Regular grid */\r\n+  @media (min-width: 769px) {\r\n+    display: grid;\r\n+    grid-template-columns: repeat(5, 1fr);\r\n+    gap: 1rem;\r\n+  }\r\n+  \r\n+  @media (max-width: 1200px) and (min-width: 769px) {\r\n+    grid-template-columns: repeat(4, 1fr);\r\n+  }\r\n+  \r\n+  @media (max-width: 900px) and (min-width: 769px) {\r\n+    grid-template-columns: repeat(3, 1fr);\r\n+  }\r\n+  \r\n+  /* Mobile: Scrollable rows */\r\n+  @media (max-width: 768px) {\r\n+    display: flex;\r\n+    flex-direction: column;\r\n+    gap: 1rem;\r\n+  }\r\n+`;\r\n+\r\n+// Replace the CategoryScrollableGrid styled component with this corrected version:\r\n+\r\n+const CategoryScrollableGrid = styled.div`\r\n+  display: none;\r\n+  \r\n+  @media (max-width: 768px) {\r\n+    display: grid;\r\n+    grid-auto-flow: column;\r\n+    grid-template-rows: repeat(2, 1fr);\r\n+    grid-template-columns: repeat(5, minmax(280px, 1fr)); /* Increased from 200px */\r\n+    gap: 1rem; /* Increased from 0.75rem */\r\n+    overflow-x: auto;\r\n+    overflow-y: hidden;\r\n+    padding-bottom: 0.5rem;\r\n+    scroll-snap-type: x mandatory;\r\n+    -webkit-overflow-scrolling: touch;\r\n+    min-height: 85vh; /* Add minimum height to stretch vertically */\r\n+    \r\n+    &::-webkit-scrollbar {\r\n+      height: 4px;\r\n+    }\r\n+    \r\n+    &::-webkit-scrollbar-track {\r\n+      background: ${props => `${props.theme?.colors?.background || '#000000'}80`};\r\n+      border-radius: 10px;\r\n+    }\r\n+    \r\n+    &::-webkit-scrollbar-thumb {\r\n+      background: ${props => props.theme?.colors?.accent || '#800000'};\r\n+      border-radius: 10px;\r\n+    }\r\n+    \r\n+    > * {\r\n+      scroll-snap-align: start;\r\n+      min-width: 0;\r\n+      height: 100%; /* Make items stretch to full height */\r\n+    }\r\n+  }\r\n+  \r\n+  @media (max-width: 480px) {\r\n+    grid-template-columns: repeat(5, minmax(240px, 1fr)); /* Increased from 160px */\r\n+    gap: 0.75rem;\r\n+  }\r\n+`;\r\n+\r\n+// 4. Add this CSS to handle responsive display (add to your styled components section):\r\n+const GlobalStyle = styled.div`\r\n+  @media (min-width: 769px) {\r\n+    .mobile-only {\r\n+      display: none !important;\r\n+    }\r\n+  }\r\n+  \r\n+  @media (max-width: 768px) {\r\n+    .desktop-only {\r\n+      display: none !important;\r\n+    }\r\n+  }\r\n+`;\r\n+\r\n+const CategoryHeader = styled.div`\r\n+  display: flex;\r\n+  justify-content: space-between;\r\n+  align-items: center;\r\n+  margin-bottom: 0.75rem;\r\n+  padding: 0 0.5rem;\r\n+  \r\n+  @media (min-width: 768px) {\r\n+    margin-bottom: 1rem;\r\n+    padding: 0;\r\n+  }\r\n+  \r\n+  h2 {\r\n+    font-family: ${props => props.theme?.fonts?.heading || 'inherit'};\r\n+    font-size: 1.3rem;\r\n+    color: ${props => props.theme?.colors?.accent || '#800000'};\r\n+    margin: 0;\r\n+    \r\n+    @media (min-width: 768px) {\r\n+      font-size: 1.8rem;\r\n+    }\r\n+  }\r\n+  \r\n+  .view-all {\r\n+    font-size: 0.8rem;\r\n+    color: ${props => props.theme?.colors?.accent || '#800000'};\r\n+    opacity: 0.8;\r\n+    cursor: pointer;\r\n+    display: flex;\r\n+    align-items: center;\r\n+    gap: 0.3rem;\r\n+    transition: all 0.3s ease;\r\n+    \r\n+    @media (min-width: 768px) {\r\n+      font-size: 0.9rem;\r\n+      gap: 0.5rem;\r\n+    }\r\n+    \r\n+    &:active {\r\n+      opacity: 1;\r\n+      transform: translateX(3px);\r\n+    }\r\n+  }\r\n+`;\r\n+\r\n+const ChatOverlay = styled.div`\r\n+  position: fixed;\r\n+  top: 0;\r\n+  left: 0;\r\n+  right: 0;\r\n+  bottom: 0;\r\n+  background: rgba(0, 0, 0, 0.5);\r\n+  z-index: 999;\r\n+  opacity: ${props => props.isOpen ? 1 : 0};\r\n+  pointer-events: ${props => props.isOpen ? 'auto' : 'none'};\r\n+  transition: opacity 0.3s ease;\r\n+`;\r\n+\r\n+// Add these styled components after StyleIndicator\r\n+\r\n+const SortContainer = styled.div`\r\n+  position: relative;\r\n+  display: inline-block;\r\n+`;\r\n+\r\n+const SortDropdown = styled.div`\r\n+  position: absolute;\r\n+  top: calc(100% + 0.5rem);\r\n+  right: 0;\r\n+  background: ${props => props.theme?.colors?.background || '#000000'};\r\n+  border: 2px solid ${props => props.theme?.colors?.accent || '#800000'};\r\n+  border-radius: 12px;\r\n+  padding: 0.75rem;\r\n+  min-width: 220px;\r\n+  z-index: 1000;\r\n+  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.8),\r\n+              0 0 20px ${props => `${props.theme?.colors?.accent}40` || 'rgba(128, 0, 0, 0.25)'};\r\n+  opacity: ${props => props.isOpen ? 1 : 0};\r\n+  visibility: ${props => props.isOpen ? 'visible' : 'hidden'};\r\n+  transform: ${props => props.isOpen ? 'translateY(0)' : 'translateY(-10px)'};\r\n+  transition: all 0.3s ease;\r\n+  \r\n+  @media (max-width: 768px) {\r\n+    min-width: 200px;\r\n+    right: 0;\r\n+  }\r\n+`;\r\n+\r\n+const SortOption = styled.button`\r\n+  width: 100%;\r\n+  padding: 0.75rem 1rem;\r\n+  background: ${props => props.active ? \r\n+    props.theme?.colors?.accent || '#800000' : \r\n+    'transparent'};\r\n+  border: none;\r\n+  border-radius: 8px;\r\n+  color: ${props => props.active ? \r\n+    '#FFFFFF' : \r\n+    props.theme?.colors?.text || '#FFFFFF'};\r\n+  font-size: 0.95rem;\r\n+  font-weight: ${props => props.active ? '600' : '500'};\r\n+  text-align: left;\r\n+  cursor: pointer;\r\n+  transition: all 0.2s ease;\r\n+  display: flex;\r\n+  align-items: center;\r\n+  gap: 0.75rem;\r\n+  font-family: ${props => props.theme?.fonts?.body || 'inherit'};\r\n+  min-height: 50px; /* Added for two-line content */\r\n+  \r\n+  &:hover {\r\n+    background: ${props => props.active ?\r\n+      props.theme?.colors?.primary || '#4A0404' :\r\n+      `${props.theme?.colors?.accent}20` || 'rgba(128, 0, 0, 0.2)'};\r\n+    transform: translateX(2px);\r\n+  }\r\n+  \r\n+  &:active {\r\n+    transform: scale(0.98);\r\n+  }\r\n+  \r\n+  svg {\r\n+    width: 16px;\r\n+    height: 16px;\r\n+    flex-shrink: 0;\r\n+    align-self: flex-start; /* Align icon to top when two lines */\r\n+    margin-top: 2px;\r\n+  }\r\n+  \r\n+  @media (max-width: 768px) {\r\n+    padding: 0.65rem 0.85rem;\r\n+    font-size: 0.9rem;\r\n+    min-height: 46px;\r\n+    \r\n+    svg {\r\n+      width: 14px;\r\n+      height: 14px;\r\n+    }\r\n+  }\r\n+`;\r\n+\r\n+const SortHeader = styled.div`\r\n+  display: flex;\r\n+  justify-content: space-between;\r\n+  align-items: center;\r\n+  margin-bottom: 1rem;\r\n+  \r\n+  @media (max-width: 768px) {\r\n+    flex-direction: column;\r\n+    align-items: flex-start;\r\n+    gap: 0.75rem;\r\n+  }\r\n+`;\r\n+\r\n+// Motivational messages\r\n+const MOTIVATIONAL_MESSAGES = [\r\n+  \"Build your vision, Elevate humanity.\",\r\n+  \"Create greatness, Inspire progress.\",\r\n+  \"Master your craft, Serve with passion.\",\r\n+  \"Own your success, Empower those around you.\",\r\n+  \"Rule with wisdom, Lead with heart.\",\r\n+  \"Shape your future, Change lives along the way.\",\r\n+  \"Rise above, Lift others higher.\",\r\n+  \"Conquer your dreams, Build a better world.\",\r\n+  \"Lead by example, Serve with strength.\",\r\n+  \"Pursue greatness, Give back in abundance.\"\r\n+];\r\n+\r\n+const WelcomePage = () => {\r\n+  const navigate = useNavigate();\r\n+  const [motivationalMessage, setMotivationalMessage] = useState(\"\");\r\n+  const [activeTab, setActiveTab] = useState('featured');\r\n+  const [featuredItems, setFeaturedItems] = useState([]);\r\n+  const [loading, setLoading] = useState(true);\r\n+  const [error, setError] = useState(null);\r\n+  const [nearbyItems, setNearbyItems] = useState([]);\r\n+  const [featuredMedia, setFeaturedMedia] = useState([]);\r\n+  const [hasSearched, setHasSearched] = useState(false);\r\n+  const [searchAddress, setSearchAddress] = useState('');\r\n+  const [searching, setSearching] = useState(false);\r\n+  const [locationChecked, setLocationChecked] = useState(false);\r\n+  const [showLocationPrompt, setShowLocationPrompt] = useState(false);\r\n+  const [currentZipCode, setCurrentZipCode] = useState(null);\r\n+  const [currentPage, setCurrentPage] = useState(1);\r\n+  const [totalItems, setTotalItems] = useState(0);\r\n+  const [currentStyle, setCurrentStyle] = useState(null);\r\n+  const itemsPerPage = 6;\r\n+  const [isPinned, setIsPinned] = useState(false);\r\n+  const [isRefreshing, setIsRefreshing] = useState(false);\r\n+  const [orderQuantity, setOrderQuantity] = useState(1);\r\n+  const [sortBy, setSortBy] = useState('recent'); // 'recent', 'proximity', 'price-low', 'price-high'\r\n+  const [sortMenuOpen, setSortMenuOpen] = useState(false);\r\n+\r\n+\r\n+  \r\n+  const { user, isAuthenticated } = useAuth();\r\n+  const [shopData, setShopData] = useState(null);\r\n+  const [currentMessageIndex, setCurrentMessageIndex] = useState(0);\r\n+  const [isMessageVisible, setIsMessageVisible] = useState(true);\r\n+  const [isSliderPaused, setIsSliderPaused] = useState(false);\r\n+  const [sliderPosition, setSliderPosition] = useState(0);\r\n+  const sliderRef = useRef(null);\r\n+  const sliderAnimationRef = useRef(null);\r\n+  const [zoomedItem, setZoomedItem] = useState(null);\r\n+  const [chatOpen, setChatOpen] = useState(false);\r\n+  const [selectedChatItem, setSelectedChatItem] = useState(null);\r\n+  const [currentImageIndex, setCurrentImageIndex] = useState(0);\r\n+  const { userLocation, locationPermission, requestLocation } = useLocation();\r\n+  const [updatingLocation, setUpdatingLocation] = useState(false);\r\n+  const [featuredSearchTerm, setFeaturedSearchTerm] = useState('');\r\n+  const [searchResults, setSearchResults] = useState([]);\r\n+  const [isSearching, setIsSearching] = useState(false);\r\n+  const [hasSearchResults, setHasSearchResults] = useState(false);\r\n+  const [categories, setCategories] = useState({\r\n+    'Electronics & Tech': [],\r\n+    'Clothing & Accessories': [],\r\n+    'Home & Garden': [],\r\n+    'Sports & Outdoors': [],\r\n+    'Books & Media': [],\r\n+    'Toys & Games': [],\r\n+    'Health & Beauty': [],\r\n+    'Automotive': [],\r\n+    'Collectibles & Art': [],\r\n+    'Food & Beverages': [],\r\n+    'Other': []\r\n+  });\r\n+// Replace the existing state variables related to ZIP with city/region states\r\n+const [cityRegion, setCityRegion] = useState('');\r\n+const [isCityPinned, setIsCityPinned] = useState(false);\r\n+const [isConvertingToCity, setIsConvertingToCity] = useState(false);\r\n+const [cityInputValue, setCityInputValue] = useState('');\r\n+const [effectiveLocation, setEffectiveLocation] = useState(null);\r\n+const [isIPLocation, setIsIPLocation] = useState(false);\r\n+\r\n+useEffect(() => {\r\n+  const initializeLocation = async () => {\r\n+    console.log('🔍 Initializing location...');\r\n+    console.log('userLocation:', userLocation);\r\n+    \r\n+    if (userLocation) {\r\n+      // User has shared precise location\r\n+      console.log('✅ Using GPS location:', userLocation);\r\n+      setEffectiveLocation(userLocation);\r\n+      setIsIPLocation(false);\r\n+    } else {\r\n+      // Use IP-based location\r\n+      console.log('🌐 Fetching IP-based location...');\r\n+      const ipLocation = await getIPBasedLocation();\r\n+      console.log('IP Location result:', ipLocation);\r\n+      \r\n+      if (ipLocation) {\r\n+        console.log('✅ Using IP location:', ipLocation);\r\n+        setEffectiveLocation(ipLocation);\r\n+        setIsIPLocation(true);\r\n+      } else {\r\n+        console.error('❌ Failed to get IP location');\r\n+      }\r\n+    }\r\n+  };\r\n+  \r\n+  initializeLocation();\r\n+}, [userLocation]);\r\n+\r\n+useEffect(() => {\r\n+  console.log('🔄 effectiveLocation changed:', effectiveLocation);\r\n+  console.log('activeTab:', activeTab);\r\n+  \r\n+  if (activeTab === 'featured' && effectiveLocation) {\r\n+    console.log('📦 Loading items with location...');\r\n+    loadCategorizedItems();\r\n+  }\r\n+}, [effectiveLocation, activeTab]);\r\n+\r\n+useEffect(() => {\r\n+  if (effectiveLocation && activeTab === 'featured') {\r\n+    console.log('🔄 Location changed, re-fetching items...');\r\n+    loadCategorizedItems();\r\n+  }\r\n+}, [effectiveLocation]);\r\n+\r\n+const loadCategorizedItems = async () => {\r\n+  console.log('🔄 loadCategorizedItems called');\r\n+  console.log('effectiveLocation:', effectiveLocation);\r\n+  console.log('sortBy:', sortBy);\r\n+  \r\n+  try {\r\n+    setLoading(true);\r\n+    setError(null);\r\n+\r\n+    console.log('📡 Fetching items from Firebase...');\r\n+    const allItems = await getFeaturedItems(48);\r\n+    console.log('✅ Fetched items:', allItems.length);\r\n+    \r\n+    const currentUserId = user?.uid;\r\n+    \r\n+    // Filter out current user's items AND invalid items\r\n+    const filteredItems = allItems.filter(item => {\r\n+      const isNotCurrentUser = item.shopId !== currentUserId;\r\n+      const hasImages = item.images && item.images.length > 0 && item.images.some(img => img);\r\n+      const hasValidPrice = item.price && !isNaN(parseFloat(item.price)) && parseFloat(item.price) > 0;\r\n+      const hasStock = !item.deleted && (!item.quantity || parseInt(item.quantity) > 0);\r\n+      \r\n+      return isNotCurrentUser && hasImages && hasValidPrice && hasStock;\r\n+    });\r\n+    \r\n+    console.log('✅ Filtered items:', filteredItems.length);\r\n+\r\n+    let itemsWithDistance = filteredItems;\r\n+    \r\n+    // Calculate distances if we have location\r\n+    if (effectiveLocation) {\r\n+      console.log('📍 Calculating distances...');\r\n+      itemsWithDistance = filteredItems.map(item => {\r\n+        let itemCoords = item.coordinates;\r\n+        if (!itemCoords && item.address) {\r\n+          const coordsMatch = item.address.match(/^(-?\\d+\\.?\\d*),\\s*(-?\\d+\\.?\\d*)$/);\r\n+          if (coordsMatch) {\r\n+            itemCoords = {\r\n+              lat: parseFloat(coordsMatch[1]),\r\n+              lng: parseFloat(coordsMatch[2])\r\n+            };\r\n+          }\r\n+        }\r\n+\r\n+        if (itemCoords?.lat && itemCoords?.lng) {\r\n+          try {\r\n+            const distanceInMeters = getDistance(\r\n+              { latitude: effectiveLocation.latitude, longitude: effectiveLocation.longitude },\r\n+              { latitude: itemCoords.lat, longitude: itemCoords.lng }\r\n+            );\r\n+            const distanceInMiles = (distanceInMeters / 1609.34).toFixed(1);\r\n+\r\n+            return {\r\n+              ...item,\r\n+              coordinates: itemCoords,\r\n+              distance: distanceInMeters,\r\n+              distanceInMiles,\r\n+              formattedDistance: `${distanceInMiles} mi`\r\n+            };\r\n+          } catch (e) {\r\n+            console.warn('Error calculating distance for item:', e);\r\n+            return item;\r\n+          }\r\n+        }\r\n+        return item;\r\n+      });\r\n+    } else {\r\n+      console.warn('⚠️ No effectiveLocation available for distance calculation');\r\n+    }\r\n+\r\n+    // Apply sorting\r\n+    console.log('🔄 Applying sort:', sortBy);\r\n+    const sortedItems = applySorting(itemsWithDistance, sortBy);\r\n+    console.log('✅ Sorted items:', sortedItems.length);\r\n+\r\n+    // Categorize items\r\n+    const categorizedItems = {\r\n+      'Electronics & Tech': [],\r\n+      'Clothing & Accessories': [],\r\n+      'Home & Garden': [],\r\n+      'Sports & Outdoors': [],\r\n+      'Books & Media': [],\r\n+      'Toys & Games': [],\r\n+      'Health & Beauty': [],\r\n+      'Automotive': [],\r\n+      'Collectibles & Art': [],\r\n+      'Food & Beverages': [],\r\n+      'Other': []\r\n+    };\r\n+\r\n+    sortedItems.forEach(item => {\r\n+      const category = item.category || 'Other';\r\n+      if (categorizedItems[category]) {\r\n+        categorizedItems[category].push(item);\r\n+      } else {\r\n+        categorizedItems['Other'].push(item);\r\n+      }\r\n+    });\r\n+\r\n+    Object.keys(categorizedItems).forEach(category => {\r\n+      categorizedItems[category] = categorizedItems[category].slice(0, 10);\r\n+    });\r\n+\r\n+    console.log('✅ Setting categories:', Object.keys(categorizedItems).map(k => `${k}: ${categorizedItems[k].length}`));\r\n+    setCategories(categorizedItems);\r\n+    setFeaturedItems(sortedItems.slice(0, 10));\r\n+    setTotalItems(filteredItems.length);\r\n+\r\n+    setLoading(false);\r\n+  } catch (error) {\r\n+    console.error('❌ Error loading categorized items:', error);\r\n+    setError('Failed to load items. Please try again later.');\r\n+    setLoading(false);\r\n+  }\r\n+};\r\n+\r\n+// Add this useEffect with other effects\r\n+\r\n+useEffect(() => {\r\n+  const handleClickOutside = (event) => {\r\n+    if (sortMenuOpen && !event.target.closest('.sort-container')) {\r\n+      setSortMenuOpen(false);\r\n+    }\r\n+  };\r\n+\r\n+  document.addEventListener('mousedown', handleClickOutside);\r\n+  return () => document.removeEventListener('mousedown', handleClickOutside);\r\n+}, [sortMenuOpen]);\r\n+\r\n+const applySorting = (items, sortType) => {\r\n+  let sortedItems = [...items];\r\n+  \r\n+  switch (sortType) {\r\n+    case 'proximity':\r\n+      if (!userLocation) {\r\n+        // If no location, request it\r\n+        requestLocation();\r\n+        return sortedItems;\r\n+      }\r\n+      // Sort by distance (closest first) - no distance filter\r\n+      sortedItems.sort((a, b) => {\r\n+        const distA = a.distance || Infinity;\r\n+        const distB = b.distance || Infinity;\r\n+        return distA - distB;\r\n+      });\r\n+      break;\r\n+      \r\n+    case 'price-low':\r\n+      // REMOVED 30-mile filter - sort all items by price (low to high)\r\n+      sortedItems.sort((a, b) => {\r\n+        const priceA = parseFloat(a.price) || 0;\r\n+        const priceB = parseFloat(b.price) || 0;\r\n+        return priceA - priceB;\r\n+      });\r\n+      break;\r\n+      \r\n+    case 'price-high':\r\n+      // REMOVED 30-mile filter - sort all items by price (high to low)\r\n+      sortedItems.sort((a, b) => {\r\n+        const priceA = parseFloat(a.price) || 0;\r\n+        const priceB = parseFloat(b.price) || 0;\r\n+        return priceB - priceA;\r\n+      });\r\n+      break;\r\n+      \r\n+    case 'recent':\r\n+    default:\r\n+      // REMOVED 30-mile filter - sort all items by most recent\r\n+      sortedItems.sort((a, b) => {\r\n+        const dateA = a.createdAt ? new Date(a.createdAt) : new Date(0);\r\n+        const dateB = b.createdAt ? new Date(b.createdAt) : new Date(0);\r\n+        return dateB - dateA;\r\n+      });\r\n+      break;\r\n+  }\r\n+  \r\n+  return sortedItems;\r\n+};\r\n+\r\n+const getSortLabel = (sortType) => {\r\n+  switch (sortType) {\r\n+    case 'proximity': return 'Closest First';\r\n+    case 'price-low': return 'Price: Low to High';\r\n+    case 'price-high': return 'Price: High to Low';\r\n+    case 'recent':\r\n+    default: return 'Most Recent';\r\n+  }\r\n+};\r\n+\r\n+// Replace convertCoordsToZip with this new function\r\n+const convertCoordsToCity = async (lat, lon) => {\r\n+  try {\r\n+    setIsConvertingToCity(true);\r\n+    setError(null);\r\n+    \r\n+    const response = await fetch(\r\n+      `https://nominatim.openstreetmap.org/reverse?lat=${lat}&lon=${lon}&format=json&zoom=10&addressdetails=1`,\r\n+      {\r\n+        headers: {\r\n+          'Accept': 'application/json',\r\n+          'User-Agent': 'KalKode Marketplace'\r\n+        }\r\n+      }\r\n+    );\r\n+    \r\n+    if (!response.ok) {\r\n+      throw new Error('Failed to fetch location data');\r\n+    }\r\n+    \r\n+    const data = await response.json();\r\n+    console.log('Nominatim response:', data);\r\n+    \r\n+    if (!data || !data.address) {\r\n+      setCityRegion('Not available');\r\n+      setCityInputValue('');\r\n+      return null;\r\n+    }\r\n+    \r\n+    const address = data.address;\r\n+    const city = address.city || address.town || address.village || address.county;\r\n+    const state = address.state;\r\n+    \r\n+    // Major cities list (you can expand this)\r\n+    const majorCities = [\r\n+      'Houston', 'Dallas', 'Austin', 'San Antonio', 'Fort Worth',\r\n+      'Los Angeles', 'New York', 'Chicago', 'Phoenix', 'Philadelphia',\r\n+      'San Diego', 'San Jose', 'Jacksonville', 'Columbus', 'Charlotte'\r\n+    ];\r\n+    \r\n+    let locationString = '';\r\n+    \r\n+    if (city && majorCities.some(major => city.includes(major))) {\r\n+      // For major cities, determine direction from city center\r\n+      const cityName = majorCities.find(major => city.includes(major));\r\n+      \r\n+      // Get city center coordinates (you could make this more precise with a lookup table)\r\n+      const cityCenterResponse = await fetch(\r\n+        `https://nominatim.openstreetmap.org/search?city=${cityName}&state=${state}&format=json&limit=1`,\r\n+        {\r\n+          headers: {\r\n+            'Accept': 'application/json',\r\n+            'User-Agent': 'KalKode Marketplace'\r\n+          }\r\n+        }\r\n+      );\r\n+      \r\n+      const cityCenterData = await cityCenterResponse.json();\r\n+      \r\n+      if (cityCenterData && cityCenterData[0]) {\r\n+        const centerLat = parseFloat(cityCenterData[0].lat);\r\n+        const centerLon = parseFloat(cityCenterData[0].lon);\r\n+        \r\n+        // Calculate direction\r\n+        const direction = getDirection(lat, lon, centerLat, centerLon);\r\n+        locationString = `${direction} ${cityName}, ${getStateAbbreviation(state)}`;\r\n+      } else {\r\n+        locationString = `${cityName}, ${getStateAbbreviation(state)}`;\r\n+      }\r\n+    } else if (state) {\r\n+      // For non-major cities, use state with direction\r\n+      // Get state center (approximate)\r\n+      const stateCenterResponse = await fetch(\r\n+        `https://nominatim.openstreetmap.org/search?state=${state}&country=USA&format=json&limit=1`,\r\n+        {\r\n+          headers: {\r\n+            'Accept': 'application/json',\r\n+            'User-Agent': 'KalKode Marketplace'\r\n+          }\r\n+        }\r\n+      );\r\n+      \r\n+      const stateCenterData = await stateCenterResponse.json();\r\n+      \r\n+      if (stateCenterData && stateCenterData[0]) {\r\n+        const centerLat = parseFloat(stateCenterData[0].lat);\r\n+        const centerLon = parseFloat(stateCenterData[0].lon);\r\n+        \r\n+        const direction = getDirection(lat, lon, centerLat, centerLon);\r\n+        locationString = city ? \r\n+          `${city}, ${direction} ${getStateAbbreviation(state)}` :\r\n+          `${direction} ${getStateAbbreviation(state)}`;\r\n+      } else {\r\n+        locationString = city ? \r\n+          `${city}, ${getStateAbbreviation(state)}` :\r\n+          getStateAbbreviation(state);\r\n+      }\r\n+    } else {\r\n+      locationString = city || 'Unknown Location';\r\n+    }\r\n+    \r\n+    setCityRegion(locationString);\r\n+    setCityInputValue(locationString);\r\n+    \r\n+    console.log(`Coordinates ${lat}, ${lon} → ${locationString}`);\r\n+    \r\n+    return locationString;\r\n+    \r\n+  } catch (error) {\r\n+    console.error('Error converting coordinates to city:', error);\r\n+    setCityRegion('Error');\r\n+    setCityInputValue('');\r\n+    setError('Failed to get location information');\r\n+    return null;\r\n+  } finally {\r\n+    setIsConvertingToCity(false);\r\n+  }\r\n+};\r\n+\r\n+// Helper function to determine direction (N, S, E, W, NE, NW, SE, SW)\r\n+const getDirection = (lat1, lon1, lat2, lon2) => {\r\n+  const latDiff = lat1 - lat2;\r\n+  const lonDiff = lon1 - lon2;\r\n+  \r\n+  const absLatDiff = Math.abs(latDiff);\r\n+  const absLonDiff = Math.abs(lonDiff);\r\n+  \r\n+  // If differences are very small, consider it center\r\n+  if (absLatDiff < 0.1 && absLonDiff < 0.1) {\r\n+    return '';\r\n+  }\r\n+  \r\n+  // Determine primary direction\r\n+  let direction = '';\r\n+  \r\n+  // North/South\r\n+  if (absLatDiff > absLonDiff * 0.5) {\r\n+    direction += latDiff > 0 ? 'N' : 'S';\r\n+  }\r\n+  \r\n+  // East/West\r\n+  if (absLonDiff > absLatDiff * 0.5) {\r\n+    direction += lonDiff > 0 ? 'E' : 'W';\r\n+  }\r\n+  \r\n+  return direction || 'Central';\r\n+};\r\n+\r\n+// Helper function to get state abbreviations\r\n+const getStateAbbreviation = (stateName) => {\r\n+  const stateMap = {\r\n+    'Alabama': 'AL', 'Alaska': 'AK', 'Arizona': 'AZ', 'Arkansas': 'AR',\r\n+    'California': 'CA', 'Colorado': 'CO', 'Connecticut': 'CT', 'Delaware': 'DE',\r\n+    'Florida': 'FL', 'Georgia': 'GA', 'Hawaii': 'HI', 'Idaho': 'ID',\r\n+    'Illinois': 'IL', 'Indiana': 'IN', 'Iowa': 'IA', 'Kansas': 'KS',\r\n+    'Kentucky': 'KY', 'Louisiana': 'LA', 'Maine': 'ME', 'Maryland': 'MD',\r\n+    'Massachusetts': 'MA', 'Michigan': 'MI', 'Minnesota': 'MN', 'Mississippi': 'MS',\r\n+    'Missouri': 'MO', 'Montana': 'MT', 'Nebraska': 'NE', 'Nevada': 'NV',\r\n+    'New Hampshire': 'NH', 'New Jersey': 'NJ', 'New Mexico': 'NM', 'New York': 'NY',\r\n+    'North Carolina': 'NC', 'North Dakota': 'ND', 'Ohio': 'OH', 'Oklahoma': 'OK',\r\n+    'Oregon': 'OR', 'Pennsylvania': 'PA', 'Rhode Island': 'RI', 'South Carolina': 'SC',\r\n+    'South Dakota': 'SD', 'Tennessee': 'TN', 'Texas': 'TX', 'Utah': 'UT',\r\n+    'Vermont': 'VT', 'Virginia': 'VA', 'Washington': 'WA', 'West Virginia': 'WV',\r\n+    'Wisconsin': 'WI', 'Wyoming': 'WY'\r\n+  };\r\n+  \r\n+  return stateMap[stateName] || stateName;\r\n+};\r\n+\r\n+const handleLocationToCity = async () => {\r\n+  try {\r\n+    setIsConvertingToCity(true);\r\n+    setError(null);\r\n+    \r\n+    // Request fresh location from browser\r\n+    const freshLocation = await new Promise((resolve, reject) => {\r\n+      if (!navigator.geolocation) {\r\n+        reject(new Error('Geolocation not supported'));\r\n+        return;\r\n+      }\r\n+      \r\n+      navigator.geolocation.getCurrentPosition(\r\n+        (position) => {\r\n+          resolve({\r\n+            latitude: position.coords.latitude,\r\n+            longitude: position.coords.longitude\r\n+          });\r\n+        },\r\n+        (error) => {\r\n+          reject(error);\r\n+        },\r\n+        {\r\n+          enableHighAccuracy: true,\r\n+          timeout: 10000,\r\n+          maximumAge: 0\r\n+        }\r\n+      );\r\n+    });\r\n+    \r\n+    // Convert fresh coordinates to city/region\r\n+    await convertCoordsToCity(freshLocation.latitude, freshLocation.longitude);\r\n+    \r\n+    // ✅ UPDATE: Set effectiveLocation to trigger item re-fetch\r\n+    setEffectiveLocation(freshLocation);\r\n+    setIsIPLocation(false);\r\n+    \r\n+    // ✅ UPDATE: Re-fetch items with new location\r\n+    console.log('🔄 Re-fetching items with new location...');\r\n+    if (activeTab === 'featured') {\r\n+      await loadCategorizedItems();\r\n+    }\r\n+    \r\n+  } catch (error) {\r\n+    console.error('Error getting fresh location:', error);\r\n+    \r\n+    // Fallback: use stored location if available\r\n+    if (userLocation) {\r\n+      console.log('Using stored location as fallback');\r\n+      await convertCoordsToCity(userLocation.latitude, userLocation.longitude);\r\n+      \r\n+      // ✅ UPDATE: Still re-fetch with stored location\r\n+      if (activeTab === 'featured') {\r\n+        await loadCategorizedItems();\r\n+      }\r\n+    } else {\r\n+      setError('Location not available. Please enable location services.');\r\n+    }\r\n+  } finally {\r\n+    setIsConvertingToCity(false);\r\n+  }\r\n+};\r\n+\r\n+// Replace handleToggleZipPin with handleToggleCityPin\r\n+const handleToggleCityPin = () => {\r\n+  if (isCityPinned) {\r\n+    localStorage.removeItem('pinnedCityRegion');\r\n+    setIsCityPinned(false);\r\n+    setCityRegion('');\r\n+    setCityInputValue('');\r\n+  } else {\r\n+    if (cityRegion && cityRegion !== 'Not available' && cityRegion !== 'Error') {\r\n+      localStorage.setItem('pinnedCityRegion', cityRegion);\r\n+      setIsCityPinned(true);\r\n+    }\r\n+  }\r\n+};\r\n+\r\n+// Update the useEffect that loads pinned location on mount\r\n+useEffect(() => {\r\n+  const pinnedCity = localStorage.getItem('pinnedCityRegion');\r\n+  if (pinnedCity) {\r\n+    setCityRegion(pinnedCity);\r\n+    setCityInputValue(pinnedCity);\r\n+    setIsCityPinned(true);\r\n+  }\r\n+}, []);\r\n+\r\n+\r\n+  // Handle opening shop\r\n+  const handleOpenShop = () => {\r\n+    navigate('/shop/create/template');\r\n+  };\r\n+\r\n+  // Refresh theme\r\n+  const refreshTheme = () => {\r\n+    if (isRefreshing) return;\r\n+    \r\n+    setIsRefreshing(true);\r\n+    const styles = Object.values(WELCOME_STYLES);\r\n+    const otherStyles = styles.filter(style => style.id !== currentStyle.id);\r\n+    \r\n+    if (otherStyles.length > 0) {\r\n+      const randomStyle = otherStyles[Math.floor(Math.random() * otherStyles.length)];\r\n+      setCurrentStyle(randomStyle);\r\n+      \r\n+      if (isPinned) {\r\n+        localStorage.removeItem('pinnedStyleId');\r\n+        setIsPinned(false);\r\n+      }\r\n+    }\r\n+    \r\n+    setTimeout(() => setIsRefreshing(false), 500);\r\n+  };\r\n+\r\n+  // Toggle pin style\r\n+  const togglePinStyle = () => {\r\n+    if (isPinned) {\r\n+      localStorage.removeItem('pinnedStyleId');\r\n+      setIsPinned(false);\r\n+      \r\n+      const styles = Object.values(WELCOME_STYLES).filter(\r\n+        style => style.id !== currentStyle.id\r\n+      );\r\n+      \r\n+      if (styles.length > 0) {\r\n+        const randomStyle = styles[Math.floor(Math.random() * styles.length)];\r\n+        setCurrentStyle(randomStyle);\r\n+      }\r\n+    } else {\r\n+      localStorage.setItem('pinnedStyleId', currentStyle.id.toString());\r\n+      setIsPinned(true);\r\n+    }\r\n+  };\r\n+\r\n+  // Handle location update\r\n+  const handleLocationUpdate = () => {\r\n+    setUpdatingLocation(true);\r\n+    requestLocation();\r\n+  };\r\n+\r\n+  // Get location display text\r\n+  const getLocationDisplayText = () => {\r\n+    if (!userLocation) {\r\n+      return \"Location: Not available\";\r\n+    }\r\n+    return `Location: ${userLocation.latitude.toFixed(4)}, ${userLocation.longitude.toFixed(4)}`;\r\n+  };\r\n+\r\n+  // Search featured items\r\n+  const searchFeaturedItems = async (searchTerm) => {\r\n+    if (!searchTerm.trim()) {\r\n+      setSearchResults([]);\r\n+      setHasSearchResults(false);\r\n+      return;\r\n+    }\r\n+  \r\n+    try {\r\n+      setIsSearching(true);\r\n+      setError(null);\r\n+    \r\n+      const shopsRef = collection(db, 'shops');\r\n+      const snapshot = await getDocs(shopsRef);\r\n+      \r\n+      let allMatchingItems = [];\r\n+      const currentUserId = user?.uid;\r\n+      \r\n+      snapshot.docs.forEach(doc => {\r\n+        const shopData = doc.data();\r\n+        \r\n+        if (doc.id === currentUserId) {\r\n+          return;\r\n+        }\r\n+        \r\n+        if (shopData?.items && Array.isArray(shopData.items)) {\r\n+          shopData.items\r\n+            .filter(item => !item.deleted)\r\n+            .forEach(item => {\r\n+              const itemName = (item.name || '').toLowerCase();\r\n+              const itemDescription = (item.description || '').toLowerCase();\r\n+              const searchLower = searchTerm.toLowerCase();\r\n+              \r\n+              if (itemName.includes(searchLower) || itemDescription.includes(searchLower)) {\r\n+                allMatchingItems.push({\r\n+                  ...item,\r\n+                  shopId: doc.id,\r\n+                  shopName: shopData.name || 'Unknown Shop',\r\n+                  shopTheme: shopData.theme\r\n+                });\r\n+              }\r\n+            });\r\n+        }\r\n+      });\r\n+    \r\n+      if (userLocation) {\r\n+        allMatchingItems = allMatchingItems.map(item => {\r\n+          if (item.coordinates && item.coordinates.lat && item.coordinates.lng) {\r\n+            try {\r\n+              const distanceInMeters = getDistance(\r\n+                { latitude: userLocation.latitude, longitude: userLocation.longitude },\r\n+                { latitude: item.coordinates.lat, longitude: item.coordinates.lng }\r\n+              );\r\n+              const distanceInMiles = (distanceInMeters / 1609.34).toFixed(1);\r\n+              \r\n+              return {\r\n+                ...item,\r\n+                distance: distanceInMeters,\r\n+                distanceInMiles,\r\n+                formattedDistance: `${distanceInMiles} mi`\r\n+              };\r\n+            } catch (e) {\r\n+              console.warn('Error calculating distance for item:', e);\r\n+              return item;\r\n+            }\r\n+          }\r\n+          return item;\r\n+        });\r\n+      }\r\n+    \r\n+      setSearchResults(allMatchingItems);\r\n+      setHasSearchResults(true);\r\n+      \r\n+      if (allMatchingItems.length === 0) {\r\n+        setError(`No items found matching \"${searchTerm}\"`);\r\n+      }\r\n+    } catch (error) {\r\n+      console.error('Error searching items:', error);\r\n+      setError('Failed to search items. Please try again later.');\r\n+    } finally {\r\n+      setIsSearching(false);\r\n+    }\r\n+  };\r\n+\r\n+\r\n+  // Handle featured search\r\n+  const handleFeaturedSearch = () => {\r\n+    if (featuredSearchTerm.trim()) {\r\n+      searchFeaturedItems(featuredSearchTerm);\r\n+    }\r\n+  };\r\n+\r\n+  const handleRowScroll = (categoryName, rowNumber, scrollLeft) => {\r\n+  const row1Id = `${categoryName}-row1`;\r\n+  const row2Id = `${categoryName}-row2`;\r\n+  \r\n+  const row1Element = document.getElementById(row1Id);\r\n+  const row2Element = document.getElementById(row2Id);\r\n+  \r\n+  if (rowNumber === 1 && row2Element) {\r\n+    row2Element.scrollLeft = scrollLeft;\r\n+  } else if (rowNumber === 2 && row1Element) {\r\n+    row1Element.scrollLeft = scrollLeft;\r\n+  }\r\n+};\r\n+\r\n+  const handleClearFeaturedSearch = () => {\r\n+    setFeaturedSearchTerm('');\r\n+    setSearchResults([]);\r\n+    setHasSearchResults(false);\r\n+    setError(null);\r\n+  };\r\n+\r\n+  // Fetch nearby items\r\n+  const fetchNearbyItems = async () => {\r\n+    if (!userLocation) {\r\n+      setError('Location information is not available');\r\n+      setSearching(false);\r\n+      return;\r\n+    }\r\n+  \r\n+    try {\r\n+      setLoading(true);\r\n+      const shopsRef = collection(db, 'shops');\r\n+      const snapshot = await getDocs(shopsRef);\r\n+      \r\n+      let itemsInRadius = [];\r\n+      const currentUserId = user?.uid;\r\n+      \r\n+      snapshot.docs.forEach(doc => {\r\n+        const shopData = doc.data();\r\n+        \r\n+        if (doc.id === currentUserId) {\r\n+          return;\r\n+        }\r\n+        \r\n+        if (shopData?.items && Array.isArray(shopData.items)) {\r\n+          shopData.items\r\n+            .filter(item => !item.deleted)\r\n+            .forEach(item => {\r\n+              let itemCoords = item.coordinates;\r\n+              if (!itemCoords && item.address) {\r\n+                const coordsMatch = item.address.match(/^(-?\\d+\\.?\\d*),\\s*(-?\\d+\\.?\\d*)$/);\r\n+                if (coordsMatch) {\r\n+                  itemCoords = {\r\n+                    lat: parseFloat(coordsMatch[1]),\r\n+                    lng: parseFloat(coordsMatch[2])\r\n+                  };\r\n+                }\r\n+              }\r\n+  \r\n+              if (itemCoords?.lat && itemCoords?.lng) {\r\n+                try {\r\n+                  const distanceInMeters = getDistance(\r\n+                    { latitude: userLocation.latitude, longitude: userLocation.longitude },\r\n+                    { latitude: itemCoords.lat, longitude: itemCoords.lng }\r\n+                  );\r\n+  \r\n+                  const distanceInMiles = (distanceInMeters / 1609.34).toFixed(1);\r\n+                  \r\n+                  itemsInRadius.push({\r\n+                    ...item,\r\n+                    shopId: doc.id,\r\n+                    shopName: shopData.name || 'Unknown Shop',\r\n+                    coordinates: itemCoords,\r\n+                    distance: distanceInMeters,\r\n+                    distanceInMiles,\r\n+                    formattedDistance: `${distanceInMiles} mi`,\r\n+                    theme: shopData.theme\r\n+                  });\r\n+                } catch (e) {\r\n+                  console.warn('Error calculating distance for item:', e);\r\n+                }\r\n+              }\r\n+            });\r\n+        }\r\n+      });\r\n+  \r\n+      itemsInRadius.sort((a, b) => a.distance - b.distance);\r\n+      itemsInRadius = itemsInRadius.slice(0, 10);\r\n+  \r\n+      setNearbyItems(itemsInRadius);\r\n+      setHasSearched(true);\r\n+      \r\n+      if (itemsInRadius.length === 0) {\r\n+        setError('No items found in your area');\r\n+      }\r\n+    } catch (error) {\r\n+      console.error('Error fetching nearby items:', error);\r\n+      setError('Failed to load nearby items. Please try again later.');\r\n+    } finally {\r\n+      setLoading(false);\r\n+      setSearching(false);\r\n+    }\r\n+  };\r\n+\r\n+  // Handle live location\r\n+  const handleLiveLocation = () => {\r\n+    setSearching(true);\r\n+    setError(null);\r\n+    \r\n+    if (userLocation) {\r\n+      fetchNearbyItems();\r\n+      setHasSearched(true);\r\n+    } else {\r\n+      requestLocation();\r\n+    }\r\n+  };\r\n+\r\n+  // Handle address search\r\n+  const handleAddressSearch = async () => {\r\n+    if (!searchAddress.trim()) {\r\n+      setError('Please enter an address');\r\n+      return;\r\n+    }\r\n+  \r\n+    setSearching(true);\r\n+    setError(null);\r\n+    setHasSearched(true);\r\n+    \r\n+    try {\r\n+      const encodedAddress = encodeURIComponent(searchAddress);\r\n+      const response = await fetch(\r\n+        `https://nominatim.openstreetmap.org/search?q=${encodedAddress}&format=json&limit=1`,\r\n+        {\r\n+          headers: {\r\n+            'Accept': 'application/json',\r\n+            'User-Agent': 'KalKode Marketplace'\r\n+          }\r\n+        }\r\n+      );\r\n+      \r\n+      const data = await response.json();\r\n+  \r\n+      if (data && data[0]) {\r\n+        const coordinates = {\r\n+          latitude: parseFloat(data[0].lat),\r\n+          longitude: parseFloat(data[0].lon)\r\n+        };\r\n+        \r\n+        await fetchNearbyItems(coordinates);\r\n+      } else {\r\n+        throw new Error('Location not found. Please try a different address.');\r\n+      }\r\n+  \r\n+    } catch (error) {\r\n+      console.error('Error searching address:', error);\r\n+      setError(error.message || 'Unable to search this location. Please try again.');\r\n+    } finally {\r\n+      setSearching(false);\r\n+    }\r\n+  };\r\n+\r\n+  // Handle item click\r\n+  const handleItemClick = (item) => {\r\n+    setZoomedItem(item);\r\n+    setOrderQuantity(1);\r\n+    setCurrentImageIndex(0); // Reset image index\r\n+    \r\n+    const scrollY = window.scrollY;\r\n+    document.body.style.position = 'fixed';\r\n+    document.body.style.top = `-${scrollY}px`;\r\n+    document.body.style.width = '100%';\r\n+    document.body.style.overflow = 'hidden';\r\n+    \r\n+    document.body.setAttribute('data-scroll-y', scrollY);\r\n+  };\r\n+\r\n+  // Handle close zoom\r\n+  const handleCloseZoom = () => {\r\n+    setZoomedItem(null);\r\n+    setCurrentImageIndex(0);\r\n+    \r\n+    const scrollY = document.body.getAttribute('data-scroll-y') || '0';\r\n+    document.body.style.position = '';\r\n+    document.body.style.top = '';\r\n+    document.body.style.width = '';\r\n+    document.body.style.overflow = '';\r\n+    document.body.removeAttribute('data-scroll-y');\r\n+    \r\n+    window.scrollTo(0, parseInt(scrollY));\r\n+  };\r\n+\r\n+  // Adjust quantity\r\n+  const adjustQuantity = (delta) => {\r\n+    const maxQuantity = parseInt(zoomedItem?.quantity) || 1;\r\n+    const newQuantity = Math.max(1, Math.min(maxQuantity, orderQuantity + delta));\r\n+    setOrderQuantity(newQuantity);\r\n+  };\r\n+\r\n+  // Handle direct order\r\n+  const handleDirectOrder = async () => {\r\n+    if (!zoomedItem) return;\r\n+    \r\n+    if (!isAuthenticated) {\r\n+       navigate('/auth', { \r\n+        state: { \r\n+          mode: 'login',\r\n+          from: window.location.pathname\r\n+        }\r\n+      });\r\n+       return;\r\n+     }\r\n+    \r\n+    try {\r\n+      const result = await TransactionService.initiateQuantityTransaction(\r\n+        zoomedItem.id,\r\n+        zoomedItem.shopId,\r\n+        parseFloat(zoomedItem.price),\r\n+        orderQuantity,\r\n+        'inperson'\r\n+      );\r\n+      \r\n+      if (result.transactionId) {\r\n+        handleCloseZoom();\r\n+        navigate(`/messages?chat=${result.transactionId}`);\r\n+      }\r\n+    } catch (error) {\r\n+      console.error('Error placing order:', error);\r\n+      alert('Error placing order: ' + error.message);\r\n+    }\r\n+  };\r\n+\r\n+  // Handle order click\r\n+  const handleOrderClick = (item) => {\r\n+    setSelectedChatItem(item);\r\n+    setChatOpen(true);\r\n+    \r\n+    if (zoomedItem) {\r\n+      setZoomedItem(null);\r\n+      const scrollY = document.body.getAttribute('data-scroll-y') || '0';\r\n+      document.body.style.position = '';\r\n+      document.body.style.top = '';\r\n+      document.body.style.width = '';\r\n+      document.body.style.overflow = '';\r\n+      document.body.removeAttribute('data-scroll-y');\r\n+      window.scrollTo(0, parseInt(scrollY));\r\n+    }\r\n+  };\r\n+\r\n+  // Handle close chat\r\n+  const handleCloseChat = () => {\r\n+    setChatOpen(false);\r\n+    setSelectedChatItem(null);\r\n+    \r\n+    document.body.style.position = '';\r\n+    document.body.style.top = '';\r\n+    document.body.style.width = '';\r\n+    document.body.style.overflow = '';\r\n+    document.body.removeAttribute('data-scroll-y');\r\n+  };\r\n+\r\n+  // Handle inquire click\r\n+  const handleInquireClick = () => {\r\n+    alert('Inquiry feature coming soon!');\r\n+  };\r\n+\r\n+  // Handle logout\r\n+  const handleLogout = async () => {\r\n+    try {\r\n+      await signOut(auth);\r\n+      navigate('/');\r\n+    } catch (error) {\r\n+      console.error('Error signing out:', error);\r\n+    }\r\n+  };\r\n+\r\n+  // Handle login\r\n+  const handleLogin = () => {\r\n+    navigate('/auth', { \r\n+      state: { \r\n+        mode: 'login',\r\n+        from: window.location.pathname\r\n+      }\r\n+    });\r\n+  };\r\n+\r\n+  // Effects\r\n+  useEffect(() => {\r\n+    const fetchShopData = async () => {\r\n+      if (user && user.uid) {\r\n+        try {\r\n+          const data = await getShopData(user.uid);\r\n+          setShopData(data);\r\n+        } catch (error) {\r\n+          console.error('Error fetching shop data:', error);\r\n+        }\r\n+      }\r\n+    };\r\n+    \r\n+    if (isAuthenticated) {\r\n+      fetchShopData();\r\n+    }\r\n+  }, [user, isAuthenticated]);\r\n+\r\n+  useEffect(() => {\r\n+    if (isAuthenticated) {\r\n+      const randomIndex = Math.floor(Math.random() * MOTIVATIONAL_MESSAGES.length);\r\n+      setMotivationalMessage(MOTIVATIONAL_MESSAGES[randomIndex]);\r\n+    }\r\n+  }, [isAuthenticated]);\r\n+\r\n+  useEffect(() => {\r\n+    const pinnedStyleId = localStorage.getItem('pinnedStyleId');\r\n+    \r\n+    if (pinnedStyleId) {\r\n+      const pinnedStyle = Object.values(WELCOME_STYLES).find(\r\n+        style => style.id.toString() === pinnedStyleId\r\n+      );\r\n+      \r\n+      if (pinnedStyle) {\r\n+        setCurrentStyle(pinnedStyle);\r\n+        setIsPinned(true);\r\n+        return;\r\n+      }\r\n+    }\r\n+    \r\n+    const styles = Object.values(WELCOME_STYLES);\r\n+    const randomStyle = styles[Math.floor(Math.random() * styles.length)];\r\n+    setCurrentStyle(randomStyle);\r\n+  }, []);\r\n+\r\n+  useEffect(() => {\r\n+    if (activeTab === 'nearby' && userLocation) {\r\n+      fetchNearbyItems();\r\n+      setHasSearched(true);\r\n+    }\r\n+  }, [activeTab, userLocation]);\r\n+\r\n+  useEffect(() => {\r\n+    if (locationPermission === 'pending') {\r\n+      requestLocation();\r\n+    }\r\n+  }, []);\r\n+\r\n+  useEffect(() => {\r\n+    if (userLocation) {\r\n+      if (activeTab === 'nearby') {\r\n+        fetchNearbyItems();\r\n+        setHasSearched(true);\r\n+      }\r\n+      \r\n+      if (activeTab === 'featured') {\r\n+        loadCategorizedItems();\r\n+      }\r\n+      \r\n+      setUpdatingLocation(false);\r\n+    }\r\n+  }, [userLocation, activeTab]);\r\n+\r\n+  useEffect(() => {\r\n+  const loadTabContent = async () => {\r\n+    console.log('📑 Loading tab content...', { activeTab, effectiveLocation });\r\n+    \r\n+    try {\r\n+      setLoading(true);\r\n+      setError(null);\r\n+  \r\n+      switch (activeTab) {\r\n+        case 'featured':\r\n+          // ✅ Wait for effectiveLocation before loading items\r\n+          if (effectiveLocation) {\r\n+            console.log('📦 Loading featured items...');\r\n+            await loadCategorizedItems();\r\n+          } else {\r\n+            console.log('⏳ Waiting for location...');\r\n+            setLoading(false);\r\n+          }\r\n+          return;\r\n+        case 'nearby':\r\n+          setLoading(false);\r\n+          break;\r\n+        case 'media':\r\n+          setLoading(false);\r\n+          break;\r\n+        default:\r\n+          setLoading(false);\r\n+      }\r\n+    } catch (error) {\r\n+      console.error('Error loading content:', error);\r\n+      setError('Failed to load content. Please try again later.');\r\n+      setLoading(false);\r\n+    }\r\n+  };\r\n+\r\n+  loadTabContent();\r\n+}, [activeTab, user?.uid, effectiveLocation]); // ✅ Added effectiveLocation dependency\r\n+\r\n+  useEffect(() => {\r\n+    if (activeTab === 'featured') {\r\n+      loadCategorizedItems();\r\n+    }\r\n+    \r\n+    const refreshInterval = setInterval(() => {\r\n+      if (activeTab === 'featured') {\r\n+        loadCategorizedItems();\r\n+      }\r\n+    }, 300000);\r\n+\r\n+    return () => clearInterval(refreshInterval);\r\n+  }, [activeTab, currentPage]);\r\n+\r\n+  // Ping animation effect (disabled on mobile for performance)\r\n+  useEffect(() => {\r\n+    if (window.innerWidth < 768) return;\r\n+    \r\n+    const container = document.querySelector('.page-container');\r\n+    if (!container) return;\r\n+\r\n+    const createPing = () => {\r\n+      const ping = document.createElement('div');\r\n+      ping.className = 'ping';\r\n+      \r\n+      ping.style.left = `${Math.random() * 100}%`;\r\n+      ping.style.top = `${Math.random() * 100}%`;\r\n+      ping.style.zIndex = '0';\r\n+      \r\n+      container.appendChild(ping);\r\n+      \r\n+      setTimeout(() => {\r\n+        if (ping && ping.parentNode) {\r\n+          ping.remove();\r\n+        }\r\n+      }, 3000);\r\n+    };\r\n+\r\n+    const createPingGroup = (count) => {\r\n+      for (let i = 0; i < count; i++) {\r\n+        setTimeout(() => {\r\n+          createPing();\r\n+        }, i * 200);\r\n+      }\r\n+    };\r\n+\r\n+    const pingCounts = [10, 30, 20];\r\n+    let currentIndex = 0;\r\n+\r\n+    const interval = setInterval(() => {\r\n+      const count = pingCounts[currentIndex];\r\n+      createPingGroup(count);\r\n+      currentIndex = (currentIndex + 1) % pingCounts.length;\r\n+    }, 3000);\r\n+    \r\n+    return () => {\r\n+      clearInterval(interval);\r\n+      const pings = container.getElementsByClassName('ping');\r\n+      while (pings.length > 0) {\r\n+        pings[0].remove();\r\n+      }\r\n+    };\r\n+  }, []);\r\n+\r\n+  // Cleanup on unmount\r\n+  useEffect(() => {\r\n+    return () => {\r\n+      document.body.style.position = '';\r\n+      document.body.style.top = '';\r\n+      document.body.style.width = '';\r\n+      document.body.style.overflow = '';\r\n+      document.body.removeAttribute('data-scroll-y');\r\n+      \r\n+      if (sliderAnimationRef.current) {\r\n+        cancelAnimationFrame(sliderAnimationRef.current);\r\n+      }\r\n+    };\r\n+  }, []);\r\n+\r\n+  if (!currentStyle) return null;\r\n+\r\n+  return (\r\n+    <PageContainer className=\"page-container\" theme={currentStyle}>\r\n+      <ThemeDecorations theme={currentStyle} />\r\n+      <Header theme={currentStyle}>\r\n+        <Logo onClick={() => navigate('/')} theme={currentStyle}>\r\n+          KALKODE\r\n+        </Logo>\r\n+\r\n+        <HeaderControls>\r\n+          <HeaderButton \r\n+            onClick={refreshTheme}\r\n+            theme={currentStyle}\r\n+            title=\"Random theme\"\r\n+          >\r\n+            <RefreshCw size={20} className={isRefreshing ? \"spinning\" : \"\"} />\r\n+          </HeaderButton>\r\n+          \r\n+          <HeaderButton \r\n+            onClick={togglePinStyle} \r\n+            theme={currentStyle}\r\n+            className={isPinned ? \"pinned\" : \"\"}\r\n+            title={isPinned ? \"Unpin theme\" : \"Pin theme\"}\r\n+          >\r\n+            <Pin size={20} fill={isPinned ? currentStyle.colors.accent : \"none\"} />\r\n+          </HeaderButton>\r\n+          \r\n+          {isAuthenticated && (\r\n+            <HeaderButton \r\n+              onClick={handleLogout}\r\n+              theme={currentStyle}\r\n+              title=\"Logout\"\r\n+            >\r\n+              <LogOut size={20} />\r\n+            </HeaderButton>\r\n+          )}\r\n+        </HeaderControls>\r\n+      </Header>\r\n+\r\n+      <MainContent isAuthenticated={isAuthenticated}>\r\n+        <WelcomeSection theme={currentStyle}>\r\n+          {isAuthenticated && shopData ? (\r\n+            <>\r\n+              <ProfileSection>\r\n+                <ProfileImage theme={currentStyle}>\r\n+                  {shopData.profile ? (\r\n+                    <img src={shopData.profile} alt={shopData.name || 'Shop Profile'} />\r\n+                  ) : (\r\n+                    <div style={{ \r\n+                      width: '100%', \r\n+                      height: '100%', \r\n+                      background: currentStyle?.colors?.accent || '#800000',\r\n+                      display: 'flex',\r\n+                      alignItems: 'center',\r\n+                      justifyContent: 'center',\r\n+                      color: '#fff',\r\n+                      fontSize: '2rem'\r\n+                    }}>\r\n+                      {(shopData.name?.charAt(0) || user.email?.charAt(0) || 'S').toUpperCase()}\r\n+                    </div>\r\n+                  )}\r\n+                </ProfileImage>\r\n+                <ShopName theme={currentStyle}>{shopData.name || 'My Shop'}</ShopName>\r\n+              </ProfileSection>         \r\n+\r\n+              <MotivationalMessage theme={currentStyle}>\r\n+                {motivationalMessage}\r\n+              </MotivationalMessage>\r\n+            </>\r\n+          ) : (\r\n+            <>\r\n+              <h1>Welcome to KalKode</h1>\r\n+              <p>Trade With Your Community.</p>\r\n+\r\n+              <ActionButtonContainer>\r\n+                <ActionButton theme={currentStyle} onClick={handleOpenShop}>\r\n+                  Open Up Shop\r\n+                </ActionButton>\r\n+                <ActionButton \r\n+                  theme={currentStyle}\r\n+                  onClick={handleLogin}\r\n+                  variant=\"outline\"\r\n+                >\r\n+                  Sign In\r\n+                </ActionButton>\r\n+              </ActionButtonContainer>\r\n+            </>\r\n+          )}\r\n+\r\n+\r\n+        </WelcomeSection>\r\n+\r\n+        <TabContainer>\r\n+          <Tab \r\n+            theme={currentStyle}\r\n+            active={activeTab === 'featured'} \r\n+            onClick={() => setActiveTab('featured')}\r\n+          >\r\n+            <Package size={16} />\r\n+            Featured\r\n+          </Tab>\r\n+          <Tab\r\n+            theme={currentStyle} \r\n+            active={activeTab === 'nearby'} \r\n+            onClick={() => setActiveTab('nearby')}\r\n+          >\r\n+            <Navigation size={16} />\r\n+            Nearby\r\n+          </Tab>\r\n+          <Tab\r\n+            theme={currentStyle} \r\n+            active={activeTab === 'media'} \r\n+            onClick={() => setActiveTab('media')}\r\n+          >\r\n+            <Film size={16} />\r\n+            Media\r\n+          </Tab>\r\n+        </TabContainer>\r\n+\r\n+\r\n+        <LocationIndicator2 theme={currentStyle} isPinned={isCityPinned}>\r\n+          <button \r\n+            className=\"location-icon-btn\"\r\n+            onClick={handleLocationToCity}\r\n+            disabled={isConvertingToCity}\r\n+            title=\"Get region from current location\"\r\n+          >\r\n+            {isConvertingToCity ? (\r\n+              <div className=\"updating-spinner\" />\r\n+            ) : (\r\n+              <Navigation size={20} />\r\n+            )}\r\n+          </button>\r\n+          \r\n+          <input\r\n+            type=\"text\"\r\n+            className=\"location-input\"\r\n+            value={cityInputValue}\r\n+            onChange={(e) => setCityInputValue(e.target.value)}\r\n+            placeholder={\r\n+              isIPLocation ? \r\n+                `${effectiveLocation?.city || 'Location'} (IP-based)` : \r\n+                cityRegion ? cityRegion : \"Click location icon to share\"\r\n+            }\r\n+            readOnly\r\n+          />\r\n+\r\n+          <button\r\n+            className=\"pin-icon-btn\"\r\n+            onClick={handleToggleCityPin}\r\n+            disabled={!cityRegion || cityRegion === 'Not available' || cityRegion === 'Error'}\r\n+            title={isCityPinned ? \"Unpin location\" : \"Pin location\"}\r\n+          >\r\n+            <Pin \r\n+              size={18} \r\n+              fill={isCityPinned ? currentStyle.colors.accent : \"none\"}\r\n+            />\r\n+          </button>\r\n+        </LocationIndicator2>\r\n+\r\n+\r\n+        {/* Nearby Items Tab */}\r\n+        {activeTab === 'nearby' && (\r\n+          <>\r\n+            <SearchContainer>\r\n+              <SearchInput\r\n+                type=\"text\"\r\n+                placeholder=\"Enter address or ZIP code...\"\r\n+                value={searchAddress}\r\n+                onChange={(e) => setSearchAddress(e.target.value)}\r\n+                onKeyPress={(e) => e.key === 'Enter' && handleAddressSearch()}\r\n+              />\r\n+              <SearchButtonGroup>\r\n+                <SearchButton \r\n+                  onClick={handleAddressSearch}\r\n+                  disabled={searching || !searchAddress.trim()}\r\n+                >\r\n+                  <Navigation size={16} />\r\n+                  Search\r\n+                </SearchButton>\r\n+                <SearchButton \r\n+                  onClick={handleLiveLocation}\r\n+                  disabled={searching}\r\n+                  variant=\"live\"\r\n+                >\r\n+                  <Navigation size={16} />\r\n+                  Current\r\n+                </SearchButton>\r\n+              </SearchButtonGroup>\r\n+            </SearchContainer>\r\n+\r\n+            <GridContainer>\r\n+              {error ? (\r\n+                <EmptyGridMessage>\r\n+                  <h3>Oops!</h3>\r\n+                  <p>{error}</p>\r\n+                </EmptyGridMessage>\r\n+              ) : loading ? (\r\n+                <div style={{ textAlign: 'center', gridColumn: '1/-1' }}>\r\n+                  <LoadingSpinner />\r\n+                </div>\r\n+              ) : !hasSearched ? (\r\n+                <EmptyGridMessage>\r\n+                  <h3>Find Items Near You</h3>\r\n+                  <p>Enter your address or use current location to discover items in your area</p>\r\n+                </EmptyGridMessage>\r\n+              ) : nearbyItems.length === 0 ? (\r\n+                <EmptyGridMessage>\r\n+                  <h3>No Items Found</h3>\r\n+                  <p>No items found in this location. Try searching a different area.</p>\r\n+                </EmptyGridMessage>\r\n+              ) : (              \r\n+                nearbyItems.map(item => (\r\n+                  <FeaturedItem \r\n+                    key={`${item.shopId}-${item.id}`} \r\n+                    item={{\r\n+                      ...item,\r\n+                      location: item.formattedDistance\r\n+                    }}\r\n+                    showDistance={true}\r\n+                    theme={currentStyle}\r\n+                    onItemClick={handleItemClick}\r\n+                  />\r\n+                ))\r\n+              )}\r\n+            </GridContainer>\r\n+          </>\r\n+        )}\r\n+\r\n+        {/* Featured Items Tab */}\r\n+        {activeTab === 'featured' && (\r\n+          <>\r\n+            {/* Search container with Filter */}\r\n+            <SearchContainer>\r\n+              <SearchInput\r\n+                type=\"text\"\r\n+                placeholder=\"Search for items...\"\r\n+                value={featuredSearchTerm}\r\n+                onChange={(e) => setFeaturedSearchTerm(e.target.value)}\r\n+                onKeyPress={(e) => e.key === 'Enter' && handleFeaturedSearch()}\r\n+              />\r\n+              <SearchButtonGroup>\r\n+                <SearchButton \r\n+                  onClick={handleFeaturedSearch}\r\n+                  disabled={isSearching || !featuredSearchTerm.trim()}\r\n+                >\r\n+                  <Search size={16} />\r\n+                  Search\r\n+                </SearchButton>\r\n+                {hasSearchResults && (\r\n+                  <SearchButton onClick={handleClearFeaturedSearch} variant=\"live\">\r\n+                    <X size={16} />\r\n+                    Clear\r\n+                  </SearchButton>\r\n+                )}\r\n+\r\n+                {/* Filter Button */}\r\n+                <SortContainer className=\"sort-container\">\r\n+                  <SearchButton \r\n+                    onClick={() => setSortMenuOpen(!sortMenuOpen)}\r\n+                    style={{ position: 'relative' }}\r\n+                  >\r\n+                    <Filter size={16} />\r\n+                    {sortBy !== 'recent' && (\r\n+                      <div style={{\r\n+                        position: 'absolute',\r\n+                        top: '4px',\r\n+                        right: '4px',\r\n+                        width: '6px',\r\n+                        height: '6px',\r\n+                        borderRadius: '50%',\r\n+                        background: currentStyle?.colors?.accent || '#800000'\r\n+                      }} />\r\n+                    )}\r\n+                  </SearchButton>\r\n+                  \r\n+                  <SortDropdown theme={currentStyle} isOpen={sortMenuOpen}>\r\n+                    <div style={{\r\n+                      padding: '0.5rem 1rem 0.75rem',\r\n+                      fontSize: '0.75rem',\r\n+                      fontWeight: '700',\r\n+                      textTransform: 'uppercase',\r\n+                      letterSpacing: '1px',\r\n+                      color: currentStyle?.colors?.accent || '#800000',\r\n+                      borderBottom: `2px solid ${currentStyle?.colors?.accent || '#800000'}`,\r\n+                      marginBottom: '0.75rem',\r\n+                      fontFamily: currentStyle?.fonts?.heading || 'inherit'\r\n+                    }}>\r\n+                      Sort By\r\n+                    </div>\r\n+                  \r\n+                    <SortOption \r\n+                      theme={currentStyle}\r\n+                      active={sortBy === 'recent'}\r\n+                      onClick={() => {\r\n+                        if (!userLocation) {\r\n+                          requestLocation();\r\n+                          return;\r\n+                        }\r\n+                        setSortBy('recent');\r\n+                        setSortMenuOpen(false);\r\n+                        loadCategorizedItems();\r\n+                      }}\r\n+                    >\r\n+                      <Package size={16} />\r\n+                      <div style={{ display: 'flex', flexDirection: 'column', flex: 1 }}>\r\n+                        <span>Most Recent</span>\r\n+                        <span style={{ \r\n+                          fontSize: '0.7rem', \r\n+                          opacity: 0.7,\r\n+                          fontWeight: '400'\r\n+                        }}>\r\n+                          All items, newest first\r\n+                        </span>\r\n+                      </div>\r\n+                      {!userLocation && (\r\n+                        <span style={{ \r\n+                          fontSize: '0.65rem', \r\n+                          opacity: 0.6,\r\n+                          marginLeft: 'auto',\r\n+                          fontStyle: 'italic'\r\n+                        }}>\r\n+                          (needs location)\r\n+                        </span>\r\n+                      )}\r\n+                    </SortOption>\r\n+                    \r\n+                    <SortOption \r\n+                      theme={currentStyle}\r\n+                      active={sortBy === 'proximity'}\r\n+                      onClick={() => {\r\n+                        if (!userLocation) {\r\n+                          requestLocation();\r\n+                        }\r\n+                        setSortBy('proximity');\r\n+                        setSortMenuOpen(false);\r\n+                        loadCategorizedItems();\r\n+                      }}\r\n+                    >\r\n+                      <Navigation size={16} />\r\n+                      <div style={{ display: 'flex', flexDirection: 'column', flex: 1 }}>\r\n+                        <span>Closest First</span>\r\n+                        <span style={{ \r\n+                          fontSize: '0.7rem', \r\n+                          opacity: 0.7,\r\n+                          fontWeight: '400'\r\n+                        }}>\r\n+                          All items by distance\r\n+                        </span>\r\n+                      </div>\r\n+                      {!userLocation && (\r\n+                        <span style={{ \r\n+                          fontSize: '0.65rem', \r\n+                          opacity: 0.6,\r\n+                          marginLeft: 'auto',\r\n+                          fontStyle: 'italic'\r\n+                        }}>\r\n+                          (needs location)\r\n+                        </span>\r\n+                      )}\r\n+                    </SortOption>\r\n+                    \r\n+                    <SortOption \r\n+                      theme={currentStyle}\r\n+                      active={sortBy === 'price-low'}\r\n+                      onClick={() => {\r\n+                        if (!userLocation) {\r\n+                          requestLocation();\r\n+                          return;\r\n+                        }\r\n+                        setSortBy('price-low');\r\n+                        setSortMenuOpen(false);\r\n+                        loadCategorizedItems();\r\n+                      }}\r\n+                    >\r\n+                      <span style={{ fontSize: '1rem', fontWeight: '600' }}>$</span>\r\n+                      <div style={{ display: 'flex', flexDirection: 'column', flex: 1 }}>\r\n+                        <span>Price: Low to High</span>\r\n+                        <span style={{ \r\n+                          fontSize: '0.7rem', \r\n+                          opacity: 0.7,\r\n+                          fontWeight: '400'\r\n+                        }}>\r\n+                          All items by price\r\n+                        </span>\r\n+                      </div>\r\n+                      {!userLocation && (\r\n+                        <span style={{ \r\n+                          fontSize: '0.65rem', \r\n+                          opacity: 0.6,\r\n+                          marginLeft: 'auto',\r\n+                          fontStyle: 'italic'\r\n+                        }}>\r\n+                          (needs location)\r\n+                        </span>\r\n+                      )}\r\n+                    </SortOption>\r\n+                    \r\n+                    <SortOption \r\n+                      theme={currentStyle}\r\n+                      active={sortBy === 'price-high'}\r\n+                      onClick={() => {\r\n+                        if (!userLocation) {\r\n+                          requestLocation();\r\n+                          return;\r\n+                        }\r\n+                        setSortBy('price-high');\r\n+                        setSortMenuOpen(false);\r\n+                        loadCategorizedItems();\r\n+                      }}\r\n+                    >\r\n+                      <span style={{ fontSize: '1rem', fontWeight: '600' }}>$$$</span>\r\n+                      <div style={{ display: 'flex', flexDirection: 'column', flex: 1 }}>\r\n+                        <span>Price: High to Low</span>\r\n+                        <span style={{ \r\n+                          fontSize: '0.7rem', \r\n+                          opacity: 0.7,\r\n+                          fontWeight: '400'\r\n+                        }}>\r\n+                          All items by price\r\n+                        </span>\r\n+                      </div>\r\n+                      {!userLocation && (\r\n+                        <span style={{ \r\n+                          fontSize: '0.65rem', \r\n+                          opacity: 0.6,\r\n+                          marginLeft: 'auto',\r\n+                          fontStyle: 'italic'\r\n+                        }}>\r\n+                          (needs location)\r\n+                        </span>\r\n+                      )}\r\n+                    </SortOption>\r\n+                  </SortDropdown>\r\n+                </SortContainer>\r\n+              </SearchButtonGroup>\r\n+            </SearchContainer>\r\n+\r\n+            {/* Show search results or default categorized view */}\r\n+            {hasSearchResults ? (\r\n+              <div>\r\n+                <CategoryHeader theme={currentStyle}>\r\n+                  <h2>Search Results ({searchResults.length})</h2>\r\n+                </CategoryHeader>\r\n+\r\n+                {error ? (\r\n+                  <EmptyGridMessage>\r\n+                    <h3>No Results Found</h3>\r\n+                    <p>{error}</p>\r\n+                  </EmptyGridMessage>\r\n+                ) : isSearching ? (\r\n+                  <div style={{ textAlign: 'center', padding: '2rem' }}>\r\n+                    <LoadingSpinner />\r\n+                  </div>\r\n+                ) : searchResults.length === 0 ? (\r\n+                  <EmptyGridMessage>\r\n+                    <h3>No Items Found</h3>\r\n+                    <p>No items match your search criteria.</p>\r\n+                  </EmptyGridMessage>\r\n+                ) : (\r\n+                  <GridContainer>\r\n+                    {searchResults.map(item => (\r\n+                      <FeaturedItem \r\n+                        key={`search-${item.shopId}-${item.id}`} \r\n+                        item={item}\r\n+                        theme={currentStyle}\r\n+                        onItemClick={handleItemClick}\r\n+                        showDistance={true}\r\n+                      />\r\n+                    ))}\r\n+                  </GridContainer>\r\n+                )}\r\n+              </div>\r\n+            ) : (\r\n+              <div>\r\n+                {/* Featured Items Slider */}\r\n+                <CategoryHeader theme={currentStyle}>\r\n+                  <h2>Featured Items</h2>\r\n+                  <span className=\"view-all\">\r\n+                    {featuredItems.length} items\r\n+                  </span>\r\n+                </CategoryHeader>\r\n+\r\n+                <CategoryGridWrapper>\r\n+                {/* Desktop: Show all items in grid */}\r\n+                <div className=\"desktop-grid\" style={{ display: 'contents' }}>\r\n+                  {featuredItems.map(item => (\r\n+                    <div key={`featured-${item.shopId}-${item.id}`} className=\"desktop-only\" \r\n+                         style={{ display: window.innerWidth > 768 ? 'block' : 'none' }}>\r\n+                      <FeaturedItem\r\n+                        item={item}\r\n+                        theme={currentStyle}\r\n+                        onItemClick={handleItemClick}\r\n+                        showDistance={true}\r\n+                      />\r\n+                    </div>\r\n+                  ))}\r\n+                </div>\r\n+                \r\n+                {/* Mobile: Show all 10 items in a 2-row scrollable grid */}\r\n+                <CategoryScrollableGrid theme={currentStyle} className=\"mobile-only\">\r\n+                  {featuredItems.map(item => (\r\n+                    <FeaturedItem\r\n+                      key={`featured-mobile-${item.shopId}-${item.id}`}\r\n+                      item={item}\r\n+                      theme={currentStyle}\r\n+                      onItemClick={handleItemClick}\r\n+                      showDistance={true}\r\n+                    />\r\n+                  ))}\r\n+                </CategoryScrollableGrid>\r\n+              </CategoryGridWrapper>\r\n+                \r\n+              {Object.entries(categories).map(([categoryName, items]) => {\r\n+          if (items.length === 0) return null;\r\n+                      \r\n+          return (\r\n+            <div key={categoryName} style={{ marginTop: '3rem' }}>\r\n+              <CategoryHeader theme={currentStyle}>\r\n+                <h2>{categoryName}</h2>\r\n+                <span className=\"view-all\">\r\n+                  {items.length} items\r\n+                </span>\r\n+              </CategoryHeader>\r\n+          \r\n+              <CategoryGridWrapper>\r\n+                {/* Desktop: Show all items in grid */}\r\n+                <div className=\"desktop-grid\" style={{ display: 'contents' }}>\r\n+                  {items.map(item => (\r\n+                    <div key={`${categoryName}-${item.shopId}-${item.id}`} className=\"desktop-only\"\r\n+                         style={{ display: window.innerWidth > 768 ? 'block' : 'none' }}>\r\n+                      <FeaturedItem\r\n+                        item={item}\r\n+                        theme={currentStyle}\r\n+                        onItemClick={handleItemClick}\r\n+                        showDistance={true}\r\n+                      />\r\n+                    </div>\r\n+                  ))}\r\n+                </div>\r\n+                \r\n+                {/* Mobile: Show all items in a scrollable grid (1 or 2 rows based on count) */}\r\n+                <CategoryScrollableGrid theme={currentStyle} className=\"mobile-only\" itemCount={items.length}>\r\n+                  {items.map(item => (\r\n+                    <FeaturedItem\r\n+                      key={`${categoryName}-mobile-${item.shopId}-${item.id}`}\r\n+                      item={item}\r\n+                      theme={currentStyle}\r\n+                      onItemClick={handleItemClick}\r\n+                      showDistance={true}\r\n+                    />\r\n+                  ))}\r\n+                </CategoryScrollableGrid>\r\n+              </CategoryGridWrapper>\r\n+            </div>\r\n+          );\r\n+        })}\r\n+              </div>\r\n+            )}\r\n+          </>\r\n+        )}\r\n+\r\n+        {/* Media Tab */}\r\n+        {activeTab === 'media' && (\r\n+          <EmptyGridMessage>\r\n+            <h3>Featured Media</h3>\r\n+            <p>Coming soon! Discover videos and content from local creators.</p>\r\n+          </EmptyGridMessage>\r\n+        )}\r\n+      </MainContent>\r\n+\r\n+      {/* Style Indicator Only */}\r\n+      <StyleIndicator theme={currentStyle}>\r\n+        <span className=\"style-number\">{currentStyle.id}</span>\r\n+        <span>{currentStyle.name}</span>\r\n+      </StyleIndicator>\r\n+\r\n+      {/* Zoomed Item View - Updated to match ShopPublicView */}\r\n+      {/* Zoomed Item View - 75/25 Split */}\r\n+      {/* Zoomed Item View - 70/30 Split with 2:5 Card */}\r\n+      {zoomedItem && (\r\n+        <ZoomOverlay onClick={handleCloseZoom} theme={currentStyle}>\r\n+          <ZoomContainer \r\n+            theme={currentStyle}\r\n+            onClick={(e) => e.stopPropagation()}\r\n+          >\r\n+            {/* 70% - Image Carousel */}\r\n+            <ImageCarousel \r\n+              theme={currentStyle} \r\n+              currentIndex={currentImageIndex}\r\n+            >\r\n+              {/* Close button */}\r\n+              <button \r\n+                className=\"close-overlay-button\"\r\n+                onClick={handleCloseZoom}\r\n+                aria-label=\"Close\"\r\n+              >\r\n+                <X size={20} />\r\n+              </button>\r\n+            \r\n+              <div className=\"image-track\">\r\n+                {zoomedItem.images && zoomedItem.images.filter(Boolean).length > 0 ? (\r\n+                  zoomedItem.images.filter(Boolean).map((image, index) => (\r\n+                    <div key={index} className=\"image-slide\">\r\n+                      <img src={image} alt={`${zoomedItem.name} ${index + 1}`} />\r\n+                    </div>\r\n+                  ))\r\n+                ) : (\r\n+                  <div className=\"image-slide\">\r\n+                    <div className=\"no-image\">\r\n+                      <Package size={40} />\r\n+                      <p>No image</p>\r\n+                    </div>\r\n+                  </div>\r\n+                )}\r\n+              </div>\r\n+              \r\n+              {/* Navigation */}\r\n+              {zoomedItem.images && zoomedItem.images.filter(Boolean).length > 1 && (\r\n+                <>\r\n+                  <button \r\n+                    className=\"carousel-button prev\"\r\n+                    onClick={() => setCurrentImageIndex(prev => \r\n+                      prev === 0 ? zoomedItem.images.filter(Boolean).length - 1 : prev - 1\r\n+                    )}\r\n+                    aria-label=\"Previous\"\r\n+                  >\r\n+                    <ChevronLeft size={20} />\r\n+                  </button>\r\n+                  <button \r\n+                    className=\"carousel-button next\"\r\n+                    onClick={() => setCurrentImageIndex(prev => \r\n+                      prev === zoomedItem.images.filter(Boolean).length - 1 ? 0 : prev + 1\r\n+                    )}\r\n+                    aria-label=\"Next\"\r\n+                  >\r\n+                    <ChevronRight size={20} />\r\n+                  </button>\r\n+                  \r\n+                  <div className=\"carousel-dots\">\r\n+                    {zoomedItem.images.filter(Boolean).map((_, index) => (\r\n+                      <button\r\n+                        key={index}\r\n+                        className=\"dot\"\r\n+                        style={{ opacity: index === currentImageIndex ? 1 : 0.3 }}\r\n+                        onClick={() => setCurrentImageIndex(index)}\r\n+                        aria-label={`Image ${index + 1}`}\r\n+                      />\r\n+                    ))}\r\n+                  </div>\r\n+                </>\r\n+              )}\r\n+            </ImageCarousel>\r\n+            \r\n+            {/* 30% - Compact Details */}\r\n+            <ZoomContent theme={currentStyle}>\r\n+              {/* Name & Price Row */}\r\n+              <div style={{ \r\n+                display: 'flex', \r\n+                justifyContent: 'space-between', \r\n+                alignItems: 'baseline',\r\n+                gap: '0.75rem'\r\n+              }}>\r\n+                <h3 style={{\r\n+                  fontSize: '1.1rem',\r\n+                  margin: 0,\r\n+                  fontWeight: '600',\r\n+                  color: currentStyle?.colors?.text || '#FFFFFF',\r\n+                  flex: 1,\r\n+                  overflow: 'hidden',\r\n+                  textOverflow: 'ellipsis',\r\n+                  whiteSpace: 'nowrap'\r\n+                }}>\r\n+                  {zoomedItem.name}\r\n+                </h3>\r\n+                \r\n+                <div style={{\r\n+                  fontSize: '1.2rem',\r\n+                  fontWeight: 'bold',\r\n+                  color: currentStyle?.colors?.accent || '#800000',\r\n+                  whiteSpace: 'nowrap'\r\n+                }}>\r\n+                  ${parseFloat(zoomedItem.price || 0).toFixed(2)}\r\n+                </div>\r\n+              </div>\r\n+              \r\n+              {/* Info Row: Distance • Shop • Stock */}\r\n+              <div style={{\r\n+                display: 'flex',\r\n+                alignItems: 'center',\r\n+                gap: '0.75rem',\r\n+                fontSize: '0.75rem',\r\n+                flexWrap: 'wrap',\r\n+                color: currentStyle?.colors?.text || '#FFFFFF',\r\n+                opacity: 0.8\r\n+              }}>\r\n+                {zoomedItem.formattedDistance && (\r\n+                  <>\r\n+                    <div style={{ display: 'flex', alignItems: 'center', gap: '0.25rem' }}>\r\n+                      <Navigation size={11} />\r\n+                      <span>{zoomedItem.formattedDistance}</span>\r\n+                    </div>\r\n+                    <span>•</span>\r\n+                  </>\r\n+                )}\r\n+                \r\n+                {zoomedItem.shopName && (\r\n+                  <>\r\n+                    <div \r\n+                      style={{ \r\n+                        display: 'flex', \r\n+                        alignItems: 'center', \r\n+                        gap: '0.25rem',\r\n+                        cursor: 'pointer',\r\n+                        textDecoration: 'underline'\r\n+                      }}\r\n+                      onClick={(e) => {\r\n+                        e.stopPropagation();\r\n+                        navigate(`/shop/${zoomedItem.shopId}/view`);\r\n+                      }}\r\n+                    >\r\n+                      <Store size={11} />\r\n+                      <span>{zoomedItem.shopName}</span>\r\n+                    </div>\r\n+                    <span>•</span>\r\n+                  </>\r\n+                )}\r\n+                \r\n+                {zoomedItem.quantity !== undefined && (\r\n+                  <div style={{ display: 'flex', alignItems: 'center', gap: '0.25rem' }}>\r\n+                    <div style={{\r\n+                      width: '5px',\r\n+                      height: '5px',\r\n+                      borderRadius: '50%',\r\n+                      background: parseInt(zoomedItem.quantity) > 0 ? '#4CAF50' : '#FF5252'\r\n+                    }} />\r\n+                    <span style={{\r\n+                      color: parseInt(zoomedItem.quantity) > 0 ? '#4CAF50' : '#FF5252',\r\n+                      fontWeight: '500'\r\n+                    }}>\r\n+                      {parseInt(zoomedItem.quantity) > 0 ? \r\n+                        `${zoomedItem.quantity} in stock` : \r\n+                        'Out of stock'\r\n+                      }\r\n+                    </span>\r\n+                  </div>\r\n+                )}\r\n+              </div>\r\n+              \r\n+              {/* Quantity Selector */}\r\n+              <div style={{\r\n+                display: 'flex',\r\n+                alignItems: 'center',\r\n+                justifyContent: 'space-between',\r\n+                background: `${currentStyle?.colors?.surface || 'rgba(255, 255, 255, 0.05)'}20`,\r\n+                borderRadius: '6px',\r\n+                padding: '0.5rem 0.75rem'\r\n+              }}>\r\n+                <span style={{\r\n+                  fontSize: '0.8rem',\r\n+                  fontWeight: '600',\r\n+                  color: currentStyle?.colors?.text || '#FFFFFF'\r\n+                }}>\r\n+                  Qty\r\n+                </span>\r\n+                \r\n+                <div style={{ display: 'flex', alignItems: 'center', gap: '0.75rem' }}>\r\n+                  <button \r\n+                    onClick={() => adjustQuantity(-1)}\r\n+                    disabled={orderQuantity <= 1}\r\n+                    style={{\r\n+                      width: '24px',\r\n+                      height: '24px',\r\n+                      borderRadius: '50%',\r\n+                      border: `1.5px solid ${currentStyle?.colors?.accent || '#800000'}`,\r\n+                      background: 'transparent',\r\n+                      color: currentStyle?.colors?.accent || '#800000',\r\n+                      display: 'flex',\r\n+                      alignItems: 'center',\r\n+                      justifyContent: 'center',\r\n+                      cursor: orderQuantity <= 1 ? 'not-allowed' : 'pointer',\r\n+                      opacity: orderQuantity <= 1 ? 0.3 : 1\r\n+                    }}\r\n+                  >\r\n+                    <Minus size={12} />\r\n+                  </button>\r\n+                  \r\n+                  <div style={{\r\n+                    fontSize: '1rem',\r\n+                    fontWeight: 'bold',\r\n+                    color: currentStyle?.colors?.text || 'white',\r\n+                    minWidth: '24px',\r\n+                    textAlign: 'center'\r\n+                  }}>\r\n+                    {orderQuantity}\r\n+                  </div>\r\n+                \r\n+                  <button \r\n+                    onClick={() => adjustQuantity(1)}\r\n+                    disabled={orderQuantity >= parseInt(zoomedItem.quantity || 1)}\r\n+                    style={{\r\n+                      width: '24px',\r\n+                      height: '24px',\r\n+                      borderRadius: '50%',\r\n+                      border: `1.5px solid ${currentStyle?.colors?.accent || '#800000'}`,\r\n+                      background: 'transparent',\r\n+                      color: currentStyle?.colors?.accent || '#800000',\r\n+                      display: 'flex',\r\n+                      alignItems: 'center',\r\n+                      justifyContent: 'center',\r\n+                      cursor: orderQuantity >= parseInt(zoomedItem.quantity || 1) ? 'not-allowed' : 'pointer',\r\n+                      opacity: orderQuantity >= parseInt(zoomedItem.quantity || 1) ? 0.3 : 1\r\n+                    }}\r\n+                  >\r\n+                    <Plus size={12} />\r\n+                  </button>\r\n+                </div>\r\n+              </div>\r\n+                  \r\n+              {/* Order Button */}\r\n+              <button \r\n+                onClick={handleDirectOrder}\r\n+                disabled={parseInt(zoomedItem.quantity || 0) < 1 || orderQuantity > parseInt(zoomedItem.quantity || 0)}\r\n+                style={{\r\n+                  width: '100%',\r\n+                  padding: '0.75rem',\r\n+                  borderRadius: '8px',\r\n+                  border: 'none',\r\n+                  background: parseInt(zoomedItem.quantity || 0) < 1 ? \r\n+                    `${currentStyle?.colors?.accent || '#800000'}40` : \r\n+                    currentStyle?.colors?.accent || '#800000',\r\n+                  color: 'white',\r\n+                  fontSize: '0.9rem',\r\n+                  fontWeight: '600',\r\n+                  display: 'flex',\r\n+                  alignItems: 'center',\r\n+                  justifyContent: 'center',\r\n+                  gap: '0.5rem',\r\n+                  cursor: parseInt(zoomedItem.quantity || 0) < 1 ? 'not-allowed' : 'pointer',\r\n+                  transition: 'all 0.3s'\r\n+                }}\r\n+              >\r\n+                {parseInt(zoomedItem.quantity || 0) < 1 ? (\r\n+                  <>\r\n+                    <X size={16} />\r\n+                    Out of Stock\r\n+                  </>\r\n+                ) : (\r\n+                  <>\r\n+                    <ShoppingCart size={16} />\r\n+                    Order {orderQuantity > 1 && `${orderQuantity} `}· ${(parseFloat(zoomedItem.price || 0) * orderQuantity).toFixed(2)}\r\n+                  </>\r\n+                )}\r\n+              </button>\r\n+            </ZoomContent>\r\n+          </ZoomContainer>\r\n+        </ZoomOverlay>\r\n+      )}\r\n+\r\n+      {/* Chat Overlay */}\r\n+      <ChatOverlay isOpen={chatOpen} onClick={handleCloseChat} />\r\n+      \r\n+      {selectedChatItem && (\r\n+        <OrderChat \r\n+          isOpen={chatOpen} \r\n+          onClose={handleCloseChat} \r\n+          item={selectedChatItem}\r\n+          shopId={selectedChatItem.shopId}\r\n+          shopName={selectedChatItem.shopName}\r\n+          theme={currentStyle}\r\n+        />\r\n+      )}\r\n+    </PageContainer>\r\n+  );\r\n+};\r\n+\r\n+export default WelcomePage;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1759890028857,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,3708 @@\n+// src/pages/WelcomePage.js - Mobile-Optimized Version\r\n+import React from 'react';\r\n+import styled from 'styled-components';\r\n+import { useNavigate } from 'react-router-dom';\r\n+import { useEffect, useState, useRef } from 'react';\r\n+import { getFeaturedItems } from '../firebase/firebaseService';\r\n+import FeaturedItem from '../components/shop/FeaturedItem';\r\n+import { Search, Package, Navigation, Film, Filter, Store, Plus, Minus, Pin, ChevronLeft, ChevronRight, X, MessageCircle, ShoppingCart, RefreshCw, LogOut } from 'lucide-react';\r\n+import { getDistance } from 'geolib';\r\n+import OrderChat from '../components/Chat/OrderChat';\r\n+import { collection, getDocs } from 'firebase/firestore';\r\n+import { db, auth } from '../firebase/config';\r\n+import { WELCOME_STYLES } from '../theme/welcomeStyles';\r\n+import { getShopData } from '../firebase/firebaseService';\r\n+import { useAuth } from '../contexts/AuthContext';\r\n+import { useLocation } from '../contexts/LocationContext';\r\n+import LocationDialog from '../components/LocationDialog';\r\n+import ThemeDecorations from '../components/ThemeDecorations';\r\n+import { TransactionService } from '../services/TransactionService';\r\n+import { signOut } from 'firebase/auth';\r\n+\r\n+const getIPBasedLocation = async () => {\r\n+  try {\r\n+    console.log('🌐 Fetching IP-based location from ipapi.co...');\r\n+    const response = await fetch('https://ipapi.co/json/');\r\n+    \r\n+    if (!response.ok) {\r\n+      throw new Error(`HTTP error! status: ${response.status}`);\r\n+    }\r\n+    \r\n+    const data = await response.json();\r\n+    console.log('✅ IP Location data:', data);\r\n+    \r\n+    if (!data.latitude || !data.longitude) {\r\n+      throw new Error('Invalid location data received');\r\n+    }\r\n+    \r\n+    return {\r\n+      latitude: data.latitude,\r\n+      longitude: data.longitude,\r\n+      city: data.city,\r\n+      region: data.region,\r\n+      country: data.country_name,\r\n+      isIPBased: true\r\n+    };\r\n+  } catch (error) {\r\n+    console.error('❌ Error getting IP location:', error);\r\n+    \r\n+    // Fallback to a default location (Houston, TX)\r\n+    console.log('⚠️ Using fallback location: Houston, TX');\r\n+    return {\r\n+      latitude: 29.7604,\r\n+      longitude: -95.3698,\r\n+      city: 'Houston',\r\n+      region: 'Texas',\r\n+      country: 'United States',\r\n+      isIPBased: true,\r\n+      isFallback: true\r\n+    };\r\n+  }\r\n+};\r\n+\r\n+// Mobile-first styled components\r\n+const PageContainer = styled.div.attrs({ className: 'page-container' })`\r\n+  min-height: 100vh;\r\n+  background: ${props => props.theme?.colors?.background || '#000000'};\r\n+  color: ${props => props.theme?.colors?.text || '#FFFFFF'};\r\n+  position: relative;\r\n+  overflow: hidden;\r\n+  \r\n+  /* Mobile-optimized background effects */\r\n+  &::before {\r\n+    content: '';\r\n+    position: absolute;\r\n+    width: 100%;\r\n+    height: 100%;\r\n+    background: ${props => props.theme?.colors?.backgroundGradient || 'radial-gradient(circle at 20% 30%, rgba(128, 0, 0, 0.2) 0%, transparent 50%)'};\r\n+    opacity: 0.8;\r\n+    animation: ${props => props.theme?.animations?.backgroundAnimation || 'galaxySwirl 30s linear infinite'};\r\n+  }\r\n+\r\n+  /* Simplified stars for mobile performance */\r\n+  &::after {\r\n+    content: '';\r\n+    position: absolute;\r\n+    width: 100%;\r\n+    height: 100%;\r\n+    background-image: radial-gradient(circle 1px, ${props => props.theme?.colors?.text || '#FFF'} 1px, transparent 1px);\r\n+    background-size: 100px 100px;\r\n+    opacity: 0.05;\r\n+    \r\n+    @media (min-width: 768px) {\r\n+      background-size: 200px 200px;\r\n+      opacity: 0.1;\r\n+    }\r\n+  }\r\n+\r\n+  /* Reduced ping animations on mobile for performance */\r\n+  .ping {\r\n+    display: none;\r\n+    \r\n+    @media (min-width: 768px) {\r\n+      display: block;\r\n+      position: absolute;\r\n+      width: 2px;\r\n+      height: 2px;\r\n+      border-radius: 50%;\r\n+      background: ${props => props.theme?.colors?.accent || '#800000'};\r\n+      pointer-events: none;\r\n+      z-index: 0;\r\n+    }\r\n+  }\r\n+\r\n+  @keyframes galaxySwirl {\r\n+    0% { transform: rotate(0deg); }\r\n+    100% { transform: rotate(360deg); }\r\n+  }\r\n+`;\r\n+\r\n+// Simplified header with just logo and right-side controls\r\n+const Header = styled.header`\r\n+  width: 100%;\r\n+  height: 60px;\r\n+  padding: 0 1rem;\r\n+  display: flex;\r\n+  align-items: center;\r\n+  justify-content: space-between;\r\n+  background: ${props => `${props.theme?.colors?.headerBg || 'rgba(0, 0, 0, 0.9)'}F5`};\r\n+  backdrop-filter: blur(10px);\r\n+  border-bottom: 1px solid ${props => `${props.theme?.colors?.accent}4D` || 'rgba(128, 0, 0, 0.3)'};\r\n+  position: fixed;\r\n+  top: 0;\r\n+  z-index: 100;\r\n+\r\n+  @media (min-width: 768px) {\r\n+    height: 80px;\r\n+    padding: 0 2rem;\r\n+  }\r\n+`;\r\n+\r\n+const Logo = styled.div`\r\n+  color: ${props => props.theme?.colors?.accent || '#800000'};\r\n+  font-family: ${props => props.theme?.fonts?.heading || \"'Impact', sans-serif\"};\r\n+  font-size: 1.4rem;\r\n+  letter-spacing: 1px;\r\n+  transform: skew(-5deg);\r\n+  cursor: pointer;\r\n+  flex-shrink: 0;\r\n+\r\n+  @media (min-width: 768px) {\r\n+    font-size: 2rem;\r\n+    letter-spacing: 2px;\r\n+  }\r\n+`;\r\n+\r\n+const LocationIndicator2 = styled.div`\r\n+  display: flex;\r\n+  align-items: center;\r\n+  justify-content: center;\r\n+  gap: 0.75rem;\r\n+  background: ${props => `${props.theme?.colors?.surface || 'rgba(0, 0, 0, 0.4)'}CC`};\r\n+  backdrop-filter: blur(10px);\r\n+  padding: 0.75rem 1.5rem;\r\n+  border-radius: 25px;\r\n+  border: 1px solid ${props => `${props.theme?.colors?.accent}40` || 'rgba(128, 0, 0, 0.4)'};\r\n+  margin: 1.5rem auto;\r\n+  max-width: 500px;\r\n+  width: 90%;\r\n+  transition: all 0.3s ease;\r\n+  position: relative;\r\n+  \r\n+  @media (max-width: 768px) {\r\n+    width: 95%;\r\n+    padding: 0.6rem 1rem;\r\n+    gap: 0.5rem;\r\n+  }\r\n+  \r\n+  .location-icon-btn {\r\n+    background: transparent;\r\n+    border: none;\r\n+    color: ${props => props.theme?.colors?.accent || '#800000'};\r\n+    cursor: pointer;\r\n+    display: flex;\r\n+    align-items: center;\r\n+    justify-content: center;\r\n+    padding: 0.25rem;\r\n+    border-radius: 50%;\r\n+    transition: all 0.2s ease;\r\n+    flex-shrink: 0;\r\n+    \r\n+    &:hover {\r\n+      background: ${props => `${props.theme?.colors?.accent}20` || 'rgba(128, 0, 0, 0.2)'};\r\n+    }\r\n+    \r\n+    &:active {\r\n+      transform: scale(0.9);\r\n+    }\r\n+    \r\n+    &:disabled {\r\n+      opacity: 0.5;\r\n+      cursor: not-allowed;\r\n+    }\r\n+    \r\n+    svg {\r\n+      width: 20px;\r\n+      height: 20px;\r\n+      \r\n+      @media (max-width: 768px) {\r\n+        width: 18px;\r\n+        height: 18px;\r\n+      }\r\n+    }\r\n+  }\r\n+  \r\n+  .location-input {\r\n+    flex: 1;\r\n+    background: transparent;\r\n+    border: none;\r\n+    color: ${props => props.theme?.colors?.text || '#FFFFFF'};\r\n+    font-size: 0.95rem;\r\n+    outline: none;\r\n+    text-align: center;\r\n+    cursor: default;\r\n+    min-width: 0; /* Allow text to shrink */\r\n+    \r\n+    &::placeholder {\r\n+      color: ${props => `${props.theme?.colors?.text}50` || 'rgba(255, 255, 255, 0.5)'};\r\n+      font-style: italic;\r\n+    }\r\n+    \r\n+    @media (max-width: 768px) {\r\n+      font-size: 0.85rem;\r\n+    }\r\n+  }\r\n+  \r\n+  .updating-spinner {\r\n+    width: 16px;\r\n+    height: 16px;\r\n+    border: 2px solid ${props => `${props.theme?.colors?.accent}30` || 'rgba(128, 0, 0, 0.3)'};\r\n+    border-radius: 50%;\r\n+    border-top-color: ${props => props.theme?.colors?.accent || '#800000'};\r\n+    animation: spin 1s linear infinite;\r\n+  }\r\n+  \r\n+  .pin-icon-btn {\r\n+    background: transparent;\r\n+    border: none;\r\n+    color: ${props => props.theme?.colors?.accent || '#800000'};\r\n+    cursor: pointer;\r\n+    display: flex;\r\n+    align-items: center;\r\n+    justify-content: center;\r\n+    padding: 0.25rem;\r\n+    border-radius: 50%;\r\n+    transition: all 0.2s ease;\r\n+    opacity: ${props => props.isPinned ? 1 : 0.5};\r\n+    flex-shrink: 0;\r\n+    \r\n+    &:hover:not(:disabled) {\r\n+      background: ${props => `${props.theme?.colors?.accent}20` || 'rgba(128, 0, 0, 0.2)'};\r\n+      opacity: 1;\r\n+    }\r\n+    \r\n+    &:active:not(:disabled) {\r\n+      transform: scale(0.9);\r\n+    }\r\n+    \r\n+    &:disabled {\r\n+      opacity: 0.3;\r\n+      cursor: not-allowed;\r\n+    }\r\n+    \r\n+    svg {\r\n+      width: 18px;\r\n+      height: 18px;\r\n+      \r\n+      @media (max-width: 768px) {\r\n+        width: 16px;\r\n+        height: 16px;\r\n+      }\r\n+    }\r\n+  }\r\n+  \r\n+  @keyframes spin {\r\n+    to {\r\n+      transform: rotate(360deg);\r\n+    }\r\n+  }\r\n+`;\r\n+\r\n+const HeaderControls = styled.div`\r\n+  display: flex;\r\n+  align-items: center;\r\n+  gap: 0.75rem;\r\n+`;\r\n+\r\n+const HeaderButton = styled.button`\r\n+  background: transparent;\r\n+  border: none;\r\n+  color: ${props => props.theme?.colors?.accent || '#800000'};\r\n+  padding: 0.5rem;\r\n+  cursor: pointer;\r\n+  display: flex;\r\n+  align-items: center;\r\n+  justify-content: center;\r\n+  border-radius: 50%;\r\n+  transition: all 0.3s ease;\r\n+  opacity: 0.8;\r\n+  \r\n+  &:active {\r\n+    transform: scale(0.9);\r\n+    opacity: 1;\r\n+  }\r\n+  \r\n+  @media (hover: hover) {\r\n+    &:hover {\r\n+      opacity: 1;\r\n+      background: ${props => `${props.theme?.colors?.accent}10` || 'rgba(128, 0, 0, 0.1)'};\r\n+    }\r\n+  }\r\n+  \r\n+  &.pinned {\r\n+    color: ${props => props.theme?.colors?.accent || '#800000'};\r\n+    opacity: 1;\r\n+  }\r\n+  \r\n+  svg {\r\n+    width: 20px;\r\n+    height: 20px;\r\n+    \r\n+    @media (min-width: 768px) {\r\n+      width: 22px;\r\n+      height: 22px;\r\n+    }\r\n+  }\r\n+`;\r\n+\r\n+// Improved mobile main content with better spacing\r\n+const MainContent = styled.main`\r\n+  max-width: 1200px;\r\n+  margin: 0 auto;\r\n+  padding: 80px 1rem 100px 1rem;\r\n+  position: relative;\r\n+  z-index: 1;\r\n+  \r\n+  @media (min-width: 768px) {\r\n+    padding: 6rem 2rem 2rem 2rem;\r\n+  }\r\n+`;\r\n+\r\n+// Mobile-optimized welcome section\r\n+const WelcomeSection = styled.section`\r\n+  text-align: center;\r\n+  margin: 2rem 0;\r\n+  position: relative;\r\n+\r\n+  h1 {\r\n+    font-family: ${props => props.theme?.fonts?.heading || \"'Impact', sans-serif\"};\r\n+    font-size: 2.5rem;\r\n+    margin-bottom: 1rem;\r\n+    background: ${props => props.theme?.colors?.accentGradient || 'linear-gradient(45deg, #800000, #4A0404)'};\r\n+    -webkit-background-clip: text;\r\n+    -webkit-text-fill-color: transparent;\r\n+    letter-spacing: 1px;\r\n+    line-height: 1.2;\r\n+    \r\n+    @media (min-width: 768px) {\r\n+      font-size: 4.5rem;\r\n+      letter-spacing: 2px;\r\n+    }\r\n+  }\r\n+\r\n+  p {\r\n+    font-size: 1rem;\r\n+    line-height: 1.5;\r\n+    max-width: 600px;\r\n+    margin: 0 auto;\r\n+    color: ${props => `${props.theme?.colors?.text}CC` || 'rgba(255, 255, 255, 0.8)'};\r\n+    padding: 0 1rem;\r\n+    \r\n+    @media (min-width: 768px) {\r\n+      font-size: 1.2rem;\r\n+      line-height: 1.6;\r\n+      max-width: 800px;\r\n+    }\r\n+  }\r\n+`;\r\n+\r\n+// Completely redesigned ZoomOverlay - Responsive to zoom level\r\n+const ZoomOverlay = styled.div`\r\n+  position: fixed;\r\n+  top: 0;\r\n+  left: 0;\r\n+  right: 0;\r\n+  bottom: 0;\r\n+  background: ${props => `${props.theme?.colors?.background || 'rgba(0, 0, 0, 0.95)'}F5`};\r\n+  z-index: 10000;\r\n+  backdrop-filter: blur(10px);\r\n+  display: flex;\r\n+  align-items: center;\r\n+  justify-content: center;\r\n+  padding: 2rem;\r\n+  overflow: hidden;\r\n+  \r\n+  @media (max-width: 768px) {\r\n+    padding: 1rem;\r\n+  }\r\n+  \r\n+  @media (max-width: 480px) {\r\n+    padding: 0.5rem;\r\n+  }\r\n+`;\r\n+\r\n+// Redesigned ZoomContainer - 2:5 aspect ratio card, centered with ample space\r\n+const ZoomContainer = styled.div`\r\n+  position: relative;\r\n+  width: 100%;\r\n+  max-width: 500px;\r\n+  aspect-ratio: 2 / 5;\r\n+  max-height: 85vh;\r\n+  background: ${props => props.theme?.colors?.background || '#000000'};\r\n+  border-radius: 16px;\r\n+  overflow: hidden;\r\n+  border: 2px solid ${props => props.theme?.colors?.accent || '#800000'};\r\n+  box-shadow: 0 20px 60px rgba(0, 0, 0, 0.8);\r\n+  display: flex;\r\n+  flex-direction: column;\r\n+  \r\n+  @media (max-width: 768px) {\r\n+    max-width: 420px;\r\n+    border-radius: 12px;\r\n+  }\r\n+  \r\n+  @media (max-width: 480px) {\r\n+    max-width: 95%;\r\n+    border-radius: 10px;\r\n+  }\r\n+`;\r\n+\r\n+// Image section - 70% of card height\r\n+const ImageCarousel = styled.div`\r\n+  position: relative;\r\n+  width: 100%;\r\n+  height: 70%;\r\n+  background: ${props => `${props.theme?.colors?.background || '#000000'}80`};\r\n+  overflow: hidden;\r\n+  flex-shrink: 0;\r\n+  \r\n+  .image-track {\r\n+    display: flex;\r\n+    height: 100%;\r\n+    transition: transform 0.3s ease;\r\n+    transform: translateX(${props => props.currentIndex * -100}%);\r\n+  }\r\n+  \r\n+  .image-slide {\r\n+    min-width: 100%;\r\n+    height: 100%;\r\n+    display: flex;\r\n+    align-items: center;\r\n+    justify-content: center;\r\n+    \r\n+    img {\r\n+      width: 100%;\r\n+      height: 100%;\r\n+      object-fit: cover;\r\n+      background: ${props => `${props.theme?.colors?.background || '#000000'}40`};\r\n+    }\r\n+    \r\n+    .no-image {\r\n+      display: flex;\r\n+      flex-direction: column;\r\n+      align-items: center;\r\n+      gap: 0.75rem;\r\n+      color: ${props => props.theme?.colors?.text || '#FFFFFF'};\r\n+      opacity: 0.3;\r\n+      \r\n+      p {\r\n+        margin: 0;\r\n+        font-size: 0.85rem;\r\n+      }\r\n+    }\r\n+  }\r\n+  \r\n+  .carousel-dots {\r\n+    position: absolute;\r\n+    bottom: 1rem;\r\n+    left: 50%;\r\n+    transform: translateX(-50%);\r\n+    display: flex;\r\n+    gap: 0.4rem;\r\n+    z-index: 2;\r\n+    padding: 0.4rem 0.75rem;\r\n+    background: ${props => `${props.theme?.colors?.background || 'rgba(0, 0, 0, 0.6)'}CC`};\r\n+    border-radius: 20px;\r\n+    backdrop-filter: blur(8px);\r\n+  }\r\n+  \r\n+  .dot {\r\n+    width: 6px;\r\n+    height: 6px;\r\n+    border-radius: 50%;\r\n+    background: ${props => props.theme?.colors?.text || '#FFFFFF'};\r\n+    border: none;\r\n+    padding: 0;\r\n+    cursor: pointer;\r\n+    transition: all 0.2s ease;\r\n+    \r\n+    &:hover {\r\n+      transform: scale(1.2);\r\n+    }\r\n+  }\r\n+  \r\n+  .carousel-button {\r\n+    position: absolute;\r\n+    top: 50%;\r\n+    transform: translateY(-50%);\r\n+    background: ${props => `${props.theme?.colors?.background || 'rgba(0, 0, 0, 0.7)'}DD`};\r\n+    border: 1px solid ${props => `${props.theme?.colors?.accent}40` || 'rgba(255, 255, 255, 0.2)'};\r\n+    border-radius: 50%;\r\n+    width: 40px;\r\n+    height: 40px;\r\n+    display: flex;\r\n+    align-items: center;\r\n+    justify-content: center;\r\n+    color: ${props => props.theme?.colors?.text || 'white'};\r\n+    cursor: pointer;\r\n+    opacity: 0;\r\n+    transition: all 0.3s ease;\r\n+    z-index: 2;\r\n+    \r\n+    &:hover {\r\n+      opacity: 1 !important;\r\n+      background: ${props => props.theme?.colors?.accent || '#800000'};\r\n+      transform: translateY(-50%) scale(1.1);\r\n+    }\r\n+    \r\n+    &.prev {\r\n+      left: 1rem;\r\n+    }\r\n+    \r\n+    &.next {\r\n+      right: 1rem;\r\n+    }\r\n+    \r\n+    &:disabled {\r\n+      opacity: 0 !important;\r\n+      cursor: not-allowed;\r\n+    }\r\n+    \r\n+    @media (max-width: 480px) {\r\n+      width: 32px;\r\n+      height: 32px;\r\n+      \r\n+      &.prev {\r\n+        left: 0.5rem;\r\n+      }\r\n+      \r\n+      &.next {\r\n+        right: 0.5rem;\r\n+      }\r\n+      \r\n+      svg {\r\n+        width: 16px;\r\n+        height: 16px;\r\n+      }\r\n+    }\r\n+  }\r\n+  \r\n+  &:hover .carousel-button {\r\n+    opacity: 0.7;\r\n+  }\r\n+  \r\n+  .close-overlay-button {\r\n+    position: absolute;\r\n+    top: 1rem;\r\n+    right: 1rem;\r\n+    background: ${props => `${props.theme?.colors?.background || 'rgba(0, 0, 0, 0.8)'}DD`};\r\n+    border: 1px solid ${props => `${props.theme?.colors?.accent}60` || 'rgba(255, 255, 255, 0.3)'};\r\n+    border-radius: 50%;\r\n+    width: 40px;\r\n+    height: 40px;\r\n+    display: flex;\r\n+    align-items: center;\r\n+    justify-content: center;\r\n+    color: white;\r\n+    cursor: pointer;\r\n+    transition: all 0.2s ease;\r\n+    backdrop-filter: blur(8px);\r\n+    z-index: 3;\r\n+    opacity: 0.8;\r\n+    \r\n+    &:hover {\r\n+      opacity: 1;\r\n+      background: ${props => props.theme?.colors?.accent || '#800000'};\r\n+      border-color: ${props => props.theme?.colors?.accent || '#800000'};\r\n+      transform: scale(1.1);\r\n+    }\r\n+    \r\n+    &:active {\r\n+      transform: scale(0.95);\r\n+    }\r\n+    \r\n+    @media (max-width: 480px) {\r\n+      width: 32px;\r\n+      height: 32px;\r\n+      top: 0.75rem;\r\n+      right: 0.75rem;\r\n+      \r\n+      svg {\r\n+        width: 16px;\r\n+        height: 16px;\r\n+      }\r\n+    }\r\n+  }\r\n+`;\r\n+\r\n+// Details section - 30% of card height\r\n+const ZoomContent = styled.div`\r\n+  height: 30%;\r\n+  overflow-y: auto;\r\n+  overflow-x: hidden;\r\n+  padding: 1rem;\r\n+  -webkit-overflow-scrolling: touch;\r\n+  display: flex;\r\n+  flex-direction: column;\r\n+  gap: 0.75rem;\r\n+  background: ${props => props.theme?.colors?.background || '#000000'};\r\n+  \r\n+  /* Custom scrollbar */\r\n+  &::-webkit-scrollbar {\r\n+    width: 4px;\r\n+  }\r\n+  \r\n+  &::-webkit-scrollbar-track {\r\n+    background: transparent;\r\n+  }\r\n+  \r\n+  &::-webkit-scrollbar-thumb {\r\n+    background: ${props => `${props.theme?.colors?.accent || '#800000'}60`};\r\n+    border-radius: 2px;\r\n+    \r\n+    &:hover {\r\n+      background: ${props => props.theme?.colors?.accent || '#800000'};\r\n+    }\r\n+  }\r\n+  \r\n+  @media (max-width: 480px) {\r\n+    padding: 0.875rem;\r\n+    gap: 0.625rem;\r\n+  }\r\n+`;\r\n+\r\n+\r\n+// Update ZoomHeader - Remove it entirely or hide it\r\n+const ZoomHeader = styled.div`\r\n+  display: none; // Hide the header completely\r\n+`;\r\n+\r\n+// Mobile-optimized profile section\r\n+const ProfileSection = styled.div`\r\n+  display: flex;\r\n+  flex-direction: column;\r\n+  align-items: center;\r\n+  margin-bottom: 1.5rem;\r\n+`;\r\n+\r\n+const ProfileImage = styled.div`\r\n+  width: 120px;\r\n+  height: 120px;\r\n+  border-radius: 50%;\r\n+  overflow: hidden;\r\n+  margin-bottom: 1rem;\r\n+  border: 4px solid ${props => props.theme?.colors?.accent || '#800000'};\r\n+  box-shadow: 0 0 20px ${props => `${props.theme?.colors?.accent}40` || 'rgba(128, 0, 0, 0.25)'};\r\n+  \r\n+  @media (min-width: 768px) {\r\n+    width: 200px;\r\n+    height: 189px;\r\n+    border: 6px solid ${props => props.theme?.colors?.accent || '#800000'};\r\n+  }\r\n+  \r\n+  img {\r\n+    width: 100%;\r\n+    height: 100%;\r\n+    object-fit: cover;\r\n+  }\r\n+`;\r\n+\r\n+// Add to styled components section in WelcomePage.js\r\n+const LocationIndicator = styled.div`\r\n+  position: fixed;\r\n+  top: 90px;\r\n+  left: 2rem;\r\n+  display: flex;\r\n+  align-items: center;\r\n+  background: rgba(0, 0, 0, 0.7);\r\n+  padding: 0.5rem 1rem;\r\n+  border-radius: 20px;\r\n+  border: 1px solid ${props => `${props.theme?.colors?.accent}30` || 'rgba(128, 0, 0, 0.3)'};\r\n+  backdrop-filter: blur(4px);\r\n+  color: ${props => props.theme?.colors?.text || '#FFFFFF'};\r\n+  font-size: 0.9rem;\r\n+  z-index: 10;\r\n+  cursor: pointer;\r\n+  transition: all 0.3s ease;\r\n+  max-width: 300px;\r\n+  \r\n+  /* Hide on mobile, show only on desktop for debugging */\r\n+  @media (max-width: 768px) {\r\n+  width: auto;\r\n+    padding: 1rem 2.5rem;\r\n+    font-size: 1rem;\r\n+  } \r\n+  \r\n+  &:hover {\r\n+    background: rgba(0, 0, 0, 0.8);\r\n+    transform: translateY(-2px);\r\n+  }\r\n+  \r\n+  .location-icon {\r\n+    color: ${props => props.theme?.colors?.accent || '#800000'};\r\n+    margin-right: 0.75rem;\r\n+  }\r\n+  \r\n+  .location-text {\r\n+    white-space: nowrap;\r\n+    overflow: hidden;\r\n+    text-overflow: ellipsis;\r\n+  }\r\n+  \r\n+  .updating {\r\n+    margin-left: 0.5rem;\r\n+    width: 16px;\r\n+    height: 16px;\r\n+    border: 2px solid rgba(128, 0, 0, 0.2);\r\n+    border-radius: 50%;\r\n+    border-top-color: ${props => props.theme?.colors?.accent || '#800000'};\r\n+    animation: spin 1s linear infinite;\r\n+  }\r\n+`;\r\n+\r\n+const ShopName = styled.h2`\r\n+  font-family: ${props => props.theme?.fonts?.heading || \"'Impact', sans-serif\"};\r\n+  font-size: 2.5rem;\r\n+  background: ${props => props.theme?.colors?.accentGradient || 'linear-gradient(45deg, #800000, #4A0404)'};\r\n+  -webkit-background-clip: text;\r\n+  -webkit-text-fill-color: transparent;\r\n+  margin: 0 0 0.5rem 0;\r\n+  line-height: 1.2;\r\n+  \r\n+  @media (min-width: 768px) {\r\n+    font-size: 5.4rem;\r\n+    margin: 0 0 1rem 0;\r\n+  }\r\n+`;\r\n+\r\n+// Mobile-friendly action buttons\r\n+const ActionButtonContainer = styled.div`\r\n+  display: flex;\r\n+  flex-direction: column;\r\n+  gap: 1rem;\r\n+  width: 100%;\r\n+  max-width: 300px;\r\n+  margin: 2rem auto;\r\n+  \r\n+  @media (min-width: 480px) {\r\n+    flex-direction: row;\r\n+    justify-content: center;\r\n+    max-width: none;\r\n+  }\r\n+`;\r\n+\r\n+const ActionButton = styled.button`\r\n+  background: ${props => props.variant === 'outline' ? 'transparent' : \r\n+    props.theme?.colors?.accentGradient || 'linear-gradient(45deg, #800000, #4A0404)'};\r\n+  border: ${props => props.variant === 'outline' ? \r\n+    `2px solid ${props.theme?.colors?.accent || '#800000'}` : 'none'};\r\n+  padding: 1rem 1.5rem;\r\n+  border-radius: 30px;\r\n+  color: ${props => props.variant === 'outline' ? \r\n+    props.theme?.colors?.accent || '#800000' : 'white'};\r\n+  font-weight: bold;\r\n+  cursor: pointer;\r\n+  transition: all 0.3s;\r\n+  text-transform: uppercase;\r\n+  letter-spacing: 1px;\r\n+  font-size: 0.9rem;\r\n+  width: 100%;\r\n+  \r\n+  @media (min-width: 480px) {\r\n+    width: auto;\r\n+    padding: 1rem 2.5rem;\r\n+    font-size: 1rem;\r\n+  }\r\n+\r\n+  &:active {\r\n+    transform: scale(0.98);\r\n+  }\r\n+\r\n+  @media (hover: hover) {\r\n+    &:hover {\r\n+      transform: translateY(-2px);\r\n+      box-shadow: 0 5px 15px ${props => `${props.theme?.colors?.accent}4D` || 'rgba(128, 0, 0, 0.3)'};\r\n+    }\r\n+  }\r\n+`;\r\n+\r\n+// Mobile-optimized tab container with horizontal scroll\r\n+const TabContainer = styled.div`\r\n+  display: flex;\r\n+  gap: 0.5rem;\r\n+  margin: 2rem 0;\r\n+  overflow-x: auto;\r\n+  padding: 0.5rem 0;\r\n+  -webkit-overflow-scrolling: touch;\r\n+  \r\n+  &::-webkit-scrollbar {\r\n+    height: 4px;\r\n+  }\r\n+  \r\n+  &::-webkit-scrollbar-track {\r\n+    background: transparent;\r\n+  }\r\n+  \r\n+  &::-webkit-scrollbar-thumb {\r\n+    background: ${props => props.theme?.colors?.accent || '#800000'};\r\n+    border-radius: 2px;\r\n+  }\r\n+  \r\n+  @media (min-width: 768px) {\r\n+    justify-content: center;\r\n+    gap: 1rem;\r\n+    overflow-x: visible;\r\n+  }\r\n+`;\r\n+\r\n+const Tab = styled.button`\r\n+  background: ${props => props.active ? \r\n+    props.theme?.colors?.tabActiveBg || 'rgba(128, 0, 0, 0.2)' : 'transparent'};\r\n+  border: 1px solid ${props => props.active ? \r\n+    props.theme?.colors?.tabBorder || '#800000' : \r\n+    `${props.theme?.colors?.accent}4D` || 'rgba(128, 0, 0, 0.3)'};\r\n+  color: ${props => props.active ? \r\n+    props.theme?.colors?.text || '#FFFFFF' : \r\n+    `${props.theme?.colors?.text}99` || 'rgba(255, 255, 255, 0.6)'};\r\n+  padding: 0.6rem 1rem;\r\n+  border-radius: 20px;\r\n+  cursor: pointer;\r\n+  transition: all 0.3s;\r\n+  text-transform: uppercase;\r\n+  letter-spacing: 0.5px;\r\n+  font-weight: 500;\r\n+  font-size: 0.8rem;\r\n+  white-space: nowrap;\r\n+  display: flex;\r\n+  align-items: center;\r\n+  gap: 0.3rem;\r\n+  flex-shrink: 0;\r\n+  \r\n+  @media (min-width: 768px) {\r\n+    padding: 0.8rem 1.5rem;\r\n+    font-size: 0.9rem;\r\n+    letter-spacing: 1px;\r\n+    gap: 0.5rem;\r\n+  }\r\n+\r\n+  &:active {\r\n+    transform: scale(0.98);\r\n+  }\r\n+\r\n+  svg {\r\n+    width: 14px;\r\n+    height: 14px;\r\n+    \r\n+    @media (min-width: 768px) {\r\n+      width: 16px;\r\n+      height: 16px;\r\n+    }\r\n+  }\r\n+`;\r\n+\r\n+// Mobile-optimized grid with better touch targets\r\n+const GridContainer = styled.div`\r\n+  display: grid;\r\n+  grid-template-columns: repeat(2, 1fr);\r\n+  gap: 0.75rem;\r\n+  margin-top: 1.5rem;\r\n+  padding: 0 0.25rem;\r\n+  \r\n+  @media (min-width: 480px) {\r\n+    gap: 1rem;\r\n+    padding: 0;\r\n+  }\r\n+  \r\n+  @media (min-width: 768px) {\r\n+    grid-template-columns: repeat(auto-fill, minmax(220px, 1fr));\r\n+    gap: 1.5rem;\r\n+  }\r\n+  \r\n+  @media (min-width: 1024px) {\r\n+    grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));\r\n+    gap: 2rem;\r\n+  }\r\n+`;\r\n+\r\n+// Mobile search with better UX\r\n+const SearchContainer = styled.div`\r\n+  display: flex;\r\n+  flex-direction: column;\r\n+  gap: 0.75rem;\r\n+  width: 100%;\r\n+  padding: 0 0.5rem;\r\n+  \r\n+  @media (min-width: 600px) {\r\n+    flex-direction: row;\r\n+    align-items: center;\r\n+    max-width: 800px;\r\n+    margin: 0 auto;\r\n+    padding: 0;\r\n+  }\r\n+`;\r\n+\r\n+const SearchInput = styled.input`\r\n+  width: 100%;\r\n+  background: rgba(255, 255, 255, 0.05);\r\n+  border: 1px solid rgba(128, 0, 0, 0.2);\r\n+  border-radius: 25px;\r\n+  padding: 0.8rem 1rem;\r\n+  color: white;\r\n+  font-size: 1rem;\r\n+  -webkit-appearance: none;\r\n+  \r\n+  &:focus {\r\n+    outline: none;\r\n+    border-color: rgba(128, 0, 0, 0.4);\r\n+    background: rgba(255, 255, 255, 0.08);\r\n+  }\r\n+\r\n+  &::placeholder {\r\n+    color: rgba(255, 255, 255, 0.4);\r\n+  }\r\n+  \r\n+  @media (min-width: 600px) {\r\n+    flex: 1;\r\n+  }\r\n+`;\r\n+\r\n+const SearchButtonGroup = styled.div`\r\n+  display: flex;\r\n+  gap: 0.5rem;\r\n+  width: 100%;\r\n+  \r\n+  @media (min-width: 600px) {\r\n+    width: auto;\r\n+  }\r\n+`;\r\n+\r\n+const SearchButton = styled.button`\r\n+  flex: 1;\r\n+  background: ${props => props.variant === 'live' ? 'transparent' : 'rgba(128, 0, 0, 0.2)'};\r\n+  border: 1px solid rgba(128, 0, 0, 0.3);\r\n+  padding: 0.8rem 1rem;\r\n+  border-radius: 25px;\r\n+  color: white;\r\n+  font-size: 0.9rem;\r\n+  display: flex;\r\n+  align-items: center;\r\n+  justify-content: center;\r\n+  gap: 0.4rem;\r\n+  cursor: pointer;\r\n+  transition: all 0.2s ease;\r\n+  white-space: nowrap;\r\n+  -webkit-tap-highlight-color: transparent;\r\n+  \r\n+  @media (min-width: 600px) {\r\n+    flex: unset;\r\n+    padding: 0.8rem 1.2rem;\r\n+  }\r\n+\r\n+  &:active {\r\n+    transform: scale(0.98);\r\n+    background: rgba(128, 0, 0, 0.3);\r\n+  }\r\n+\r\n+  &:disabled {\r\n+    opacity: 0.5;\r\n+    cursor: not-allowed;\r\n+  }\r\n+\r\n+  svg {\r\n+    width: 16px;\r\n+    height: 16px;\r\n+  }\r\n+`;\r\n+\r\n+// Mobile-friendly slider with native scroll\r\n+const SliderContainer = styled.div`\r\n+  width: 100%;\r\n+  overflow-x: auto;\r\n+  overflow-y: hidden;\r\n+  position: relative;\r\n+  margin: 1.5rem 0;\r\n+  -webkit-overflow-scrolling: touch;\r\n+  scroll-snap-type: x mandatory;\r\n+  scroll-behavior: smooth;\r\n+  \r\n+  &::-webkit-scrollbar {\r\n+    height: 4px;\r\n+  }\r\n+  \r\n+  &::-webkit-scrollbar-track {\r\n+    background: ${props => `${props.theme?.colors?.background || '#000000'}80`};\r\n+    border-radius: 10px;\r\n+  }\r\n+  \r\n+  &::-webkit-scrollbar-thumb {\r\n+    background: ${props => props.theme?.colors?.accent || '#800000'};\r\n+    border-radius: 10px;\r\n+  }\r\n+  \r\n+  /* Hide scroll buttons on mobile */\r\n+  .scroll-button {\r\n+    display: none;\r\n+    \r\n+    @media (min-width: 768px) {\r\n+      display: flex;\r\n+    }\r\n+  }\r\n+`;\r\n+\r\n+const Slider = styled.div`\r\n+  display: flex;\r\n+  width: fit-content;\r\n+  padding: 0.5rem 0;\r\n+`;\r\n+\r\n+const SlideItem = styled.div`\r\n+  flex: 0 0 160px;\r\n+  margin-right: 0.75rem;\r\n+  scroll-snap-align: start;\r\n+  \r\n+  @media (min-width: 480px) {\r\n+    flex: 0 0 200px;\r\n+    margin-right: 1rem;\r\n+  }\r\n+  \r\n+  @media (min-width: 768px) {\r\n+    flex: 0 0 250px;\r\n+    margin-right: 1.5rem;\r\n+  }\r\n+  \r\n+  @media (min-width: 1024px) {\r\n+    flex: 0 0 300px;\r\n+    margin-right: 2rem;\r\n+  }\r\n+`;\r\n+\r\n+// Add styles for better item display\r\n+const ItemDetailsSection = styled.div`\r\n+  margin-bottom: 1.5rem;\r\n+`;\r\n+\r\n+const ItemHeader = styled.div`\r\n+  margin-bottom: 1.5rem;\r\n+  \r\n+  h3 {\r\n+    font-size: 1.5rem;\r\n+    margin: 0 0 0.5rem 0;\r\n+    font-family: ${props => props.theme?.fonts?.heading || 'inherit'};\r\n+    color: ${props => props.theme?.colors?.text || '#FFFFFF'};\r\n+    \r\n+    @media (min-width: 768px) {\r\n+      font-size: 1.8rem;\r\n+    }\r\n+  }\r\n+\r\n+  .price {\r\n+    font-size: 1.3rem;\r\n+    font-weight: bold;\r\n+    color: ${props => props.theme?.colors?.accent || '#800000'};\r\n+    margin-bottom: 1rem;\r\n+    \r\n+    @media (min-width: 768px) {\r\n+      font-size: 1.5rem;\r\n+    }\r\n+  }\r\n+`;\r\n+\r\n+const CategoryBadge = styled.div`\r\n+  display: inline-block;\r\n+  background: ${props => `${props.theme?.colors?.accent || '#800000'}20`};\r\n+  color: ${props => props.theme?.colors?.accent || '#800000'};\r\n+  padding: 0.25rem 0.75rem;\r\n+  border-radius: 12px;\r\n+  font-size: 0.75rem;\r\n+  font-weight: 500;\r\n+  text-transform: uppercase;\r\n+  letter-spacing: 0.5px;\r\n+  margin-bottom: 1rem;\r\n+`;\r\n+\r\n+const StockStatus = styled.div`\r\n+  display: flex;\r\n+  align-items: center;\r\n+  gap: 0.5rem;\r\n+  margin-bottom: 1rem;\r\n+  font-size: 0.9rem;\r\n+  \r\n+  .stock-indicator {\r\n+    width: 8px;\r\n+    height: 8px;\r\n+    border-radius: 50%;\r\n+    background: ${props => props.inStock ? '#4CAF50' : '#FF5252'};\r\n+  }\r\n+  \r\n+  .stock-text {\r\n+    color: ${props => props.inStock ? '#4CAF50' : '#FF5252'};\r\n+    font-weight: 500;\r\n+  }\r\n+`;\r\n+\r\n+const ItemDescription = styled.div`\r\n+  font-size: 0.95rem;\r\n+  opacity: 0.9;\r\n+  margin-bottom: 1.5rem;\r\n+  line-height: 1.6;\r\n+  color: ${props => props.theme?.colors?.text || '#FFFFFF'};\r\n+`;\r\n+\r\n+const ItemLocation = styled.div`\r\n+  display: flex;\r\n+  align-items: center;\r\n+  gap: 0.5rem;\r\n+  font-size: 0.9rem;\r\n+  opacity: 0.8;\r\n+  margin-bottom: 1.5rem;\r\n+  color: ${props => props.theme?.colors?.text || '#FFFFFF'};\r\n+`;\r\n+\r\n+const ShopInfo = styled.div`\r\n+  padding: 0.75rem;\r\n+  background: ${props => `${props.theme?.colors?.surface || 'rgba(255, 255, 255, 0.05)'}50`};\r\n+  border-radius: 8px;\r\n+  margin-bottom: 1.5rem;\r\n+  font-size: 0.9rem;\r\n+  color: ${props => props.theme?.colors?.text || '#FFFFFF'};\r\n+  \r\n+  strong {\r\n+    color: ${props => props.theme?.colors?.accent || '#800000'};\r\n+  }\r\n+`;\r\n+\r\n+// Update ActionButtons to only show Order button\r\n+const ActionButtons = styled.div`\r\n+  display: flex;\r\n+  gap: 0.75rem;\r\n+  margin-top: 1.5rem;\r\n+  \r\n+  button {\r\n+    flex: 1;\r\n+    padding: 0.75rem;\r\n+    border: none;\r\n+    border-radius: 8px;\r\n+    font-weight: bold;\r\n+    cursor: pointer;\r\n+    transition: all 0.3s;\r\n+    display: flex;\r\n+    align-items: center;\r\n+    justify-content: center;\r\n+    gap: 0.5rem;\r\n+    font-size: 0.9rem;\r\n+    \r\n+    @media (min-width: 768px) {\r\n+      padding: 1rem;\r\n+      font-size: 1rem;\r\n+    }\r\n+    \r\n+    &.order {\r\n+      background: ${props => props.theme?.colors?.accent || '#800000'};\r\n+      color: white;\r\n+      \r\n+      &:hover:not(:disabled) {\r\n+        background: ${props => props.theme?.colors?.primary || '#4A0404'};\r\n+        transform: translateY(-2px);\r\n+      }\r\n+      \r\n+      &:disabled {\r\n+        opacity: 0.5;\r\n+        cursor: not-allowed;\r\n+        transform: none;\r\n+      }\r\n+    }\r\n+    \r\n+    svg {\r\n+      width: 16px;\r\n+      height: 16px;\r\n+    }\r\n+  }\r\n+`;\r\n+\r\n+// Mobile-friendly floating controls - removed since they're now in header\r\n+const StyleIndicator = styled.div`\r\n+  position: fixed;\r\n+  bottom: 1rem;\r\n+  right: 1rem;\r\n+  background: ${props => `${props.theme?.colors?.background || '#000000'}E5`};\r\n+  backdrop-filter: blur(10px);\r\n+  color: white;\r\n+  padding: 0.5rem 1rem;\r\n+  border-radius: 20px;\r\n+  font-size: 0.8rem;\r\n+  display: flex;\r\n+  align-items: center;\r\n+  gap: 0.5rem;\r\n+  border: 1px solid ${props => `${props.theme?.colors?.accent}40` || 'rgba(128, 0, 0, 0.4)'};\r\n+  z-index: 90;\r\n+  \r\n+  @media (min-width: 768px) {\r\n+    font-size: 0.9rem;\r\n+  }\r\n+  \r\n+  .style-number {\r\n+    font-weight: bold;\r\n+    font-size: 1rem;\r\n+    color: ${props => props.theme?.colors?.accent || '#800000'};\r\n+    \r\n+    @media (min-width: 768px) {\r\n+      font-size: 1.2rem;\r\n+    }\r\n+  }\r\n+`;\r\n+\r\n+// Quantity selector optimized for mobile\r\n+const QuantitySelector = styled.div`\r\n+  display: flex;\r\n+  align-items: center;\r\n+  justify-content: space-between;\r\n+  background: ${props => `${props.theme?.colors?.surface || 'rgba(255, 255, 255, 0.05)'}50`};\r\n+  border-radius: 12px;\r\n+  padding: 1rem;\r\n+  margin: 1rem 0;\r\n+  \r\n+  .quantity-label {\r\n+    font-weight: bold;\r\n+    color: ${props => props.theme?.colors?.text || '#FFFFFF'};\r\n+    font-size: 0.9rem;\r\n+  }\r\n+  \r\n+  .quantity-controls {\r\n+    display: flex;\r\n+    align-items: center;\r\n+    gap: 1rem;\r\n+    \r\n+    .quantity-btn {\r\n+      width: 40px;\r\n+      height: 40px;\r\n+      border-radius: 50%;\r\n+      border: 2px solid ${props => props.theme?.colors?.accent || '#800000'};\r\n+      background: transparent;\r\n+      color: ${props => props.theme?.colors?.accent || '#800000'};\r\n+      display: flex;\r\n+      align-items: center;\r\n+      justify-content: center;\r\n+      cursor: pointer;\r\n+      transition: all 0.3s;\r\n+      -webkit-tap-highlight-color: transparent;\r\n+      \r\n+      &:active:not(:disabled) {\r\n+        transform: scale(0.9);\r\n+        background: ${props => props.theme?.colors?.accent || '#800000'};\r\n+        color: white;\r\n+      }\r\n+      \r\n+      &:disabled {\r\n+        opacity: 0.3;\r\n+        cursor: not-allowed;\r\n+      }\r\n+      \r\n+      svg {\r\n+        width: 18px;\r\n+        height: 18px;\r\n+      }\r\n+    }\r\n+    \r\n+    .quantity-display {\r\n+      font-size: 1.3rem;\r\n+      font-weight: bold;\r\n+      color: ${props => props.theme?.colors?.text || 'white'};\r\n+      min-width: 40px;\r\n+      text-align: center;\r\n+    }\r\n+  }\r\n+`;\r\n+\r\n+// Other styled components remain the same but with mobile optimizations...\r\n+const LoadingSpinner = styled.div`\r\n+  width: 40px;\r\n+  height: 40px;\r\n+  margin: 2rem auto;\r\n+  border: 3px solid rgba(128, 0, 0, 0.1);\r\n+  border-radius: 50%;\r\n+  border-top-color: #800000;\r\n+  animation: spin 1s linear infinite;\r\n+\r\n+  @keyframes spin {\r\n+    to {\r\n+      transform: rotate(360deg);\r\n+    }\r\n+  }\r\n+`;\r\n+\r\n+const EmptyGridMessage = styled.div`\r\n+  text-align: center;\r\n+  padding: 2rem 1rem;\r\n+  background: rgba(0, 0, 0, 0.2);\r\n+  border-radius: 12px;\r\n+  border: 1px solid rgba(128, 0, 0, 0.1);\r\n+  color: rgba(255, 255, 255, 0.7);\r\n+  grid-column: 1/-1;\r\n+\r\n+  h3 {\r\n+    font-size: 1.1rem;\r\n+    margin-bottom: 0.5rem;\r\n+    color: rgba(255, 255, 255, 0.9);\r\n+  }\r\n+\r\n+  p {\r\n+    font-size: 0.9rem;\r\n+    line-height: 1.5;\r\n+  }\r\n+`;\r\n+\r\n+const MotivationalMessage = styled.p`\r\n+  font-size: 1.1rem;\r\n+  line-height: 1.5;\r\n+  max-width: 600px;\r\n+  margin: 2rem auto 0;\r\n+  color: ${props => props.theme?.colors?.text || '#FFFFFF'};\r\n+  font-weight: 400;\r\n+  text-align: center;\r\n+  padding: 1rem 1.5rem;\r\n+  letter-spacing: 0.3px;\r\n+  position: relative;\r\n+  \r\n+  @media (min-width: 768px) {\r\n+    font-size: 1.4rem;\r\n+    line-height: 1.6;\r\n+    max-width: 800px;\r\n+    margin: 3rem auto 0;\r\n+    padding: 1.5rem 2rem;\r\n+    letter-spacing: 0.5px;\r\n+  }\r\n+  \r\n+  &::before, &::after {\r\n+    content: '\"';\r\n+    font-family: ${props => props.theme?.fonts?.heading || \"'Georgia', serif\"};\r\n+    font-size: 2rem;\r\n+    position: absolute;\r\n+    opacity: 0.2;\r\n+    color: ${props => props.theme?.colors?.accent || '#800000'};\r\n+    \r\n+    @media (min-width: 768px) {\r\n+      font-size: 3rem;\r\n+    }\r\n+  }\r\n+  \r\n+  &::before {\r\n+    top: -0.5rem;\r\n+    left: 0.5rem;\r\n+    \r\n+    @media (min-width: 768px) {\r\n+      top: -1.5rem;\r\n+      left: -1rem;\r\n+    }\r\n+  }\r\n+  \r\n+  &::after {\r\n+    bottom: -1.5rem;\r\n+    right: 0.5rem;\r\n+    \r\n+    @media (min-width: 768px) {\r\n+      bottom: -2.5rem;\r\n+      right: -1rem;\r\n+    }\r\n+  }\r\n+`;\r\n+\r\n+// 1. Replace the CategoryGrid styled component with these two new components:\r\n+\r\n+const CategoryGridWrapper = styled.div`\r\n+  margin-bottom: 2rem;\r\n+  \r\n+  /* Desktop: Regular grid */\r\n+  @media (min-width: 769px) {\r\n+    display: grid;\r\n+    grid-template-columns: repeat(5, 1fr);\r\n+    gap: 1rem;\r\n+  }\r\n+  \r\n+  @media (max-width: 1200px) and (min-width: 769px) {\r\n+    grid-template-columns: repeat(4, 1fr);\r\n+  }\r\n+  \r\n+  @media (max-width: 900px) and (min-width: 769px) {\r\n+    grid-template-columns: repeat(3, 1fr);\r\n+  }\r\n+  \r\n+  /* Mobile: Scrollable rows */\r\n+  @media (max-width: 768px) {\r\n+    display: flex;\r\n+    flex-direction: column;\r\n+    gap: 1rem;\r\n+  }\r\n+`;\r\n+\r\n+// Replace the CategoryScrollableGrid styled component with this corrected version:\r\n+\r\n+const CategoryScrollableGrid = styled.div`\r\n+  display: none;\r\n+  \r\n+  @media (max-width: 768px) {\r\n+    display: grid;\r\n+    grid-auto-flow: column;\r\n+    grid-template-rows: repeat(2, 1fr);\r\n+    grid-template-columns: repeat(5, minmax(280px, 1fr)); /* Increased from 200px */\r\n+    gap: 1rem; /* Increased from 0.75rem */\r\n+    overflow-x: auto;\r\n+    overflow-y: hidden;\r\n+    padding-bottom: 0.5rem;\r\n+    scroll-snap-type: x mandatory;\r\n+    -webkit-overflow-scrolling: touch;\r\n+    min-height: 85vh; /* Add minimum height to stretch vertically */\r\n+    \r\n+    &::-webkit-scrollbar {\r\n+      height: 4px;\r\n+    }\r\n+    \r\n+    &::-webkit-scrollbar-track {\r\n+      background: ${props => `${props.theme?.colors?.background || '#000000'}80`};\r\n+      border-radius: 10px;\r\n+    }\r\n+    \r\n+    &::-webkit-scrollbar-thumb {\r\n+      background: ${props => props.theme?.colors?.accent || '#800000'};\r\n+      border-radius: 10px;\r\n+    }\r\n+    \r\n+    > * {\r\n+      scroll-snap-align: start;\r\n+      min-width: 0;\r\n+      height: 100%; /* Make items stretch to full height */\r\n+    }\r\n+  }\r\n+  \r\n+  @media (max-width: 480px) {\r\n+    grid-template-columns: repeat(5, minmax(240px, 1fr)); /* Increased from 160px */\r\n+    gap: 0.75rem;\r\n+  }\r\n+`;\r\n+\r\n+// 4. Add this CSS to handle responsive display (add to your styled components section):\r\n+const GlobalStyle = styled.div`\r\n+  @media (min-width: 769px) {\r\n+    .mobile-only {\r\n+      display: none !important;\r\n+    }\r\n+  }\r\n+  \r\n+  @media (max-width: 768px) {\r\n+    .desktop-only {\r\n+      display: none !important;\r\n+    }\r\n+  }\r\n+`;\r\n+\r\n+const CategoryHeader = styled.div`\r\n+  display: flex;\r\n+  justify-content: space-between;\r\n+  align-items: center;\r\n+  margin-bottom: 0.75rem;\r\n+  padding: 0 0.5rem;\r\n+  \r\n+  @media (min-width: 768px) {\r\n+    margin-bottom: 1rem;\r\n+    padding: 0;\r\n+  }\r\n+  \r\n+  h2 {\r\n+    font-family: ${props => props.theme?.fonts?.heading || 'inherit'};\r\n+    font-size: 1.3rem;\r\n+    color: ${props => props.theme?.colors?.accent || '#800000'};\r\n+    margin: 0;\r\n+    \r\n+    @media (min-width: 768px) {\r\n+      font-size: 1.8rem;\r\n+    }\r\n+  }\r\n+  \r\n+  .view-all {\r\n+    font-size: 0.8rem;\r\n+    color: ${props => props.theme?.colors?.accent || '#800000'};\r\n+    opacity: 0.8;\r\n+    cursor: pointer;\r\n+    display: flex;\r\n+    align-items: center;\r\n+    gap: 0.3rem;\r\n+    transition: all 0.3s ease;\r\n+    \r\n+    @media (min-width: 768px) {\r\n+      font-size: 0.9rem;\r\n+      gap: 0.5rem;\r\n+    }\r\n+    \r\n+    &:active {\r\n+      opacity: 1;\r\n+      transform: translateX(3px);\r\n+    }\r\n+  }\r\n+`;\r\n+\r\n+const ChatOverlay = styled.div`\r\n+  position: fixed;\r\n+  top: 0;\r\n+  left: 0;\r\n+  right: 0;\r\n+  bottom: 0;\r\n+  background: rgba(0, 0, 0, 0.5);\r\n+  z-index: 999;\r\n+  opacity: ${props => props.isOpen ? 1 : 0};\r\n+  pointer-events: ${props => props.isOpen ? 'auto' : 'none'};\r\n+  transition: opacity 0.3s ease;\r\n+`;\r\n+\r\n+// Add these styled components after StyleIndicator\r\n+\r\n+const SortContainer = styled.div`\r\n+  position: relative;\r\n+  display: inline-block;\r\n+`;\r\n+\r\n+const SortDropdown = styled.div`\r\n+  position: absolute;\r\n+  top: calc(100% + 0.5rem);\r\n+  right: 0;\r\n+  background: ${props => props.theme?.colors?.background || '#000000'};\r\n+  border: 2px solid ${props => props.theme?.colors?.accent || '#800000'};\r\n+  border-radius: 12px;\r\n+  padding: 0.75rem;\r\n+  min-width: 220px;\r\n+  z-index: 1000;\r\n+  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.8),\r\n+              0 0 20px ${props => `${props.theme?.colors?.accent}40` || 'rgba(128, 0, 0, 0.25)'};\r\n+  opacity: ${props => props.isOpen ? 1 : 0};\r\n+  visibility: ${props => props.isOpen ? 'visible' : 'hidden'};\r\n+  transform: ${props => props.isOpen ? 'translateY(0)' : 'translateY(-10px)'};\r\n+  transition: all 0.3s ease;\r\n+  \r\n+  @media (max-width: 768px) {\r\n+    min-width: 200px;\r\n+    right: 0;\r\n+  }\r\n+`;\r\n+\r\n+const SortOption = styled.button`\r\n+  width: 100%;\r\n+  padding: 0.75rem 1rem;\r\n+  background: ${props => props.active ? \r\n+    props.theme?.colors?.accent || '#800000' : \r\n+    'transparent'};\r\n+  border: none;\r\n+  border-radius: 8px;\r\n+  color: ${props => props.active ? \r\n+    '#FFFFFF' : \r\n+    props.theme?.colors?.text || '#FFFFFF'};\r\n+  font-size: 0.95rem;\r\n+  font-weight: ${props => props.active ? '600' : '500'};\r\n+  text-align: left;\r\n+  cursor: pointer;\r\n+  transition: all 0.2s ease;\r\n+  display: flex;\r\n+  align-items: center;\r\n+  gap: 0.75rem;\r\n+  font-family: ${props => props.theme?.fonts?.body || 'inherit'};\r\n+  min-height: 50px; /* Added for two-line content */\r\n+  \r\n+  &:hover {\r\n+    background: ${props => props.active ?\r\n+      props.theme?.colors?.primary || '#4A0404' :\r\n+      `${props.theme?.colors?.accent}20` || 'rgba(128, 0, 0, 0.2)'};\r\n+    transform: translateX(2px);\r\n+  }\r\n+  \r\n+  &:active {\r\n+    transform: scale(0.98);\r\n+  }\r\n+  \r\n+  svg {\r\n+    width: 16px;\r\n+    height: 16px;\r\n+    flex-shrink: 0;\r\n+    align-self: flex-start; /* Align icon to top when two lines */\r\n+    margin-top: 2px;\r\n+  }\r\n+  \r\n+  @media (max-width: 768px) {\r\n+    padding: 0.65rem 0.85rem;\r\n+    font-size: 0.9rem;\r\n+    min-height: 46px;\r\n+    \r\n+    svg {\r\n+      width: 14px;\r\n+      height: 14px;\r\n+    }\r\n+  }\r\n+`;\r\n+\r\n+const SortHeader = styled.div`\r\n+  display: flex;\r\n+  justify-content: space-between;\r\n+  align-items: center;\r\n+  margin-bottom: 1rem;\r\n+  \r\n+  @media (max-width: 768px) {\r\n+    flex-direction: column;\r\n+    align-items: flex-start;\r\n+    gap: 0.75rem;\r\n+  }\r\n+`;\r\n+\r\n+// Motivational messages\r\n+const MOTIVATIONAL_MESSAGES = [\r\n+  \"Build your vision, Elevate humanity.\",\r\n+  \"Create greatness, Inspire progress.\",\r\n+  \"Master your craft, Serve with passion.\",\r\n+  \"Own your success, Empower those around you.\",\r\n+  \"Rule with wisdom, Lead with heart.\",\r\n+  \"Shape your future, Change lives along the way.\",\r\n+  \"Rise above, Lift others higher.\",\r\n+  \"Conquer your dreams, Build a better world.\",\r\n+  \"Lead by example, Serve with strength.\",\r\n+  \"Pursue greatness, Give back in abundance.\"\r\n+];\r\n+\r\n+const WelcomePage = () => {\r\n+  const navigate = useNavigate();\r\n+  const [motivationalMessage, setMotivationalMessage] = useState(\"\");\r\n+  const [activeTab, setActiveTab] = useState('featured');\r\n+  const [featuredItems, setFeaturedItems] = useState([]);\r\n+  const [loading, setLoading] = useState(true);\r\n+  const [error, setError] = useState(null);\r\n+  const [nearbyItems, setNearbyItems] = useState([]);\r\n+  const [featuredMedia, setFeaturedMedia] = useState([]);\r\n+  const [hasSearched, setHasSearched] = useState(false);\r\n+  const [searchAddress, setSearchAddress] = useState('');\r\n+  const [searching, setSearching] = useState(false);\r\n+  const [locationChecked, setLocationChecked] = useState(false);\r\n+  const [showLocationPrompt, setShowLocationPrompt] = useState(false);\r\n+  const [currentZipCode, setCurrentZipCode] = useState(null);\r\n+  const [currentPage, setCurrentPage] = useState(1);\r\n+  const [totalItems, setTotalItems] = useState(0);\r\n+  const [currentStyle, setCurrentStyle] = useState(null);\r\n+  const itemsPerPage = 6;\r\n+  const [isPinned, setIsPinned] = useState(false);\r\n+  const [isRefreshing, setIsRefreshing] = useState(false);\r\n+  const [orderQuantity, setOrderQuantity] = useState(1);\r\n+  const [sortBy, setSortBy] = useState('recent'); // 'recent', 'proximity', 'price-low', 'price-high'\r\n+  const [sortMenuOpen, setSortMenuOpen] = useState(false);\r\n+\r\n+\r\n+  \r\n+  const { user, isAuthenticated } = useAuth();\r\n+  const [shopData, setShopData] = useState(null);\r\n+  const [currentMessageIndex, setCurrentMessageIndex] = useState(0);\r\n+  const [isMessageVisible, setIsMessageVisible] = useState(true);\r\n+  const [isSliderPaused, setIsSliderPaused] = useState(false);\r\n+  const [sliderPosition, setSliderPosition] = useState(0);\r\n+  const sliderRef = useRef(null);\r\n+  const sliderAnimationRef = useRef(null);\r\n+  const [zoomedItem, setZoomedItem] = useState(null);\r\n+  const [chatOpen, setChatOpen] = useState(false);\r\n+  const [selectedChatItem, setSelectedChatItem] = useState(null);\r\n+  const [currentImageIndex, setCurrentImageIndex] = useState(0);\r\n+  const { userLocation, locationPermission, requestLocation } = useLocation();\r\n+  const [updatingLocation, setUpdatingLocation] = useState(false);\r\n+  const [featuredSearchTerm, setFeaturedSearchTerm] = useState('');\r\n+  const [searchResults, setSearchResults] = useState([]);\r\n+  const [isSearching, setIsSearching] = useState(false);\r\n+  const [hasSearchResults, setHasSearchResults] = useState(false);\r\n+  const [categories, setCategories] = useState({\r\n+    'Electronics & Tech': [],\r\n+    'Clothing & Accessories': [],\r\n+    'Home & Garden': [],\r\n+    'Sports & Outdoors': [],\r\n+    'Books & Media': [],\r\n+    'Toys & Games': [],\r\n+    'Health & Beauty': [],\r\n+    'Automotive': [],\r\n+    'Collectibles & Art': [],\r\n+    'Food & Beverages': [],\r\n+    'Other': []\r\n+  });\r\n+// Replace the existing state variables related to ZIP with city/region states\r\n+const [cityRegion, setCityRegion] = useState('');\r\n+const [isCityPinned, setIsCityPinned] = useState(false);\r\n+const [isConvertingToCity, setIsConvertingToCity] = useState(false);\r\n+const [cityInputValue, setCityInputValue] = useState('');\r\n+const [effectiveLocation, setEffectiveLocation] = useState(null);\r\n+const [isIPLocation, setIsIPLocation] = useState(false);\r\n+\r\n+useEffect(() => {\r\n+  const initializeLocation = async () => {\r\n+    console.log('🔍 Initializing location...');\r\n+    console.log('userLocation:', userLocation);\r\n+    \r\n+    if (userLocation) {\r\n+      // User has shared precise location\r\n+      console.log('✅ Using GPS location:', userLocation);\r\n+      setEffectiveLocation(userLocation);\r\n+      setIsIPLocation(false);\r\n+    } else {\r\n+      // Use IP-based location\r\n+      console.log('🌐 Fetching IP-based location...');\r\n+      const ipLocation = await getIPBasedLocation();\r\n+      console.log('IP Location result:', ipLocation);\r\n+      \r\n+      if (ipLocation) {\r\n+        console.log('✅ Using IP location:', ipLocation);\r\n+        setEffectiveLocation(ipLocation);\r\n+        setIsIPLocation(true);\r\n+      } else {\r\n+        console.error('❌ Failed to get IP location');\r\n+      }\r\n+    }\r\n+  };\r\n+  \r\n+  initializeLocation();\r\n+}, [userLocation]);\r\n+\r\n+useEffect(() => {\r\n+  console.log('🔄 effectiveLocation changed:', effectiveLocation);\r\n+  console.log('activeTab:', activeTab);\r\n+  \r\n+  if (activeTab === 'featured' && effectiveLocation) {\r\n+    console.log('📦 Loading items with location...');\r\n+    loadCategorizedItems();\r\n+  }\r\n+}, [effectiveLocation, activeTab]);\r\n+\r\n+useEffect(() => {\r\n+  if (effectiveLocation && activeTab === 'featured') {\r\n+    console.log('🔄 Location changed, re-fetching items...');\r\n+    loadCategorizedItems();\r\n+  }\r\n+}, [effectiveLocation]);\r\n+\r\n+const loadCategorizedItems = async () => {\r\n+  console.log('🔄 loadCategorizedItems called');\r\n+  console.log('effectiveLocation:', effectiveLocation);\r\n+  console.log('sortBy:', sortBy);\r\n+  \r\n+  try {\r\n+    setLoading(true);\r\n+    setError(null);\r\n+\r\n+    console.log('📡 Fetching items from Firebase...');\r\n+    const allItems = await getFeaturedItems(48);\r\n+    console.log('✅ Fetched items:', allItems.length);\r\n+    \r\n+    const currentUserId = user?.uid;\r\n+    \r\n+    // Filter out current user's items AND invalid items\r\n+    const filteredItems = allItems.filter(item => {\r\n+      const isNotCurrentUser = item.shopId !== currentUserId;\r\n+      const hasImages = item.images && item.images.length > 0 && item.images.some(img => img);\r\n+      const hasValidPrice = item.price && !isNaN(parseFloat(item.price)) && parseFloat(item.price) > 0;\r\n+      const hasStock = !item.deleted && (!item.quantity || parseInt(item.quantity) > 0);\r\n+      \r\n+      return isNotCurrentUser && hasImages && hasValidPrice && hasStock;\r\n+    });\r\n+    \r\n+    console.log('✅ Filtered items:', filteredItems.length);\r\n+\r\n+    let itemsWithDistance = filteredItems;\r\n+    \r\n+    // Calculate distances if we have location\r\n+    if (effectiveLocation) {\r\n+      console.log('📍 Calculating distances...');\r\n+      itemsWithDistance = filteredItems.map(item => {\r\n+        let itemCoords = item.coordinates;\r\n+        if (!itemCoords && item.address) {\r\n+          const coordsMatch = item.address.match(/^(-?\\d+\\.?\\d*),\\s*(-?\\d+\\.?\\d*)$/);\r\n+          if (coordsMatch) {\r\n+            itemCoords = {\r\n+              lat: parseFloat(coordsMatch[1]),\r\n+              lng: parseFloat(coordsMatch[2])\r\n+            };\r\n+          }\r\n+        }\r\n+\r\n+        if (itemCoords?.lat && itemCoords?.lng) {\r\n+          try {\r\n+            const distanceInMeters = getDistance(\r\n+              { latitude: effectiveLocation.latitude, longitude: effectiveLocation.longitude },\r\n+              { latitude: itemCoords.lat, longitude: itemCoords.lng }\r\n+            );\r\n+            const distanceInMiles = (distanceInMeters / 1609.34).toFixed(1);\r\n+\r\n+            return {\r\n+              ...item,\r\n+              coordinates: itemCoords,\r\n+              distance: distanceInMeters,\r\n+              distanceInMiles,\r\n+              formattedDistance: `${distanceInMiles} mi`\r\n+            };\r\n+          } catch (e) {\r\n+            console.warn('Error calculating distance for item:', e);\r\n+            return item;\r\n+          }\r\n+        }\r\n+        return item;\r\n+      });\r\n+    } else {\r\n+      console.warn('⚠️ No effectiveLocation available for distance calculation');\r\n+    }\r\n+\r\n+    // Apply sorting\r\n+    console.log('🔄 Applying sort:', sortBy);\r\n+    const sortedItems = applySorting(itemsWithDistance, sortBy);\r\n+    console.log('✅ Sorted items:', sortedItems.length);\r\n+\r\n+    // Categorize items\r\n+    const categorizedItems = {\r\n+      'Electronics & Tech': [],\r\n+      'Clothing & Accessories': [],\r\n+      'Home & Garden': [],\r\n+      'Sports & Outdoors': [],\r\n+      'Books & Media': [],\r\n+      'Toys & Games': [],\r\n+      'Health & Beauty': [],\r\n+      'Automotive': [],\r\n+      'Collectibles & Art': [],\r\n+      'Food & Beverages': [],\r\n+      'Other': []\r\n+    };\r\n+\r\n+    sortedItems.forEach(item => {\r\n+      const category = item.category || 'Other';\r\n+      if (categorizedItems[category]) {\r\n+        categorizedItems[category].push(item);\r\n+      } else {\r\n+        categorizedItems['Other'].push(item);\r\n+      }\r\n+    });\r\n+\r\n+    Object.keys(categorizedItems).forEach(category => {\r\n+      categorizedItems[category] = categorizedItems[category].slice(0, 10);\r\n+    });\r\n+\r\n+    console.log('✅ Setting categories:', Object.keys(categorizedItems).map(k => `${k}: ${categorizedItems[k].length}`));\r\n+    setCategories(categorizedItems);\r\n+    setFeaturedItems(sortedItems.slice(0, 10));\r\n+    setTotalItems(filteredItems.length);\r\n+\r\n+    setLoading(false);\r\n+  } catch (error) {\r\n+    console.error('❌ Error loading categorized items:', error);\r\n+    setError('Failed to load items. Please try again later.');\r\n+    setLoading(false);\r\n+  }\r\n+};\r\n+\r\n+// Add this useEffect with other effects\r\n+\r\n+useEffect(() => {\r\n+  const handleClickOutside = (event) => {\r\n+    if (sortMenuOpen && !event.target.closest('.sort-container')) {\r\n+      setSortMenuOpen(false);\r\n+    }\r\n+  };\r\n+\r\n+  document.addEventListener('mousedown', handleClickOutside);\r\n+  return () => document.removeEventListener('mousedown', handleClickOutside);\r\n+}, [sortMenuOpen]);\r\n+\r\n+const applySorting = (items, sortType) => {\r\n+  let sortedItems = [...items];\r\n+  \r\n+  switch (sortType) {\r\n+    case 'proximity':\r\n+      if (!userLocation) {\r\n+        // If no location, request it\r\n+        requestLocation();\r\n+        return sortedItems;\r\n+      }\r\n+      // Sort by distance (closest first) - no distance filter\r\n+      sortedItems.sort((a, b) => {\r\n+        const distA = a.distance || Infinity;\r\n+        const distB = b.distance || Infinity;\r\n+        return distA - distB;\r\n+      });\r\n+      break;\r\n+      \r\n+    case 'price-low':\r\n+      // REMOVED 30-mile filter - sort all items by price (low to high)\r\n+      sortedItems.sort((a, b) => {\r\n+        const priceA = parseFloat(a.price) || 0;\r\n+        const priceB = parseFloat(b.price) || 0;\r\n+        return priceA - priceB;\r\n+      });\r\n+      break;\r\n+      \r\n+    case 'price-high':\r\n+      // REMOVED 30-mile filter - sort all items by price (high to low)\r\n+      sortedItems.sort((a, b) => {\r\n+        const priceA = parseFloat(a.price) || 0;\r\n+        const priceB = parseFloat(b.price) || 0;\r\n+        return priceB - priceA;\r\n+      });\r\n+      break;\r\n+      \r\n+    case 'recent':\r\n+    default:\r\n+      // REMOVED 30-mile filter - sort all items by most recent\r\n+      sortedItems.sort((a, b) => {\r\n+        const dateA = a.createdAt ? new Date(a.createdAt) : new Date(0);\r\n+        const dateB = b.createdAt ? new Date(b.createdAt) : new Date(0);\r\n+        return dateB - dateA;\r\n+      });\r\n+      break;\r\n+  }\r\n+  \r\n+  return sortedItems;\r\n+};\r\n+\r\n+const getSortLabel = (sortType) => {\r\n+  switch (sortType) {\r\n+    case 'proximity': return 'Closest First';\r\n+    case 'price-low': return 'Price: Low to High';\r\n+    case 'price-high': return 'Price: High to Low';\r\n+    case 'recent':\r\n+    default: return 'Most Recent';\r\n+  }\r\n+};\r\n+\r\n+// Replace convertCoordsToZip with this new function\r\n+const convertCoordsToCity = async (lat, lon) => {\r\n+  try {\r\n+    setIsConvertingToCity(true);\r\n+    setError(null);\r\n+    \r\n+    const response = await fetch(\r\n+      `https://nominatim.openstreetmap.org/reverse?lat=${lat}&lon=${lon}&format=json&zoom=10&addressdetails=1`,\r\n+      {\r\n+        headers: {\r\n+          'Accept': 'application/json',\r\n+          'User-Agent': 'KalKode Marketplace'\r\n+        }\r\n+      }\r\n+    );\r\n+    \r\n+    if (!response.ok) {\r\n+      throw new Error('Failed to fetch location data');\r\n+    }\r\n+    \r\n+    const data = await response.json();\r\n+    console.log('Nominatim response:', data);\r\n+    \r\n+    if (!data || !data.address) {\r\n+      setCityRegion('Not available');\r\n+      setCityInputValue('');\r\n+      return null;\r\n+    }\r\n+    \r\n+    const address = data.address;\r\n+    const city = address.city || address.town || address.village || address.county;\r\n+    const state = address.state;\r\n+    \r\n+    // Major cities list (you can expand this)\r\n+    const majorCities = [\r\n+      'Houston', 'Dallas', 'Austin', 'San Antonio', 'Fort Worth',\r\n+      'Los Angeles', 'New York', 'Chicago', 'Phoenix', 'Philadelphia',\r\n+      'San Diego', 'San Jose', 'Jacksonville', 'Columbus', 'Charlotte'\r\n+    ];\r\n+    \r\n+    let locationString = '';\r\n+    \r\n+    if (city && majorCities.some(major => city.includes(major))) {\r\n+      // For major cities, determine direction from city center\r\n+      const cityName = majorCities.find(major => city.includes(major));\r\n+      \r\n+      // Get city center coordinates (you could make this more precise with a lookup table)\r\n+      const cityCenterResponse = await fetch(\r\n+        `https://nominatim.openstreetmap.org/search?city=${cityName}&state=${state}&format=json&limit=1`,\r\n+        {\r\n+          headers: {\r\n+            'Accept': 'application/json',\r\n+            'User-Agent': 'KalKode Marketplace'\r\n+          }\r\n+        }\r\n+      );\r\n+      \r\n+      const cityCenterData = await cityCenterResponse.json();\r\n+      \r\n+      if (cityCenterData && cityCenterData[0]) {\r\n+        const centerLat = parseFloat(cityCenterData[0].lat);\r\n+        const centerLon = parseFloat(cityCenterData[0].lon);\r\n+        \r\n+        // Calculate direction\r\n+        const direction = getDirection(lat, lon, centerLat, centerLon);\r\n+        locationString = `${direction} ${cityName}, ${getStateAbbreviation(state)}`;\r\n+      } else {\r\n+        locationString = `${cityName}, ${getStateAbbreviation(state)}`;\r\n+      }\r\n+    } else if (state) {\r\n+      // For non-major cities, use state with direction\r\n+      // Get state center (approximate)\r\n+      const stateCenterResponse = await fetch(\r\n+        `https://nominatim.openstreetmap.org/search?state=${state}&country=USA&format=json&limit=1`,\r\n+        {\r\n+          headers: {\r\n+            'Accept': 'application/json',\r\n+            'User-Agent': 'KalKode Marketplace'\r\n+          }\r\n+        }\r\n+      );\r\n+      \r\n+      const stateCenterData = await stateCenterResponse.json();\r\n+      \r\n+      if (stateCenterData && stateCenterData[0]) {\r\n+        const centerLat = parseFloat(stateCenterData[0].lat);\r\n+        const centerLon = parseFloat(stateCenterData[0].lon);\r\n+        \r\n+        const direction = getDirection(lat, lon, centerLat, centerLon);\r\n+        locationString = city ? \r\n+          `${city}, ${direction} ${getStateAbbreviation(state)}` :\r\n+          `${direction} ${getStateAbbreviation(state)}`;\r\n+      } else {\r\n+        locationString = city ? \r\n+          `${city}, ${getStateAbbreviation(state)}` :\r\n+          getStateAbbreviation(state);\r\n+      }\r\n+    } else {\r\n+      locationString = city || 'Unknown Location';\r\n+    }\r\n+    \r\n+    setCityRegion(locationString);\r\n+    setCityInputValue(locationString);\r\n+    \r\n+    console.log(`Coordinates ${lat}, ${lon} → ${locationString}`);\r\n+    \r\n+    return locationString;\r\n+    \r\n+  } catch (error) {\r\n+    console.error('Error converting coordinates to city:', error);\r\n+    setCityRegion('Error');\r\n+    setCityInputValue('');\r\n+    setError('Failed to get location information');\r\n+    return null;\r\n+  } finally {\r\n+    setIsConvertingToCity(false);\r\n+  }\r\n+};\r\n+\r\n+// Helper function to determine direction (N, S, E, W, NE, NW, SE, SW)\r\n+const getDirection = (lat1, lon1, lat2, lon2) => {\r\n+  const latDiff = lat1 - lat2;\r\n+  const lonDiff = lon1 - lon2;\r\n+  \r\n+  const absLatDiff = Math.abs(latDiff);\r\n+  const absLonDiff = Math.abs(lonDiff);\r\n+  \r\n+  // If differences are very small, consider it center\r\n+  if (absLatDiff < 0.1 && absLonDiff < 0.1) {\r\n+    return '';\r\n+  }\r\n+  \r\n+  // Determine primary direction\r\n+  let direction = '';\r\n+  \r\n+  // North/South\r\n+  if (absLatDiff > absLonDiff * 0.5) {\r\n+    direction += latDiff > 0 ? 'N' : 'S';\r\n+  }\r\n+  \r\n+  // East/West\r\n+  if (absLonDiff > absLatDiff * 0.5) {\r\n+    direction += lonDiff > 0 ? 'E' : 'W';\r\n+  }\r\n+  \r\n+  return direction || 'Central';\r\n+};\r\n+\r\n+// Helper function to get state abbreviations\r\n+const getStateAbbreviation = (stateName) => {\r\n+  const stateMap = {\r\n+    'Alabama': 'AL', 'Alaska': 'AK', 'Arizona': 'AZ', 'Arkansas': 'AR',\r\n+    'California': 'CA', 'Colorado': 'CO', 'Connecticut': 'CT', 'Delaware': 'DE',\r\n+    'Florida': 'FL', 'Georgia': 'GA', 'Hawaii': 'HI', 'Idaho': 'ID',\r\n+    'Illinois': 'IL', 'Indiana': 'IN', 'Iowa': 'IA', 'Kansas': 'KS',\r\n+    'Kentucky': 'KY', 'Louisiana': 'LA', 'Maine': 'ME', 'Maryland': 'MD',\r\n+    'Massachusetts': 'MA', 'Michigan': 'MI', 'Minnesota': 'MN', 'Mississippi': 'MS',\r\n+    'Missouri': 'MO', 'Montana': 'MT', 'Nebraska': 'NE', 'Nevada': 'NV',\r\n+    'New Hampshire': 'NH', 'New Jersey': 'NJ', 'New Mexico': 'NM', 'New York': 'NY',\r\n+    'North Carolina': 'NC', 'North Dakota': 'ND', 'Ohio': 'OH', 'Oklahoma': 'OK',\r\n+    'Oregon': 'OR', 'Pennsylvania': 'PA', 'Rhode Island': 'RI', 'South Carolina': 'SC',\r\n+    'South Dakota': 'SD', 'Tennessee': 'TN', 'Texas': 'TX', 'Utah': 'UT',\r\n+    'Vermont': 'VT', 'Virginia': 'VA', 'Washington': 'WA', 'West Virginia': 'WV',\r\n+    'Wisconsin': 'WI', 'Wyoming': 'WY'\r\n+  };\r\n+  \r\n+  return stateMap[stateName] || stateName;\r\n+};\r\n+\r\n+const handleLocationToCity = async () => {\r\n+  try {\r\n+    setIsConvertingToCity(true);\r\n+    setError(null);\r\n+    \r\n+    // Request fresh location from browser\r\n+    const freshLocation = await new Promise((resolve, reject) => {\r\n+      if (!navigator.geolocation) {\r\n+        reject(new Error('Geolocation not supported'));\r\n+        return;\r\n+      }\r\n+      \r\n+      navigator.geolocation.getCurrentPosition(\r\n+        (position) => {\r\n+          resolve({\r\n+            latitude: position.coords.latitude,\r\n+            longitude: position.coords.longitude\r\n+          });\r\n+        },\r\n+        (error) => {\r\n+          reject(error);\r\n+        },\r\n+        {\r\n+          enableHighAccuracy: true,\r\n+          timeout: 10000,\r\n+          maximumAge: 0\r\n+        }\r\n+      );\r\n+    });\r\n+    \r\n+    // Convert fresh coordinates to city/region\r\n+    await convertCoordsToCity(freshLocation.latitude, freshLocation.longitude);\r\n+    \r\n+    // ✅ UPDATE: Set effectiveLocation to trigger item re-fetch\r\n+    setEffectiveLocation(freshLocation);\r\n+    setIsIPLocation(false);\r\n+    \r\n+    // ✅ UPDATE: Re-fetch items with new location\r\n+    console.log('🔄 Re-fetching items with new location...');\r\n+    if (activeTab === 'featured') {\r\n+      await loadCategorizedItems();\r\n+    }\r\n+    \r\n+  } catch (error) {\r\n+    console.error('Error getting fresh location:', error);\r\n+    \r\n+    // Fallback: use stored location if available\r\n+    if (userLocation) {\r\n+      console.log('Using stored location as fallback');\r\n+      await convertCoordsToCity(userLocation.latitude, userLocation.longitude);\r\n+      \r\n+      // ✅ UPDATE: Still re-fetch with stored location\r\n+      if (activeTab === 'featured') {\r\n+        await loadCategorizedItems();\r\n+      }\r\n+    } else {\r\n+      setError('Location not available. Please enable location services.');\r\n+    }\r\n+  } finally {\r\n+    setIsConvertingToCity(false);\r\n+  }\r\n+};\r\n+\r\n+// Replace handleToggleZipPin with handleToggleCityPin\r\n+const handleToggleCityPin = () => {\r\n+  if (isCityPinned) {\r\n+    localStorage.removeItem('pinnedCityRegion');\r\n+    setIsCityPinned(false);\r\n+    setCityRegion('');\r\n+    setCityInputValue('');\r\n+  } else {\r\n+    if (cityRegion && cityRegion !== 'Not available' && cityRegion !== 'Error') {\r\n+      localStorage.setItem('pinnedCityRegion', cityRegion);\r\n+      setIsCityPinned(true);\r\n+    }\r\n+  }\r\n+};\r\n+\r\n+// Update the useEffect that loads pinned location on mount\r\n+useEffect(() => {\r\n+  const pinnedCity = localStorage.getItem('pinnedCityRegion');\r\n+  if (pinnedCity) {\r\n+    setCityRegion(pinnedCity);\r\n+    setCityInputValue(pinnedCity);\r\n+    setIsCityPinned(true);\r\n+  }\r\n+}, []);\r\n+\r\n+\r\n+  // Handle opening shop\r\n+  const handleOpenShop = () => {\r\n+    navigate('/shop/create/template');\r\n+  };\r\n+\r\n+  // Refresh theme\r\n+  const refreshTheme = () => {\r\n+    if (isRefreshing) return;\r\n+    \r\n+    setIsRefreshing(true);\r\n+    const styles = Object.values(WELCOME_STYLES);\r\n+    const otherStyles = styles.filter(style => style.id !== currentStyle.id);\r\n+    \r\n+    if (otherStyles.length > 0) {\r\n+      const randomStyle = otherStyles[Math.floor(Math.random() * otherStyles.length)];\r\n+      setCurrentStyle(randomStyle);\r\n+      \r\n+      if (isPinned) {\r\n+        localStorage.removeItem('pinnedStyleId');\r\n+        setIsPinned(false);\r\n+      }\r\n+    }\r\n+    \r\n+    setTimeout(() => setIsRefreshing(false), 500);\r\n+  };\r\n+\r\n+  // Toggle pin style\r\n+  const togglePinStyle = () => {\r\n+    if (isPinned) {\r\n+      localStorage.removeItem('pinnedStyleId');\r\n+      setIsPinned(false);\r\n+      \r\n+      const styles = Object.values(WELCOME_STYLES).filter(\r\n+        style => style.id !== currentStyle.id\r\n+      );\r\n+      \r\n+      if (styles.length > 0) {\r\n+        const randomStyle = styles[Math.floor(Math.random() * styles.length)];\r\n+        setCurrentStyle(randomStyle);\r\n+      }\r\n+    } else {\r\n+      localStorage.setItem('pinnedStyleId', currentStyle.id.toString());\r\n+      setIsPinned(true);\r\n+    }\r\n+  };\r\n+\r\n+  // Handle location update\r\n+  const handleLocationUpdate = () => {\r\n+    setUpdatingLocation(true);\r\n+    requestLocation();\r\n+  };\r\n+\r\n+  // Get location display text\r\n+  const getLocationDisplayText = () => {\r\n+    if (!userLocation) {\r\n+      return \"Location: Not available\";\r\n+    }\r\n+    return `Location: ${userLocation.latitude.toFixed(4)}, ${userLocation.longitude.toFixed(4)}`;\r\n+  };\r\n+\r\n+  // Search featured items\r\n+  const searchFeaturedItems = async (searchTerm) => {\r\n+    if (!searchTerm.trim()) {\r\n+      setSearchResults([]);\r\n+      setHasSearchResults(false);\r\n+      return;\r\n+    }\r\n+  \r\n+    try {\r\n+      setIsSearching(true);\r\n+      setError(null);\r\n+    \r\n+      const shopsRef = collection(db, 'shops');\r\n+      const snapshot = await getDocs(shopsRef);\r\n+      \r\n+      let allMatchingItems = [];\r\n+      const currentUserId = user?.uid;\r\n+      \r\n+      snapshot.docs.forEach(doc => {\r\n+        const shopData = doc.data();\r\n+        \r\n+        if (doc.id === currentUserId) {\r\n+          return;\r\n+        }\r\n+        \r\n+        if (shopData?.items && Array.isArray(shopData.items)) {\r\n+          shopData.items\r\n+            .filter(item => !item.deleted)\r\n+            .forEach(item => {\r\n+              const itemName = (item.name || '').toLowerCase();\r\n+              const itemDescription = (item.description || '').toLowerCase();\r\n+              const searchLower = searchTerm.toLowerCase();\r\n+              \r\n+              if (itemName.includes(searchLower) || itemDescription.includes(searchLower)) {\r\n+                allMatchingItems.push({\r\n+                  ...item,\r\n+                  shopId: doc.id,\r\n+                  shopName: shopData.name || 'Unknown Shop',\r\n+                  shopTheme: shopData.theme\r\n+                });\r\n+              }\r\n+            });\r\n+        }\r\n+      });\r\n+    \r\n+      if (userLocation) {\r\n+        allMatchingItems = allMatchingItems.map(item => {\r\n+          if (item.coordinates && item.coordinates.lat && item.coordinates.lng) {\r\n+            try {\r\n+              const distanceInMeters = getDistance(\r\n+                { latitude: userLocation.latitude, longitude: userLocation.longitude },\r\n+                { latitude: item.coordinates.lat, longitude: item.coordinates.lng }\r\n+              );\r\n+              const distanceInMiles = (distanceInMeters / 1609.34).toFixed(1);\r\n+              \r\n+              return {\r\n+                ...item,\r\n+                distance: distanceInMeters,\r\n+                distanceInMiles,\r\n+                formattedDistance: `${distanceInMiles} mi`\r\n+              };\r\n+            } catch (e) {\r\n+              console.warn('Error calculating distance for item:', e);\r\n+              return item;\r\n+            }\r\n+          }\r\n+          return item;\r\n+        });\r\n+      }\r\n+    \r\n+      setSearchResults(allMatchingItems);\r\n+      setHasSearchResults(true);\r\n+      \r\n+      if (allMatchingItems.length === 0) {\r\n+        setError(`No items found matching \"${searchTerm}\"`);\r\n+      }\r\n+    } catch (error) {\r\n+      console.error('Error searching items:', error);\r\n+      setError('Failed to search items. Please try again later.');\r\n+    } finally {\r\n+      setIsSearching(false);\r\n+    }\r\n+  };\r\n+\r\n+\r\n+  // Handle featured search\r\n+  const handleFeaturedSearch = () => {\r\n+    if (featuredSearchTerm.trim()) {\r\n+      searchFeaturedItems(featuredSearchTerm);\r\n+    }\r\n+  };\r\n+\r\n+  const handleRowScroll = (categoryName, rowNumber, scrollLeft) => {\r\n+  const row1Id = `${categoryName}-row1`;\r\n+  const row2Id = `${categoryName}-row2`;\r\n+  \r\n+  const row1Element = document.getElementById(row1Id);\r\n+  const row2Element = document.getElementById(row2Id);\r\n+  \r\n+  if (rowNumber === 1 && row2Element) {\r\n+    row2Element.scrollLeft = scrollLeft;\r\n+  } else if (rowNumber === 2 && row1Element) {\r\n+    row1Element.scrollLeft = scrollLeft;\r\n+  }\r\n+};\r\n+\r\n+  const handleClearFeaturedSearch = () => {\r\n+    setFeaturedSearchTerm('');\r\n+    setSearchResults([]);\r\n+    setHasSearchResults(false);\r\n+    setError(null);\r\n+  };\r\n+\r\n+  // Fetch nearby items\r\n+  const fetchNearbyItems = async () => {\r\n+    if (!userLocation) {\r\n+      setError('Location information is not available');\r\n+      setSearching(false);\r\n+      return;\r\n+    }\r\n+  \r\n+    try {\r\n+      setLoading(true);\r\n+      const shopsRef = collection(db, 'shops');\r\n+      const snapshot = await getDocs(shopsRef);\r\n+      \r\n+      let itemsInRadius = [];\r\n+      const currentUserId = user?.uid;\r\n+      \r\n+      snapshot.docs.forEach(doc => {\r\n+        const shopData = doc.data();\r\n+        \r\n+        if (doc.id === currentUserId) {\r\n+          return;\r\n+        }\r\n+        \r\n+        if (shopData?.items && Array.isArray(shopData.items)) {\r\n+          shopData.items\r\n+            .filter(item => !item.deleted)\r\n+            .forEach(item => {\r\n+              let itemCoords = item.coordinates;\r\n+              if (!itemCoords && item.address) {\r\n+                const coordsMatch = item.address.match(/^(-?\\d+\\.?\\d*),\\s*(-?\\d+\\.?\\d*)$/);\r\n+                if (coordsMatch) {\r\n+                  itemCoords = {\r\n+                    lat: parseFloat(coordsMatch[1]),\r\n+                    lng: parseFloat(coordsMatch[2])\r\n+                  };\r\n+                }\r\n+              }\r\n+  \r\n+              if (itemCoords?.lat && itemCoords?.lng) {\r\n+                try {\r\n+                  const distanceInMeters = getDistance(\r\n+                    { latitude: userLocation.latitude, longitude: userLocation.longitude },\r\n+                    { latitude: itemCoords.lat, longitude: itemCoords.lng }\r\n+                  );\r\n+  \r\n+                  const distanceInMiles = (distanceInMeters / 1609.34).toFixed(1);\r\n+                  \r\n+                  itemsInRadius.push({\r\n+                    ...item,\r\n+                    shopId: doc.id,\r\n+                    shopName: shopData.name || 'Unknown Shop',\r\n+                    coordinates: itemCoords,\r\n+                    distance: distanceInMeters,\r\n+                    distanceInMiles,\r\n+                    formattedDistance: `${distanceInMiles} mi`,\r\n+                    theme: shopData.theme\r\n+                  });\r\n+                } catch (e) {\r\n+                  console.warn('Error calculating distance for item:', e);\r\n+                }\r\n+              }\r\n+            });\r\n+        }\r\n+      });\r\n+  \r\n+      itemsInRadius.sort((a, b) => a.distance - b.distance);\r\n+      itemsInRadius = itemsInRadius.slice(0, 10);\r\n+  \r\n+      setNearbyItems(itemsInRadius);\r\n+      setHasSearched(true);\r\n+      \r\n+      if (itemsInRadius.length === 0) {\r\n+        setError('No items found in your area');\r\n+      }\r\n+    } catch (error) {\r\n+      console.error('Error fetching nearby items:', error);\r\n+      setError('Failed to load nearby items. Please try again later.');\r\n+    } finally {\r\n+      setLoading(false);\r\n+      setSearching(false);\r\n+    }\r\n+  };\r\n+\r\n+  // Handle live location\r\n+  const handleLiveLocation = () => {\r\n+    setSearching(true);\r\n+    setError(null);\r\n+    \r\n+    if (userLocation) {\r\n+      fetchNearbyItems();\r\n+      setHasSearched(true);\r\n+    } else {\r\n+      requestLocation();\r\n+    }\r\n+  };\r\n+\r\n+  // Handle address search\r\n+  const handleAddressSearch = async () => {\r\n+    if (!searchAddress.trim()) {\r\n+      setError('Please enter an address');\r\n+      return;\r\n+    }\r\n+  \r\n+    setSearching(true);\r\n+    setError(null);\r\n+    setHasSearched(true);\r\n+    \r\n+    try {\r\n+      const encodedAddress = encodeURIComponent(searchAddress);\r\n+      const response = await fetch(\r\n+        `https://nominatim.openstreetmap.org/search?q=${encodedAddress}&format=json&limit=1`,\r\n+        {\r\n+          headers: {\r\n+            'Accept': 'application/json',\r\n+            'User-Agent': 'KalKode Marketplace'\r\n+          }\r\n+        }\r\n+      );\r\n+      \r\n+      const data = await response.json();\r\n+  \r\n+      if (data && data[0]) {\r\n+        const coordinates = {\r\n+          latitude: parseFloat(data[0].lat),\r\n+          longitude: parseFloat(data[0].lon)\r\n+        };\r\n+        \r\n+        await fetchNearbyItems(coordinates);\r\n+      } else {\r\n+        throw new Error('Location not found. Please try a different address.');\r\n+      }\r\n+  \r\n+    } catch (error) {\r\n+      console.error('Error searching address:', error);\r\n+      setError(error.message || 'Unable to search this location. Please try again.');\r\n+    } finally {\r\n+      setSearching(false);\r\n+    }\r\n+  };\r\n+\r\n+  // Handle item click\r\n+  const handleItemClick = (item) => {\r\n+    setZoomedItem(item);\r\n+    setOrderQuantity(1);\r\n+    setCurrentImageIndex(0); // Reset image index\r\n+    \r\n+    const scrollY = window.scrollY;\r\n+    document.body.style.position = 'fixed';\r\n+    document.body.style.top = `-${scrollY}px`;\r\n+    document.body.style.width = '100%';\r\n+    document.body.style.overflow = 'hidden';\r\n+    \r\n+    document.body.setAttribute('data-scroll-y', scrollY);\r\n+  };\r\n+\r\n+  // Handle close zoom\r\n+  const handleCloseZoom = () => {\r\n+    setZoomedItem(null);\r\n+    setCurrentImageIndex(0);\r\n+    \r\n+    const scrollY = document.body.getAttribute('data-scroll-y') || '0';\r\n+    document.body.style.position = '';\r\n+    document.body.style.top = '';\r\n+    document.body.style.width = '';\r\n+    document.body.style.overflow = '';\r\n+    document.body.removeAttribute('data-scroll-y');\r\n+    \r\n+    window.scrollTo(0, parseInt(scrollY));\r\n+  };\r\n+\r\n+  // Adjust quantity\r\n+  const adjustQuantity = (delta) => {\r\n+    const maxQuantity = parseInt(zoomedItem?.quantity) || 1;\r\n+    const newQuantity = Math.max(1, Math.min(maxQuantity, orderQuantity + delta));\r\n+    setOrderQuantity(newQuantity);\r\n+  };\r\n+\r\n+  // Handle direct order\r\n+  const handleDirectOrder = async () => {\r\n+    if (!zoomedItem) return;\r\n+    \r\n+    if (!isAuthenticated) {\r\n+       navigate('/auth', { \r\n+        state: { \r\n+          mode: 'login',\r\n+          from: window.location.pathname\r\n+        }\r\n+      });\r\n+       return;\r\n+     }\r\n+    \r\n+    try {\r\n+      const result = await TransactionService.initiateQuantityTransaction(\r\n+        zoomedItem.id,\r\n+        zoomedItem.shopId,\r\n+        parseFloat(zoomedItem.price),\r\n+        orderQuantity,\r\n+        'inperson'\r\n+      );\r\n+      \r\n+      if (result.transactionId) {\r\n+        handleCloseZoom();\r\n+        navigate(`/messages?chat=${result.transactionId}`);\r\n+      }\r\n+    } catch (error) {\r\n+      console.error('Error placing order:', error);\r\n+      alert('Error placing order: ' + error.message);\r\n+    }\r\n+  };\r\n+\r\n+  // Handle order click\r\n+  const handleOrderClick = (item) => {\r\n+    setSelectedChatItem(item);\r\n+    setChatOpen(true);\r\n+    \r\n+    if (zoomedItem) {\r\n+      setZoomedItem(null);\r\n+      const scrollY = document.body.getAttribute('data-scroll-y') || '0';\r\n+      document.body.style.position = '';\r\n+      document.body.style.top = '';\r\n+      document.body.style.width = '';\r\n+      document.body.style.overflow = '';\r\n+      document.body.removeAttribute('data-scroll-y');\r\n+      window.scrollTo(0, parseInt(scrollY));\r\n+    }\r\n+  };\r\n+\r\n+  // Handle close chat\r\n+  const handleCloseChat = () => {\r\n+    setChatOpen(false);\r\n+    setSelectedChatItem(null);\r\n+    \r\n+    document.body.style.position = '';\r\n+    document.body.style.top = '';\r\n+    document.body.style.width = '';\r\n+    document.body.style.overflow = '';\r\n+    document.body.removeAttribute('data-scroll-y');\r\n+  };\r\n+\r\n+  // Handle inquire click\r\n+  const handleInquireClick = () => {\r\n+    alert('Inquiry feature coming soon!');\r\n+  };\r\n+\r\n+  // Handle logout\r\n+  const handleLogout = async () => {\r\n+    try {\r\n+      await signOut(auth);\r\n+      navigate('/');\r\n+    } catch (error) {\r\n+      console.error('Error signing out:', error);\r\n+    }\r\n+  };\r\n+\r\n+  // Handle login\r\n+  const handleLogin = () => {\r\n+    navigate('/auth', { \r\n+      state: { \r\n+        mode: 'login',\r\n+        from: window.location.pathname\r\n+      }\r\n+    });\r\n+  };\r\n+\r\n+  // Effects\r\n+  useEffect(() => {\r\n+    const fetchShopData = async () => {\r\n+      if (user && user.uid) {\r\n+        try {\r\n+          const data = await getShopData(user.uid);\r\n+          setShopData(data);\r\n+        } catch (error) {\r\n+          console.error('Error fetching shop data:', error);\r\n+        }\r\n+      }\r\n+    };\r\n+    \r\n+    if (isAuthenticated) {\r\n+      fetchShopData();\r\n+    }\r\n+  }, [user, isAuthenticated]);\r\n+\r\n+  useEffect(() => {\r\n+    if (isAuthenticated) {\r\n+      const randomIndex = Math.floor(Math.random() * MOTIVATIONAL_MESSAGES.length);\r\n+      setMotivationalMessage(MOTIVATIONAL_MESSAGES[randomIndex]);\r\n+    }\r\n+  }, [isAuthenticated]);\r\n+\r\n+  useEffect(() => {\r\n+    const pinnedStyleId = localStorage.getItem('pinnedStyleId');\r\n+    \r\n+    if (pinnedStyleId) {\r\n+      const pinnedStyle = Object.values(WELCOME_STYLES).find(\r\n+        style => style.id.toString() === pinnedStyleId\r\n+      );\r\n+      \r\n+      if (pinnedStyle) {\r\n+        setCurrentStyle(pinnedStyle);\r\n+        setIsPinned(true);\r\n+        return;\r\n+      }\r\n+    }\r\n+    \r\n+    const styles = Object.values(WELCOME_STYLES);\r\n+    const randomStyle = styles[Math.floor(Math.random() * styles.length)];\r\n+    setCurrentStyle(randomStyle);\r\n+  }, []);\r\n+\r\n+  useEffect(() => {\r\n+    if (activeTab === 'nearby' && userLocation) {\r\n+      fetchNearbyItems();\r\n+      setHasSearched(true);\r\n+    }\r\n+  }, [activeTab, userLocation]);\r\n+\r\n+  useEffect(() => {\r\n+    if (locationPermission === 'pending') {\r\n+      requestLocation();\r\n+    }\r\n+  }, []);\r\n+\r\n+  useEffect(() => {\r\n+    if (userLocation) {\r\n+      if (activeTab === 'nearby') {\r\n+        fetchNearbyItems();\r\n+        setHasSearched(true);\r\n+      }\r\n+      \r\n+      if (activeTab === 'featured') {\r\n+        loadCategorizedItems();\r\n+      }\r\n+      \r\n+      setUpdatingLocation(false);\r\n+    }\r\n+  }, [userLocation, activeTab]);\r\n+\r\n+  useEffect(() => {\r\n+  const loadTabContent = async () => {\r\n+    console.log('📑 Loading tab content...', { activeTab, effectiveLocation });\r\n+    \r\n+    try {\r\n+      setLoading(true);\r\n+      setError(null);\r\n+  \r\n+      switch (activeTab) {\r\n+        case 'featured':\r\n+          // Wait for effectiveLocation before loading items\r\n+          if (effectiveLocation) {\r\n+            console.log('📦 Loading featured items...');\r\n+            await loadCategorizedItems();\r\n+          } else {\r\n+            console.log('⏳ Waiting for location...');\r\n+            setLoading(false);\r\n+          }\r\n+          return;\r\n+        case 'nearby':\r\n+          setLoading(false);\r\n+          break;\r\n+        case 'media':\r\n+          setLoading(false);\r\n+          break;\r\n+        default:\r\n+          setLoading(false);\r\n+      }\r\n+    } catch (error) {\r\n+      console.error('Error loading content:', error);\r\n+      setError('Failed to load content. Please try again later.');\r\n+      setLoading(false);\r\n+    }\r\n+  };\r\n+\r\n+  loadTabContent();\r\n+}, [activeTab, user?.uid]); // ❌ REMOVE effectiveLocation from here to avoid duplicate calls\r\n+\r\n+  useEffect(() => {\r\n+    if (activeTab === 'featured') {\r\n+      loadCategorizedItems();\r\n+    }\r\n+    \r\n+    const refreshInterval = setInterval(() => {\r\n+      if (activeTab === 'featured') {\r\n+        loadCategorizedItems();\r\n+      }\r\n+    }, 300000);\r\n+\r\n+    return () => clearInterval(refreshInterval);\r\n+  }, [activeTab, currentPage]);\r\n+\r\n+  // Ping animation effect (disabled on mobile for performance)\r\n+  useEffect(() => {\r\n+    if (window.innerWidth < 768) return;\r\n+    \r\n+    const container = document.querySelector('.page-container');\r\n+    if (!container) return;\r\n+\r\n+    const createPing = () => {\r\n+      const ping = document.createElement('div');\r\n+      ping.className = 'ping';\r\n+      \r\n+      ping.style.left = `${Math.random() * 100}%`;\r\n+      ping.style.top = `${Math.random() * 100}%`;\r\n+      ping.style.zIndex = '0';\r\n+      \r\n+      container.appendChild(ping);\r\n+      \r\n+      setTimeout(() => {\r\n+        if (ping && ping.parentNode) {\r\n+          ping.remove();\r\n+        }\r\n+      }, 3000);\r\n+    };\r\n+\r\n+    const createPingGroup = (count) => {\r\n+      for (let i = 0; i < count; i++) {\r\n+        setTimeout(() => {\r\n+          createPing();\r\n+        }, i * 200);\r\n+      }\r\n+    };\r\n+\r\n+    const pingCounts = [10, 30, 20];\r\n+    let currentIndex = 0;\r\n+\r\n+    const interval = setInterval(() => {\r\n+      const count = pingCounts[currentIndex];\r\n+      createPingGroup(count);\r\n+      currentIndex = (currentIndex + 1) % pingCounts.length;\r\n+    }, 3000);\r\n+    \r\n+    return () => {\r\n+      clearInterval(interval);\r\n+      const pings = container.getElementsByClassName('ping');\r\n+      while (pings.length > 0) {\r\n+        pings[0].remove();\r\n+      }\r\n+    };\r\n+  }, []);\r\n+\r\n+  // Cleanup on unmount\r\n+  useEffect(() => {\r\n+    return () => {\r\n+      document.body.style.position = '';\r\n+      document.body.style.top = '';\r\n+      document.body.style.width = '';\r\n+      document.body.style.overflow = '';\r\n+      document.body.removeAttribute('data-scroll-y');\r\n+      \r\n+      if (sliderAnimationRef.current) {\r\n+        cancelAnimationFrame(sliderAnimationRef.current);\r\n+      }\r\n+    };\r\n+  }, []);\r\n+\r\n+  if (!currentStyle) return null;\r\n+\r\n+  return (\r\n+    <PageContainer className=\"page-container\" theme={currentStyle}>\r\n+      <ThemeDecorations theme={currentStyle} />\r\n+      <Header theme={currentStyle}>\r\n+        <Logo onClick={() => navigate('/')} theme={currentStyle}>\r\n+          KALKODE\r\n+        </Logo>\r\n+\r\n+        <HeaderControls>\r\n+          <HeaderButton \r\n+            onClick={refreshTheme}\r\n+            theme={currentStyle}\r\n+            title=\"Random theme\"\r\n+          >\r\n+            <RefreshCw size={20} className={isRefreshing ? \"spinning\" : \"\"} />\r\n+          </HeaderButton>\r\n+          \r\n+          <HeaderButton \r\n+            onClick={togglePinStyle} \r\n+            theme={currentStyle}\r\n+            className={isPinned ? \"pinned\" : \"\"}\r\n+            title={isPinned ? \"Unpin theme\" : \"Pin theme\"}\r\n+          >\r\n+            <Pin size={20} fill={isPinned ? currentStyle.colors.accent : \"none\"} />\r\n+          </HeaderButton>\r\n+          \r\n+          {isAuthenticated && (\r\n+            <HeaderButton \r\n+              onClick={handleLogout}\r\n+              theme={currentStyle}\r\n+              title=\"Logout\"\r\n+            >\r\n+              <LogOut size={20} />\r\n+            </HeaderButton>\r\n+          )}\r\n+        </HeaderControls>\r\n+      </Header>\r\n+\r\n+      <MainContent isAuthenticated={isAuthenticated}>\r\n+        <WelcomeSection theme={currentStyle}>\r\n+          {isAuthenticated && shopData ? (\r\n+            <>\r\n+              <ProfileSection>\r\n+                <ProfileImage theme={currentStyle}>\r\n+                  {shopData.profile ? (\r\n+                    <img src={shopData.profile} alt={shopData.name || 'Shop Profile'} />\r\n+                  ) : (\r\n+                    <div style={{ \r\n+                      width: '100%', \r\n+                      height: '100%', \r\n+                      background: currentStyle?.colors?.accent || '#800000',\r\n+                      display: 'flex',\r\n+                      alignItems: 'center',\r\n+                      justifyContent: 'center',\r\n+                      color: '#fff',\r\n+                      fontSize: '2rem'\r\n+                    }}>\r\n+                      {(shopData.name?.charAt(0) || user.email?.charAt(0) || 'S').toUpperCase()}\r\n+                    </div>\r\n+                  )}\r\n+                </ProfileImage>\r\n+                <ShopName theme={currentStyle}>{shopData.name || 'My Shop'}</ShopName>\r\n+              </ProfileSection>         \r\n+\r\n+              <MotivationalMessage theme={currentStyle}>\r\n+                {motivationalMessage}\r\n+              </MotivationalMessage>\r\n+            </>\r\n+          ) : (\r\n+            <>\r\n+              <h1>Welcome to KalKode</h1>\r\n+              <p>Trade With Your Community.</p>\r\n+\r\n+              <ActionButtonContainer>\r\n+                <ActionButton theme={currentStyle} onClick={handleOpenShop}>\r\n+                  Open Up Shop\r\n+                </ActionButton>\r\n+                <ActionButton \r\n+                  theme={currentStyle}\r\n+                  onClick={handleLogin}\r\n+                  variant=\"outline\"\r\n+                >\r\n+                  Sign In\r\n+                </ActionButton>\r\n+              </ActionButtonContainer>\r\n+            </>\r\n+          )}\r\n+\r\n+\r\n+        </WelcomeSection>\r\n+\r\n+        <TabContainer>\r\n+          <Tab \r\n+            theme={currentStyle}\r\n+            active={activeTab === 'featured'} \r\n+            onClick={() => setActiveTab('featured')}\r\n+          >\r\n+            <Package size={16} />\r\n+            Featured\r\n+          </Tab>\r\n+          <Tab\r\n+            theme={currentStyle} \r\n+            active={activeTab === 'nearby'} \r\n+            onClick={() => setActiveTab('nearby')}\r\n+          >\r\n+            <Navigation size={16} />\r\n+            Nearby\r\n+          </Tab>\r\n+          <Tab\r\n+            theme={currentStyle} \r\n+            active={activeTab === 'media'} \r\n+            onClick={() => setActiveTab('media')}\r\n+          >\r\n+            <Film size={16} />\r\n+            Media\r\n+          </Tab>\r\n+        </TabContainer>\r\n+\r\n+\r\n+        <LocationIndicator2 theme={currentStyle} isPinned={isCityPinned}>\r\n+          <button \r\n+            className=\"location-icon-btn\"\r\n+            onClick={handleLocationToCity}\r\n+            disabled={isConvertingToCity}\r\n+            title=\"Get region from current location\"\r\n+          >\r\n+            {isConvertingToCity ? (\r\n+              <div className=\"updating-spinner\" />\r\n+            ) : (\r\n+              <Navigation size={20} />\r\n+            )}\r\n+          </button>\r\n+          \r\n+          <input\r\n+            type=\"text\"\r\n+            className=\"location-input\"\r\n+            value={cityInputValue}\r\n+            onChange={(e) => setCityInputValue(e.target.value)}\r\n+            placeholder={\r\n+              isIPLocation ? \r\n+                `${effectiveLocation?.city || 'Location'} (IP-based)` : \r\n+                cityRegion ? cityRegion : \"Click location icon to share\"\r\n+            }\r\n+            readOnly\r\n+          />\r\n+\r\n+          <button\r\n+            className=\"pin-icon-btn\"\r\n+            onClick={handleToggleCityPin}\r\n+            disabled={!cityRegion || cityRegion === 'Not available' || cityRegion === 'Error'}\r\n+            title={isCityPinned ? \"Unpin location\" : \"Pin location\"}\r\n+          >\r\n+            <Pin \r\n+              size={18} \r\n+              fill={isCityPinned ? currentStyle.colors.accent : \"none\"}\r\n+            />\r\n+          </button>\r\n+        </LocationIndicator2>\r\n+\r\n+\r\n+        {/* Nearby Items Tab */}\r\n+        {activeTab === 'nearby' && (\r\n+          <>\r\n+            <SearchContainer>\r\n+              <SearchInput\r\n+                type=\"text\"\r\n+                placeholder=\"Enter address or ZIP code...\"\r\n+                value={searchAddress}\r\n+                onChange={(e) => setSearchAddress(e.target.value)}\r\n+                onKeyPress={(e) => e.key === 'Enter' && handleAddressSearch()}\r\n+              />\r\n+              <SearchButtonGroup>\r\n+                <SearchButton \r\n+                  onClick={handleAddressSearch}\r\n+                  disabled={searching || !searchAddress.trim()}\r\n+                >\r\n+                  <Navigation size={16} />\r\n+                  Search\r\n+                </SearchButton>\r\n+                <SearchButton \r\n+                  onClick={handleLiveLocation}\r\n+                  disabled={searching}\r\n+                  variant=\"live\"\r\n+                >\r\n+                  <Navigation size={16} />\r\n+                  Current\r\n+                </SearchButton>\r\n+              </SearchButtonGroup>\r\n+            </SearchContainer>\r\n+\r\n+            <GridContainer>\r\n+              {error ? (\r\n+                <EmptyGridMessage>\r\n+                  <h3>Oops!</h3>\r\n+                  <p>{error}</p>\r\n+                </EmptyGridMessage>\r\n+              ) : loading ? (\r\n+                <div style={{ textAlign: 'center', gridColumn: '1/-1' }}>\r\n+                  <LoadingSpinner />\r\n+                </div>\r\n+              ) : !hasSearched ? (\r\n+                <EmptyGridMessage>\r\n+                  <h3>Find Items Near You</h3>\r\n+                  <p>Enter your address or use current location to discover items in your area</p>\r\n+                </EmptyGridMessage>\r\n+              ) : nearbyItems.length === 0 ? (\r\n+                <EmptyGridMessage>\r\n+                  <h3>No Items Found</h3>\r\n+                  <p>No items found in this location. Try searching a different area.</p>\r\n+                </EmptyGridMessage>\r\n+              ) : (              \r\n+                nearbyItems.map(item => (\r\n+                  <FeaturedItem \r\n+                    key={`${item.shopId}-${item.id}`} \r\n+                    item={{\r\n+                      ...item,\r\n+                      location: item.formattedDistance\r\n+                    }}\r\n+                    showDistance={true}\r\n+                    theme={currentStyle}\r\n+                    onItemClick={handleItemClick}\r\n+                  />\r\n+                ))\r\n+              )}\r\n+            </GridContainer>\r\n+          </>\r\n+        )}\r\n+\r\n+        {/* Featured Items Tab */}\r\n+        {activeTab === 'featured' && (\r\n+          <>\r\n+            {/* Search container with Filter */}\r\n+            <SearchContainer>\r\n+              <SearchInput\r\n+                type=\"text\"\r\n+                placeholder=\"Search for items...\"\r\n+                value={featuredSearchTerm}\r\n+                onChange={(e) => setFeaturedSearchTerm(e.target.value)}\r\n+                onKeyPress={(e) => e.key === 'Enter' && handleFeaturedSearch()}\r\n+              />\r\n+              <SearchButtonGroup>\r\n+                <SearchButton \r\n+                  onClick={handleFeaturedSearch}\r\n+                  disabled={isSearching || !featuredSearchTerm.trim()}\r\n+                >\r\n+                  <Search size={16} />\r\n+                  Search\r\n+                </SearchButton>\r\n+                {hasSearchResults && (\r\n+                  <SearchButton onClick={handleClearFeaturedSearch} variant=\"live\">\r\n+                    <X size={16} />\r\n+                    Clear\r\n+                  </SearchButton>\r\n+                )}\r\n+\r\n+                {/* Filter Button */}\r\n+                <SortContainer className=\"sort-container\">\r\n+                  <SearchButton \r\n+                    onClick={() => setSortMenuOpen(!sortMenuOpen)}\r\n+                    style={{ position: 'relative' }}\r\n+                  >\r\n+                    <Filter size={16} />\r\n+                    {sortBy !== 'recent' && (\r\n+                      <div style={{\r\n+                        position: 'absolute',\r\n+                        top: '4px',\r\n+                        right: '4px',\r\n+                        width: '6px',\r\n+                        height: '6px',\r\n+                        borderRadius: '50%',\r\n+                        background: currentStyle?.colors?.accent || '#800000'\r\n+                      }} />\r\n+                    )}\r\n+                  </SearchButton>\r\n+                  \r\n+                  <SortDropdown theme={currentStyle} isOpen={sortMenuOpen}>\r\n+                    <div style={{\r\n+                      padding: '0.5rem 1rem 0.75rem',\r\n+                      fontSize: '0.75rem',\r\n+                      fontWeight: '700',\r\n+                      textTransform: 'uppercase',\r\n+                      letterSpacing: '1px',\r\n+                      color: currentStyle?.colors?.accent || '#800000',\r\n+                      borderBottom: `2px solid ${currentStyle?.colors?.accent || '#800000'}`,\r\n+                      marginBottom: '0.75rem',\r\n+                      fontFamily: currentStyle?.fonts?.heading || 'inherit'\r\n+                    }}>\r\n+                      Sort By\r\n+                    </div>\r\n+                  \r\n+                    <SortOption \r\n+                      theme={currentStyle}\r\n+                      active={sortBy === 'recent'}\r\n+                      onClick={() => {\r\n+                        if (!userLocation) {\r\n+                          requestLocation();\r\n+                          return;\r\n+                        }\r\n+                        setSortBy('recent');\r\n+                        setSortMenuOpen(false);\r\n+                        loadCategorizedItems();\r\n+                      }}\r\n+                    >\r\n+                      <Package size={16} />\r\n+                      <div style={{ display: 'flex', flexDirection: 'column', flex: 1 }}>\r\n+                        <span>Most Recent</span>\r\n+                        <span style={{ \r\n+                          fontSize: '0.7rem', \r\n+                          opacity: 0.7,\r\n+                          fontWeight: '400'\r\n+                        }}>\r\n+                          All items, newest first\r\n+                        </span>\r\n+                      </div>\r\n+                      {!userLocation && (\r\n+                        <span style={{ \r\n+                          fontSize: '0.65rem', \r\n+                          opacity: 0.6,\r\n+                          marginLeft: 'auto',\r\n+                          fontStyle: 'italic'\r\n+                        }}>\r\n+                          (needs location)\r\n+                        </span>\r\n+                      )}\r\n+                    </SortOption>\r\n+                    \r\n+                    <SortOption \r\n+                      theme={currentStyle}\r\n+                      active={sortBy === 'proximity'}\r\n+                      onClick={() => {\r\n+                        if (!userLocation) {\r\n+                          requestLocation();\r\n+                        }\r\n+                        setSortBy('proximity');\r\n+                        setSortMenuOpen(false);\r\n+                        loadCategorizedItems();\r\n+                      }}\r\n+                    >\r\n+                      <Navigation size={16} />\r\n+                      <div style={{ display: 'flex', flexDirection: 'column', flex: 1 }}>\r\n+                        <span>Closest First</span>\r\n+                        <span style={{ \r\n+                          fontSize: '0.7rem', \r\n+                          opacity: 0.7,\r\n+                          fontWeight: '400'\r\n+                        }}>\r\n+                          All items by distance\r\n+                        </span>\r\n+                      </div>\r\n+                      {!userLocation && (\r\n+                        <span style={{ \r\n+                          fontSize: '0.65rem', \r\n+                          opacity: 0.6,\r\n+                          marginLeft: 'auto',\r\n+                          fontStyle: 'italic'\r\n+                        }}>\r\n+                          (needs location)\r\n+                        </span>\r\n+                      )}\r\n+                    </SortOption>\r\n+                    \r\n+                    <SortOption \r\n+                      theme={currentStyle}\r\n+                      active={sortBy === 'price-low'}\r\n+                      onClick={() => {\r\n+                        if (!userLocation) {\r\n+                          requestLocation();\r\n+                          return;\r\n+                        }\r\n+                        setSortBy('price-low');\r\n+                        setSortMenuOpen(false);\r\n+                        loadCategorizedItems();\r\n+                      }}\r\n+                    >\r\n+                      <span style={{ fontSize: '1rem', fontWeight: '600' }}>$</span>\r\n+                      <div style={{ display: 'flex', flexDirection: 'column', flex: 1 }}>\r\n+                        <span>Price: Low to High</span>\r\n+                        <span style={{ \r\n+                          fontSize: '0.7rem', \r\n+                          opacity: 0.7,\r\n+                          fontWeight: '400'\r\n+                        }}>\r\n+                          All items by price\r\n+                        </span>\r\n+                      </div>\r\n+                      {!userLocation && (\r\n+                        <span style={{ \r\n+                          fontSize: '0.65rem', \r\n+                          opacity: 0.6,\r\n+                          marginLeft: 'auto',\r\n+                          fontStyle: 'italic'\r\n+                        }}>\r\n+                          (needs location)\r\n+                        </span>\r\n+                      )}\r\n+                    </SortOption>\r\n+                    \r\n+                    <SortOption \r\n+                      theme={currentStyle}\r\n+                      active={sortBy === 'price-high'}\r\n+                      onClick={() => {\r\n+                        if (!userLocation) {\r\n+                          requestLocation();\r\n+                          return;\r\n+                        }\r\n+                        setSortBy('price-high');\r\n+                        setSortMenuOpen(false);\r\n+                        loadCategorizedItems();\r\n+                      }}\r\n+                    >\r\n+                      <span style={{ fontSize: '1rem', fontWeight: '600' }}>$$$</span>\r\n+                      <div style={{ display: 'flex', flexDirection: 'column', flex: 1 }}>\r\n+                        <span>Price: High to Low</span>\r\n+                        <span style={{ \r\n+                          fontSize: '0.7rem', \r\n+                          opacity: 0.7,\r\n+                          fontWeight: '400'\r\n+                        }}>\r\n+                          All items by price\r\n+                        </span>\r\n+                      </div>\r\n+                      {!userLocation && (\r\n+                        <span style={{ \r\n+                          fontSize: '0.65rem', \r\n+                          opacity: 0.6,\r\n+                          marginLeft: 'auto',\r\n+                          fontStyle: 'italic'\r\n+                        }}>\r\n+                          (needs location)\r\n+                        </span>\r\n+                      )}\r\n+                    </SortOption>\r\n+                  </SortDropdown>\r\n+                </SortContainer>\r\n+              </SearchButtonGroup>\r\n+            </SearchContainer>\r\n+\r\n+            {/* Show search results or default categorized view */}\r\n+            {hasSearchResults ? (\r\n+              <div>\r\n+                <CategoryHeader theme={currentStyle}>\r\n+                  <h2>Search Results ({searchResults.length})</h2>\r\n+                </CategoryHeader>\r\n+\r\n+                {error ? (\r\n+                  <EmptyGridMessage>\r\n+                    <h3>No Results Found</h3>\r\n+                    <p>{error}</p>\r\n+                  </EmptyGridMessage>\r\n+                ) : isSearching ? (\r\n+                  <div style={{ textAlign: 'center', padding: '2rem' }}>\r\n+                    <LoadingSpinner />\r\n+                  </div>\r\n+                ) : searchResults.length === 0 ? (\r\n+                  <EmptyGridMessage>\r\n+                    <h3>No Items Found</h3>\r\n+                    <p>No items match your search criteria.</p>\r\n+                  </EmptyGridMessage>\r\n+                ) : (\r\n+                  <GridContainer>\r\n+                    {searchResults.map(item => (\r\n+                      <FeaturedItem \r\n+                        key={`search-${item.shopId}-${item.id}`} \r\n+                        item={item}\r\n+                        theme={currentStyle}\r\n+                        onItemClick={handleItemClick}\r\n+                        showDistance={true}\r\n+                      />\r\n+                    ))}\r\n+                  </GridContainer>\r\n+                )}\r\n+              </div>\r\n+            ) : (\r\n+              <div>\r\n+                {/* Featured Items Slider */}\r\n+                <CategoryHeader theme={currentStyle}>\r\n+                  <h2>Featured Items</h2>\r\n+                  <span className=\"view-all\">\r\n+                    {featuredItems.length} items\r\n+                  </span>\r\n+                </CategoryHeader>\r\n+\r\n+                <CategoryGridWrapper>\r\n+                {/* Desktop: Show all items in grid */}\r\n+                <div className=\"desktop-grid\" style={{ display: 'contents' }}>\r\n+                  {featuredItems.map(item => (\r\n+                    <div key={`featured-${item.shopId}-${item.id}`} className=\"desktop-only\" \r\n+                         style={{ display: window.innerWidth > 768 ? 'block' : 'none' }}>\r\n+                      <FeaturedItem\r\n+                        item={item}\r\n+                        theme={currentStyle}\r\n+                        onItemClick={handleItemClick}\r\n+                        showDistance={true}\r\n+                      />\r\n+                    </div>\r\n+                  ))}\r\n+                </div>\r\n+                \r\n+                {/* Mobile: Show all 10 items in a 2-row scrollable grid */}\r\n+                <CategoryScrollableGrid theme={currentStyle} className=\"mobile-only\">\r\n+                  {featuredItems.map(item => (\r\n+                    <FeaturedItem\r\n+                      key={`featured-mobile-${item.shopId}-${item.id}`}\r\n+                      item={item}\r\n+                      theme={currentStyle}\r\n+                      onItemClick={handleItemClick}\r\n+                      showDistance={true}\r\n+                    />\r\n+                  ))}\r\n+                </CategoryScrollableGrid>\r\n+              </CategoryGridWrapper>\r\n+                \r\n+              {Object.entries(categories).map(([categoryName, items]) => {\r\n+          if (items.length === 0) return null;\r\n+                      \r\n+          return (\r\n+            <div key={categoryName} style={{ marginTop: '3rem' }}>\r\n+              <CategoryHeader theme={currentStyle}>\r\n+                <h2>{categoryName}</h2>\r\n+                <span className=\"view-all\">\r\n+                  {items.length} items\r\n+                </span>\r\n+              </CategoryHeader>\r\n+          \r\n+              <CategoryGridWrapper>\r\n+                {/* Desktop: Show all items in grid */}\r\n+                <div className=\"desktop-grid\" style={{ display: 'contents' }}>\r\n+                  {items.map(item => (\r\n+                    <div key={`${categoryName}-${item.shopId}-${item.id}`} className=\"desktop-only\"\r\n+                         style={{ display: window.innerWidth > 768 ? 'block' : 'none' }}>\r\n+                      <FeaturedItem\r\n+                        item={item}\r\n+                        theme={currentStyle}\r\n+                        onItemClick={handleItemClick}\r\n+                        showDistance={true}\r\n+                      />\r\n+                    </div>\r\n+                  ))}\r\n+                </div>\r\n+                \r\n+                {/* Mobile: Show all items in a scrollable grid (1 or 2 rows based on count) */}\r\n+                <CategoryScrollableGrid theme={currentStyle} className=\"mobile-only\" itemCount={items.length}>\r\n+                  {items.map(item => (\r\n+                    <FeaturedItem\r\n+                      key={`${categoryName}-mobile-${item.shopId}-${item.id}`}\r\n+                      item={item}\r\n+                      theme={currentStyle}\r\n+                      onItemClick={handleItemClick}\r\n+                      showDistance={true}\r\n+                    />\r\n+                  ))}\r\n+                </CategoryScrollableGrid>\r\n+              </CategoryGridWrapper>\r\n+            </div>\r\n+          );\r\n+        })}\r\n+              </div>\r\n+            )}\r\n+          </>\r\n+        )}\r\n+\r\n+        {/* Media Tab */}\r\n+        {activeTab === 'media' && (\r\n+          <EmptyGridMessage>\r\n+            <h3>Featured Media</h3>\r\n+            <p>Coming soon! Discover videos and content from local creators.</p>\r\n+          </EmptyGridMessage>\r\n+        )}\r\n+      </MainContent>\r\n+\r\n+      {/* Style Indicator Only */}\r\n+      <StyleIndicator theme={currentStyle}>\r\n+        <span className=\"style-number\">{currentStyle.id}</span>\r\n+        <span>{currentStyle.name}</span>\r\n+      </StyleIndicator>\r\n+\r\n+      {/* Zoomed Item View - Updated to match ShopPublicView */}\r\n+      {/* Zoomed Item View - 75/25 Split */}\r\n+      {/* Zoomed Item View - 70/30 Split with 2:5 Card */}\r\n+      {zoomedItem && (\r\n+        <ZoomOverlay onClick={handleCloseZoom} theme={currentStyle}>\r\n+          <ZoomContainer \r\n+            theme={currentStyle}\r\n+            onClick={(e) => e.stopPropagation()}\r\n+          >\r\n+            {/* 70% - Image Carousel */}\r\n+            <ImageCarousel \r\n+              theme={currentStyle} \r\n+              currentIndex={currentImageIndex}\r\n+            >\r\n+              {/* Close button */}\r\n+              <button \r\n+                className=\"close-overlay-button\"\r\n+                onClick={handleCloseZoom}\r\n+                aria-label=\"Close\"\r\n+              >\r\n+                <X size={20} />\r\n+              </button>\r\n+            \r\n+              <div className=\"image-track\">\r\n+                {zoomedItem.images && zoomedItem.images.filter(Boolean).length > 0 ? (\r\n+                  zoomedItem.images.filter(Boolean).map((image, index) => (\r\n+                    <div key={index} className=\"image-slide\">\r\n+                      <img src={image} alt={`${zoomedItem.name} ${index + 1}`} />\r\n+                    </div>\r\n+                  ))\r\n+                ) : (\r\n+                  <div className=\"image-slide\">\r\n+                    <div className=\"no-image\">\r\n+                      <Package size={40} />\r\n+                      <p>No image</p>\r\n+                    </div>\r\n+                  </div>\r\n+                )}\r\n+              </div>\r\n+              \r\n+              {/* Navigation */}\r\n+              {zoomedItem.images && zoomedItem.images.filter(Boolean).length > 1 && (\r\n+                <>\r\n+                  <button \r\n+                    className=\"carousel-button prev\"\r\n+                    onClick={() => setCurrentImageIndex(prev => \r\n+                      prev === 0 ? zoomedItem.images.filter(Boolean).length - 1 : prev - 1\r\n+                    )}\r\n+                    aria-label=\"Previous\"\r\n+                  >\r\n+                    <ChevronLeft size={20} />\r\n+                  </button>\r\n+                  <button \r\n+                    className=\"carousel-button next\"\r\n+                    onClick={() => setCurrentImageIndex(prev => \r\n+                      prev === zoomedItem.images.filter(Boolean).length - 1 ? 0 : prev + 1\r\n+                    )}\r\n+                    aria-label=\"Next\"\r\n+                  >\r\n+                    <ChevronRight size={20} />\r\n+                  </button>\r\n+                  \r\n+                  <div className=\"carousel-dots\">\r\n+                    {zoomedItem.images.filter(Boolean).map((_, index) => (\r\n+                      <button\r\n+                        key={index}\r\n+                        className=\"dot\"\r\n+                        style={{ opacity: index === currentImageIndex ? 1 : 0.3 }}\r\n+                        onClick={() => setCurrentImageIndex(index)}\r\n+                        aria-label={`Image ${index + 1}`}\r\n+                      />\r\n+                    ))}\r\n+                  </div>\r\n+                </>\r\n+              )}\r\n+            </ImageCarousel>\r\n+            \r\n+            {/* 30% - Compact Details */}\r\n+            <ZoomContent theme={currentStyle}>\r\n+              {/* Name & Price Row */}\r\n+              <div style={{ \r\n+                display: 'flex', \r\n+                justifyContent: 'space-between', \r\n+                alignItems: 'baseline',\r\n+                gap: '0.75rem'\r\n+              }}>\r\n+                <h3 style={{\r\n+                  fontSize: '1.1rem',\r\n+                  margin: 0,\r\n+                  fontWeight: '600',\r\n+                  color: currentStyle?.colors?.text || '#FFFFFF',\r\n+                  flex: 1,\r\n+                  overflow: 'hidden',\r\n+                  textOverflow: 'ellipsis',\r\n+                  whiteSpace: 'nowrap'\r\n+                }}>\r\n+                  {zoomedItem.name}\r\n+                </h3>\r\n+                \r\n+                <div style={{\r\n+                  fontSize: '1.2rem',\r\n+                  fontWeight: 'bold',\r\n+                  color: currentStyle?.colors?.accent || '#800000',\r\n+                  whiteSpace: 'nowrap'\r\n+                }}>\r\n+                  ${parseFloat(zoomedItem.price || 0).toFixed(2)}\r\n+                </div>\r\n+              </div>\r\n+              \r\n+              {/* Info Row: Distance • Shop • Stock */}\r\n+              <div style={{\r\n+                display: 'flex',\r\n+                alignItems: 'center',\r\n+                gap: '0.75rem',\r\n+                fontSize: '0.75rem',\r\n+                flexWrap: 'wrap',\r\n+                color: currentStyle?.colors?.text || '#FFFFFF',\r\n+                opacity: 0.8\r\n+              }}>\r\n+                {zoomedItem.formattedDistance && (\r\n+                  <>\r\n+                    <div style={{ display: 'flex', alignItems: 'center', gap: '0.25rem' }}>\r\n+                      <Navigation size={11} />\r\n+                      <span>{zoomedItem.formattedDistance}</span>\r\n+                    </div>\r\n+                    <span>•</span>\r\n+                  </>\r\n+                )}\r\n+                \r\n+                {zoomedItem.shopName && (\r\n+                  <>\r\n+                    <div \r\n+                      style={{ \r\n+                        display: 'flex', \r\n+                        alignItems: 'center', \r\n+                        gap: '0.25rem',\r\n+                        cursor: 'pointer',\r\n+                        textDecoration: 'underline'\r\n+                      }}\r\n+                      onClick={(e) => {\r\n+                        e.stopPropagation();\r\n+                        navigate(`/shop/${zoomedItem.shopId}/view`);\r\n+                      }}\r\n+                    >\r\n+                      <Store size={11} />\r\n+                      <span>{zoomedItem.shopName}</span>\r\n+                    </div>\r\n+                    <span>•</span>\r\n+                  </>\r\n+                )}\r\n+                \r\n+                {zoomedItem.quantity !== undefined && (\r\n+                  <div style={{ display: 'flex', alignItems: 'center', gap: '0.25rem' }}>\r\n+                    <div style={{\r\n+                      width: '5px',\r\n+                      height: '5px',\r\n+                      borderRadius: '50%',\r\n+                      background: parseInt(zoomedItem.quantity) > 0 ? '#4CAF50' : '#FF5252'\r\n+                    }} />\r\n+                    <span style={{\r\n+                      color: parseInt(zoomedItem.quantity) > 0 ? '#4CAF50' : '#FF5252',\r\n+                      fontWeight: '500'\r\n+                    }}>\r\n+                      {parseInt(zoomedItem.quantity) > 0 ? \r\n+                        `${zoomedItem.quantity} in stock` : \r\n+                        'Out of stock'\r\n+                      }\r\n+                    </span>\r\n+                  </div>\r\n+                )}\r\n+              </div>\r\n+              \r\n+              {/* Quantity Selector */}\r\n+              <div style={{\r\n+                display: 'flex',\r\n+                alignItems: 'center',\r\n+                justifyContent: 'space-between',\r\n+                background: `${currentStyle?.colors?.surface || 'rgba(255, 255, 255, 0.05)'}20`,\r\n+                borderRadius: '6px',\r\n+                padding: '0.5rem 0.75rem'\r\n+              }}>\r\n+                <span style={{\r\n+                  fontSize: '0.8rem',\r\n+                  fontWeight: '600',\r\n+                  color: currentStyle?.colors?.text || '#FFFFFF'\r\n+                }}>\r\n+                  Qty\r\n+                </span>\r\n+                \r\n+                <div style={{ display: 'flex', alignItems: 'center', gap: '0.75rem' }}>\r\n+                  <button \r\n+                    onClick={() => adjustQuantity(-1)}\r\n+                    disabled={orderQuantity <= 1}\r\n+                    style={{\r\n+                      width: '24px',\r\n+                      height: '24px',\r\n+                      borderRadius: '50%',\r\n+                      border: `1.5px solid ${currentStyle?.colors?.accent || '#800000'}`,\r\n+                      background: 'transparent',\r\n+                      color: currentStyle?.colors?.accent || '#800000',\r\n+                      display: 'flex',\r\n+                      alignItems: 'center',\r\n+                      justifyContent: 'center',\r\n+                      cursor: orderQuantity <= 1 ? 'not-allowed' : 'pointer',\r\n+                      opacity: orderQuantity <= 1 ? 0.3 : 1\r\n+                    }}\r\n+                  >\r\n+                    <Minus size={12} />\r\n+                  </button>\r\n+                  \r\n+                  <div style={{\r\n+                    fontSize: '1rem',\r\n+                    fontWeight: 'bold',\r\n+                    color: currentStyle?.colors?.text || 'white',\r\n+                    minWidth: '24px',\r\n+                    textAlign: 'center'\r\n+                  }}>\r\n+                    {orderQuantity}\r\n+                  </div>\r\n+                \r\n+                  <button \r\n+                    onClick={() => adjustQuantity(1)}\r\n+                    disabled={orderQuantity >= parseInt(zoomedItem.quantity || 1)}\r\n+                    style={{\r\n+                      width: '24px',\r\n+                      height: '24px',\r\n+                      borderRadius: '50%',\r\n+                      border: `1.5px solid ${currentStyle?.colors?.accent || '#800000'}`,\r\n+                      background: 'transparent',\r\n+                      color: currentStyle?.colors?.accent || '#800000',\r\n+                      display: 'flex',\r\n+                      alignItems: 'center',\r\n+                      justifyContent: 'center',\r\n+                      cursor: orderQuantity >= parseInt(zoomedItem.quantity || 1) ? 'not-allowed' : 'pointer',\r\n+                      opacity: orderQuantity >= parseInt(zoomedItem.quantity || 1) ? 0.3 : 1\r\n+                    }}\r\n+                  >\r\n+                    <Plus size={12} />\r\n+                  </button>\r\n+                </div>\r\n+              </div>\r\n+                  \r\n+              {/* Order Button */}\r\n+              <button \r\n+                onClick={handleDirectOrder}\r\n+                disabled={parseInt(zoomedItem.quantity || 0) < 1 || orderQuantity > parseInt(zoomedItem.quantity || 0)}\r\n+                style={{\r\n+                  width: '100%',\r\n+                  padding: '0.75rem',\r\n+                  borderRadius: '8px',\r\n+                  border: 'none',\r\n+                  background: parseInt(zoomedItem.quantity || 0) < 1 ? \r\n+                    `${currentStyle?.colors?.accent || '#800000'}40` : \r\n+                    currentStyle?.colors?.accent || '#800000',\r\n+                  color: 'white',\r\n+                  fontSize: '0.9rem',\r\n+                  fontWeight: '600',\r\n+                  display: 'flex',\r\n+                  alignItems: 'center',\r\n+                  justifyContent: 'center',\r\n+                  gap: '0.5rem',\r\n+                  cursor: parseInt(zoomedItem.quantity || 0) < 1 ? 'not-allowed' : 'pointer',\r\n+                  transition: 'all 0.3s'\r\n+                }}\r\n+              >\r\n+                {parseInt(zoomedItem.quantity || 0) < 1 ? (\r\n+                  <>\r\n+                    <X size={16} />\r\n+                    Out of Stock\r\n+                  </>\r\n+                ) : (\r\n+                  <>\r\n+                    <ShoppingCart size={16} />\r\n+                    Order {orderQuantity > 1 && `${orderQuantity} `}· ${(parseFloat(zoomedItem.price || 0) * orderQuantity).toFixed(2)}\r\n+                  </>\r\n+                )}\r\n+              </button>\r\n+            </ZoomContent>\r\n+          </ZoomContainer>\r\n+        </ZoomOverlay>\r\n+      )}\r\n+\r\n+      {/* Chat Overlay */}\r\n+      <ChatOverlay isOpen={chatOpen} onClick={handleCloseChat} />\r\n+      \r\n+      {selectedChatItem && (\r\n+        <OrderChat \r\n+          isOpen={chatOpen} \r\n+          onClose={handleCloseChat} \r\n+          item={selectedChatItem}\r\n+          shopId={selectedChatItem.shopId}\r\n+          shopName={selectedChatItem.shopName}\r\n+          theme={currentStyle}\r\n+        />\r\n+      )}\r\n+    </PageContainer>\r\n+  );\r\n+};\r\n+\r\n+export default WelcomePage;\n\\ No newline at end of file\n"
                }
            ],
            "date": 1736990195768,
            "name": "Commit-0",
            "content": "// src/pages/WelcomePage.js\n\nimport React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { Package, Users } from 'lucide-react';\nimport { useNavigate } from 'react-router-dom'; // New import\n\nconst PageContainer = styled.div.attrs({ className: 'page-container' })`\n  min-height: 100vh;\n  background: #000000;\n  color: #FFFFFF;\n  position: relative;\n  overflow: hidden;\n\n  &::before {\n    content: '';\n    position: absolute;\n    width: 100%;\n    height: 100%;\n    background: \n      radial-gradient(circle at 20% 30%, rgba(128, 0, 0, 0.2) 0%, transparent 50%),\n      radial-gradient(circle at 80% 70%, rgba(128, 0, 0, 0.15) 0%, transparent 50%);\n    opacity: 0.8;\n    animation: galaxySwirl 30s linear infinite;\n  }\n\n  &::after {\n    content: '';\n    position: absolute;\n    width: 100%;\n    height: 100%;\n    background-image: \n      radial-gradient(circle 1px, #FFF 1px, transparent 1px),\n      radial-gradient(circle 2px, #800000 1px, transparent 2px);\n    background-size: 200px 200px, 300px 300px;\n    background-position: 0 0;\n    opacity: 0.1;\n    animation: twinkle 4s infinite alternate;\n  }\n\n  .ping {\n    position: absolute;\n    width: 2px;\n    height: 2px;\n    border-radius: 50%;\n    background: #800000;\n    pointer-events: none;\n  }\n\n  .ping::before {\n    content: '';\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    width: 100px;\n    height: 100px;\n    transform: translate(-50%, -50%);\n    border-radius: 50%;\n    background: radial-gradient(circle, rgba(128, 0, 0, 0.4) 0%, transparent 70%);\n    animation: ping 2s ease-out forwards;\n  }\n\n  @keyframes galaxySwirl {\n    0% { transform: rotate(0deg); }\n    100% { transform: rotate(360deg); }\n  }\n\n  @keyframes twinkle {\n    0%, 100% { opacity: 0.05; }\n    50% { opacity: 0.1; }\n  }\n\n  @keyframes ping {\n    0% {\n      width: 0px;\n      height: 0px;\n      opacity: 1;\n    }\n    100% {\n      width: 200px;\n      height: 200px;\n      opacity: 0;\n    }\n  }\n`;\n\nconst DiscoverButton = styled(ActionButton)`\n  background: transparent;\n  border: 2px solid #800000;\n  color: #800000;\n\n  &:hover {\n    background: rgba(128, 0, 0, 0.1);\n  }\n`;\n\nconst Header = styled.header`\n  width: 100%;\n  height: 80px; // Fixed height\n  padding: 0 2rem; // Changed padding\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  background: rgba(0, 0, 0, 0.9);\n  backdrop-filter: blur(10px);\n  border-bottom: 1px solid rgba(128, 0, 0, 0.3);\n  position: fixed; // Changed from sticky\n  top: 0;\n  z-index: 10;\n`;\n\nconst Logo = styled.div`\n  color: #800000;\n  font-family: 'Impact', 'Arial Black', sans-serif;\n  font-size: 2rem;\n  letter-spacing: 2px;\n  transform: skew(-5deg);\n`;\n\nconst MainContent = styled.main`\n  max-width: 1200px;\n  margin: 0 auto;\n  padding: 6rem 2rem 2rem 2rem; // Added top padding\n  position: relative;\n  z-index: 1;\n`;\n\nconst LoginButton = styled.button`\n  background: transparent;\n  border: 2px solid #800000;\n  color: #800000;\n  padding: 0.8rem 2rem;\n  border-radius: 30px;\n  font-weight: 500;\n  cursor: pointer;\n  transition: all 0.3s;\n  letter-spacing: 1px;\n  font-size: 1rem;\n  text-transform: uppercase;\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n\n  &:hover {\n    background: rgba(128, 0, 0, 0.1);\n    transform: translateY(-2px);\n    box-shadow: 0 2px 10px rgba(128, 0, 0, 0.2);\n  }\n`;\n\nconst WelcomeSection = styled.section`\n  text-align: center;\n  margin: 4rem 0;\n  position: relative;\n\n  h1 {\n    font-family: 'Impact', sans-serif;\n    font-size: 4.5rem;\n    margin-bottom: 1rem;\n    background: linear-gradient(45deg, #800000, #4A0404);\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent;\n    text-shadow: 0 0 30px rgba(128, 0, 0, 0.3);\n    letter-spacing: 2px;\n    transform: skew(-5deg);\n  }\n\n  p {\n    font-size: 1.2rem;\n    line-height: 1.6;\n    max-width: 800px;\n    margin: 0 auto;\n    color: rgba(255, 255, 255, 0.8);\n    font-weight: 300;\n  }\n`;\n\nconst ActionButton = styled.button`\n  background: linear-gradient(45deg, #800000, #4A0404);\n  border: none;\n  padding: 1rem 2.5rem;\n  border-radius: 30px;\n  color: white;\n  font-weight: bold;\n  cursor: pointer;\n  transition: all 0.3s;\n  text-transform: uppercase;\n  letter-spacing: 2px;\n  margin-top: 2rem;\n\n  &:hover {\n    transform: translateY(-2px);\n    box-shadow: 0 5px 15px rgba(128, 0, 0, 0.3);\n  }\n`;\n\nconst TabContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  gap: 1rem;\n  margin: 3rem 0;\n`;\n\nconst Tab = styled.button`\n  background: ${props => props.active ? 'rgba(128, 0, 0, 0.2)' : 'transparent'};\n  border: 1px solid ${props => props.active ? '#800000' : 'rgba(128, 0, 0, 0.3)'};\n  color: ${props => props.active ? '#FFFFFF' : 'rgba(255, 255, 255, 0.6)'};\n  padding: 0.8rem 1.5rem;\n  border-radius: 20px;\n  cursor: pointer;\n  transition: all 0.3s;\n  text-transform: uppercase;\n  letter-spacing: 1px;\n  font-weight: 500;\n  font-family: 'Impact', sans-serif;\n\n  &:hover {\n    background: rgba(128, 0, 0, 0.2);\n    border-color: #800000;\n    color: #FFFFFF;\n  }\n`;\n\nconst GridContainer = styled.div`\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));\n  gap: 2rem;\n  margin-top: 2rem;\n`;\n\nconst WelcomePage = () => {\n  const navigate = useNavigate(); // New\n  const [activeTab, setActiveTab] = useState('featured');\n  const handleOpenShop = () => {\n    navigate('/shop/create/template');\n  };\n\n  const handleLogin = () => {\n    navigate('/auth', { \n      state: { \n        mode: 'login',\n        from: window.location.pathname\n      }\n    });\n  };\n\n  React.useEffect(() => {\n    const container = document.querySelector('.page-container');\n    if (!container) return; // Add this check\n  \n    const createPing = () => {\n      const ping = document.createElement('div');\n      ping.className = 'ping';\n      \n      ping.style.left = `${Math.random() * 100}%`;\n      ping.style.top = `${Math.random() * 100}%`;\n      \n      container.appendChild(ping);\n      \n      setTimeout(() => {\n        if (ping && ping.parentNode) { // Add this check\n          ping.remove();\n        }\n      }, 2000);\n    };\n  \n    const createPingGroup = (count) => {\n      for (let i = 0; i < count; i++) {\n        setTimeout(() => {\n          createPing();\n        }, i * 200);\n      }\n    };\n  \n    const pingCounts = [10, 30, 20];\n    let currentIndex = 0;\n  \n    const interval = setInterval(() => {\n      const count = pingCounts[currentIndex];\n      createPingGroup(count);\n      currentIndex = (currentIndex + 1) % pingCounts.length;\n    }, 3000);\n  \n    // Cleanup function\n    return () => {\n      clearInterval(interval);\n      // Remove any remaining pings\n      const pings = container.getElementsByClassName('ping');\n      while (pings.length > 0) {\n        pings[0].remove();\n      }\n    };\n  }, []); // Empty dependency array\n\n  return (\n    <PageContainer className=\"page-container\">\n      <Header>\n        <Logo onClick={() => navigate('/')}>KALKODE</Logo>\n        <LoginButton onClick={handleLogin}>\n          Login\n        </LoginButton>\n      </Header>\n\n      <MainContent>\n        <WelcomeSection>\n          <h1>Welcome to KalKode</h1>\n          <p>Join the underground marketplace where local creators thrive. </p>\n          <p>Build your empire and discover unique treasures.</p>\n          <div style={{ display: 'flex', gap: '1rem', justifyContent: 'center', marginTop: '2rem' }}>\n            <ActionButton onClick={handleOpenShop}>Open Up Shop</ActionButton>\n            <ActionButton onClick={handleOpenShop}>Open Up Shop</ActionButton>\n            <DiscoverButton onClick={() => navigate('/discover')}>\n              Discover Shops\n            </DiscoverButton>\n          </div>\n        </WelcomeSection>\n\n        <TabContainer>\n          <Tab \n            active={activeTab === 'featured'} \n            onClick={() => setActiveTab('featured')}\n          >\n            Featured Items\n          </Tab>\n          <Tab \n            active={activeTab === 'social'} \n            onClick={() => setActiveTab('social')}\n          >\n            Community\n          </Tab>\n        </TabContainer>\n\n        <GridContainer>\n          {/* Content will be added later */}\n        </GridContainer>\n      </MainContent>\n    </PageContainer>\n  );\n};\n\nexport default WelcomePage;"
        }
    ]
}