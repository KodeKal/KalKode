{
    "sourceFile": "src/pages/shop/ShopPage.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 32,
            "patches": [
                {
                    "date": 1735694568437,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1735695499554,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -257,18 +257,12 @@\n const ItemCard = styled.div`\n   background: rgba(255, 255, 255, 0.05);\n   border-radius: ${props => props.theme?.styles?.borderRadius || '12px'};\n   overflow: hidden;\n-  transition: all 0.3s ease;\n   border: 1px solid rgba(255, 255, 255, 0.1);\n   width: 100%;\n   height: 500px;\n \n-  &:hover {\n-    transform: translateY(-5px);\n-    border-color: ${props => props.theme?.colors?.accent};\n-  }\n-\n   .item-content {\n     padding: 1.5rem;\n   }\n `;\n"
                },
                {
                    "date": 1735695929217,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,8 @@\n import { auth, db } from '../../firebase/config';\n import { doc, getDoc, updateDoc } from 'firebase/firestore';\n import { Plus, ChevronLeft, ChevronRight, X } from 'lucide-react';\n import TabPositioner from './components/TabPositioner';\n-import NavMenu from './components/NavMenu';\n import EditableText from './components/EditableComponents/EditableText';\n import EditableImage from './components/EditableComponents/EditableImage';\n import { DEFAULT_THEME } from './LiveShopCreation';\n import { ref, uploadBytes, getDownloadURL } from 'firebase/storage';\n"
                },
                {
                    "date": 1735695957368,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -571,10 +571,8 @@\n           ]}\n           theme={shopData?.theme}\n         />\n \n-        <NavMenu theme={shopData?.theme} />\n-\n         <MainContent>\n         {activeTab === 'shop' && (\n           <>\n             <ShopProfileSection>\n"
                },
                {
                    "date": 1735710683461,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,796 @@\n+// src/pages/shop/ShopPage.js\n+\n+import React, { useState, useEffect } from 'react';\n+import { useNavigate } from 'react-router-dom';\n+import styled, { ThemeProvider } from 'styled-components';\n+import { auth, db } from '../../firebase/config';\n+import { doc, getDoc, updateDoc } from 'firebase/firestore';\n+import { Plus, ChevronLeft, ChevronRight, X } from 'lucide-react';\n+import TabPositioner from './components/TabPositioner';\n+import EditableText from './components/EditableComponents/EditableText';\n+import EditableImage from './components/EditableComponents/EditableImage';\n+import { DEFAULT_THEME } from './LiveShopCreation';\n+import { ref, uploadBytes, getDownloadURL } from 'firebase/storage';\n+import { storage } from '../../firebase/config';\n+import PageTransitionWrapper from '../../components/PageTransition';\n+\n+const PageContainer = styled.div`\n+  min-height: 100vh;\n+  background: ${props => props.theme?.colors?.background || DEFAULT_THEME.colors.background};\n+  color: ${props => props.theme?.colors?.text || DEFAULT_THEME.colors.text};\n+  padding-top: 80px;\n+  position: relative;\n+  overflow-x: hidden;\n+`;\n+\n+const ShopProfileSection = styled.div`\n+  display: flex;\n+  flex-direction: column;\n+  align-items: center;\n+  text-align: center;\n+  max-width: 800px;\n+  margin: 0 auto 3rem auto;\n+  padding: 2rem;\n+\n+  .profile-image {\n+    margin-bottom: 2rem;\n+    width: 150px;\n+    height: 150px;\n+    border-radius: 50%;\n+    overflow: hidden;\n+    background: rgba(0, 0, 0, 0.1);\n+    \n+    img {\n+      width: 100%;\n+      height: 100%;\n+      object-fit: cover;\n+    }\n+\n+    .placeholder {\n+      width: 100%;\n+      height: 100%;\n+      display: flex;\n+      flex-direction: column;\n+      align-items: center;\n+      justify-content: center;\n+      gap: 0.5rem;\n+      color: ${props => props.theme?.colors?.text || '#fff'};\n+      opacity: 0.5;\n+      cursor: pointer;\n+      \n+      span {\n+        font-size: 0.9rem;\n+      }\n+    }\n+  }\n+\n+  .shop-info {\n+    width: 100%;\n+  }\n+`;\n+\n+const ItemImageContainer = styled.div`\n+  position: relative;\n+  height: 250px;\n+  width: 100%;\n+  display: flex;\n+  overflow: hidden;\n+  background: rgba(0, 0, 0, 0.1);\n+\n+  .image-container {\n+    width: 100%;\n+    height: 100%;\n+    position: relative;\n+  }\n+\n+  .placeholder {\n+    width: 100%;\n+    height: 100%;\n+    display: flex;\n+    flex-direction: column;\n+    align-items: center;\n+    justify-content: center;\n+    gap: 0.5rem;\n+    color: ${props => props.theme?.colors?.text || '#fff'};\n+    opacity: 0.5;\n+    cursor: pointer;\n+    \n+    span {\n+      font-size: 0.9rem;\n+    }\n+  }\n+\n+  .carousel-arrow {\n+    position: absolute;\n+    top: 50%;\n+    transform: translateY(-50%);\n+    background: rgba(0, 0, 0, 0.5);\n+    border: none;\n+    border-radius: 50%;\n+    width: 32px;\n+    height: 32px;\n+    display: flex;\n+    align-items: center;\n+    justify-content: center;\n+    color: white;\n+    cursor: pointer;\n+    z-index: 2;\n+    transition: all 0.3s ease;\n+\n+    &:hover {\n+      background: rgba(0, 0, 0, 0.8);\n+    }\n+\n+    &.left {\n+      left: 10px;\n+    }\n+\n+    &.right {\n+      right: 10px;\n+    }\n+  }\n+\n+  .add-image {\n+    position: absolute;\n+    top: 10px;\n+    right: 10px;\n+    background: rgba(0, 0, 0, 0.5);\n+    border: none;\n+    border-radius: 50%;\n+    width: 32px;\n+    height: 32px;\n+    display: flex;\n+    align-items: center;\n+    justify-content: center;\n+    color: white;\n+    cursor: pointer;\n+    z-index: 2;\n+    transition: all 0.3s ease;\n+\n+    &:hover {\n+      background: rgba(0, 0, 0, 0.8);\n+    }\n+  }\n+`;\n+\n+\n+const ShopBanner = styled.div`\n+  position: fixed;\n+  top: 0;\n+  left: 0;\n+  right: 0;\n+  height: 80px;\n+  background: ${props => `${props.theme?.colors?.background || DEFAULT_THEME.colors.background}CC`};\n+  backdrop-filter: blur(10px);\n+  display: flex;\n+  align-items: center;\n+  justify-content: space-between;\n+  padding: 0 2rem;\n+  z-index: 100;\n+  border-bottom: 1px solid ${props => `${props.theme?.colors?.accent || DEFAULT_THEME.colors.accent}30`};\n+`;\n+\n+const UploadingOverlay = styled.div`\n+  position: absolute;\n+  top: 0;\n+  left: 0;\n+  right: 0;\n+  bottom: 0;\n+  background: rgba(0, 0, 0, 0.5);\n+  display: flex;\n+  align-items: center;\n+  justify-content: center;\n+  color: white;\n+  z-index: 3;\n+`;\n+\n+const ItemContent = styled.div`\n+  padding: 1.5rem;\n+  display: flex;\n+  flex-direction: column;\n+  gap: 1rem;\n+  height: calc(100% - 250px); // This ensures the content takes the remaining space\n+  overflow-y: auto;\n+\n+  input, textarea {\n+    background: rgba(255, 255, 255, 0.05);\n+    border: 1px solid rgba(255, 255, 255, 0.1);\n+    border-radius: ${props => props.theme?.styles?.borderRadius || '8px'};\n+    padding: 0.8rem;\n+    color: ${props => props.theme?.colors?.text};\n+    \n+    &:focus {\n+      outline: none;\n+      border-color: ${props => props.theme?.colors?.accent};\n+    }\n+  }\n+`;\n+\n+const ShopName = styled.div`\n+  flex: 1;\n+  text-align: ${props => props.position};\n+  font-family: ${props => props.theme?.fonts?.heading || DEFAULT_THEME.fonts.heading};\n+  font-size: 1.8rem;\n+  padding: ${props => props.position === 'center' ? '0 80px' : '0'};\n+`;\n+\n+const MainContent = styled.div`\n+  max-width: ${props => props.theme?.styles?.containerWidth || DEFAULT_THEME.styles.containerWidth};\n+  margin: 0 auto;\n+  padding: 2rem;\n+  position: relative;\n+  z-index: 1;\n+`;\n+\n+const LoadingSpinner = styled.div`\n+  width: 20px;\n+  height: 20px;\n+  border: 2px solid rgba(255, 255, 255, 0.3);\n+  border-radius: 50%;\n+  border-top-color: white;\n+  animation: spin 1s linear infinite;\n+\n+  @keyframes spin {\n+    to {\n+      transform: rotate(360deg);\n+    }\n+  }\n+`;\n+\n+const LoadingIndicator = styled.div`\n+  display: flex;\n+  justify-content: center;\n+  align-items: center;\n+  min-height: 50vh;\n+  font-size: 1.2rem;\n+  color: ${props => props.theme?.colors?.text || DEFAULT_THEME.colors.text};\n+`;\n+\n+const ItemGrid = styled.div`\n+  display: grid;\n+  grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));\n+  gap: 2rem;\n+  margin-bottom: 2rem;\n+`;\n+\n+const ItemCard = styled.div`\n+  background: rgba(255, 255, 255, 0.05);\n+  border-radius: ${props => props.theme?.styles?.borderRadius || '12px'};\n+  overflow: hidden;\n+  border: 1px solid rgba(255, 255, 255, 0.1);\n+  width: 100%;\n+  height: 500px;\n+\n+  .item-content {\n+    padding: 1.5rem;\n+  }\n+`;\n+\n+const ZipCodeInput = styled.input`\n+  background: rgba(255, 255, 255, 0.05);\n+  border: 1px solid rgba(255, 255, 255, 0.1);\n+  padding: 0.5rem;\n+  border-radius: 4px;\n+  color: ${props => props.theme?.colors?.text};\n+  margin-top: 0.5rem;\n+  width: 100%;\n+\n+  &:focus {\n+    outline: none;\n+    border-color: ${props => props.theme?.colors?.accent};\n+  }\n+`;\n+\n+const AddItemButton = styled.button`\n+  background: ${props => props.theme?.colors?.primary};\n+  color: ${props => props.theme?.colors?.text};\n+  border: none;\n+  border-radius: 8px;\n+  padding: 1rem;\n+  display: flex;\n+  align-items: center;\n+  gap: 0.5rem;\n+  cursor: pointer;\n+  margin: 2rem auto;\n+  transition: all 0.3s;\n+\n+  &:hover {\n+    transform: translateY(-2px);\n+  }\n+`;\n+\n+const cleanDataForFirestore = (data) => {\n+  if (!data) return data;\n+  \n+  if (Array.isArray(data)) {\n+    return data.map(item => cleanDataForFirestore(item));\n+  }\n+  \n+  if (typeof data === 'object' && !(data instanceof Date)) {\n+    const cleanedData = {};\n+    for (const [key, value] of Object.entries(data)) {\n+      // Skip file objects\n+      if (value instanceof File) continue;\n+      // Skip null/undefined values\n+      if (value === null || value === undefined) continue;\n+      cleanedData[key] = cleanDataForFirestore(value);\n+    }\n+    return cleanedData;\n+  }\n+  \n+  return data;\n+};\n+\n+const ShopPage = () => {\n+  const navigate = useNavigate();\n+  const [shopData, setShopData] = useState(null);\n+  const [activeTab, setActiveTab] = useState('shop');\n+  const [saving, setSaving] = useState(false);\n+  const [uploading, setUploading] = useState({});\n+\n+  // Load shop data\n+  useEffect(() => {\n+    console.log('Current profile image value:', shopData?.profile);\n+  }, [shopData?.profile]);\n+\n+  useEffect(() => {\n+    if (shopData?.profile && typeof shopData.profile === 'string') {\n+      // Pre-load the image\n+      const img = new Image();\n+      img.src = shopData.profile;\n+      img.onload = () => {\n+        // Force a re-render when image loads\n+        setShopData(prev => ({...prev}));\n+      };\n+    }\n+  }, [shopData?.profile]);\n+\n+  useEffect(() => {\n+    const loadShopData = async (userId) => {\n+      try {\n+        const shopDoc = await getDoc(doc(db, 'shops', userId));\n+        if (shopDoc.exists()) {\n+          const data = shopDoc.data();\n+          console.log('Loaded shop data:', data); // Debug log\n+          setShopData(data);\n+        } else {\n+          console.log('No shop data found');\n+        }\n+      } catch (error) {\n+        console.error('Error loading shop data:', error);\n+      } finally {\n+        setLoading(false);\n+      }\n+    };\n+\n+    \n+\n+    const unsubscribe = auth.onAuthStateChanged((user) => {\n+      if (!user) {\n+        navigate('/auth');\n+        return;\n+      }\n+      loadShopData(user.uid);\n+    });\n+\n+    return () => unsubscribe();\n+  }, [navigate]);\n+\n+  const handleUpdateShop = async (updates) => {\n+    if (!auth.currentUser) return;\n+    \n+    try {\n+      setSaving(true);\n+      console.log('Updating shop with:', updates); // Debug log\n+      \n+      let finalUpdates = { ...updates };\n+      \n+      // Handle profile image upload\n+      if (updates.profile?.file instanceof File) {\n+        const file = updates.profile.file;\n+        const metadata = {\n+          contentType: file.type || 'image/jpeg',\n+          cacheControl: 'public,max-age=3600',\n+          customMetadata: {\n+            'Access-Control-Allow-Origin': '*'\n+          }\n+        };\n+        \n+        const profileRef = ref(\n+          storage, \n+          `shops/${auth.currentUser.uid}/profile/profile-${Date.now()}`\n+        );\n+        \n+        const snapshot = await uploadBytes(profileRef, file, metadata);\n+        const imageUrl = await getDownloadURL(snapshot.ref);\n+        \n+        // Update with image URL instead of file\n+        finalUpdates = {\n+          ...finalUpdates,\n+          profile: imageUrl\n+        };\n+      }\n+  \n+      // Update Firestore\n+      const shopRef = doc(db, 'shops', auth.currentUser.uid);\n+      await updateDoc(shopRef, {\n+        ...finalUpdates,\n+        updatedAt: new Date().toISOString()\n+      });\n+  \n+      // Update local state\n+      setShopData(prev => ({\n+        ...prev,\n+        ...finalUpdates\n+      }));\n+  \n+      console.log('Shop update successful:', finalUpdates);\n+    } catch (error) {\n+      console.error('Error updating shop:', error);\n+    } finally {\n+      setSaving(false);\n+    }\n+  };\n+\n+  const logImageState = (image) => {\n+    if (!image) return 'null';\n+    if (typeof image === 'string') return `URL: ${image}`;\n+    if (image instanceof File) return `File: ${image.name}`;\n+    if (image?.file instanceof File) return `File Object: ${image.file.name}`;\n+    return `Unknown type: ${typeof image}`;\n+  };\n+\n+  // Handle item updates\n+  const handleItemUpdate = async (itemId, updates) => {\n+    if (!auth.currentUser) return;\n+  \n+    try {\n+      setSaving(true);\n+      console.log('Updating item with:', updates); // Debug log\n+  \n+      const currentItem = shopData.items.find(item => item.id === itemId);\n+      let updatedItem = { ...currentItem, ...updates };\n+  \n+      // Handle image uploads if present\n+      if (updates.images) {\n+        const processedImages = await Promise.all(updates.images.map(async (image, index) => {\n+          // If it's a URL or null, keep it\n+          if (!image || typeof image === 'string') return image;\n+          \n+          // If it's a File object, upload it\n+          if (image instanceof File || image?.file instanceof File) {\n+            const file = image instanceof File ? image : image.file;\n+            try {\n+              const metadata = {\n+                contentType: file.type || 'image/jpeg',\n+                cacheControl: 'public,max-age=3600'\n+              };\n+              \n+              const imageRef = ref(\n+                storage, \n+                `shops/${auth.currentUser.uid}/items/${itemId}/image-${index}-${Date.now()}`\n+              );\n+              \n+              const snapshot = await uploadBytes(imageRef, file, metadata);\n+              return await getDownloadURL(snapshot.ref);\n+            } catch (uploadError) {\n+              console.error(`Failed to upload image ${index}:`, uploadError);\n+              return null;\n+            }\n+          }\n+          return null;\n+        }));\n+  \n+        updatedItem.images = processedImages;\n+      }\n+  \n+      // Update in Firestore\n+      const shopRef = doc(db, 'shops', auth.currentUser.uid);\n+      const updatedItems = shopData.items.map(item =>\n+        item.id === itemId ? updatedItem : item\n+      );\n+  \n+      await updateDoc(shopRef, {\n+        items: updatedItems,\n+        updatedAt: new Date().toISOString()\n+      });\n+  \n+      // Update local state\n+      setShopData(prev => ({\n+        ...prev,\n+        items: updatedItems\n+      }));\n+  \n+      console.log('Item updated successfully:', updatedItem); // Debug log\n+    } catch (error) {\n+      console.error('Error updating item:', error);\n+    } finally {\n+      setSaving(false);\n+    }\n+  };\n+  \n+    // Save shop data\n+  const saveShopData = async (updates) => {\n+    if (!auth.currentUser) return;\n+    setSaving(true);\n+    try {\n+      const shopRef = doc(db, 'shops', auth.currentUser.uid);\n+      await updateDoc(shopRef, {\n+        ...updates,\n+        updatedAt: new Date().toISOString()\n+      });\n+      setShopData(prev => ({ ...prev, ...updates }));\n+    } catch (error) {\n+      console.error('Error saving shop data:', error);\n+    } finally {\n+      setSaving(false);\n+    }\n+  };\n+\n+  const handleAddItem = () => {\n+    const newItem = {\n+      id: Date.now().toString(),\n+      name: 'New Item',\n+      price: '',\n+      description: '',\n+      zipCode: '',\n+      images: [null, null, null],\n+      currentImageIndex: 0\n+    };\n+\n+    const updatedItems = [...(shopData.items || []), newItem];\n+    saveShopData({ items: updatedItems });\n+  };\n+\n+  return (\n+    <ThemeProvider theme={shopData?.theme || DEFAULT_THEME}>\n+      <PageTransitionWrapper>\n+      <PageContainer>\n+        <ShopBanner>\n+          <EditableText\n+            value={shopData?.name}\n+            onChange={(value) => saveShopData({ name: value })}\n+            placeholder=\"Your Shop Name\"\n+            theme={shopData?.theme}\n+          />\n+        </ShopBanner>\n+\n+        <TabPositioner\n+          position={shopData?.layout?.tabPosition || 'top'}\n+          activeTab={activeTab}\n+          onTabChange={setActiveTab}\n+          tabs={[\n+            { id: 'shop', label: 'Shop' },\n+            { id: 'home', label: 'Home' },\n+            { id: 'community', label: 'Community' }\n+          ]}\n+          theme={shopData?.theme}\n+        />\n+\n+        <MainContent>\n+        {activeTab === 'shop' && (\n+          <>\n+            <ShopProfileSection>\n+            <div className=\"profile-image\">\n+              {shopData?.profile && typeof shopData.profile === 'string' ? (\n+                // If we have a URL string, show the image directly\n+                <img \n+                  src={shopData.profile} \n+                  alt=\"Profile\" \n+                  style={{ \n+                    width: '100%',\n+                    height: '100%',\n+                    objectFit: 'cover',\n+                    cursor: 'pointer'\n+                  }}\n+                  onClick={() => {\n+                    // Allow changing the image by clicking on it\n+                    const input = document.createElement('input');\n+                    input.type = 'file';\n+                    input.accept = 'image/*';\n+                    input.onchange = (e) => {\n+                      if (e.target.files?.[0]) {\n+                        handleUpdateShop({ \n+                          profile: {\n+                            file: e.target.files[0],\n+                            type: e.target.files[0].type\n+                          }\n+                        });\n+                      }\n+                    };\n+                    input.click();\n+                  }}\n+                />\n+              ) : (\n+                // If no image URL, show the EditableImage component\n+                <EditableImage\n+                  value={null}\n+                  onChange={(value) => {\n+                    console.log('Profile image update:', value);\n+                    if (value instanceof File) {\n+                      handleUpdateShop({ \n+                        profile: {\n+                          file: value,\n+                          type: value.type\n+                        }\n+                      });\n+                    }\n+                  }}\n+                  theme={shopData?.theme}\n+                  round\n+                  width=\"150px\"\n+                  height=\"150px\"\n+                  style={{ \n+                    width: '150px',\n+                    height: '150px',\n+                    borderRadius: '50%',\n+                    objectFit: 'cover'\n+                  }}\n+                />\n+              )}\n+            </div>\n+              <div className=\"shop-info\">\n+                <EditableText\n+                  value={shopData?.name}\n+                  onChange={(value) => handleUpdateShop({ name: value })}\n+                  placeholder=\"Shop Name\"\n+                  theme={shopData?.theme}\n+                />\n+                <EditableText\n+                  value={shopData?.description}\n+                  onChange={(value) => handleUpdateShop({ description: value })}\n+                  placeholder=\"Shop Description\"\n+                  multiline\n+                  theme={shopData?.theme}\n+                />\n+              </div>\n+            </ShopProfileSection>\n+\n+            <ItemGrid>\n+              {shopData?.items?.map(item => (\n+                <ItemCard key={item.id}>\n+                  <ItemImageContainer>\n+                    {uploading[item.id] && (\n+                      <UploadingOverlay>\n+                        <LoadingSpinner />\n+                      </UploadingOverlay>\n+                    )}\n+                    <div \n+                      className=\"image-container\"\n+                      onClick={() => {\n+                        if (!item.images[item.currentImageIndex]) {\n+                          document.getElementById(`image-upload-${item.id}-${item.currentImageIndex}`).click();\n+                        }\n+                      }}\n+                    >\n+                      {item.images[item.currentImageIndex] ? (\n+                        <img \n+                          src={item.images[item.currentImageIndex]} \n+                          alt={item.name}\n+                          style={{ width: '100%', height: '100%', objectFit: 'cover' }}\n+                        />\n+                      ) : (\n+                        <div className=\"placeholder\">\n+                          <Plus size={24} />\n+                          <span>Upload Image</span>\n+                        </div>\n+                      )}\n+                    </div>\n+                    \n+                    {/* Only show carousel arrows if there are images */}\n+                    {item.images.some(img => img) && (\n+                      <>\n+                        <button \n+                          className=\"carousel-arrow left\"\n+                          onClick={() => {\n+                            const newIndex = ((item.currentImageIndex - 1) + 3) % 3;\n+                            handleItemUpdate(item.id, { currentImageIndex: newIndex });\n+                          }}\n+                        >\n+                          <ChevronLeft size={16} />\n+                        </button>\n+                        <button \n+                          className=\"carousel-arrow right\"\n+                          onClick={() => {\n+                            const newIndex = (item.currentImageIndex + 1) % 3;\n+                            handleItemUpdate(item.id, { currentImageIndex: newIndex });\n+                          }}\n+                        >\n+                          <ChevronRight size={16} />\n+                        </button>\n+                      </>\n+                    )}\n+\n+                    {/* Add/Remove button */}\n+                    {item.images[item.currentImageIndex] && (\n+                      <button \n+                        className=\"add-image\"\n+                        onClick={() => {\n+                          const newImages = [...item.images];\n+                          newImages[item.currentImageIndex] = null;\n+                          handleItemUpdate(item.id, { images: newImages });\n+                        }}\n+                      >\n+                        <X size={16} />\n+                      </button>\n+                    )}\n+\n+                    <input\n+                      type=\"file\"\n+                      id={`image-upload-${item.id}-${item.currentImageIndex}`}\n+                      accept=\"image/*\"\n+                      style={{ display: 'none' }}\n+                      onChange={(e) => {\n+                        if (e.target.files?.[0]) {\n+                          const newImages = [...item.images];\n+                          newImages[item.currentImageIndex] = e.target.files[0];\n+                          handleItemUpdate(item.id, { images: newImages });\n+                        }\n+                      }}\n+                    />\n+                  </ItemImageContainer>\n+                  <ItemContent>\n+                    <EditableText\n+                      value={item.name}\n+                      onChange={(value) => handleItemUpdate(item.id, { name: value })}\n+                      placeholder=\"Item Name\"\n+                      theme={shopData?.theme}\n+                    />\n+                    <EditableText\n+                      value={item.price}\n+                      onChange={(value) => handleItemUpdate(item.id, { price: value })}\n+                      placeholder=\"Price\"\n+                      theme={shopData?.theme}\n+                    />\n+                    <EditableText\n+                      value={item.description}\n+                      onChange={(value) => handleItemUpdate(item.id, { description: value })}\n+                      placeholder=\"Item Description\"\n+                      multiline\n+                      theme={shopData?.theme}\n+                    />\n+                    <ZipCodeInput\n+                      value={item.zipCode || ''}\n+                      onChange={(e) => handleItemUpdate(item.id, { zipCode: e.target.value })}\n+                      placeholder=\"ZIP Code\"\n+                      maxLength=\"5\"\n+                      pattern=\"[0-9]*\"\n+                    />\n+                  </ItemContent>\n+                </ItemCard>\n+              ))}\n+            </ItemGrid>\n+\n+              <AddItemButton onClick={handleAddItem} theme={shopData?.theme}>\n+                <Plus size={20} />\n+                Add Item\n+              </AddItemButton>\n+            </>\n+          )}\n+\n+          {activeTab === 'home' && (\n+            <div>\n+              <EditableText\n+                value={shopData?.mission}\n+                onChange={(value) => saveShopData({ mission: value })}\n+                placeholder=\"Your Shop's Mission\"\n+                multiline\n+                theme={shopData?.theme}\n+              />\n+              {/* Add more home page customization options */}\n+            </div>\n+          )}\n+\n+          {activeTab === 'community' && (\n+            <div>\n+              {/* Add community customization options */}\n+            </div>\n+          )}\n+        </MainContent>\n+      </PageContainer>\n+      </PageTransitionWrapper>\n+    </ThemeProvider>\n+  );\n+};\n+\n+export default ShopPage;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1735710734057,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -350,17 +350,12 @@\n       try {\n         const shopDoc = await getDoc(doc(db, 'shops', userId));\n         if (shopDoc.exists()) {\n           const data = shopDoc.data();\n-          console.log('Loaded shop data:', data); // Debug log\n           setShopData(data);\n-        } else {\n-          console.log('No shop data found');\n         }\n       } catch (error) {\n         console.error('Error loading shop data:', error);\n-      } finally {\n-        setLoading(false);\n       }\n     };\n \n     \n@@ -792,806 +787,5 @@\n     </ThemeProvider>\n   );\n };\n \n-export default ShopPage;\n-// src/pages/shop/ShopPage.js\n-\n-import React, { useState, useEffect } from 'react';\n-import { useNavigate } from 'react-router-dom';\n-import styled, { ThemeProvider } from 'styled-components';\n-import { auth, db } from '../../firebase/config';\n-import { doc, getDoc, updateDoc } from 'firebase/firestore';\n-import { Plus, ChevronLeft, ChevronRight, X } from 'lucide-react';\n-import TabPositioner from './components/TabPositioner';\n-import EditableText from './components/EditableComponents/EditableText';\n-import EditableImage from './components/EditableComponents/EditableImage';\n-import { DEFAULT_THEME } from './LiveShopCreation';\n-import { ref, uploadBytes, getDownloadURL } from 'firebase/storage';\n-import { storage } from '../../firebase/config';\n-import PageTransitionWrapper from '../../components/PageTransition';\n-\n-const PageContainer = styled.div`\n-  min-height: 100vh;\n-  background: ${props => props.theme?.colors?.background || DEFAULT_THEME.colors.background};\n-  color: ${props => props.theme?.colors?.text || DEFAULT_THEME.colors.text};\n-  padding-top: 80px;\n-  position: relative;\n-  overflow-x: hidden;\n-`;\n-\n-const ShopProfileSection = styled.div`\n-  display: flex;\n-  flex-direction: column;\n-  align-items: center;\n-  text-align: center;\n-  max-width: 800px;\n-  margin: 0 auto 3rem auto;\n-  padding: 2rem;\n-\n-  .profile-image {\n-    margin-bottom: 2rem;\n-    width: 150px;\n-    height: 150px;\n-    border-radius: 50%;\n-    overflow: hidden;\n-    background: rgba(0, 0, 0, 0.1);\n-    \n-    img {\n-      width: 100%;\n-      height: 100%;\n-      object-fit: cover;\n-    }\n-\n-    .placeholder {\n-      width: 100%;\n-      height: 100%;\n-      display: flex;\n-      flex-direction: column;\n-      align-items: center;\n-      justify-content: center;\n-      gap: 0.5rem;\n-      color: ${props => props.theme?.colors?.text || '#fff'};\n-      opacity: 0.5;\n-      cursor: pointer;\n-      \n-      span {\n-        font-size: 0.9rem;\n-      }\n-    }\n-  }\n-\n-  .shop-info {\n-    width: 100%;\n-  }\n-`;\n-\n-const ItemImageContainer = styled.div`\n-  position: relative;\n-  height: 250px;\n-  width: 100%;\n-  display: flex;\n-  overflow: hidden;\n-  background: rgba(0, 0, 0, 0.1);\n-\n-  .image-container {\n-    width: 100%;\n-    height: 100%;\n-    position: relative;\n-  }\n-\n-  .placeholder {\n-    width: 100%;\n-    height: 100%;\n-    display: flex;\n-    flex-direction: column;\n-    align-items: center;\n-    justify-content: center;\n-    gap: 0.5rem;\n-    color: ${props => props.theme?.colors?.text || '#fff'};\n-    opacity: 0.5;\n-    cursor: pointer;\n-    \n-    span {\n-      font-size: 0.9rem;\n-    }\n-  }\n-\n-  .carousel-arrow {\n-    position: absolute;\n-    top: 50%;\n-    transform: translateY(-50%);\n-    background: rgba(0, 0, 0, 0.5);\n-    border: none;\n-    border-radius: 50%;\n-    width: 32px;\n-    height: 32px;\n-    display: flex;\n-    align-items: center;\n-    justify-content: center;\n-    color: white;\n-    cursor: pointer;\n-    z-index: 2;\n-    transition: all 0.3s ease;\n-\n-    &:hover {\n-      background: rgba(0, 0, 0, 0.8);\n-    }\n-\n-    &.left {\n-      left: 10px;\n-    }\n-\n-    &.right {\n-      right: 10px;\n-    }\n-  }\n-\n-  .add-image {\n-    position: absolute;\n-    top: 10px;\n-    right: 10px;\n-    background: rgba(0, 0, 0, 0.5);\n-    border: none;\n-    border-radius: 50%;\n-    width: 32px;\n-    height: 32px;\n-    display: flex;\n-    align-items: center;\n-    justify-content: center;\n-    color: white;\n-    cursor: pointer;\n-    z-index: 2;\n-    transition: all 0.3s ease;\n-\n-    &:hover {\n-      background: rgba(0, 0, 0, 0.8);\n-    }\n-  }\n-`;\n-\n-\n-const ShopBanner = styled.div`\n-  position: fixed;\n-  top: 0;\n-  left: 0;\n-  right: 0;\n-  height: 80px;\n-  background: ${props => `${props.theme?.colors?.background || DEFAULT_THEME.colors.background}CC`};\n-  backdrop-filter: blur(10px);\n-  display: flex;\n-  align-items: center;\n-  justify-content: space-between;\n-  padding: 0 2rem;\n-  z-index: 100;\n-  border-bottom: 1px solid ${props => `${props.theme?.colors?.accent || DEFAULT_THEME.colors.accent}30`};\n-`;\n-\n-const UploadingOverlay = styled.div`\n-  position: absolute;\n-  top: 0;\n-  left: 0;\n-  right: 0;\n-  bottom: 0;\n-  background: rgba(0, 0, 0, 0.5);\n-  display: flex;\n-  align-items: center;\n-  justify-content: center;\n-  color: white;\n-  z-index: 3;\n-`;\n-\n-const ItemContent = styled.div`\n-  padding: 1.5rem;\n-  display: flex;\n-  flex-direction: column;\n-  gap: 1rem;\n-  height: calc(100% - 250px); // This ensures the content takes the remaining space\n-  overflow-y: auto;\n-\n-  input, textarea {\n-    background: rgba(255, 255, 255, 0.05);\n-    border: 1px solid rgba(255, 255, 255, 0.1);\n-    border-radius: ${props => props.theme?.styles?.borderRadius || '8px'};\n-    padding: 0.8rem;\n-    color: ${props => props.theme?.colors?.text};\n-    \n-    &:focus {\n-      outline: none;\n-      border-color: ${props => props.theme?.colors?.accent};\n-    }\n-  }\n-`;\n-\n-const ShopName = styled.div`\n-  flex: 1;\n-  text-align: ${props => props.position};\n-  font-family: ${props => props.theme?.fonts?.heading || DEFAULT_THEME.fonts.heading};\n-  font-size: 1.8rem;\n-  padding: ${props => props.position === 'center' ? '0 80px' : '0'};\n-`;\n-\n-const MainContent = styled.div`\n-  max-width: ${props => props.theme?.styles?.containerWidth || DEFAULT_THEME.styles.containerWidth};\n-  margin: 0 auto;\n-  padding: 2rem;\n-  position: relative;\n-  z-index: 1;\n-`;\n-\n-const LoadingSpinner = styled.div`\n-  width: 20px;\n-  height: 20px;\n-  border: 2px solid rgba(255, 255, 255, 0.3);\n-  border-radius: 50%;\n-  border-top-color: white;\n-  animation: spin 1s linear infinite;\n-\n-  @keyframes spin {\n-    to {\n-      transform: rotate(360deg);\n-    }\n-  }\n-`;\n-\n-const LoadingIndicator = styled.div`\n-  display: flex;\n-  justify-content: center;\n-  align-items: center;\n-  min-height: 50vh;\n-  font-size: 1.2rem;\n-  color: ${props => props.theme?.colors?.text || DEFAULT_THEME.colors.text};\n-`;\n-\n-const ItemGrid = styled.div`\n-  display: grid;\n-  grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));\n-  gap: 2rem;\n-  margin-bottom: 2rem;\n-`;\n-\n-const ItemCard = styled.div`\n-  background: rgba(255, 255, 255, 0.05);\n-  border-radius: ${props => props.theme?.styles?.borderRadius || '12px'};\n-  overflow: hidden;\n-  border: 1px solid rgba(255, 255, 255, 0.1);\n-  width: 100%;\n-  height: 500px;\n-\n-  .item-content {\n-    padding: 1.5rem;\n-  }\n-`;\n-\n-const ZipCodeInput = styled.input`\n-  background: rgba(255, 255, 255, 0.05);\n-  border: 1px solid rgba(255, 255, 255, 0.1);\n-  padding: 0.5rem;\n-  border-radius: 4px;\n-  color: ${props => props.theme?.colors?.text};\n-  margin-top: 0.5rem;\n-  width: 100%;\n-\n-  &:focus {\n-    outline: none;\n-    border-color: ${props => props.theme?.colors?.accent};\n-  }\n-`;\n-\n-const AddItemButton = styled.button`\n-  background: ${props => props.theme?.colors?.primary};\n-  color: ${props => props.theme?.colors?.text};\n-  border: none;\n-  border-radius: 8px;\n-  padding: 1rem;\n-  display: flex;\n-  align-items: center;\n-  gap: 0.5rem;\n-  cursor: pointer;\n-  margin: 2rem auto;\n-  transition: all 0.3s;\n-\n-  &:hover {\n-    transform: translateY(-2px);\n-  }\n-`;\n-\n-const cleanDataForFirestore = (data) => {\n-  if (!data) return data;\n-  \n-  if (Array.isArray(data)) {\n-    return data.map(item => cleanDataForFirestore(item));\n-  }\n-  \n-  if (typeof data === 'object' && !(data instanceof Date)) {\n-    const cleanedData = {};\n-    for (const [key, value] of Object.entries(data)) {\n-      // Skip file objects\n-      if (value instanceof File) continue;\n-      // Skip null/undefined values\n-      if (value === null || value === undefined) continue;\n-      cleanedData[key] = cleanDataForFirestore(value);\n-    }\n-    return cleanedData;\n-  }\n-  \n-  return data;\n-};\n-\n-const ShopPage = () => {\n-  const navigate = useNavigate();\n-  const [shopData, setShopData] = useState(null);\n-  const [loading, setLoading] = useState(true);\n-  const [activeTab, setActiveTab] = useState('shop');\n-  const [saving, setSaving] = useState(false);\n-  const [uploading, setUploading] = useState({});\n-\n-  // Load shop data\n-  useEffect(() => {\n-    console.log('Current profile image value:', shopData?.profile);\n-  }, [shopData?.profile]);\n-\n-  useEffect(() => {\n-    if (shopData?.profile && typeof shopData.profile === 'string') {\n-      // Pre-load the image\n-      const img = new Image();\n-      img.src = shopData.profile;\n-      img.onload = () => {\n-        // Force a re-render when image loads\n-        setShopData(prev => ({...prev}));\n-      };\n-    }\n-  }, [shopData?.profile]);\n-\n-  useEffect(() => {\n-    const loadShopData = async (userId) => {\n-      try {\n-        const shopDoc = await getDoc(doc(db, 'shops', userId));\n-        if (shopDoc.exists()) {\n-          const data = shopDoc.data();\n-          console.log('Loaded shop data:', data); // Debug log\n-          setShopData(data);\n-        } else {\n-          console.log('No shop data found');\n-        }\n-      } catch (error) {\n-        console.error('Error loading shop data:', error);\n-      } finally {\n-        setLoading(false);\n-      }\n-    };\n-\n-    \n-\n-    const unsubscribe = auth.onAuthStateChanged((user) => {\n-      if (!user) {\n-        navigate('/auth');\n-        return;\n-      }\n-      loadShopData(user.uid);\n-    });\n-\n-    return () => unsubscribe();\n-  }, [navigate]);\n-\n-  const handleUpdateShop = async (updates) => {\n-    if (!auth.currentUser) return;\n-    \n-    try {\n-      setSaving(true);\n-      console.log('Updating shop with:', updates); // Debug log\n-      \n-      let finalUpdates = { ...updates };\n-      \n-      // Handle profile image upload\n-      if (updates.profile?.file instanceof File) {\n-        const file = updates.profile.file;\n-        const metadata = {\n-          contentType: file.type || 'image/jpeg',\n-          cacheControl: 'public,max-age=3600',\n-          customMetadata: {\n-            'Access-Control-Allow-Origin': '*'\n-          }\n-        };\n-        \n-        const profileRef = ref(\n-          storage, \n-          `shops/${auth.currentUser.uid}/profile/profile-${Date.now()}`\n-        );\n-        \n-        const snapshot = await uploadBytes(profileRef, file, metadata);\n-        const imageUrl = await getDownloadURL(snapshot.ref);\n-        \n-        // Update with image URL instead of file\n-        finalUpdates = {\n-          ...finalUpdates,\n-          profile: imageUrl\n-        };\n-      }\n-  \n-      // Update Firestore\n-      const shopRef = doc(db, 'shops', auth.currentUser.uid);\n-      await updateDoc(shopRef, {\n-        ...finalUpdates,\n-        updatedAt: new Date().toISOString()\n-      });\n-  \n-      // Update local state\n-      setShopData(prev => ({\n-        ...prev,\n-        ...finalUpdates\n-      }));\n-  \n-      console.log('Shop update successful:', finalUpdates);\n-    } catch (error) {\n-      console.error('Error updating shop:', error);\n-    } finally {\n-      setSaving(false);\n-    }\n-  };\n-\n-  const logImageState = (image) => {\n-    if (!image) return 'null';\n-    if (typeof image === 'string') return `URL: ${image}`;\n-    if (image instanceof File) return `File: ${image.name}`;\n-    if (image?.file instanceof File) return `File Object: ${image.file.name}`;\n-    return `Unknown type: ${typeof image}`;\n-  };\n-\n-  // Handle item updates\n-  const handleItemUpdate = async (itemId, updates) => {\n-    if (!auth.currentUser) return;\n-  \n-    try {\n-      setSaving(true);\n-      console.log('Updating item with:', updates); // Debug log\n-  \n-      const currentItem = shopData.items.find(item => item.id === itemId);\n-      let updatedItem = { ...currentItem, ...updates };\n-  \n-      // Handle image uploads if present\n-      if (updates.images) {\n-        const processedImages = await Promise.all(updates.images.map(async (image, index) => {\n-          // If it's a URL or null, keep it\n-          if (!image || typeof image === 'string') return image;\n-          \n-          // If it's a File object, upload it\n-          if (image instanceof File || image?.file instanceof File) {\n-            const file = image instanceof File ? image : image.file;\n-            try {\n-              const metadata = {\n-                contentType: file.type || 'image/jpeg',\n-                cacheControl: 'public,max-age=3600'\n-              };\n-              \n-              const imageRef = ref(\n-                storage, \n-                `shops/${auth.currentUser.uid}/items/${itemId}/image-${index}-${Date.now()}`\n-              );\n-              \n-              const snapshot = await uploadBytes(imageRef, file, metadata);\n-              return await getDownloadURL(snapshot.ref);\n-            } catch (uploadError) {\n-              console.error(`Failed to upload image ${index}:`, uploadError);\n-              return null;\n-            }\n-          }\n-          return null;\n-        }));\n-  \n-        updatedItem.images = processedImages;\n-      }\n-  \n-      // Update in Firestore\n-      const shopRef = doc(db, 'shops', auth.currentUser.uid);\n-      const updatedItems = shopData.items.map(item =>\n-        item.id === itemId ? updatedItem : item\n-      );\n-  \n-      await updateDoc(shopRef, {\n-        items: updatedItems,\n-        updatedAt: new Date().toISOString()\n-      });\n-  \n-      // Update local state\n-      setShopData(prev => ({\n-        ...prev,\n-        items: updatedItems\n-      }));\n-  \n-      console.log('Item updated successfully:', updatedItem); // Debug log\n-    } catch (error) {\n-      console.error('Error updating item:', error);\n-    } finally {\n-      setSaving(false);\n-    }\n-  };\n-  \n-    // Save shop data\n-  const saveShopData = async (updates) => {\n-    if (!auth.currentUser) return;\n-    setSaving(true);\n-    try {\n-      const shopRef = doc(db, 'shops', auth.currentUser.uid);\n-      await updateDoc(shopRef, {\n-        ...updates,\n-        updatedAt: new Date().toISOString()\n-      });\n-      setShopData(prev => ({ ...prev, ...updates }));\n-    } catch (error) {\n-      console.error('Error saving shop data:', error);\n-    } finally {\n-      setSaving(false);\n-    }\n-  };\n-\n-  const handleAddItem = () => {\n-    const newItem = {\n-      id: Date.now().toString(),\n-      name: 'New Item',\n-      price: '',\n-      description: '',\n-      zipCode: '',\n-      images: [null, null, null],\n-      currentImageIndex: 0\n-    };\n-\n-    const updatedItems = [...(shopData.items || []), newItem];\n-    saveShopData({ items: updatedItems });\n-  };\n-\n-  if (loading) {\n-    return <LoadingIndicator>Loading your shop...</LoadingIndicator>;\n-  }\n-\n-  return (\n-    <ThemeProvider theme={shopData?.theme || DEFAULT_THEME}>\n-      <PageTransitionWrapper>\n-      <PageContainer>\n-        <ShopBanner>\n-          <EditableText\n-            value={shopData?.name}\n-            onChange={(value) => saveShopData({ name: value })}\n-            placeholder=\"Your Shop Name\"\n-            theme={shopData?.theme}\n-          />\n-        </ShopBanner>\n-\n-        <TabPositioner\n-          position={shopData?.layout?.tabPosition || 'top'}\n-          activeTab={activeTab}\n-          onTabChange={setActiveTab}\n-          tabs={[\n-            { id: 'shop', label: 'Shop' },\n-            { id: 'home', label: 'Home' },\n-            { id: 'community', label: 'Community' }\n-          ]}\n-          theme={shopData?.theme}\n-        />\n-\n-        <MainContent>\n-        {activeTab === 'shop' && (\n-          <>\n-            <ShopProfileSection>\n-            <div className=\"profile-image\">\n-              {shopData?.profile && typeof shopData.profile === 'string' ? (\n-                // If we have a URL string, show the image directly\n-                <img \n-                  src={shopData.profile} \n-                  alt=\"Profile\" \n-                  style={{ \n-                    width: '100%',\n-                    height: '100%',\n-                    objectFit: 'cover',\n-                    cursor: 'pointer'\n-                  }}\n-                  onClick={() => {\n-                    // Allow changing the image by clicking on it\n-                    const input = document.createElement('input');\n-                    input.type = 'file';\n-                    input.accept = 'image/*';\n-                    input.onchange = (e) => {\n-                      if (e.target.files?.[0]) {\n-                        handleUpdateShop({ \n-                          profile: {\n-                            file: e.target.files[0],\n-                            type: e.target.files[0].type\n-                          }\n-                        });\n-                      }\n-                    };\n-                    input.click();\n-                  }}\n-                />\n-              ) : (\n-                // If no image URL, show the EditableImage component\n-                <EditableImage\n-                  value={null}\n-                  onChange={(value) => {\n-                    console.log('Profile image update:', value);\n-                    if (value instanceof File) {\n-                      handleUpdateShop({ \n-                        profile: {\n-                          file: value,\n-                          type: value.type\n-                        }\n-                      });\n-                    }\n-                  }}\n-                  theme={shopData?.theme}\n-                  round\n-                  width=\"150px\"\n-                  height=\"150px\"\n-                  style={{ \n-                    width: '150px',\n-                    height: '150px',\n-                    borderRadius: '50%',\n-                    objectFit: 'cover'\n-                  }}\n-                />\n-              )}\n-            </div>\n-              <div className=\"shop-info\">\n-                <EditableText\n-                  value={shopData?.name}\n-                  onChange={(value) => handleUpdateShop({ name: value })}\n-                  placeholder=\"Shop Name\"\n-                  theme={shopData?.theme}\n-                />\n-                <EditableText\n-                  value={shopData?.description}\n-                  onChange={(value) => handleUpdateShop({ description: value })}\n-                  placeholder=\"Shop Description\"\n-                  multiline\n-                  theme={shopData?.theme}\n-                />\n-              </div>\n-            </ShopProfileSection>\n-\n-            <ItemGrid>\n-              {shopData?.items?.map(item => (\n-                <ItemCard key={item.id}>\n-                  <ItemImageContainer>\n-                    {uploading[item.id] && (\n-                      <UploadingOverlay>\n-                        <LoadingSpinner />\n-                      </UploadingOverlay>\n-                    )}\n-                    <div \n-                      className=\"image-container\"\n-                      onClick={() => {\n-                        if (!item.images[item.currentImageIndex]) {\n-                          document.getElementById(`image-upload-${item.id}-${item.currentImageIndex}`).click();\n-                        }\n-                      }}\n-                    >\n-                      {item.images[item.currentImageIndex] ? (\n-                        <img \n-                          src={item.images[item.currentImageIndex]} \n-                          alt={item.name}\n-                          style={{ width: '100%', height: '100%', objectFit: 'cover' }}\n-                        />\n-                      ) : (\n-                        <div className=\"placeholder\">\n-                          <Plus size={24} />\n-                          <span>Upload Image</span>\n-                        </div>\n-                      )}\n-                    </div>\n-                    \n-                    {/* Only show carousel arrows if there are images */}\n-                    {item.images.some(img => img) && (\n-                      <>\n-                        <button \n-                          className=\"carousel-arrow left\"\n-                          onClick={() => {\n-                            const newIndex = ((item.currentImageIndex - 1) + 3) % 3;\n-                            handleItemUpdate(item.id, { currentImageIndex: newIndex });\n-                          }}\n-                        >\n-                          <ChevronLeft size={16} />\n-                        </button>\n-                        <button \n-                          className=\"carousel-arrow right\"\n-                          onClick={() => {\n-                            const newIndex = (item.currentImageIndex + 1) % 3;\n-                            handleItemUpdate(item.id, { currentImageIndex: newIndex });\n-                          }}\n-                        >\n-                          <ChevronRight size={16} />\n-                        </button>\n-                      </>\n-                    )}\n-\n-                    {/* Add/Remove button */}\n-                    {item.images[item.currentImageIndex] && (\n-                      <button \n-                        className=\"add-image\"\n-                        onClick={() => {\n-                          const newImages = [...item.images];\n-                          newImages[item.currentImageIndex] = null;\n-                          handleItemUpdate(item.id, { images: newImages });\n-                        }}\n-                      >\n-                        <X size={16} />\n-                      </button>\n-                    )}\n-\n-                    <input\n-                      type=\"file\"\n-                      id={`image-upload-${item.id}-${item.currentImageIndex}`}\n-                      accept=\"image/*\"\n-                      style={{ display: 'none' }}\n-                      onChange={(e) => {\n-                        if (e.target.files?.[0]) {\n-                          const newImages = [...item.images];\n-                          newImages[item.currentImageIndex] = e.target.files[0];\n-                          handleItemUpdate(item.id, { images: newImages });\n-                        }\n-                      }}\n-                    />\n-                  </ItemImageContainer>\n-                  <ItemContent>\n-                    <EditableText\n-                      value={item.name}\n-                      onChange={(value) => handleItemUpdate(item.id, { name: value })}\n-                      placeholder=\"Item Name\"\n-                      theme={shopData?.theme}\n-                    />\n-                    <EditableText\n-                      value={item.price}\n-                      onChange={(value) => handleItemUpdate(item.id, { price: value })}\n-                      placeholder=\"Price\"\n-                      theme={shopData?.theme}\n-                    />\n-                    <EditableText\n-                      value={item.description}\n-                      onChange={(value) => handleItemUpdate(item.id, { description: value })}\n-                      placeholder=\"Item Description\"\n-                      multiline\n-                      theme={shopData?.theme}\n-                    />\n-                    <ZipCodeInput\n-                      value={item.zipCode || ''}\n-                      onChange={(e) => handleItemUpdate(item.id, { zipCode: e.target.value })}\n-                      placeholder=\"ZIP Code\"\n-                      maxLength=\"5\"\n-                      pattern=\"[0-9]*\"\n-                    />\n-                  </ItemContent>\n-                </ItemCard>\n-              ))}\n-            </ItemGrid>\n-\n-              <AddItemButton onClick={handleAddItem} theme={shopData?.theme}>\n-                <Plus size={20} />\n-                Add Item\n-              </AddItemButton>\n-            </>\n-          )}\n-\n-          {activeTab === 'home' && (\n-            <div>\n-              <EditableText\n-                value={shopData?.mission}\n-                onChange={(value) => saveShopData({ mission: value })}\n-                placeholder=\"Your Shop's Mission\"\n-                multiline\n-                theme={shopData?.theme}\n-              />\n-              {/* Add more home page customization options */}\n-            </div>\n-          )}\n-\n-          {activeTab === 'community' && (\n-            <div>\n-              {/* Add community customization options */}\n-            </div>\n-          )}\n-        </MainContent>\n-      </PageContainer>\n-      </PageTransitionWrapper>\n-    </ThemeProvider>\n-  );\n-};\n-\n export default ShopPage;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1735710964868,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -236,17 +236,8 @@\n     }\n   }\n `;\n \n-const LoadingIndicator = styled.div`\n-  display: flex;\n-  justify-content: center;\n-  align-items: center;\n-  min-height: 50vh;\n-  font-size: 1.2rem;\n-  color: ${props => props.theme?.colors?.text || DEFAULT_THEME.colors.text};\n-`;\n-\n const ItemGrid = styled.div`\n   display: grid;\n   grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));\n   gap: 2rem;\n"
                },
                {
                    "date": 1735711908608,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -190,8 +190,9 @@\n   flex-direction: column;\n   gap: 1rem;\n   height: calc(100% - 250px); // This ensures the content takes the remaining space\n   overflow-y: auto;\n+  ${ScrollableContainer}\n \n   input, textarea {\n     background: rgba(255, 255, 255, 0.05);\n     border: 1px solid rgba(255, 255, 255, 0.1);\n"
                },
                {
                    "date": 1735711928436,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,8 +22,36 @@\n   position: relative;\n   overflow-x: hidden;\n `;\n \n+const ScrollableContainer = css`\n+  ::-webkit-scrollbar {\n+    width: 8px;\n+    background: transparent;\n+  }\n+\n+  ::-webkit-scrollbar-track {\n+    background: transparent;\n+  }\n+\n+  ::-webkit-scrollbar-thumb {\n+    background: rgba(255, 255, 255, 0.1);\n+    border-radius: 8px;\n+    border: 2px solid transparent;\n+    background-clip: padding-box;\n+  }\n+\n+  ::-webkit-scrollbar-thumb:hover {\n+    background: rgba(255, 255, 255, 0.2);\n+    border: 2px solid transparent;\n+    background-clip: padding-box;\n+  }\n+\n+  /* Firefox */\n+  scrollbar-width: thin;\n+  scrollbar-color: rgba(255, 255, 255, 0.1) transparent;\n+`;\n+\n const ShopProfileSection = styled.div`\n   display: flex;\n   flex-direction: column;\n   align-items: center;\n"
                },
                {
                    "date": 1735712047811,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,36 +22,8 @@\n   position: relative;\n   overflow-x: hidden;\n `;\n \n-const ScrollableContainer = css`\n-  ::-webkit-scrollbar {\n-    width: 8px;\n-    background: transparent;\n-  }\n-\n-  ::-webkit-scrollbar-track {\n-    background: transparent;\n-  }\n-\n-  ::-webkit-scrollbar-thumb {\n-    background: rgba(255, 255, 255, 0.1);\n-    border-radius: 8px;\n-    border: 2px solid transparent;\n-    background-clip: padding-box;\n-  }\n-\n-  ::-webkit-scrollbar-thumb:hover {\n-    background: rgba(255, 255, 255, 0.2);\n-    border: 2px solid transparent;\n-    background-clip: padding-box;\n-  }\n-\n-  /* Firefox */\n-  scrollbar-width: thin;\n-  scrollbar-color: rgba(255, 255, 255, 0.1) transparent;\n-`;\n-\n const ShopProfileSection = styled.div`\n   display: flex;\n   flex-direction: column;\n   align-items: center;\n"
                },
                {
                    "date": 1735712068373,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,8 +12,9 @@\n import { DEFAULT_THEME } from './LiveShopCreation';\n import { ref, uploadBytes, getDownloadURL } from 'firebase/storage';\n import { storage } from '../../firebase/config';\n import PageTransitionWrapper from '../../components/PageTransition';\n+import { ScrollableContainer } from '../../styles/GlobalStyles';\n \n const PageContainer = styled.div`\n   min-height: 100vh;\n   background: ${props => props.theme?.colors?.background || DEFAULT_THEME.colors.background};\n"
                },
                {
                    "date": 1735712435167,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n import { Plus, ChevronLeft, ChevronRight, X } from 'lucide-react';\n import TabPositioner from './components/TabPositioner';\n import EditableText from './components/EditableComponents/EditableText';\n import EditableImage from './components/EditableComponents/EditableImage';\n-import { DEFAULT_THEME } from './LiveShopCreation';\n+import { DEFAULT_THEME } from '../../theme/theme';\n import { ref, uploadBytes, getDownloadURL } from 'firebase/storage';\n import { storage } from '../../firebase/config';\n import PageTransitionWrapper from '../../components/PageTransition';\n import { ScrollableContainer } from '../../styles/GlobalStyles';\n"
                },
                {
                    "date": 1735713212739,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -315,9 +315,18 @@\n };\n \n const ShopPage = () => {\n   const navigate = useNavigate();\n-  const [shopData, setShopData] = useState(null);\n+  const [shopData, setShopData] = useState({\n+    name: '',\n+    description: '',\n+    profile: null,\n+    items: [],\n+    layout: {\n+      tabPosition: 'top'\n+    },\n+    theme: DEFAULT_THEME\n+  });\n   const [activeTab, setActiveTab] = useState('shop');\n   const [saving, setSaving] = useState(false);\n   const [uploading, setUploading] = useState({});\n \n@@ -348,12 +357,10 @@\n         }\n       } catch (error) {\n         console.error('Error loading shop data:', error);\n       }\n-    };\n+    };    \n \n-    \n-\n     const unsubscribe = auth.onAuthStateChanged((user) => {\n       if (!user) {\n         navigate('/auth');\n         return;\n"
                },
                {
                    "date": 1735713284172,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,8 @@\n import { DEFAULT_THEME } from '../../theme/theme';\n import { ref, uploadBytes, getDownloadURL } from 'firebase/storage';\n import { storage } from '../../firebase/config';\n import PageTransitionWrapper from '../../components/PageTransition';\n-import { ScrollableContainer } from '../../styles/GlobalStyles';\n \n const PageContainer = styled.div`\n   min-height: 100vh;\n   background: ${props => props.theme?.colors?.background || DEFAULT_THEME.colors.background};\n@@ -191,9 +190,8 @@\n   flex-direction: column;\n   gap: 1rem;\n   height: calc(100% - 250px); // This ensures the content takes the remaining space\n   overflow-y: auto;\n-  ${ScrollableContainer}\n \n   input, textarea {\n     background: rgba(255, 255, 255, 0.05);\n     border: 1px solid rgba(255, 255, 255, 0.1);\n"
                },
                {
                    "date": 1735713672039,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,8 @@\n import EditableImage from './components/EditableComponents/EditableImage';\n import { DEFAULT_THEME } from '../../theme/theme';\n import { ref, uploadBytes, getDownloadURL } from 'firebase/storage';\n import { storage } from '../../firebase/config';\n-import PageTransitionWrapper from '../../components/PageTransition';\n \n const PageContainer = styled.div`\n   min-height: 100vh;\n   background: ${props => props.theme?.colors?.background || DEFAULT_THEME.colors.background};\n@@ -536,9 +535,8 @@\n   };\n \n   return (\n     <ThemeProvider theme={shopData?.theme || DEFAULT_THEME}>\n-      <PageTransitionWrapper>\n       <PageContainer>\n         <ShopBanner>\n           <EditableText\n             value={shopData?.name}\n@@ -780,9 +778,8 @@\n             </div>\n           )}\n         </MainContent>\n       </PageContainer>\n-      </PageTransitionWrapper>\n     </ThemeProvider>\n   );\n };\n \n"
                },
                {
                    "date": 1735713894663,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -312,8 +312,9 @@\n };\n \n const ShopPage = () => {\n   const navigate = useNavigate();\n+  const [isReady, setIsReady] = useState(false);\n   const [shopData, setShopData] = useState({\n     name: '',\n     description: '',\n     profile: null,\n"
                },
                {
                    "date": 1735714242004,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -312,50 +312,26 @@\n };\n \n const ShopPage = () => {\n   const navigate = useNavigate();\n-  const [isReady, setIsReady] = useState(false);\n-  const [shopData, setShopData] = useState({\n-    name: '',\n-    description: '',\n-    profile: null,\n-    items: [],\n-    layout: {\n-      tabPosition: 'top'\n-    },\n-    theme: DEFAULT_THEME\n-  });\n+  const [shopData, setShopData] = useState(null); // Keep as null initially\n+  const [isReady, setIsReady] = useState(false);  // Add this state\n   const [activeTab, setActiveTab] = useState('shop');\n   const [saving, setSaving] = useState(false);\n   const [uploading, setUploading] = useState({});\n \n-  // Load shop data\n   useEffect(() => {\n-    console.log('Current profile image value:', shopData?.profile);\n-  }, [shopData?.profile]);\n-\n-  useEffect(() => {\n-    if (shopData?.profile && typeof shopData.profile === 'string') {\n-      // Pre-load the image\n-      const img = new Image();\n-      img.src = shopData.profile;\n-      img.onload = () => {\n-        // Force a re-render when image loads\n-        setShopData(prev => ({...prev}));\n-      };\n-    }\n-  }, [shopData?.profile]);\n-\n-  useEffect(() => {\n     const loadShopData = async (userId) => {\n       try {\n         const shopDoc = await getDoc(doc(db, 'shops', userId));\n         if (shopDoc.exists()) {\n           const data = shopDoc.data();\n           setShopData(data);\n         }\n+        setIsReady(true); // Set ready after data is loaded\n       } catch (error) {\n         console.error('Error loading shop data:', error);\n+        setIsReady(true); // Still set ready even on error\n       }\n     };    \n \n     const unsubscribe = auth.onAuthStateChanged((user) => {\n@@ -368,174 +344,13 @@\n \n     return () => unsubscribe();\n   }, [navigate]);\n \n-  const handleUpdateShop = async (updates) => {\n-    if (!auth.currentUser) return;\n-    \n-    try {\n-      setSaving(true);\n-      console.log('Updating shop with:', updates); // Debug log\n-      \n-      let finalUpdates = { ...updates };\n-      \n-      // Handle profile image upload\n-      if (updates.profile?.file instanceof File) {\n-        const file = updates.profile.file;\n-        const metadata = {\n-          contentType: file.type || 'image/jpeg',\n-          cacheControl: 'public,max-age=3600',\n-          customMetadata: {\n-            'Access-Control-Allow-Origin': '*'\n-          }\n-        };\n-        \n-        const profileRef = ref(\n-          storage, \n-          `shops/${auth.currentUser.uid}/profile/profile-${Date.now()}`\n-        );\n-        \n-        const snapshot = await uploadBytes(profileRef, file, metadata);\n-        const imageUrl = await getDownloadURL(snapshot.ref);\n-        \n-        // Update with image URL instead of file\n-        finalUpdates = {\n-          ...finalUpdates,\n-          profile: imageUrl\n-        };\n-      }\n-  \n-      // Update Firestore\n-      const shopRef = doc(db, 'shops', auth.currentUser.uid);\n-      await updateDoc(shopRef, {\n-        ...finalUpdates,\n-        updatedAt: new Date().toISOString()\n-      });\n-  \n-      // Update local state\n-      setShopData(prev => ({\n-        ...prev,\n-        ...finalUpdates\n-      }));\n-  \n-      console.log('Shop update successful:', finalUpdates);\n-    } catch (error) {\n-      console.error('Error updating shop:', error);\n-    } finally {\n-      setSaving(false);\n-    }\n-  };\n+  // Don't render anything until ready\n+  if (!isReady) {\n+    return null;\n+  }\n \n-  const logImageState = (image) => {\n-    if (!image) return 'null';\n-    if (typeof image === 'string') return `URL: ${image}`;\n-    if (image instanceof File) return `File: ${image.name}`;\n-    if (image?.file instanceof File) return `File Object: ${image.file.name}`;\n-    return `Unknown type: ${typeof image}`;\n-  };\n-\n-  // Handle item updates\n-  const handleItemUpdate = async (itemId, updates) => {\n-    if (!auth.currentUser) return;\n-  \n-    try {\n-      setSaving(true);\n-      console.log('Updating item with:', updates); // Debug log\n-  \n-      const currentItem = shopData.items.find(item => item.id === itemId);\n-      let updatedItem = { ...currentItem, ...updates };\n-  \n-      // Handle image uploads if present\n-      if (updates.images) {\n-        const processedImages = await Promise.all(updates.images.map(async (image, index) => {\n-          // If it's a URL or null, keep it\n-          if (!image || typeof image === 'string') return image;\n-          \n-          // If it's a File object, upload it\n-          if (image instanceof File || image?.file instanceof File) {\n-            const file = image instanceof File ? image : image.file;\n-            try {\n-              const metadata = {\n-                contentType: file.type || 'image/jpeg',\n-                cacheControl: 'public,max-age=3600'\n-              };\n-              \n-              const imageRef = ref(\n-                storage, \n-                `shops/${auth.currentUser.uid}/items/${itemId}/image-${index}-${Date.now()}`\n-              );\n-              \n-              const snapshot = await uploadBytes(imageRef, file, metadata);\n-              return await getDownloadURL(snapshot.ref);\n-            } catch (uploadError) {\n-              console.error(`Failed to upload image ${index}:`, uploadError);\n-              return null;\n-            }\n-          }\n-          return null;\n-        }));\n-  \n-        updatedItem.images = processedImages;\n-      }\n-  \n-      // Update in Firestore\n-      const shopRef = doc(db, 'shops', auth.currentUser.uid);\n-      const updatedItems = shopData.items.map(item =>\n-        item.id === itemId ? updatedItem : item\n-      );\n-  \n-      await updateDoc(shopRef, {\n-        items: updatedItems,\n-        updatedAt: new Date().toISOString()\n-      });\n-  \n-      // Update local state\n-      setShopData(prev => ({\n-        ...prev,\n-        items: updatedItems\n-      }));\n-  \n-      console.log('Item updated successfully:', updatedItem); // Debug log\n-    } catch (error) {\n-      console.error('Error updating item:', error);\n-    } finally {\n-      setSaving(false);\n-    }\n-  };\n-  \n-    // Save shop data\n-  const saveShopData = async (updates) => {\n-    if (!auth.currentUser) return;\n-    setSaving(true);\n-    try {\n-      const shopRef = doc(db, 'shops', auth.currentUser.uid);\n-      await updateDoc(shopRef, {\n-        ...updates,\n-        updatedAt: new Date().toISOString()\n-      });\n-      setShopData(prev => ({ ...prev, ...updates }));\n-    } catch (error) {\n-      console.error('Error saving shop data:', error);\n-    } finally {\n-      setSaving(false);\n-    }\n-  };\n-\n-  const handleAddItem = () => {\n-    const newItem = {\n-      id: Date.now().toString(),\n-      name: 'New Item',\n-      price: '',\n-      description: '',\n-      zipCode: '',\n-      images: [null, null, null],\n-      currentImageIndex: 0\n-    };\n-\n-    const updatedItems = [...(shopData.items || []), newItem];\n-    saveShopData({ items: updatedItems });\n-  };\n-\n   return (\n     <ThemeProvider theme={shopData?.theme || DEFAULT_THEME}>\n       <PageContainer>\n         <ShopBanner>\n"
                },
                {
                    "date": 1735714324639,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -349,8 +349,174 @@\n   if (!isReady) {\n     return null;\n   }\n \n+  const handleUpdateShop = async (updates) => {\n+    if (!auth.currentUser) return;\n+    \n+    try {\n+      setSaving(true);\n+      console.log('Updating shop with:', updates); // Debug log\n+      \n+      let finalUpdates = { ...updates };\n+      \n+      // Handle profile image upload\n+      if (updates.profile?.file instanceof File) {\n+        const file = updates.profile.file;\n+        const metadata = {\n+          contentType: file.type || 'image/jpeg',\n+          cacheControl: 'public,max-age=3600',\n+          customMetadata: {\n+            'Access-Control-Allow-Origin': '*'\n+          }\n+        };\n+        \n+        const profileRef = ref(\n+          storage, \n+          `shops/${auth.currentUser.uid}/profile/profile-${Date.now()}`\n+        );\n+        \n+        const snapshot = await uploadBytes(profileRef, file, metadata);\n+        const imageUrl = await getDownloadURL(snapshot.ref);\n+        \n+        // Update with image URL instead of file\n+        finalUpdates = {\n+          ...finalUpdates,\n+          profile: imageUrl\n+        };\n+      }\n+  \n+      // Update Firestore\n+      const shopRef = doc(db, 'shops', auth.currentUser.uid);\n+      await updateDoc(shopRef, {\n+        ...finalUpdates,\n+        updatedAt: new Date().toISOString()\n+      });\n+  \n+      // Update local state\n+      setShopData(prev => ({\n+        ...prev,\n+        ...finalUpdates\n+      }));\n+  \n+      console.log('Shop update successful:', finalUpdates);\n+    } catch (error) {\n+      console.error('Error updating shop:', error);\n+    } finally {\n+      setSaving(false);\n+    }\n+  };\n+\n+  const logImageState = (image) => {\n+    if (!image) return 'null';\n+    if (typeof image === 'string') return `URL: ${image}`;\n+    if (image instanceof File) return `File: ${image.name}`;\n+    if (image?.file instanceof File) return `File Object: ${image.file.name}`;\n+    return `Unknown type: ${typeof image}`;\n+  };\n+\n+  // Handle item updates\n+  const handleItemUpdate = async (itemId, updates) => {\n+    if (!auth.currentUser) return;\n+  \n+    try {\n+      setSaving(true);\n+      console.log('Updating item with:', updates); // Debug log\n+  \n+      const currentItem = shopData.items.find(item => item.id === itemId);\n+      let updatedItem = { ...currentItem, ...updates };\n+  \n+      // Handle image uploads if present\n+      if (updates.images) {\n+        const processedImages = await Promise.all(updates.images.map(async (image, index) => {\n+          // If it's a URL or null, keep it\n+          if (!image || typeof image === 'string') return image;\n+          \n+          // If it's a File object, upload it\n+          if (image instanceof File || image?.file instanceof File) {\n+            const file = image instanceof File ? image : image.file;\n+            try {\n+              const metadata = {\n+                contentType: file.type || 'image/jpeg',\n+                cacheControl: 'public,max-age=3600'\n+              };\n+              \n+              const imageRef = ref(\n+                storage, \n+                `shops/${auth.currentUser.uid}/items/${itemId}/image-${index}-${Date.now()}`\n+              );\n+              \n+              const snapshot = await uploadBytes(imageRef, file, metadata);\n+              return await getDownloadURL(snapshot.ref);\n+            } catch (uploadError) {\n+              console.error(`Failed to upload image ${index}:`, uploadError);\n+              return null;\n+            }\n+          }\n+          return null;\n+        }));\n+  \n+        updatedItem.images = processedImages;\n+      }\n+  \n+      // Update in Firestore\n+      const shopRef = doc(db, 'shops', auth.currentUser.uid);\n+      const updatedItems = shopData.items.map(item =>\n+        item.id === itemId ? updatedItem : item\n+      );\n+  \n+      await updateDoc(shopRef, {\n+        items: updatedItems,\n+        updatedAt: new Date().toISOString()\n+      });\n+  \n+      // Update local state\n+      setShopData(prev => ({\n+        ...prev,\n+        items: updatedItems\n+      }));\n+  \n+      console.log('Item updated successfully:', updatedItem); // Debug log\n+    } catch (error) {\n+      console.error('Error updating item:', error);\n+    } finally {\n+      setSaving(false);\n+    }\n+  };\n+  \n+    // Save shop data\n+  const saveShopData = async (updates) => {\n+    if (!auth.currentUser) return;\n+    setSaving(true);\n+    try {\n+      const shopRef = doc(db, 'shops', auth.currentUser.uid);\n+      await updateDoc(shopRef, {\n+        ...updates,\n+        updatedAt: new Date().toISOString()\n+      });\n+      setShopData(prev => ({ ...prev, ...updates }));\n+    } catch (error) {\n+      console.error('Error saving shop data:', error);\n+    } finally {\n+      setSaving(false);\n+    }\n+  };\n+\n+  const handleAddItem = () => {\n+    const newItem = {\n+      id: Date.now().toString(),\n+      name: 'New Item',\n+      price: '',\n+      description: '',\n+      zipCode: '',\n+      images: [null, null, null],\n+      currentImageIndex: 0\n+    };\n+\n+    const updatedItems = [...(shopData.items || []), newItem];\n+    saveShopData({ items: updatedItems });\n+  };\n+\n   return (\n     <ThemeProvider theme={shopData?.theme || DEFAULT_THEME}>\n       <PageContainer>\n         <ShopBanner>\n"
                },
                {
                    "date": 1735865001918,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,761 @@\n+// src/pages/shop/ShopPage.js\n+\n+import React, { useState, useEffect } from 'react';\n+import { useNavigate } from 'react-router-dom';\n+import styled, { ThemeProvider } from 'styled-components';\n+import { auth, db } from '../../firebase/config';\n+import { doc, getDoc, updateDoc } from 'firebase/firestore';\n+import { Plus, ChevronLeft, ChevronRight, X } from 'lucide-react';\n+import TabPositioner from './components/TabPositioner';\n+import EditableText from './components/EditableComponents/EditableText';\n+import EditableImage from './components/EditableComponents/EditableImage';\n+import { DEFAULT_THEME } from '../../theme/theme';\n+import { ref, uploadBytes, getDownloadURL } from 'firebase/storage';\n+import { storage } from '../../firebase/config';\n+\n+const PageContainer = styled.div`\n+  min-height: 100vh;\n+  background: ${props => props.theme?.colors?.background || DEFAULT_THEME.colors.background};\n+  color: ${props => props.theme?.colors?.text || DEFAULT_THEME.colors.text};\n+  padding-top: 80px;\n+  position: relative;\n+  overflow-x: hidden;\n+`;\n+\n+const ShopProfileSection = styled.div`\n+  display: flex;\n+  flex-direction: column;\n+  align-items: center;\n+  text-align: center;\n+  max-width: 800px;\n+  margin: 0 auto 3rem auto;\n+  padding: 2rem;\n+\n+  .profile-image {\n+    margin-bottom: 2rem;\n+    width: 150px;\n+    height: 150px;\n+    border-radius: 50%;\n+    overflow: hidden;\n+    background: rgba(0, 0, 0, 0.1);\n+    \n+    img {\n+      width: 100%;\n+      height: 100%;\n+      object-fit: cover;\n+    }\n+  }\n+\n+  .shop-name {\n+    margin-bottom: 1rem;\n+    font-family: ${props => props.theme?.fonts?.heading};\n+    font-size: 2.5rem;\n+    background: ${props => `linear-gradient(45deg, ${props.theme?.colors?.primary}, ${props.theme?.colors?.accent})`};\n+    -webkit-background-clip: text;\n+    -webkit-text-fill-color: transparent;\n+  }\n+\n+  .shop-description {\n+    color: ${props => props.theme?.colors?.text};\n+    opacity: 0.8;\n+  }\n+`;\n+\n+const ItemImageContainer = styled.div`\n+  position: relative;\n+  height: 250px;\n+  width: 100%;\n+  display: flex;\n+  overflow: hidden;\n+  background: rgba(0, 0, 0, 0.1);\n+\n+  .image-container {\n+    width: 100%;\n+    height: 100%;\n+    position: relative;\n+  }\n+\n+  .placeholder {\n+    width: 100%;\n+    height: 100%;\n+    display: flex;\n+    flex-direction: column;\n+    align-items: center;\n+    justify-content: center;\n+    gap: 0.5rem;\n+    color: ${props => props.theme?.colors?.text || '#fff'};\n+    opacity: 0.5;\n+    cursor: pointer;\n+    \n+    span {\n+      font-size: 0.9rem;\n+    }\n+  }\n+\n+  .carousel-arrow {\n+    position: absolute;\n+    top: 50%;\n+    transform: translateY(-50%);\n+    background: rgba(0, 0, 0, 0.5);\n+    border: none;\n+    border-radius: 50%;\n+    width: 32px;\n+    height: 32px;\n+    display: flex;\n+    align-items: center;\n+    justify-content: center;\n+    color: white;\n+    cursor: pointer;\n+    z-index: 2;\n+    transition: all 0.3s ease;\n+\n+    &:hover {\n+      background: rgba(0, 0, 0, 0.8);\n+    }\n+\n+    &.left {\n+      left: 10px;\n+    }\n+\n+    &.right {\n+      right: 10px;\n+    }\n+  }\n+\n+  .add-image {\n+    position: absolute;\n+    top: 10px;\n+    right: 10px;\n+    background: rgba(0, 0, 0, 0.5);\n+    border: none;\n+    border-radius: 50%;\n+    width: 32px;\n+    height: 32px;\n+    display: flex;\n+    align-items: center;\n+    justify-content: center;\n+    color: white;\n+    cursor: pointer;\n+    z-index: 2;\n+    transition: all 0.3s ease;\n+\n+    &:hover {\n+      background: rgba(0, 0, 0, 0.8);\n+    }\n+  }\n+`;\n+\n+\n+const ShopBanner = styled.div`\n+  position: fixed;\n+  top: 0;\n+  left: 0;\n+  right: 0;\n+  height: 80px;\n+  background: ${props => `${props.theme?.colors?.background || DEFAULT_THEME.colors.background}CC`};\n+  backdrop-filter: blur(10px);\n+  display: flex;\n+  align-items: center;\n+  justify-content: space-between;\n+  padding: 0 2rem;\n+  z-index: 100;\n+  border-bottom: 1px solid ${props => `${props.theme?.colors?.accent || DEFAULT_THEME.colors.accent}30`};\n+`;\n+\n+const UploadingOverlay = styled.div`\n+  position: absolute;\n+  top: 0;\n+  left: 0;\n+  right: 0;\n+  bottom: 0;\n+  background: rgba(0, 0, 0, 0.5);\n+  display: flex;\n+  align-items: center;\n+  justify-content: center;\n+  color: white;\n+  z-index: 3;\n+`;\n+\n+const ItemContent = styled.div`\n+  padding: 1.5rem;\n+  display: flex;\n+  flex-direction: column;\n+  gap: 1rem;\n+  height: calc(100% - 250px); // This ensures the content takes the remaining space\n+  overflow-y: auto;\n+\n+  input, textarea {\n+    background: rgba(255, 255, 255, 0.05);\n+    border: 1px solid rgba(255, 255, 255, 0.1);\n+    border-radius: ${props => props.theme?.styles?.borderRadius || '8px'};\n+    padding: 0.8rem;\n+    color: ${props => props.theme?.colors?.text};\n+    \n+    &:focus {\n+      outline: none;\n+      border-color: ${props => props.theme?.colors?.accent};\n+    }\n+  }\n+`;\n+\n+const ShopName = styled.div`\n+  flex: 1;\n+  text-align: ${props => props.position};\n+  font-family: ${props => props.theme?.fonts?.heading || DEFAULT_THEME.fonts.heading};\n+  font-size: 1.8rem;\n+  padding: ${props => props.position === 'center' ? '0 80px' : '0'};\n+`;\n+\n+const MainContent = styled.div`\n+  max-width: ${props => props.theme?.styles?.containerWidth || DEFAULT_THEME.styles.containerWidth};\n+  margin: 0 auto;\n+  padding: 2rem;\n+  position: relative;\n+  z-index: 1;\n+`;\n+\n+const LoadingSpinner = styled.div`\n+  width: 20px;\n+  height: 20px;\n+  border: 2px solid rgba(255, 255, 255, 0.3);\n+  border-radius: 50%;\n+  border-top-color: white;\n+  animation: spin 1s linear infinite;\n+\n+  @keyframes spin {\n+    to {\n+      transform: rotate(360deg);\n+    }\n+  }\n+`;\n+\n+const ItemGrid = styled.div`\n+  display: grid;\n+  grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));\n+  gap: 2rem;\n+  margin-bottom: 2rem;\n+`;\n+\n+const ItemCard = styled.div`\n+  background: rgba(255, 255, 255, 0.05);\n+  border-radius: ${props => props.theme?.styles?.borderRadius || '12px'};\n+  overflow: hidden;\n+  border: 1px solid rgba(255, 255, 255, 0.1);\n+  width: 100%;\n+  height: 500px;\n+\n+  .item-content {\n+    padding: 1.5rem;\n+  }\n+`;\n+\n+const ZipCodeInput = styled.input`\n+  background: rgba(255, 255, 255, 0.05);\n+  border: 1px solid rgba(255, 255, 255, 0.1);\n+  padding: 0.5rem;\n+  border-radius: 4px;\n+  color: ${props => props.theme?.colors?.text};\n+  margin-top: 0.5rem;\n+  width: 100%;\n+\n+  &:focus {\n+    outline: none;\n+    border-color: ${props => props.theme?.colors?.accent};\n+  }\n+`;\n+\n+const AddItemButton = styled.button`\n+  background: ${props => props.theme?.colors?.primary};\n+  color: ${props => props.theme?.colors?.text};\n+  border: none;\n+  border-radius: 8px;\n+  padding: 1rem;\n+  display: flex;\n+  align-items: center;\n+  gap: 0.5rem;\n+  cursor: pointer;\n+  margin: 2rem auto;\n+  transition: all 0.3s;\n+\n+  &:hover {\n+    transform: translateY(-2px);\n+  }\n+`;\n+\n+const cleanDataForFirestore = (data) => {\n+  if (!data) return data;\n+  \n+  if (Array.isArray(data)) {\n+    return data.map(item => cleanDataForFirestore(item));\n+  }\n+  \n+  if (typeof data === 'object' && !(data instanceof Date)) {\n+    const cleanedData = {};\n+    for (const [key, value] of Object.entries(data)) {\n+      // Skip file objects\n+      if (value instanceof File) continue;\n+      // Skip null/undefined values\n+      if (value === null || value === undefined) continue;\n+      cleanedData[key] = cleanDataForFirestore(value);\n+    }\n+    return cleanedData;\n+  }\n+  \n+  return data;\n+};\n+\n+const ShopPage = () => {\n+  const navigate = useNavigate();\n+  const [shopData, setShopData] = useState(null); // Keep as null initially\n+  const [isReady, setIsReady] = useState(false);  // Add this state\n+  const [activeTab, setActiveTab] = useState('shop');\n+  const [saving, setSaving] = useState(false);\n+  const [uploading, setUploading] = useState({});\n+\n+  useEffect(() => {\n+    const loadShopData = async (userId) => {\n+      try {\n+        const shopDoc = await getDoc(doc(db, 'shops', userId));\n+        if (shopDoc.exists()) {\n+          const data = shopDoc.data();\n+          setShopData(data);\n+        }\n+        setIsReady(true); // Set ready after data is loaded\n+      } catch (error) {\n+        console.error('Error loading shop data:', error);\n+        setIsReady(true); // Still set ready even on error\n+      }\n+    };    \n+\n+    const unsubscribe = auth.onAuthStateChanged((user) => {\n+      if (!user) {\n+        navigate('/auth');\n+        return;\n+      }\n+      loadShopData(user.uid);\n+    });\n+\n+    return () => unsubscribe();\n+  }, [navigate]);\n+\n+  // Don't render anything until ready\n+  if (!isReady) {\n+    return null;\n+  }\n+\n+  const handleUpdateShop = async (updates) => {\n+    if (!auth.currentUser) return;\n+    \n+    try {\n+      setSaving(true);\n+      console.log('Updating shop with:', updates); // Debug log\n+      \n+      let finalUpdates = { ...updates };\n+      \n+      // Handle profile image upload\n+      if (updates.profile?.file instanceof File) {\n+        const file = updates.profile.file;\n+        const metadata = {\n+          contentType: file.type || 'image/jpeg',\n+          cacheControl: 'public,max-age=3600',\n+          customMetadata: {\n+            'Access-Control-Allow-Origin': '*'\n+          }\n+        };\n+        \n+        const profileRef = ref(\n+          storage, \n+          `shops/${auth.currentUser.uid}/profile/profile-${Date.now()}`\n+        );\n+        \n+        const snapshot = await uploadBytes(profileRef, file, metadata);\n+        const imageUrl = await getDownloadURL(snapshot.ref);\n+        \n+        // Update with image URL instead of file\n+        finalUpdates = {\n+          ...finalUpdates,\n+          profile: imageUrl\n+        };\n+      }\n+  \n+      // Update Firestore\n+      const shopRef = doc(db, 'shops', auth.currentUser.uid);\n+      await updateDoc(shopRef, {\n+        ...finalUpdates,\n+        updatedAt: new Date().toISOString()\n+      });\n+  \n+      // Update local state\n+      setShopData(prev => ({\n+        ...prev,\n+        ...finalUpdates\n+      }));\n+  \n+      console.log('Shop update successful:', finalUpdates);\n+    } catch (error) {\n+      console.error('Error updating shop:', error);\n+    } finally {\n+      setSaving(false);\n+    }\n+  };\n+\n+  const logImageState = (image) => {\n+    if (!image) return 'null';\n+    if (typeof image === 'string') return `URL: ${image}`;\n+    if (image instanceof File) return `File: ${image.name}`;\n+    if (image?.file instanceof File) return `File Object: ${image.file.name}`;\n+    return `Unknown type: ${typeof image}`;\n+  };\n+\n+  // Handle item updates\n+  const handleItemUpdate = async (itemId, updates) => {\n+    if (!auth.currentUser) return;\n+  \n+    try {\n+      setSaving(true);\n+      console.log('Updating item with:', updates); // Debug log\n+  \n+      const currentItem = shopData.items.find(item => item.id === itemId);\n+      let updatedItem = { ...currentItem, ...updates };\n+  \n+      // Handle image uploads if present\n+      if (updates.images) {\n+        const processedImages = await Promise.all(updates.images.map(async (image, index) => {\n+          // If it's a URL or null, keep it\n+          if (!image || typeof image === 'string') return image;\n+          \n+          // If it's a File object, upload it\n+          if (image instanceof File || image?.file instanceof File) {\n+            const file = image instanceof File ? image : image.file;\n+            try {\n+              const metadata = {\n+                contentType: file.type || 'image/jpeg',\n+                cacheControl: 'public,max-age=3600'\n+              };\n+              \n+              const imageRef = ref(\n+                storage, \n+                `shops/${auth.currentUser.uid}/items/${itemId}/image-${index}-${Date.now()}`\n+              );\n+              \n+              const snapshot = await uploadBytes(imageRef, file, metadata);\n+              return await getDownloadURL(snapshot.ref);\n+            } catch (uploadError) {\n+              console.error(`Failed to upload image ${index}:`, uploadError);\n+              return null;\n+            }\n+          }\n+          return null;\n+        }));\n+  \n+        updatedItem.images = processedImages;\n+      }\n+  \n+      // Update in Firestore\n+      const shopRef = doc(db, 'shops', auth.currentUser.uid);\n+      const updatedItems = shopData.items.map(item =>\n+        item.id === itemId ? updatedItem : item\n+      );\n+  \n+      await updateDoc(shopRef, {\n+        items: updatedItems,\n+        updatedAt: new Date().toISOString()\n+      });\n+  \n+      // Update local state\n+      setShopData(prev => ({\n+        ...prev,\n+        items: updatedItems\n+      }));\n+  \n+      console.log('Item updated successfully:', updatedItem); // Debug log\n+    } catch (error) {\n+      console.error('Error updating item:', error);\n+    } finally {\n+      setSaving(false);\n+    }\n+  };\n+  \n+    // Save shop data\n+  const saveShopData = async (updates) => {\n+    if (!auth.currentUser) return;\n+    setSaving(true);\n+    try {\n+      const shopRef = doc(db, 'shops', auth.currentUser.uid);\n+      await updateDoc(shopRef, {\n+        ...updates,\n+        updatedAt: new Date().toISOString()\n+      });\n+      setShopData(prev => ({ ...prev, ...updates }));\n+    } catch (error) {\n+      console.error('Error saving shop data:', error);\n+    } finally {\n+      setSaving(false);\n+    }\n+  };\n+\n+  const handleAddItem = () => {\n+    const newItem = {\n+      id: Date.now().toString(),\n+      name: 'New Item',\n+      price: '',\n+      description: '',\n+      zipCode: '',\n+      images: [null, null, null],\n+      currentImageIndex: 0\n+    };\n+\n+    const updatedItems = [...(shopData.items || []), newItem];\n+    saveShopData({ items: updatedItems });\n+  };\n+\n+  return (\n+    <ThemeProvider theme={shopData?.theme || DEFAULT_THEME}>\n+      <PageContainer>\n+        <ShopBanner>\n+          <EditableText\n+            value={shopData?.name}\n+            onChange={(value) => saveShopData({ name: value })}\n+            placeholder=\"Your Shop Name\"\n+            theme={shopData?.theme}\n+          />\n+        </ShopBanner>\n+\n+        <TabPositioner\n+          position={shopData?.layout?.tabPosition || 'top'}\n+          activeTab={activeTab}\n+          onTabChange={setActiveTab}\n+          tabs={[\n+            { id: 'shop', label: 'Shop' },\n+            { id: 'home', label: 'Home' },\n+            { id: 'community', label: 'Community' }\n+          ]}\n+          theme={shopData?.theme}\n+        />\n+\n+        <MainContent>\n+        {activeTab === 'shop' && (\n+          <>\n+            <ShopProfileSection>\n+            <div className=\"profile-image\">\n+              {shopData?.profile && typeof shopData.profile === 'string' ? (\n+                // If we have a URL string, show the image directly\n+                <img \n+                  src={shopData.profile} \n+                  alt=\"Profile\" \n+                  style={{ \n+                    width: '100%',\n+                    height: '100%',\n+                    objectFit: 'cover',\n+                    cursor: 'pointer'\n+                  }}\n+                  onClick={() => {\n+                    // Allow changing the image by clicking on it\n+                    const input = document.createElement('input');\n+                    input.type = 'file';\n+                    input.accept = 'image/*';\n+                    input.onchange = (e) => {\n+                      if (e.target.files?.[0]) {\n+                        handleUpdateShop({ \n+                          profile: {\n+                            file: e.target.files[0],\n+                            type: e.target.files[0].type\n+                          }\n+                        });\n+                      }\n+                    };\n+                    input.click();\n+                  }}\n+                />\n+              ) : (\n+                // If no image URL, show the EditableImage component\n+                <EditableImage\n+                  value={null}\n+                  onChange={(value) => {\n+                    console.log('Profile image update:', value);\n+                    if (value instanceof File) {\n+                      handleUpdateShop({ \n+                        profile: {\n+                          file: value,\n+                          type: value.type\n+                        }\n+                      });\n+                    }\n+                  }}\n+                  theme={shopData?.theme}\n+                  round\n+                  width=\"150px\"\n+                  height=\"150px\"\n+                  style={{ \n+                    width: '150px',\n+                    height: '150px',\n+                    borderRadius: '50%',\n+                    objectFit: 'cover'\n+                  }}\n+                />\n+              )}\n+            </div>\n+              <div className=\"shop-info\">\n+                <EditableText\n+                  value={shopData?.name}\n+                  onChange={(value) => handleUpdateShop({ name: value })}\n+                  placeholder=\"Shop Name\"\n+                  theme={shopData?.theme}\n+                />\n+                <EditableText\n+                  value={shopData?.description}\n+                  onChange={(value) => handleUpdateShop({ description: value })}\n+                  placeholder=\"Shop Description\"\n+                  multiline\n+                  theme={shopData?.theme}\n+                />\n+              </div>\n+            </ShopProfileSection>\n+\n+            <ItemGrid>\n+              {shopData?.items?.map(item => (\n+                <ItemCard key={item.id}>\n+                  <ItemImageContainer>\n+                    {uploading[item.id] && (\n+                      <UploadingOverlay>\n+                        <LoadingSpinner />\n+                      </UploadingOverlay>\n+                    )}\n+                    <div \n+                      className=\"image-container\"\n+                      onClick={() => {\n+                        if (!item.images[item.currentImageIndex]) {\n+                          document.getElementById(`image-upload-${item.id}-${item.currentImageIndex}`).click();\n+                        }\n+                      }}\n+                    >\n+                      {item.images[item.currentImageIndex] ? (\n+                        <img \n+                          src={item.images[item.currentImageIndex]} \n+                          alt={item.name}\n+                          style={{ width: '100%', height: '100%', objectFit: 'cover' }}\n+                        />\n+                      ) : (\n+                        <div className=\"placeholder\">\n+                          <Plus size={24} />\n+                          <span>Upload Image</span>\n+                        </div>\n+                      )}\n+                    </div>\n+                    \n+                    {/* Only show carousel arrows if there are images */}\n+                    {item.images.some(img => img) && (\n+                      <>\n+                        <button \n+                          className=\"carousel-arrow left\"\n+                          onClick={() => {\n+                            const newIndex = ((item.currentImageIndex - 1) + 3) % 3;\n+                            handleItemUpdate(item.id, { currentImageIndex: newIndex });\n+                          }}\n+                        >\n+                          <ChevronLeft size={16} />\n+                        </button>\n+                        <button \n+                          className=\"carousel-arrow right\"\n+                          onClick={() => {\n+                            const newIndex = (item.currentImageIndex + 1) % 3;\n+                            handleItemUpdate(item.id, { currentImageIndex: newIndex });\n+                          }}\n+                        >\n+                          <ChevronRight size={16} />\n+                        </button>\n+                      </>\n+                    )}\n+\n+                    {/* Add/Remove button */}\n+                    {item.images[item.currentImageIndex] && (\n+                      <button \n+                        className=\"add-image\"\n+                        onClick={() => {\n+                          const newImages = [...item.images];\n+                          newImages[item.currentImageIndex] = null;\n+                          handleItemUpdate(item.id, { images: newImages });\n+                        }}\n+                      >\n+                        <X size={16} />\n+                      </button>\n+                    )}\n+\n+                    <input\n+                      type=\"file\"\n+                      id={`image-upload-${item.id}-${item.currentImageIndex}`}\n+                      accept=\"image/*\"\n+                      style={{ display: 'none' }}\n+                      onChange={(e) => {\n+                        if (e.target.files?.[0]) {\n+                          const newImages = [...item.images];\n+                          newImages[item.currentImageIndex] = e.target.files[0];\n+                          handleItemUpdate(item.id, { images: newImages });\n+                        }\n+                      }}\n+                    />\n+                  </ItemImageContainer>\n+                  <ItemContent>\n+                    <EditableText\n+                      value={item.name}\n+                      onChange={(value) => handleItemUpdate(item.id, { name: value })}\n+                      placeholder=\"Item Name\"\n+                      theme={shopData?.theme}\n+                    />\n+                    <EditableText\n+                      value={item.price}\n+                      onChange={(value) => handleItemUpdate(item.id, { price: value })}\n+                      placeholder=\"Price\"\n+                      theme={shopData?.theme}\n+                    />\n+                    <EditableText\n+                      value={item.description}\n+                      onChange={(value) => handleItemUpdate(item.id, { description: value })}\n+                      placeholder=\"Item Description\"\n+                      multiline\n+                      theme={shopData?.theme}\n+                    />\n+                    <ZipCodeInput\n+                      value={item.zipCode || ''}\n+                      onChange={(e) => handleItemUpdate(item.id, { zipCode: e.target.value })}\n+                      placeholder=\"ZIP Code\"\n+                      maxLength=\"5\"\n+                      pattern=\"[0-9]*\"\n+                    />\n+                  </ItemContent>\n+                </ItemCard>\n+              ))}\n+            </ItemGrid>\n+\n+              <AddItemButton onClick={handleAddItem} theme={shopData?.theme}>\n+                <Plus size={20} />\n+                Add Item\n+              </AddItemButton>\n+            </>\n+          )}\n+\n+          {activeTab === 'home' && (\n+            <div>\n+              <EditableText\n+                value={shopData?.mission}\n+                onChange={(value) => saveShopData({ mission: value })}\n+                placeholder=\"Your Shop's Mission\"\n+                multiline\n+                theme={shopData?.theme}\n+              />\n+              {/* Add more home page customization options */}\n+            </div>\n+          )}\n+\n+          {activeTab === 'community' && (\n+            <div>\n+              {/* Add community customization options */}\n+            </div>\n+          )}\n+        </MainContent>\n+      </PageContainer>\n+    </ThemeProvider>\n+  );\n+};\n+\n+export default ShopPage;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1735865173567,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,8 @@\n const PageContainer = styled.div`\n   min-height: 100vh;\n   background: ${props => props.theme?.colors?.background || DEFAULT_THEME.colors.background};\n   color: ${props => props.theme?.colors?.text || DEFAULT_THEME.colors.text};\n-  padding-top: 80px;\n   position: relative;\n   overflow-x: hidden;\n `;\n \n@@ -757,773 +756,5 @@\n     </ThemeProvider>\n   );\n };\n \n-export default ShopPage;\n-// src/pages/shop/ShopPage.js\n-\n-import React, { useState, useEffect } from 'react';\n-import { useNavigate } from 'react-router-dom';\n-import styled, { ThemeProvider } from 'styled-components';\n-import { auth, db } from '../../firebase/config';\n-import { doc, getDoc, updateDoc } from 'firebase/firestore';\n-import { Plus, ChevronLeft, ChevronRight, X } from 'lucide-react';\n-import TabPositioner from './components/TabPositioner';\n-import EditableText from './components/EditableComponents/EditableText';\n-import EditableImage from './components/EditableComponents/EditableImage';\n-import { DEFAULT_THEME } from '../../theme/theme';\n-import { ref, uploadBytes, getDownloadURL } from 'firebase/storage';\n-import { storage } from '../../firebase/config';\n-\n-const PageContainer = styled.div`\n-  min-height: 100vh;\n-  background: ${props => props.theme?.colors?.background || DEFAULT_THEME.colors.background};\n-  color: ${props => props.theme?.colors?.text || DEFAULT_THEME.colors.text};\n-  padding-top: 80px;\n-  position: relative;\n-  overflow-x: hidden;\n-`;\n-\n-const ShopProfileSection = styled.div`\n-  display: flex;\n-  flex-direction: column;\n-  align-items: center;\n-  text-align: center;\n-  max-width: 800px;\n-  margin: 0 auto 3rem auto;\n-  padding: 2rem;\n-\n-  .profile-image {\n-    margin-bottom: 2rem;\n-    width: 150px;\n-    height: 150px;\n-    border-radius: 50%;\n-    overflow: hidden;\n-    background: rgba(0, 0, 0, 0.1);\n-    \n-    img {\n-      width: 100%;\n-      height: 100%;\n-      object-fit: cover;\n-    }\n-\n-    .placeholder {\n-      width: 100%;\n-      height: 100%;\n-      display: flex;\n-      flex-direction: column;\n-      align-items: center;\n-      justify-content: center;\n-      gap: 0.5rem;\n-      color: ${props => props.theme?.colors?.text || '#fff'};\n-      opacity: 0.5;\n-      cursor: pointer;\n-      \n-      span {\n-        font-size: 0.9rem;\n-      }\n-    }\n-  }\n-\n-  .shop-info {\n-    width: 100%;\n-  }\n-`;\n-\n-const ItemImageContainer = styled.div`\n-  position: relative;\n-  height: 250px;\n-  width: 100%;\n-  display: flex;\n-  overflow: hidden;\n-  background: rgba(0, 0, 0, 0.1);\n-\n-  .image-container {\n-    width: 100%;\n-    height: 100%;\n-    position: relative;\n-  }\n-\n-  .placeholder {\n-    width: 100%;\n-    height: 100%;\n-    display: flex;\n-    flex-direction: column;\n-    align-items: center;\n-    justify-content: center;\n-    gap: 0.5rem;\n-    color: ${props => props.theme?.colors?.text || '#fff'};\n-    opacity: 0.5;\n-    cursor: pointer;\n-    \n-    span {\n-      font-size: 0.9rem;\n-    }\n-  }\n-\n-  .carousel-arrow {\n-    position: absolute;\n-    top: 50%;\n-    transform: translateY(-50%);\n-    background: rgba(0, 0, 0, 0.5);\n-    border: none;\n-    border-radius: 50%;\n-    width: 32px;\n-    height: 32px;\n-    display: flex;\n-    align-items: center;\n-    justify-content: center;\n-    color: white;\n-    cursor: pointer;\n-    z-index: 2;\n-    transition: all 0.3s ease;\n-\n-    &:hover {\n-      background: rgba(0, 0, 0, 0.8);\n-    }\n-\n-    &.left {\n-      left: 10px;\n-    }\n-\n-    &.right {\n-      right: 10px;\n-    }\n-  }\n-\n-  .add-image {\n-    position: absolute;\n-    top: 10px;\n-    right: 10px;\n-    background: rgba(0, 0, 0, 0.5);\n-    border: none;\n-    border-radius: 50%;\n-    width: 32px;\n-    height: 32px;\n-    display: flex;\n-    align-items: center;\n-    justify-content: center;\n-    color: white;\n-    cursor: pointer;\n-    z-index: 2;\n-    transition: all 0.3s ease;\n-\n-    &:hover {\n-      background: rgba(0, 0, 0, 0.8);\n-    }\n-  }\n-`;\n-\n-\n-const ShopBanner = styled.div`\n-  position: fixed;\n-  top: 0;\n-  left: 0;\n-  right: 0;\n-  height: 80px;\n-  background: ${props => `${props.theme?.colors?.background || DEFAULT_THEME.colors.background}CC`};\n-  backdrop-filter: blur(10px);\n-  display: flex;\n-  align-items: center;\n-  justify-content: space-between;\n-  padding: 0 2rem;\n-  z-index: 100;\n-  border-bottom: 1px solid ${props => `${props.theme?.colors?.accent || DEFAULT_THEME.colors.accent}30`};\n-`;\n-\n-const UploadingOverlay = styled.div`\n-  position: absolute;\n-  top: 0;\n-  left: 0;\n-  right: 0;\n-  bottom: 0;\n-  background: rgba(0, 0, 0, 0.5);\n-  display: flex;\n-  align-items: center;\n-  justify-content: center;\n-  color: white;\n-  z-index: 3;\n-`;\n-\n-const ItemContent = styled.div`\n-  padding: 1.5rem;\n-  display: flex;\n-  flex-direction: column;\n-  gap: 1rem;\n-  height: calc(100% - 250px); // This ensures the content takes the remaining space\n-  overflow-y: auto;\n-\n-  input, textarea {\n-    background: rgba(255, 255, 255, 0.05);\n-    border: 1px solid rgba(255, 255, 255, 0.1);\n-    border-radius: ${props => props.theme?.styles?.borderRadius || '8px'};\n-    padding: 0.8rem;\n-    color: ${props => props.theme?.colors?.text};\n-    \n-    &:focus {\n-      outline: none;\n-      border-color: ${props => props.theme?.colors?.accent};\n-    }\n-  }\n-`;\n-\n-const ShopName = styled.div`\n-  flex: 1;\n-  text-align: ${props => props.position};\n-  font-family: ${props => props.theme?.fonts?.heading || DEFAULT_THEME.fonts.heading};\n-  font-size: 1.8rem;\n-  padding: ${props => props.position === 'center' ? '0 80px' : '0'};\n-`;\n-\n-const MainContent = styled.div`\n-  max-width: ${props => props.theme?.styles?.containerWidth || DEFAULT_THEME.styles.containerWidth};\n-  margin: 0 auto;\n-  padding: 2rem;\n-  position: relative;\n-  z-index: 1;\n-`;\n-\n-const LoadingSpinner = styled.div`\n-  width: 20px;\n-  height: 20px;\n-  border: 2px solid rgba(255, 255, 255, 0.3);\n-  border-radius: 50%;\n-  border-top-color: white;\n-  animation: spin 1s linear infinite;\n-\n-  @keyframes spin {\n-    to {\n-      transform: rotate(360deg);\n-    }\n-  }\n-`;\n-\n-const ItemGrid = styled.div`\n-  display: grid;\n-  grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));\n-  gap: 2rem;\n-  margin-bottom: 2rem;\n-`;\n-\n-const ItemCard = styled.div`\n-  background: rgba(255, 255, 255, 0.05);\n-  border-radius: ${props => props.theme?.styles?.borderRadius || '12px'};\n-  overflow: hidden;\n-  border: 1px solid rgba(255, 255, 255, 0.1);\n-  width: 100%;\n-  height: 500px;\n-\n-  .item-content {\n-    padding: 1.5rem;\n-  }\n-`;\n-\n-const ZipCodeInput = styled.input`\n-  background: rgba(255, 255, 255, 0.05);\n-  border: 1px solid rgba(255, 255, 255, 0.1);\n-  padding: 0.5rem;\n-  border-radius: 4px;\n-  color: ${props => props.theme?.colors?.text};\n-  margin-top: 0.5rem;\n-  width: 100%;\n-\n-  &:focus {\n-    outline: none;\n-    border-color: ${props => props.theme?.colors?.accent};\n-  }\n-`;\n-\n-const AddItemButton = styled.button`\n-  background: ${props => props.theme?.colors?.primary};\n-  color: ${props => props.theme?.colors?.text};\n-  border: none;\n-  border-radius: 8px;\n-  padding: 1rem;\n-  display: flex;\n-  align-items: center;\n-  gap: 0.5rem;\n-  cursor: pointer;\n-  margin: 2rem auto;\n-  transition: all 0.3s;\n-\n-  &:hover {\n-    transform: translateY(-2px);\n-  }\n-`;\n-\n-const cleanDataForFirestore = (data) => {\n-  if (!data) return data;\n-  \n-  if (Array.isArray(data)) {\n-    return data.map(item => cleanDataForFirestore(item));\n-  }\n-  \n-  if (typeof data === 'object' && !(data instanceof Date)) {\n-    const cleanedData = {};\n-    for (const [key, value] of Object.entries(data)) {\n-      // Skip file objects\n-      if (value instanceof File) continue;\n-      // Skip null/undefined values\n-      if (value === null || value === undefined) continue;\n-      cleanedData[key] = cleanDataForFirestore(value);\n-    }\n-    return cleanedData;\n-  }\n-  \n-  return data;\n-};\n-\n-const ShopPage = () => {\n-  const navigate = useNavigate();\n-  const [shopData, setShopData] = useState(null); // Keep as null initially\n-  const [isReady, setIsReady] = useState(false);  // Add this state\n-  const [activeTab, setActiveTab] = useState('shop');\n-  const [saving, setSaving] = useState(false);\n-  const [uploading, setUploading] = useState({});\n-\n-  useEffect(() => {\n-    const loadShopData = async (userId) => {\n-      try {\n-        const shopDoc = await getDoc(doc(db, 'shops', userId));\n-        if (shopDoc.exists()) {\n-          const data = shopDoc.data();\n-          setShopData(data);\n-        }\n-        setIsReady(true); // Set ready after data is loaded\n-      } catch (error) {\n-        console.error('Error loading shop data:', error);\n-        setIsReady(true); // Still set ready even on error\n-      }\n-    };    \n-\n-    const unsubscribe = auth.onAuthStateChanged((user) => {\n-      if (!user) {\n-        navigate('/auth');\n-        return;\n-      }\n-      loadShopData(user.uid);\n-    });\n-\n-    return () => unsubscribe();\n-  }, [navigate]);\n-\n-  // Don't render anything until ready\n-  if (!isReady) {\n-    return null;\n-  }\n-\n-  const handleUpdateShop = async (updates) => {\n-    if (!auth.currentUser) return;\n-    \n-    try {\n-      setSaving(true);\n-      console.log('Updating shop with:', updates); // Debug log\n-      \n-      let finalUpdates = { ...updates };\n-      \n-      // Handle profile image upload\n-      if (updates.profile?.file instanceof File) {\n-        const file = updates.profile.file;\n-        const metadata = {\n-          contentType: file.type || 'image/jpeg',\n-          cacheControl: 'public,max-age=3600',\n-          customMetadata: {\n-            'Access-Control-Allow-Origin': '*'\n-          }\n-        };\n-        \n-        const profileRef = ref(\n-          storage, \n-          `shops/${auth.currentUser.uid}/profile/profile-${Date.now()}`\n-        );\n-        \n-        const snapshot = await uploadBytes(profileRef, file, metadata);\n-        const imageUrl = await getDownloadURL(snapshot.ref);\n-        \n-        // Update with image URL instead of file\n-        finalUpdates = {\n-          ...finalUpdates,\n-          profile: imageUrl\n-        };\n-      }\n-  \n-      // Update Firestore\n-      const shopRef = doc(db, 'shops', auth.currentUser.uid);\n-      await updateDoc(shopRef, {\n-        ...finalUpdates,\n-        updatedAt: new Date().toISOString()\n-      });\n-  \n-      // Update local state\n-      setShopData(prev => ({\n-        ...prev,\n-        ...finalUpdates\n-      }));\n-  \n-      console.log('Shop update successful:', finalUpdates);\n-    } catch (error) {\n-      console.error('Error updating shop:', error);\n-    } finally {\n-      setSaving(false);\n-    }\n-  };\n-\n-  const logImageState = (image) => {\n-    if (!image) return 'null';\n-    if (typeof image === 'string') return `URL: ${image}`;\n-    if (image instanceof File) return `File: ${image.name}`;\n-    if (image?.file instanceof File) return `File Object: ${image.file.name}`;\n-    return `Unknown type: ${typeof image}`;\n-  };\n-\n-  // Handle item updates\n-  const handleItemUpdate = async (itemId, updates) => {\n-    if (!auth.currentUser) return;\n-  \n-    try {\n-      setSaving(true);\n-      console.log('Updating item with:', updates); // Debug log\n-  \n-      const currentItem = shopData.items.find(item => item.id === itemId);\n-      let updatedItem = { ...currentItem, ...updates };\n-  \n-      // Handle image uploads if present\n-      if (updates.images) {\n-        const processedImages = await Promise.all(updates.images.map(async (image, index) => {\n-          // If it's a URL or null, keep it\n-          if (!image || typeof image === 'string') return image;\n-          \n-          // If it's a File object, upload it\n-          if (image instanceof File || image?.file instanceof File) {\n-            const file = image instanceof File ? image : image.file;\n-            try {\n-              const metadata = {\n-                contentType: file.type || 'image/jpeg',\n-                cacheControl: 'public,max-age=3600'\n-              };\n-              \n-              const imageRef = ref(\n-                storage, \n-                `shops/${auth.currentUser.uid}/items/${itemId}/image-${index}-${Date.now()}`\n-              );\n-              \n-              const snapshot = await uploadBytes(imageRef, file, metadata);\n-              return await getDownloadURL(snapshot.ref);\n-            } catch (uploadError) {\n-              console.error(`Failed to upload image ${index}:`, uploadError);\n-              return null;\n-            }\n-          }\n-          return null;\n-        }));\n-  \n-        updatedItem.images = processedImages;\n-      }\n-  \n-      // Update in Firestore\n-      const shopRef = doc(db, 'shops', auth.currentUser.uid);\n-      const updatedItems = shopData.items.map(item =>\n-        item.id === itemId ? updatedItem : item\n-      );\n-  \n-      await updateDoc(shopRef, {\n-        items: updatedItems,\n-        updatedAt: new Date().toISOString()\n-      });\n-  \n-      // Update local state\n-      setShopData(prev => ({\n-        ...prev,\n-        items: updatedItems\n-      }));\n-  \n-      console.log('Item updated successfully:', updatedItem); // Debug log\n-    } catch (error) {\n-      console.error('Error updating item:', error);\n-    } finally {\n-      setSaving(false);\n-    }\n-  };\n-  \n-    // Save shop data\n-  const saveShopData = async (updates) => {\n-    if (!auth.currentUser) return;\n-    setSaving(true);\n-    try {\n-      const shopRef = doc(db, 'shops', auth.currentUser.uid);\n-      await updateDoc(shopRef, {\n-        ...updates,\n-        updatedAt: new Date().toISOString()\n-      });\n-      setShopData(prev => ({ ...prev, ...updates }));\n-    } catch (error) {\n-      console.error('Error saving shop data:', error);\n-    } finally {\n-      setSaving(false);\n-    }\n-  };\n-\n-  const handleAddItem = () => {\n-    const newItem = {\n-      id: Date.now().toString(),\n-      name: 'New Item',\n-      price: '',\n-      description: '',\n-      zipCode: '',\n-      images: [null, null, null],\n-      currentImageIndex: 0\n-    };\n-\n-    const updatedItems = [...(shopData.items || []), newItem];\n-    saveShopData({ items: updatedItems });\n-  };\n-\n-  return (\n-    <ThemeProvider theme={shopData?.theme || DEFAULT_THEME}>\n-      <PageContainer>\n-        <ShopBanner>\n-          <EditableText\n-            value={shopData?.name}\n-            onChange={(value) => saveShopData({ name: value })}\n-            placeholder=\"Your Shop Name\"\n-            theme={shopData?.theme}\n-          />\n-        </ShopBanner>\n-\n-        <TabPositioner\n-          position={shopData?.layout?.tabPosition || 'top'}\n-          activeTab={activeTab}\n-          onTabChange={setActiveTab}\n-          tabs={[\n-            { id: 'shop', label: 'Shop' },\n-            { id: 'home', label: 'Home' },\n-            { id: 'community', label: 'Community' }\n-          ]}\n-          theme={shopData?.theme}\n-        />\n-\n-        <MainContent>\n-        {activeTab === 'shop' && (\n-          <>\n-            <ShopProfileSection>\n-            <div className=\"profile-image\">\n-              {shopData?.profile && typeof shopData.profile === 'string' ? (\n-                // If we have a URL string, show the image directly\n-                <img \n-                  src={shopData.profile} \n-                  alt=\"Profile\" \n-                  style={{ \n-                    width: '100%',\n-                    height: '100%',\n-                    objectFit: 'cover',\n-                    cursor: 'pointer'\n-                  }}\n-                  onClick={() => {\n-                    // Allow changing the image by clicking on it\n-                    const input = document.createElement('input');\n-                    input.type = 'file';\n-                    input.accept = 'image/*';\n-                    input.onchange = (e) => {\n-                      if (e.target.files?.[0]) {\n-                        handleUpdateShop({ \n-                          profile: {\n-                            file: e.target.files[0],\n-                            type: e.target.files[0].type\n-                          }\n-                        });\n-                      }\n-                    };\n-                    input.click();\n-                  }}\n-                />\n-              ) : (\n-                // If no image URL, show the EditableImage component\n-                <EditableImage\n-                  value={null}\n-                  onChange={(value) => {\n-                    console.log('Profile image update:', value);\n-                    if (value instanceof File) {\n-                      handleUpdateShop({ \n-                        profile: {\n-                          file: value,\n-                          type: value.type\n-                        }\n-                      });\n-                    }\n-                  }}\n-                  theme={shopData?.theme}\n-                  round\n-                  width=\"150px\"\n-                  height=\"150px\"\n-                  style={{ \n-                    width: '150px',\n-                    height: '150px',\n-                    borderRadius: '50%',\n-                    objectFit: 'cover'\n-                  }}\n-                />\n-              )}\n-            </div>\n-              <div className=\"shop-info\">\n-                <EditableText\n-                  value={shopData?.name}\n-                  onChange={(value) => handleUpdateShop({ name: value })}\n-                  placeholder=\"Shop Name\"\n-                  theme={shopData?.theme}\n-                />\n-                <EditableText\n-                  value={shopData?.description}\n-                  onChange={(value) => handleUpdateShop({ description: value })}\n-                  placeholder=\"Shop Description\"\n-                  multiline\n-                  theme={shopData?.theme}\n-                />\n-              </div>\n-            </ShopProfileSection>\n-\n-            <ItemGrid>\n-              {shopData?.items?.map(item => (\n-                <ItemCard key={item.id}>\n-                  <ItemImageContainer>\n-                    {uploading[item.id] && (\n-                      <UploadingOverlay>\n-                        <LoadingSpinner />\n-                      </UploadingOverlay>\n-                    )}\n-                    <div \n-                      className=\"image-container\"\n-                      onClick={() => {\n-                        if (!item.images[item.currentImageIndex]) {\n-                          document.getElementById(`image-upload-${item.id}-${item.currentImageIndex}`).click();\n-                        }\n-                      }}\n-                    >\n-                      {item.images[item.currentImageIndex] ? (\n-                        <img \n-                          src={item.images[item.currentImageIndex]} \n-                          alt={item.name}\n-                          style={{ width: '100%', height: '100%', objectFit: 'cover' }}\n-                        />\n-                      ) : (\n-                        <div className=\"placeholder\">\n-                          <Plus size={24} />\n-                          <span>Upload Image</span>\n-                        </div>\n-                      )}\n-                    </div>\n-                    \n-                    {/* Only show carousel arrows if there are images */}\n-                    {item.images.some(img => img) && (\n-                      <>\n-                        <button \n-                          className=\"carousel-arrow left\"\n-                          onClick={() => {\n-                            const newIndex = ((item.currentImageIndex - 1) + 3) % 3;\n-                            handleItemUpdate(item.id, { currentImageIndex: newIndex });\n-                          }}\n-                        >\n-                          <ChevronLeft size={16} />\n-                        </button>\n-                        <button \n-                          className=\"carousel-arrow right\"\n-                          onClick={() => {\n-                            const newIndex = (item.currentImageIndex + 1) % 3;\n-                            handleItemUpdate(item.id, { currentImageIndex: newIndex });\n-                          }}\n-                        >\n-                          <ChevronRight size={16} />\n-                        </button>\n-                      </>\n-                    )}\n-\n-                    {/* Add/Remove button */}\n-                    {item.images[item.currentImageIndex] && (\n-                      <button \n-                        className=\"add-image\"\n-                        onClick={() => {\n-                          const newImages = [...item.images];\n-                          newImages[item.currentImageIndex] = null;\n-                          handleItemUpdate(item.id, { images: newImages });\n-                        }}\n-                      >\n-                        <X size={16} />\n-                      </button>\n-                    )}\n-\n-                    <input\n-                      type=\"file\"\n-                      id={`image-upload-${item.id}-${item.currentImageIndex}`}\n-                      accept=\"image/*\"\n-                      style={{ display: 'none' }}\n-                      onChange={(e) => {\n-                        if (e.target.files?.[0]) {\n-                          const newImages = [...item.images];\n-                          newImages[item.currentImageIndex] = e.target.files[0];\n-                          handleItemUpdate(item.id, { images: newImages });\n-                        }\n-                      }}\n-                    />\n-                  </ItemImageContainer>\n-                  <ItemContent>\n-                    <EditableText\n-                      value={item.name}\n-                      onChange={(value) => handleItemUpdate(item.id, { name: value })}\n-                      placeholder=\"Item Name\"\n-                      theme={shopData?.theme}\n-                    />\n-                    <EditableText\n-                      value={item.price}\n-                      onChange={(value) => handleItemUpdate(item.id, { price: value })}\n-                      placeholder=\"Price\"\n-                      theme={shopData?.theme}\n-                    />\n-                    <EditableText\n-                      value={item.description}\n-                      onChange={(value) => handleItemUpdate(item.id, { description: value })}\n-                      placeholder=\"Item Description\"\n-                      multiline\n-                      theme={shopData?.theme}\n-                    />\n-                    <ZipCodeInput\n-                      value={item.zipCode || ''}\n-                      onChange={(e) => handleItemUpdate(item.id, { zipCode: e.target.value })}\n-                      placeholder=\"ZIP Code\"\n-                      maxLength=\"5\"\n-                      pattern=\"[0-9]*\"\n-                    />\n-                  </ItemContent>\n-                </ItemCard>\n-              ))}\n-            </ItemGrid>\n-\n-              <AddItemButton onClick={handleAddItem} theme={shopData?.theme}>\n-                <Plus size={20} />\n-                Add Item\n-              </AddItemButton>\n-            </>\n-          )}\n-\n-          {activeTab === 'home' && (\n-            <div>\n-              <EditableText\n-                value={shopData?.mission}\n-                onChange={(value) => saveShopData({ mission: value })}\n-                placeholder=\"Your Shop's Mission\"\n-                multiline\n-                theme={shopData?.theme}\n-              />\n-              {/* Add more home page customization options */}\n-            </div>\n-          )}\n-\n-          {activeTab === 'community' && (\n-            <div>\n-              {/* Add community customization options */}\n-            </div>\n-          )}\n-        </MainContent>\n-      </PageContainer>\n-    </ThemeProvider>\n-  );\n-};\n-\n export default ShopPage;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1735865320704,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -524,11 +524,11 @@\n           position={shopData?.layout?.tabPosition || 'top'}\n           activeTab={activeTab}\n           onTabChange={setActiveTab}\n           tabs={[\n-            { id: 'shop', label: 'Shop' },\n             { id: 'home', label: 'Home' },\n-            { id: 'community', label: 'Community' }\n+            { id: 'community', label: 'Community' },\n+            { id: 'shop', label: 'Shop' }\n           ]}\n           theme={shopData?.theme}\n         />\n \n"
                },
                {
                    "date": 1735865446322,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -593,23 +593,14 @@\n                   }}\n                 />\n               )}\n             </div>\n-              <div className=\"shop-info\">\n-                <EditableText\n-                  value={shopData?.name}\n-                  onChange={(value) => handleUpdateShop({ name: value })}\n-                  placeholder=\"Shop Name\"\n-                  theme={shopData?.theme}\n-                />\n-                <EditableText\n-                  value={shopData?.description}\n-                  onChange={(value) => handleUpdateShop({ description: value })}\n-                  placeholder=\"Shop Description\"\n-                  multiline\n-                  theme={shopData?.theme}\n-                />\n-              </div>\n+            <div className=\"shop-name\">\n+              {shopData?.name || \"Your Shop Name\"}\n+            </div>\n+            <div className=\"shop-description\">\n+              {shopData?.description || \"Shop Description\"}\n+            </div>\n             </ShopProfileSection>\n \n             <ItemGrid>\n               {shopData?.items?.map(item => (\n"
                },
                {
                    "date": 1736259964986,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -143,9 +143,25 @@\n     }\n   }\n `;\n \n+const KalKodeCorner = styled.div`\n+  position: fixed;\n+  top: 2rem;\n+  right: 2rem;\n+  z-index: 100;\n+  cursor: pointer;\n+`;\n \n+const KalKodeLogo = styled.div`\n+  color: #A00000;\n+  font-family: 'Impact', sans-serif;\n+  font-size: 2rem;\n+  letter-spacing: 2px;\n+  transform: skew(-5deg);\n+`;\n+\n+\n const ShopBanner = styled.div`\n   position: fixed;\n   top: 0;\n   left: 0;\n"
                },
                {
                    "date": 1736260032664,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,23 +44,52 @@\n       object-fit: cover;\n     }\n   }\n \n-  .shop-name {\n-    margin-bottom: 1rem;\n-    font-family: ${props => props.theme?.fonts?.heading};\n-    font-size: 2.5rem;\n-    background: ${props => `linear-gradient(45deg, ${props.theme?.colors?.primary}, ${props.theme?.colors?.accent})`};\n-    -webkit-background-clip: text;\n-    -webkit-text-fill-color: transparent;\n+  .shop-name-container {\n+    margin: 1rem 0;\n+    position: relative;\n   }\n \n+  .font-size-control {\n+    position: absolute;\n+    right: -3rem;\n+    top: 50%;\n+    transform: translateY(-50%);\n+    display: flex;\n+    flex-direction: column;\n+    gap: 0.5rem;\n+    opacity: 0;\n+    transition: opacity 0.3s;\n+  }\n+\n+  .shop-name-container:hover .font-size-control {\n+    opacity: 1;\n+  }\n+\n   .shop-description {\n     color: ${props => props.theme?.colors?.text};\n     opacity: 0.8;\n   }\n `;\n \n+const FontSizeButton = styled.button`\n+  background: rgba(255, 255, 255, 0.1);\n+  border: none;\n+  border-radius: 50%;\n+  width: 24px;\n+  height: 24px;\n+  display: flex;\n+  align-items: center;\n+  justify-content: center;\n+  color: white;\n+  cursor: pointer;\n+\n+  &:hover {\n+    background: rgba(255, 255, 255, 0.2);\n+  }\n+`;\n+\n const ItemImageContainer = styled.div`\n   position: relative;\n   height: 250px;\n   width: 100%;\n"
                },
                {
                    "date": 1736261225836,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,794 @@\n+// src/pages/shop/ShopPage.js\n+\n+import React, { useState, useEffect } from 'react';\n+import { useNavigate } from 'react-router-dom';\n+import styled, { ThemeProvider } from 'styled-components';\n+import { auth, db } from '../../firebase/config';\n+import { doc, getDoc, updateDoc } from 'firebase/firestore';\n+import { Plus, ChevronLeft, ChevronRight, X } from 'lucide-react';\n+import TabPositioner from './components/TabPositioner';\n+import EditableText from './components/EditableComponents/EditableText';\n+import EditableImage from './components/EditableComponents/EditableImage';\n+import { DEFAULT_THEME } from '../../theme/theme';\n+import { ref, uploadBytes, getDownloadURL } from 'firebase/storage';\n+import { storage } from '../../firebase/config';\n+\n+const PageContainer = styled.div`\n+  min-height: 100vh;\n+  background: ${props => props.theme?.colors?.background || DEFAULT_THEME.colors.background};\n+  color: ${props => props.theme?.colors?.text || DEFAULT_THEME.colors.text};\n+  position: relative;\n+  overflow-x: hidden;\n+`;\n+\n+const ShopProfileSection = styled.div`\n+  display: flex;\n+  flex-direction: column;\n+  align-items: center;\n+  text-align: center;\n+  max-width: 800px;\n+  margin: 0 auto 3rem auto;\n+  padding: 2rem;\n+\n+  .profile-image {\n+    margin-bottom: 2rem;\n+    width: 150px;\n+    height: 150px;\n+    border-radius: 50%;\n+    overflow: hidden;\n+    background: rgba(0, 0, 0, 0.1);\n+    \n+    img {\n+      width: 100%;\n+      height: 100%;\n+      object-fit: cover;\n+    }\n+  }\n+\n+  .shop-name-container {\n+    margin: 1rem 0;\n+    position: relative;\n+  }\n+\n+  .font-size-control {\n+    position: absolute;\n+    right: -3rem;\n+    top: 50%;\n+    transform: translateY(-50%);\n+    display: flex;\n+    flex-direction: column;\n+    gap: 0.5rem;\n+    opacity: 0;\n+    transition: opacity 0.3s;\n+  }\n+\n+  .shop-name-container:hover .font-size-control {\n+    opacity: 1;\n+  }\n+\n+  .shop-description {\n+    color: ${props => props.theme?.colors?.text};\n+    opacity: 0.8;\n+  }\n+`;\n+\n+const FontSizeButton = styled.button`\n+  background: rgba(255, 255, 255, 0.1);\n+  border: none;\n+  border-radius: 50%;\n+  width: 24px;\n+  height: 24px;\n+  display: flex;\n+  align-items: center;\n+  justify-content: center;\n+  color: white;\n+  cursor: pointer;\n+\n+  &:hover {\n+    background: rgba(255, 255, 255, 0.2);\n+  }\n+`;\n+\n+const ItemImageContainer = styled.div`\n+  position: relative;\n+  height: 250px;\n+  width: 100%;\n+  display: flex;\n+  overflow: hidden;\n+  background: rgba(0, 0, 0, 0.1);\n+\n+  .image-container {\n+    width: 100%;\n+    height: 100%;\n+    position: relative;\n+  }\n+\n+  .placeholder {\n+    width: 100%;\n+    height: 100%;\n+    display: flex;\n+    flex-direction: column;\n+    align-items: center;\n+    justify-content: center;\n+    gap: 0.5rem;\n+    color: ${props => props.theme?.colors?.text || '#fff'};\n+    opacity: 0.5;\n+    cursor: pointer;\n+    \n+    span {\n+      font-size: 0.9rem;\n+    }\n+  }\n+\n+  .carousel-arrow {\n+    position: absolute;\n+    top: 50%;\n+    transform: translateY(-50%);\n+    background: rgba(0, 0, 0, 0.5);\n+    border: none;\n+    border-radius: 50%;\n+    width: 32px;\n+    height: 32px;\n+    display: flex;\n+    align-items: center;\n+    justify-content: center;\n+    color: white;\n+    cursor: pointer;\n+    z-index: 2;\n+    transition: all 0.3s ease;\n+\n+    &:hover {\n+      background: rgba(0, 0, 0, 0.8);\n+    }\n+\n+    &.left {\n+      left: 10px;\n+    }\n+\n+    &.right {\n+      right: 10px;\n+    }\n+  }\n+\n+  .add-image {\n+    position: absolute;\n+    top: 10px;\n+    right: 10px;\n+    background: rgba(0, 0, 0, 0.5);\n+    border: none;\n+    border-radius: 50%;\n+    width: 32px;\n+    height: 32px;\n+    display: flex;\n+    align-items: center;\n+    justify-content: center;\n+    color: white;\n+    cursor: pointer;\n+    z-index: 2;\n+    transition: all 0.3s ease;\n+\n+    &:hover {\n+      background: rgba(0, 0, 0, 0.8);\n+    }\n+  }\n+`;\n+\n+const KalKodeCorner = styled.div`\n+  position: fixed;\n+  top: 2rem;\n+  right: 2rem;\n+  z-index: 100;\n+  cursor: pointer;\n+`;\n+\n+const KalKodeLogo = styled.div`\n+  color: #A00000;\n+  font-family: 'Impact', sans-serif;\n+  font-size: 2rem;\n+  letter-spacing: 2px;\n+  transform: skew(-5deg);\n+`;\n+\n+\n+const ShopBanner = styled.div`\n+  position: fixed;\n+  top: 0;\n+  left: 0;\n+  right: 0;\n+  height: 80px;\n+  background: ${props => `${props.theme?.colors?.background || DEFAULT_THEME.colors.background}CC`};\n+  backdrop-filter: blur(10px);\n+  display: flex;\n+  align-items: center;\n+  justify-content: space-between;\n+  padding: 0 2rem;\n+  z-index: 100;\n+  border-bottom: 1px solid ${props => `${props.theme?.colors?.accent || DEFAULT_THEME.colors.accent}30`};\n+`;\n+\n+const UploadingOverlay = styled.div`\n+  position: absolute;\n+  top: 0;\n+  left: 0;\n+  right: 0;\n+  bottom: 0;\n+  background: rgba(0, 0, 0, 0.5);\n+  display: flex;\n+  align-items: center;\n+  justify-content: center;\n+  color: white;\n+  z-index: 3;\n+`;\n+\n+const ItemContent = styled.div`\n+  padding: 1.5rem;\n+  display: flex;\n+  flex-direction: column;\n+  gap: 1rem;\n+  height: calc(100% - 250px); // This ensures the content takes the remaining space\n+  overflow-y: auto;\n+\n+  input, textarea {\n+    background: rgba(255, 255, 255, 0.05);\n+    border: 1px solid rgba(255, 255, 255, 0.1);\n+    border-radius: ${props => props.theme?.styles?.borderRadius || '8px'};\n+    padding: 0.8rem;\n+    color: ${props => props.theme?.colors?.text};\n+    \n+    &:focus {\n+      outline: none;\n+      border-color: ${props => props.theme?.colors?.accent};\n+    }\n+  }\n+`;\n+\n+const ShopName = styled.div`\n+  flex: 1;\n+  text-align: ${props => props.position};\n+  font-family: ${props => props.theme?.fonts?.heading || DEFAULT_THEME.fonts.heading};\n+  font-size: 1.8rem;\n+  padding: ${props => props.position === 'center' ? '0 80px' : '0'};\n+`;\n+\n+const MainContent = styled.div`\n+  max-width: ${props => props.theme?.styles?.containerWidth || DEFAULT_THEME.styles.containerWidth};\n+  margin: 0 auto;\n+  padding: 2rem;\n+  position: relative;\n+  z-index: 1;\n+`;\n+\n+const LoadingSpinner = styled.div`\n+  width: 20px;\n+  height: 20px;\n+  border: 2px solid rgba(255, 255, 255, 0.3);\n+  border-radius: 50%;\n+  border-top-color: white;\n+  animation: spin 1s linear infinite;\n+\n+  @keyframes spin {\n+    to {\n+      transform: rotate(360deg);\n+    }\n+  }\n+`;\n+\n+const ItemGrid = styled.div`\n+  display: grid;\n+  grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));\n+  gap: 2rem;\n+  margin-bottom: 2rem;\n+`;\n+\n+const ItemCard = styled.div`\n+  background: rgba(255, 255, 255, 0.05);\n+  border-radius: ${props => props.theme?.styles?.borderRadius || '12px'};\n+  overflow: hidden;\n+  border: 1px solid rgba(255, 255, 255, 0.1);\n+  width: 100%;\n+  height: 500px;\n+\n+  .item-content {\n+    padding: 1.5rem;\n+  }\n+`;\n+\n+const ZipCodeInput = styled.input`\n+  background: rgba(255, 255, 255, 0.05);\n+  border: 1px solid rgba(255, 255, 255, 0.1);\n+  padding: 0.5rem;\n+  border-radius: 4px;\n+  color: ${props => props.theme?.colors?.text};\n+  margin-top: 0.5rem;\n+  width: 100%;\n+\n+  &:focus {\n+    outline: none;\n+    border-color: ${props => props.theme?.colors?.accent};\n+  }\n+`;\n+\n+const AddItemButton = styled.button`\n+  background: ${props => props.theme?.colors?.primary};\n+  color: ${props => props.theme?.colors?.text};\n+  border: none;\n+  border-radius: 8px;\n+  padding: 1rem;\n+  display: flex;\n+  align-items: center;\n+  gap: 0.5rem;\n+  cursor: pointer;\n+  margin: 2rem auto;\n+  transition: all 0.3s;\n+\n+  &:hover {\n+    transform: translateY(-2px);\n+  }\n+`;\n+\n+const cleanDataForFirestore = (data) => {\n+  if (!data) return data;\n+  \n+  if (Array.isArray(data)) {\n+    return data.map(item => cleanDataForFirestore(item));\n+  }\n+  \n+  if (typeof data === 'object' && !(data instanceof Date)) {\n+    const cleanedData = {};\n+    for (const [key, value] of Object.entries(data)) {\n+      // Skip file objects\n+      if (value instanceof File) continue;\n+      // Skip null/undefined values\n+      if (value === null || value === undefined) continue;\n+      cleanedData[key] = cleanDataForFirestore(value);\n+    }\n+    return cleanedData;\n+  }\n+  \n+  return data;\n+};\n+\n+const ShopPage = () => {\n+  const navigate = useNavigate();\n+  const [shopData, setShopData] = useState(null); // Keep as null initially\n+  const [isReady, setIsReady] = useState(false);  // Add this state\n+  const [activeTab, setActiveTab] = useState('shop');\n+  const [saving, setSaving] = useState(false);\n+  const [shopNameFontSize, setShopNameFontSize] = useState(2.5);\n+  const [uploading, setUploading] = useState({});\n+\n+  useEffect(() => {\n+    const loadShopData = async (userId) => {\n+      try {\n+        const shopDoc = await getDoc(doc(db, 'shops', userId));\n+        if (shopDoc.exists()) {\n+          const data = shopDoc.data();\n+          setShopData(data);\n+        }\n+        setIsReady(true); // Set ready after data is loaded\n+      } catch (error) {\n+        console.error('Error loading shop data:', error);\n+        setIsReady(true); // Still set ready even on error\n+      }\n+    };    \n+\n+    const unsubscribe = auth.onAuthStateChanged((user) => {\n+      if (!user) {\n+        navigate('/auth');\n+        return;\n+      }\n+      loadShopData(user.uid);\n+    });\n+\n+    return () => unsubscribe();\n+  }, [navigate]);\n+\n+  // Don't render anything until ready\n+  if (!isReady) {\n+    return null;\n+  }\n+\n+  const handleUpdateShop = async (updates) => {\n+    if (!auth.currentUser) return;\n+    \n+    try {\n+      setSaving(true);\n+      console.log('Updating shop with:', updates); // Debug log\n+      \n+      let finalUpdates = { ...updates };\n+      \n+      // Handle profile image upload\n+      if (updates.profile?.file instanceof File) {\n+        const file = updates.profile.file;\n+        const metadata = {\n+          contentType: file.type || 'image/jpeg',\n+          cacheControl: 'public,max-age=3600',\n+          customMetadata: {\n+            'Access-Control-Allow-Origin': '*'\n+          }\n+        };\n+        \n+        const profileRef = ref(\n+          storage, \n+          `shops/${auth.currentUser.uid}/profile/profile-${Date.now()}`\n+        );\n+        \n+        const snapshot = await uploadBytes(profileRef, file, metadata);\n+        const imageUrl = await getDownloadURL(snapshot.ref);\n+        \n+        // Update with image URL instead of file\n+        finalUpdates = {\n+          ...finalUpdates,\n+          profile: imageUrl\n+        };\n+      }\n+  \n+      // Update Firestore\n+      const shopRef = doc(db, 'shops', auth.currentUser.uid);\n+      await updateDoc(shopRef, {\n+        ...finalUpdates,\n+        updatedAt: new Date().toISOString()\n+      });\n+  \n+      // Update local state\n+      setShopData(prev => ({\n+        ...prev,\n+        ...finalUpdates\n+      }));\n+  \n+      console.log('Shop update successful:', finalUpdates);\n+    } catch (error) {\n+      console.error('Error updating shop:', error);\n+    } finally {\n+      setSaving(false);\n+    }\n+  };\n+\n+  const logImageState = (image) => {\n+    if (!image) return 'null';\n+    if (typeof image === 'string') return `URL: ${image}`;\n+    if (image instanceof File) return `File: ${image.name}`;\n+    if (image?.file instanceof File) return `File Object: ${image.file.name}`;\n+    return `Unknown type: ${typeof image}`;\n+  };\n+\n+  // Handle item updates\n+  const handleItemUpdate = async (itemId, updates) => {\n+    if (!auth.currentUser) return;\n+  \n+    try {\n+      setSaving(true);\n+      console.log('Updating item with:', updates); // Debug log\n+  \n+      const currentItem = shopData.items.find(item => item.id === itemId);\n+      let updatedItem = { ...currentItem, ...updates };\n+  \n+      // Handle image uploads if present\n+      if (updates.images) {\n+        const processedImages = await Promise.all(updates.images.map(async (image, index) => {\n+          // If it's a URL or null, keep it\n+          if (!image || typeof image === 'string') return image;\n+          \n+          // If it's a File object, upload it\n+          if (image instanceof File || image?.file instanceof File) {\n+            const file = image instanceof File ? image : image.file;\n+            try {\n+              const metadata = {\n+                contentType: file.type || 'image/jpeg',\n+                cacheControl: 'public,max-age=3600'\n+              };\n+              \n+              const imageRef = ref(\n+                storage, \n+                `shops/${auth.currentUser.uid}/items/${itemId}/image-${index}-${Date.now()}`\n+              );\n+              \n+              const snapshot = await uploadBytes(imageRef, file, metadata);\n+              return await getDownloadURL(snapshot.ref);\n+            } catch (uploadError) {\n+              console.error(`Failed to upload image ${index}:`, uploadError);\n+              return null;\n+            }\n+          }\n+          return null;\n+        }));\n+  \n+        updatedItem.images = processedImages;\n+      }\n+  \n+      // Update in Firestore\n+      const shopRef = doc(db, 'shops', auth.currentUser.uid);\n+      const updatedItems = shopData.items.map(item =>\n+        item.id === itemId ? updatedItem : item\n+      );\n+  \n+      await updateDoc(shopRef, {\n+        items: updatedItems,\n+        updatedAt: new Date().toISOString()\n+      });\n+  \n+      // Update local state\n+      setShopData(prev => ({\n+        ...prev,\n+        items: updatedItems\n+      }));\n+  \n+      console.log('Item updated successfully:', updatedItem); // Debug log\n+    } catch (error) {\n+      console.error('Error updating item:', error);\n+    } finally {\n+      setSaving(false);\n+    }\n+  };\n+  \n+    // Save shop data\n+  const saveShopData = async (updates) => {\n+    if (!auth.currentUser) return;\n+    setSaving(true);\n+    try {\n+      const shopRef = doc(db, 'shops', auth.currentUser.uid);\n+      await updateDoc(shopRef, {\n+        ...updates,\n+        updatedAt: new Date().toISOString()\n+      });\n+      setShopData(prev => ({ ...prev, ...updates }));\n+    } catch (error) {\n+      console.error('Error saving shop data:', error);\n+    } finally {\n+      setSaving(false);\n+    }\n+  };\n+\n+  const handleAddItem = () => {\n+    const newItem = {\n+      id: Date.now().toString(),\n+      name: 'New Item',\n+      price: '',\n+      description: '',\n+      zipCode: '',\n+      images: [null, null, null],\n+      currentImageIndex: 0\n+    };\n+\n+    const updatedItems = [...(shopData.items || []), newItem];\n+    saveShopData({ items: updatedItems });\n+  };\n+\n+  return (\n+    <ThemeProvider theme={shopData?.theme || DEFAULT_THEME}>\n+      <PageContainer>\n+        <KalKodeCorner>\n+          <KalKodeLogo onClick={() => navigate('/')}>\n+            KALKODE\n+          </KalKodeLogo>\n+        </KalKodeCorner>\n+    \n+        <TabPositioner\n+          position={shopData?.layout?.tabPosition || 'top'}\n+          activeTab={activeTab}\n+          onTabChange={setActiveTab}\n+          tabs={[\n+            { id: 'home', label: 'Home' },\n+            { id: 'community', label: 'Community' },\n+            { id: 'shop', label: 'Shop' }\n+          ]}\n+          theme={shopData?.theme}\n+        />\n+\n+        <MainContent>\n+        {activeTab === 'shop' && (\n+          <>\n+            <ShopProfileSection>\n+            <div className=\"profile-image\">\n+              {shopData?.profile && typeof shopData.profile === 'string' ? (\n+                // If we have a URL string, show the image directly\n+                <img \n+                  src={shopData.profile} \n+                  alt=\"Profile\" \n+                  style={{ \n+                    width: '100%',\n+                    height: '100%',\n+                    objectFit: 'cover',\n+                    cursor: 'pointer'\n+                  }}\n+                  onClick={() => {\n+                    // Allow changing the image by clicking on it\n+                    const input = document.createElement('input');\n+                    input.type = 'file';\n+                    input.accept = 'image/*';\n+                    input.onchange = (e) => {\n+                      if (e.target.files?.[0]) {\n+                        handleUpdateShop({ \n+                          profile: {\n+                            file: e.target.files[0],\n+                            type: e.target.files[0].type\n+                          }\n+                        });\n+                      }\n+                    };\n+                    input.click();\n+                  }}\n+                />\n+              ) : (\n+                // If no image URL, show the EditableImage component\n+                <EditableImage\n+                  value={null}\n+                  onChange={(value) => {\n+                    console.log('Profile image update:', value);\n+                    if (value instanceof File) {\n+                      handleUpdateShop({ \n+                        profile: {\n+                          file: value,\n+                          type: value.type\n+                        }\n+                      });\n+                    }\n+                  }}\n+                  theme={shopData?.theme}\n+                  round\n+                  width=\"150px\"\n+                  height=\"150px\"\n+                  style={{ \n+                    width: '150px',\n+                    height: '150px',\n+                    borderRadius: '50%',\n+                    objectFit: 'cover'\n+                  }}\n+                />\n+              )}\n+            </div>\n+            <div className=\"shop-name\">\n+              {shopData?.name || \"Your Shop Name\"}\n+            </div>\n+            <div className=\"shop-description\">\n+              {shopData?.description || \"Shop Description\"}\n+            </div>\n+            </ShopProfileSection>\n+\n+            <ItemGrid>\n+              {shopData?.items?.map(item => (\n+                <ItemCard key={item.id}>\n+                  <ItemImageContainer>\n+                    {uploading[item.id] && (\n+                      <UploadingOverlay>\n+                        <LoadingSpinner />\n+                      </UploadingOverlay>\n+                    )}\n+                    <div \n+                      className=\"image-container\"\n+                      onClick={() => {\n+                        if (!item.images[item.currentImageIndex]) {\n+                          document.getElementById(`image-upload-${item.id}-${item.currentImageIndex}`).click();\n+                        }\n+                      }}\n+                    >\n+                      {item.images[item.currentImageIndex] ? (\n+                        <img \n+                          src={item.images[item.currentImageIndex]} \n+                          alt={item.name}\n+                          style={{ width: '100%', height: '100%', objectFit: 'cover' }}\n+                        />\n+                      ) : (\n+                        <div className=\"placeholder\">\n+                          <Plus size={24} />\n+                          <span>Upload Image</span>\n+                        </div>\n+                      )}\n+                    </div>\n+                    \n+                    {/* Only show carousel arrows if there are images */}\n+                    {item.images.some(img => img) && (\n+                      <>\n+                        <button \n+                          className=\"carousel-arrow left\"\n+                          onClick={() => {\n+                            const newIndex = ((item.currentImageIndex - 1) + 3) % 3;\n+                            handleItemUpdate(item.id, { currentImageIndex: newIndex });\n+                          }}\n+                        >\n+                          <ChevronLeft size={16} />\n+                        </button>\n+                        <button \n+                          className=\"carousel-arrow right\"\n+                          onClick={() => {\n+                            const newIndex = (item.currentImageIndex + 1) % 3;\n+                            handleItemUpdate(item.id, { currentImageIndex: newIndex });\n+                          }}\n+                        >\n+                          <ChevronRight size={16} />\n+                        </button>\n+                      </>\n+                    )}\n+\n+                    {/* Add/Remove button */}\n+                    {item.images[item.currentImageIndex] && (\n+                      <button \n+                        className=\"add-image\"\n+                        onClick={() => {\n+                          const newImages = [...item.images];\n+                          newImages[item.currentImageIndex] = null;\n+                          handleItemUpdate(item.id, { images: newImages });\n+                        }}\n+                      >\n+                        <X size={16} />\n+                      </button>\n+                    )}\n+\n+                    <input\n+                      type=\"file\"\n+                      id={`image-upload-${item.id}-${item.currentImageIndex}`}\n+                      accept=\"image/*\"\n+                      style={{ display: 'none' }}\n+                      onChange={(e) => {\n+                        if (e.target.files?.[0]) {\n+                          const newImages = [...item.images];\n+                          newImages[item.currentImageIndex] = e.target.files[0];\n+                          handleItemUpdate(item.id, { images: newImages });\n+                        }\n+                      }}\n+                    />\n+                  </ItemImageContainer>\n+                  <ItemContent>\n+                    <EditableText\n+                      value={item.name}\n+                      onChange={(value) => handleItemUpdate(item.id, { name: value })}\n+                      placeholder=\"Item Name\"\n+                      theme={shopData?.theme}\n+                    />\n+                    <EditableText\n+                      value={item.price}\n+                      onChange={(value) => handleItemUpdate(item.id, { price: value })}\n+                      placeholder=\"Price\"\n+                      theme={shopData?.theme}\n+                    />\n+                    <EditableText\n+                      value={item.description}\n+                      onChange={(value) => handleItemUpdate(item.id, { description: value })}\n+                      placeholder=\"Item Description\"\n+                      multiline\n+                      theme={shopData?.theme}\n+                    />\n+                    <ZipCodeInput\n+                      value={item.zipCode || ''}\n+                      onChange={(e) => handleItemUpdate(item.id, { zipCode: e.target.value })}\n+                      placeholder=\"ZIP Code\"\n+                      maxLength=\"5\"\n+                      pattern=\"[0-9]*\"\n+                    />\n+                  </ItemContent>\n+                </ItemCard>\n+              ))}\n+            </ItemGrid>\n+\n+              <AddItemButton onClick={handleAddItem} theme={shopData?.theme}>\n+                <Plus size={20} />\n+                Add Item\n+              </AddItemButton>\n+            </>\n+          )}\n+\n+          {activeTab === 'home' && (\n+            <div>\n+              <EditableText\n+                value={shopData?.mission}\n+                onChange={(value) => saveShopData({ mission: value })}\n+                placeholder=\"Your Shop's Mission\"\n+                multiline\n+                theme={shopData?.theme}\n+              />\n+              {/* Add more home page customization options */}\n+            </div>\n+          )}\n+\n+          {activeTab === 'community' && (\n+            <div>\n+              {/* Add community customization options */}\n+            </div>\n+          )}\n+        </MainContent>\n+      </PageContainer>\n+    </ThemeProvider>\n+  );\n+};\n+\n+export default ShopPage;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1736261310769,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,810 @@\n+// src/pages/shop/ShopPage.js\n+\n+import React, { useState, useEffect } from 'react';\n+import { useNavigate } from 'react-router-dom';\n+import styled, { ThemeProvider } from 'styled-components';\n+import { auth, db } from '../../firebase/config';\n+import { doc, getDoc, updateDoc } from 'firebase/firestore';\n+import { Plus, ChevronLeft, ChevronRight, X } from 'lucide-react';\n+import TabPositioner from './components/TabPositioner';\n+import EditableText from './components/EditableComponents/EditableText';\n+import EditableImage from './components/EditableComponents/EditableImage';\n+import { DEFAULT_THEME } from '../../theme/theme';\n+import { ref, uploadBytes, getDownloadURL } from 'firebase/storage';\n+import { storage } from '../../firebase/config';\n+\n+const PageContainer = styled.div`\n+  min-height: 100vh;\n+  background: ${props => props.theme?.colors?.background || DEFAULT_THEME.colors.background};\n+  color: ${props => props.theme?.colors?.text || DEFAULT_THEME.colors.text};\n+  position: relative;\n+  overflow-x: hidden;\n+`;\n+\n+const ShopProfileSection = styled.div`\n+  display: flex;\n+  flex-direction: column;\n+  align-items: center;\n+  text-align: center;\n+  max-width: 800px;\n+  margin: 0 auto 3rem auto;\n+  padding: 2rem;\n+\n+  .profile-image {\n+    margin-bottom: 2rem;\n+    width: 150px;\n+    height: 150px;\n+    border-radius: 50%;\n+    overflow: hidden;\n+    background: rgba(0, 0, 0, 0.1);\n+    \n+    img {\n+      width: 100%;\n+      height: 100%;\n+      object-fit: cover;\n+    }\n+  }\n+\n+  .shop-name-container {\n+    margin: 1rem 0;\n+    position: relative;\n+  }\n+\n+  .font-size-control {\n+    position: absolute;\n+    right: -3rem;\n+    top: 50%;\n+    transform: translateY(-50%);\n+    display: flex;\n+    flex-direction: column;\n+    gap: 0.5rem;\n+    opacity: 0;\n+    transition: opacity 0.3s;\n+  }\n+\n+  .shop-name-container:hover .font-size-control {\n+    opacity: 1;\n+  }\n+\n+  .shop-description {\n+    color: ${props => props.theme?.colors?.text};\n+    opacity: 0.8;\n+  }\n+`;\n+\n+const FontSizeButton = styled.button`\n+  background: rgba(255, 255, 255, 0.1);\n+  border: none;\n+  border-radius: 50%;\n+  width: 24px;\n+  height: 24px;\n+  display: flex;\n+  align-items: center;\n+  justify-content: center;\n+  color: white;\n+  cursor: pointer;\n+\n+  &:hover {\n+    background: rgba(255, 255, 255, 0.2);\n+  }\n+`;\n+\n+const ItemImageContainer = styled.div`\n+  position: relative;\n+  height: 250px;\n+  width: 100%;\n+  display: flex;\n+  overflow: hidden;\n+  background: rgba(0, 0, 0, 0.1);\n+\n+  .image-container {\n+    width: 100%;\n+    height: 100%;\n+    position: relative;\n+  }\n+\n+  .placeholder {\n+    width: 100%;\n+    height: 100%;\n+    display: flex;\n+    flex-direction: column;\n+    align-items: center;\n+    justify-content: center;\n+    gap: 0.5rem;\n+    color: ${props => props.theme?.colors?.text || '#fff'};\n+    opacity: 0.5;\n+    cursor: pointer;\n+    \n+    span {\n+      font-size: 0.9rem;\n+    }\n+  }\n+\n+  .carousel-arrow {\n+    position: absolute;\n+    top: 50%;\n+    transform: translateY(-50%);\n+    background: rgba(0, 0, 0, 0.5);\n+    border: none;\n+    border-radius: 50%;\n+    width: 32px;\n+    height: 32px;\n+    display: flex;\n+    align-items: center;\n+    justify-content: center;\n+    color: white;\n+    cursor: pointer;\n+    z-index: 2;\n+    transition: all 0.3s ease;\n+\n+    &:hover {\n+      background: rgba(0, 0, 0, 0.8);\n+    }\n+\n+    &.left {\n+      left: 10px;\n+    }\n+\n+    &.right {\n+      right: 10px;\n+    }\n+  }\n+\n+  .add-image {\n+    position: absolute;\n+    top: 10px;\n+    right: 10px;\n+    background: rgba(0, 0, 0, 0.5);\n+    border: none;\n+    border-radius: 50%;\n+    width: 32px;\n+    height: 32px;\n+    display: flex;\n+    align-items: center;\n+    justify-content: center;\n+    color: white;\n+    cursor: pointer;\n+    z-index: 2;\n+    transition: all 0.3s ease;\n+\n+    &:hover {\n+      background: rgba(0, 0, 0, 0.8);\n+    }\n+  }\n+`;\n+\n+const KalKodeCorner = styled.div`\n+  position: fixed;\n+  top: 2rem;\n+  right: 2rem;\n+  z-index: 100;\n+  cursor: pointer;\n+`;\n+\n+const KalKodeLogo = styled.div`\n+  color: #A00000;\n+  font-family: 'Impact', sans-serif;\n+  font-size: 2rem;\n+  letter-spacing: 2px;\n+  transform: skew(-5deg);\n+`;\n+\n+\n+const ShopBanner = styled.div`\n+  position: fixed;\n+  top: 0;\n+  left: 0;\n+  right: 0;\n+  height: 80px;\n+  background: ${props => `${props.theme?.colors?.background || DEFAULT_THEME.colors.background}CC`};\n+  backdrop-filter: blur(10px);\n+  display: flex;\n+  align-items: center;\n+  justify-content: space-between;\n+  padding: 0 2rem;\n+  z-index: 100;\n+  border-bottom: 1px solid ${props => `${props.theme?.colors?.accent || DEFAULT_THEME.colors.accent}30`};\n+`;\n+\n+const UploadingOverlay = styled.div`\n+  position: absolute;\n+  top: 0;\n+  left: 0;\n+  right: 0;\n+  bottom: 0;\n+  background: rgba(0, 0, 0, 0.5);\n+  display: flex;\n+  align-items: center;\n+  justify-content: center;\n+  color: white;\n+  z-index: 3;\n+`;\n+\n+const ItemContent = styled.div`\n+  padding: 1.5rem;\n+  display: flex;\n+  flex-direction: column;\n+  gap: 1rem;\n+  height: calc(100% - 250px); // This ensures the content takes the remaining space\n+  overflow-y: auto;\n+\n+  input, textarea {\n+    background: rgba(255, 255, 255, 0.05);\n+    border: 1px solid rgba(255, 255, 255, 0.1);\n+    border-radius: ${props => props.theme?.styles?.borderRadius || '8px'};\n+    padding: 0.8rem;\n+    color: ${props => props.theme?.colors?.text};\n+    \n+    &:focus {\n+      outline: none;\n+      border-color: ${props => props.theme?.colors?.accent};\n+    }\n+  }\n+`;\n+\n+const ShopName = styled.div`\n+  flex: 1;\n+  text-align: ${props => props.position};\n+  font-family: ${props => props.theme?.fonts?.heading || DEFAULT_THEME.fonts.heading};\n+  font-size: 1.8rem;\n+  padding: ${props => props.position === 'center' ? '0 80px' : '0'};\n+`;\n+\n+const MainContent = styled.div`\n+  max-width: ${props => props.theme?.styles?.containerWidth || DEFAULT_THEME.styles.containerWidth};\n+  margin: 0 auto;\n+  padding: 2rem;\n+  position: relative;\n+  z-index: 1;\n+`;\n+\n+const LoadingSpinner = styled.div`\n+  width: 20px;\n+  height: 20px;\n+  border: 2px solid rgba(255, 255, 255, 0.3);\n+  border-radius: 50%;\n+  border-top-color: white;\n+  animation: spin 1s linear infinite;\n+\n+  @keyframes spin {\n+    to {\n+      transform: rotate(360deg);\n+    }\n+  }\n+`;\n+\n+const ItemGrid = styled.div`\n+  display: grid;\n+  grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));\n+  gap: 2rem;\n+  margin-bottom: 2rem;\n+`;\n+\n+const ItemCard = styled.div`\n+  background: rgba(255, 255, 255, 0.05);\n+  border-radius: ${props => props.theme?.styles?.borderRadius || '12px'};\n+  overflow: hidden;\n+  border: 1px solid rgba(255, 255, 255, 0.1);\n+  width: 100%;\n+  height: 500px;\n+\n+  .item-content {\n+    padding: 1.5rem;\n+  }\n+`;\n+\n+const ZipCodeInput = styled.input`\n+  background: rgba(255, 255, 255, 0.05);\n+  border: 1px solid rgba(255, 255, 255, 0.1);\n+  padding: 0.5rem;\n+  border-radius: 4px;\n+  color: ${props => props.theme?.colors?.text};\n+  margin-top: 0.5rem;\n+  width: 100%;\n+\n+  &:focus {\n+    outline: none;\n+    border-color: ${props => props.theme?.colors?.accent};\n+  }\n+`;\n+\n+const AddItemButton = styled.button`\n+  background: ${props => props.theme?.colors?.primary};\n+  color: ${props => props.theme?.colors?.text};\n+  border: none;\n+  border-radius: 8px;\n+  padding: 1rem;\n+  display: flex;\n+  align-items: center;\n+  gap: 0.5rem;\n+  cursor: pointer;\n+  margin: 2rem auto;\n+  transition: all 0.3s;\n+\n+  &:hover {\n+    transform: translateY(-2px);\n+  }\n+`;\n+\n+const cleanDataForFirestore = (data) => {\n+  if (!data) return data;\n+  \n+  if (Array.isArray(data)) {\n+    return data.map(item => cleanDataForFirestore(item));\n+  }\n+  \n+  if (typeof data === 'object' && !(data instanceof Date)) {\n+    const cleanedData = {};\n+    for (const [key, value] of Object.entries(data)) {\n+      // Skip file objects\n+      if (value instanceof File) continue;\n+      // Skip null/undefined values\n+      if (value === null || value === undefined) continue;\n+      cleanedData[key] = cleanDataForFirestore(value);\n+    }\n+    return cleanedData;\n+  }\n+  \n+  return data;\n+};\n+\n+const ShopPage = () => {\n+  const navigate = useNavigate();\n+  const [shopData, setShopData] = useState(null); // Keep as null initially\n+  const [isReady, setIsReady] = useState(false);  // Add this state\n+  const [activeTab, setActiveTab] = useState('shop');\n+  const [saving, setSaving] = useState(false);\n+  const [shopNameFontSize, setShopNameFontSize] = useState(2.5);\n+  const [uploading, setUploading] = useState({});\n+\n+  useEffect(() => {\n+    const loadShopData = async (userId) => {\n+      try {\n+        const shopDoc = await getDoc(doc(db, 'shops', userId));\n+        if (shopDoc.exists()) {\n+          const data = shopDoc.data();\n+          setShopData(data);\n+        }\n+        setIsReady(true); // Set ready after data is loaded\n+      } catch (error) {\n+        console.error('Error loading shop data:', error);\n+        setIsReady(true); // Still set ready even on error\n+      }\n+    };    \n+\n+    const unsubscribe = auth.onAuthStateChanged((user) => {\n+      if (!user) {\n+        navigate('/auth');\n+        return;\n+      }\n+      loadShopData(user.uid);\n+    });\n+\n+    return () => unsubscribe();\n+  }, [navigate]);\n+\n+  // Don't render anything until ready\n+  if (!isReady) {\n+    return null;\n+  }\n+\n+  const handleUpdateShop = async (updates) => {\n+    if (!auth.currentUser) return;\n+    \n+    try {\n+      setSaving(true);\n+      console.log('Updating shop with:', updates); // Debug log\n+      \n+      let finalUpdates = { ...updates };\n+      \n+      // Handle profile image upload\n+      if (updates.profile?.file instanceof File) {\n+        const file = updates.profile.file;\n+        const metadata = {\n+          contentType: file.type || 'image/jpeg',\n+          cacheControl: 'public,max-age=3600',\n+          customMetadata: {\n+            'Access-Control-Allow-Origin': '*'\n+          }\n+        };\n+        \n+        const profileRef = ref(\n+          storage, \n+          `shops/${auth.currentUser.uid}/profile/profile-${Date.now()}`\n+        );\n+        \n+        const snapshot = await uploadBytes(profileRef, file, metadata);\n+        const imageUrl = await getDownloadURL(snapshot.ref);\n+        \n+        // Update with image URL instead of file\n+        finalUpdates = {\n+          ...finalUpdates,\n+          profile: imageUrl\n+        };\n+      }\n+  \n+      // Update Firestore\n+      const shopRef = doc(db, 'shops', auth.currentUser.uid);\n+      await updateDoc(shopRef, {\n+        ...finalUpdates,\n+        updatedAt: new Date().toISOString()\n+      });\n+  \n+      // Update local state\n+      setShopData(prev => ({\n+        ...prev,\n+        ...finalUpdates\n+      }));\n+  \n+      console.log('Shop update successful:', finalUpdates);\n+    } catch (error) {\n+      console.error('Error updating shop:', error);\n+    } finally {\n+      setSaving(false);\n+    }\n+  };\n+\n+  const logImageState = (image) => {\n+    if (!image) return 'null';\n+    if (typeof image === 'string') return `URL: ${image}`;\n+    if (image instanceof File) return `File: ${image.name}`;\n+    if (image?.file instanceof File) return `File Object: ${image.file.name}`;\n+    return `Unknown type: ${typeof image}`;\n+  };\n+\n+  // Handle item updates\n+  const handleItemUpdate = async (itemId, updates) => {\n+    if (!auth.currentUser) return;\n+  \n+    try {\n+      setSaving(true);\n+      console.log('Updating item with:', updates); // Debug log\n+  \n+      const currentItem = shopData.items.find(item => item.id === itemId);\n+      let updatedItem = { ...currentItem, ...updates };\n+  \n+      // Handle image uploads if present\n+      if (updates.images) {\n+        const processedImages = await Promise.all(updates.images.map(async (image, index) => {\n+          // If it's a URL or null, keep it\n+          if (!image || typeof image === 'string') return image;\n+          \n+          // If it's a File object, upload it\n+          if (image instanceof File || image?.file instanceof File) {\n+            const file = image instanceof File ? image : image.file;\n+            try {\n+              const metadata = {\n+                contentType: file.type || 'image/jpeg',\n+                cacheControl: 'public,max-age=3600'\n+              };\n+              \n+              const imageRef = ref(\n+                storage, \n+                `shops/${auth.currentUser.uid}/items/${itemId}/image-${index}-${Date.now()}`\n+              );\n+              \n+              const snapshot = await uploadBytes(imageRef, file, metadata);\n+              return await getDownloadURL(snapshot.ref);\n+            } catch (uploadError) {\n+              console.error(`Failed to upload image ${index}:`, uploadError);\n+              return null;\n+            }\n+          }\n+          return null;\n+        }));\n+  \n+        updatedItem.images = processedImages;\n+      }\n+  \n+      // Update in Firestore\n+      const shopRef = doc(db, 'shops', auth.currentUser.uid);\n+      const updatedItems = shopData.items.map(item =>\n+        item.id === itemId ? updatedItem : item\n+      );\n+  \n+      await updateDoc(shopRef, {\n+        items: updatedItems,\n+        updatedAt: new Date().toISOString()\n+      });\n+  \n+      // Update local state\n+      setShopData(prev => ({\n+        ...prev,\n+        items: updatedItems\n+      }));\n+  \n+      console.log('Item updated successfully:', updatedItem); // Debug log\n+    } catch (error) {\n+      console.error('Error updating item:', error);\n+    } finally {\n+      setSaving(false);\n+    }\n+  };\n+  \n+    // Save shop data\n+  const saveShopData = async (updates) => {\n+    if (!auth.currentUser) return;\n+    setSaving(true);\n+    try {\n+      const shopRef = doc(db, 'shops', auth.currentUser.uid);\n+      await updateDoc(shopRef, {\n+        ...updates,\n+        updatedAt: new Date().toISOString()\n+      });\n+      setShopData(prev => ({ ...prev, ...updates }));\n+    } catch (error) {\n+      console.error('Error saving shop data:', error);\n+    } finally {\n+      setSaving(false);\n+    }\n+  };\n+\n+  const handleAddItem = () => {\n+    const newItem = {\n+      id: Date.now().toString(),\n+      name: 'New Item',\n+      price: '',\n+      description: '',\n+      zipCode: '',\n+      images: [null, null, null],\n+      currentImageIndex: 0\n+    };\n+\n+    const updatedItems = [...(shopData.items || []), newItem];\n+    saveShopData({ items: updatedItems });\n+  };\n+\n+  return (\n+    <ThemeProvider theme={shopData?.theme || DEFAULT_THEME}>\n+      <PageContainer>\n+        <KalKodeCorner>\n+          <KalKodeLogo onClick={() => navigate('/')}>\n+            KALKODE\n+          </KalKodeLogo>\n+        </KalKodeCorner>\n+\n+        <TabPositioner\n+          position={shopData?.layout?.tabPosition || 'top'}\n+          activeTab={activeTab}\n+          onTabChange={setActiveTab}\n+          tabs={[\n+            { id: 'home', label: 'Home' },\n+            { id: 'community', label: 'Community' },\n+            { id: 'shop', label: 'Shop' }\n+          ]}\n+          theme={shopData?.theme}\n+        />\n+\n+        <MainContent>\n+        {activeTab === 'shop' && (\n+          <>\n+            <ShopProfileSection>\n+            <div className=\"profile-image\">\n+              {shopData?.profile && typeof shopData.profile === 'string' ? (\n+                // If we have a URL string, show the image directly\n+                <img \n+                  src={shopData.profile} \n+                  alt=\"Profile\" \n+                  style={{ \n+                    width: '100%',\n+                    height: '100%',\n+                    objectFit: 'cover',\n+                    cursor: 'pointer'\n+                  }}\n+                  onClick={() => {\n+                    // Allow changing the image by clicking on it\n+                    const input = document.createElement('input');\n+                    input.type = 'file';\n+                    input.accept = 'image/*';\n+                    input.onchange = (e) => {\n+                      if (e.target.files?.[0]) {\n+                        handleUpdateShop({ \n+                          profile: {\n+                            file: e.target.files[0],\n+                            type: e.target.files[0].type\n+                          }\n+                        });\n+                      }\n+                    };\n+                    input.click();\n+                  }}\n+                />\n+              ) : (\n+                // If no image URL, show the EditableImage component\n+                <EditableImage\n+                  value={null}\n+                  onChange={(value) => {\n+                    console.log('Profile image update:', value);\n+                    if (value instanceof File) {\n+                      handleUpdateShop({ \n+                        profile: {\n+                          file: value,\n+                          type: value.type\n+                        }\n+                      });\n+                    }\n+                  }}\n+                  theme={shopData?.theme}\n+                  round\n+                  width=\"150px\"\n+                  height=\"150px\"\n+                  style={{ \n+                    width: '150px',\n+                    height: '150px',\n+                    borderRadius: '50%',\n+                    objectFit: 'cover'\n+                  }}\n+                />\n+              )}\n+            </div>\n+              <div className=\"shop-name-container\">\n+                  <EditableText\n+                    value={shopData?.name}\n+                    onChange={(value) => handleUpdateShop({ name: value })}\n+                    placeholder=\"Shop Name\"\n+                    theme={shopData?.theme}\n+                    style={{\n+                      fontSize: `${shopNameFontSize}rem`,\n+                      background: `linear-gradient(45deg, ${shopData?.theme?.colors?.primary}, ${shopData?.theme?.colors?.accent})`,\n+                      WebkitBackgroundClip: 'text',\n+                      WebkitTextFillColor: 'transparent',\n+                      fontFamily: shopData?.theme?.fonts?.heading\n+                    }}\n+                  />\n+                  <div className=\"font-size-control\">\n+                    <FontSizeButton onClick={() => setShopNameFontSize(prev => prev + 0.5)}>+</FontSizeButton>\n+                    <FontSizeButton onClick={() => setShopNameFontSize(prev => Math.max(1, prev - 0.5))}>-</FontSizeButton>\n+                  </div>\n+                </div>\n+            <div className=\"shop-description\">\n+              {shopData?.description || \"Shop Description\"}\n+            </div>\n+            </ShopProfileSection>\n+\n+            <ItemGrid>\n+              {shopData?.items?.map(item => (\n+                <ItemCard key={item.id}>\n+                  <ItemImageContainer>\n+                    {uploading[item.id] && (\n+                      <UploadingOverlay>\n+                        <LoadingSpinner />\n+                      </UploadingOverlay>\n+                    )}\n+                    <div \n+                      className=\"image-container\"\n+                      onClick={() => {\n+                        if (!item.images[item.currentImageIndex]) {\n+                          document.getElementById(`image-upload-${item.id}-${item.currentImageIndex}`).click();\n+                        }\n+                      }}\n+                    >\n+                      {item.images[item.currentImageIndex] ? (\n+                        <img \n+                          src={item.images[item.currentImageIndex]} \n+                          alt={item.name}\n+                          style={{ width: '100%', height: '100%', objectFit: 'cover' }}\n+                        />\n+                      ) : (\n+                        <div className=\"placeholder\">\n+                          <Plus size={24} />\n+                          <span>Upload Image</span>\n+                        </div>\n+                      )}\n+                    </div>\n+                    \n+                    {/* Only show carousel arrows if there are images */}\n+                    {item.images.some(img => img) && (\n+                      <>\n+                        <button \n+                          className=\"carousel-arrow left\"\n+                          onClick={() => {\n+                            const newIndex = ((item.currentImageIndex - 1) + 3) % 3;\n+                            handleItemUpdate(item.id, { currentImageIndex: newIndex });\n+                          }}\n+                        >\n+                          <ChevronLeft size={16} />\n+                        </button>\n+                        <button \n+                          className=\"carousel-arrow right\"\n+                          onClick={() => {\n+                            const newIndex = (item.currentImageIndex + 1) % 3;\n+                            handleItemUpdate(item.id, { currentImageIndex: newIndex });\n+                          }}\n+                        >\n+                          <ChevronRight size={16} />\n+                        </button>\n+                      </>\n+                    )}\n+\n+                    {/* Add/Remove button */}\n+                    {item.images[item.currentImageIndex] && (\n+                      <button \n+                        className=\"add-image\"\n+                        onClick={() => {\n+                          const newImages = [...item.images];\n+                          newImages[item.currentImageIndex] = null;\n+                          handleItemUpdate(item.id, { images: newImages });\n+                        }}\n+                      >\n+                        <X size={16} />\n+                      </button>\n+                    )}\n+\n+                    <input\n+                      type=\"file\"\n+                      id={`image-upload-${item.id}-${item.currentImageIndex}`}\n+                      accept=\"image/*\"\n+                      style={{ display: 'none' }}\n+                      onChange={(e) => {\n+                        if (e.target.files?.[0]) {\n+                          const newImages = [...item.images];\n+                          newImages[item.currentImageIndex] = e.target.files[0];\n+                          handleItemUpdate(item.id, { images: newImages });\n+                        }\n+                      }}\n+                    />\n+                  </ItemImageContainer>\n+                  <ItemContent>\n+                    <EditableText\n+                      value={item.name}\n+                      onChange={(value) => handleItemUpdate(item.id, { name: value })}\n+                      placeholder=\"Item Name\"\n+                      theme={shopData?.theme}\n+                    />\n+                    <EditableText\n+                      value={item.price}\n+                      onChange={(value) => handleItemUpdate(item.id, { price: value })}\n+                      placeholder=\"Price\"\n+                      theme={shopData?.theme}\n+                    />\n+                    <EditableText\n+                      value={item.description}\n+                      onChange={(value) => handleItemUpdate(item.id, { description: value })}\n+                      placeholder=\"Item Description\"\n+                      multiline\n+                      theme={shopData?.theme}\n+                    />\n+                    <ZipCodeInput\n+                      value={item.zipCode || ''}\n+                      onChange={(e) => handleItemUpdate(item.id, { zipCode: e.target.value })}\n+                      placeholder=\"ZIP Code\"\n+                      maxLength=\"5\"\n+                      pattern=\"[0-9]*\"\n+                    />\n+                  </ItemContent>\n+                </ItemCard>\n+              ))}\n+            </ItemGrid>\n+\n+              <AddItemButton onClick={handleAddItem} theme={shopData?.theme}>\n+                <Plus size={20} />\n+                Add Item\n+              </AddItemButton>\n+            </>\n+          )}\n+\n+          {activeTab === 'home' && (\n+            <div>\n+              <EditableText\n+                value={shopData?.mission}\n+                onChange={(value) => saveShopData({ mission: value })}\n+                placeholder=\"Your Shop's Mission\"\n+                multiline\n+                theme={shopData?.theme}\n+              />\n+              {/* Add more home page customization options */}\n+            </div>\n+          )}\n+\n+          {activeTab === 'community' && (\n+            <div>\n+              {/* Add community customization options */}\n+            </div>\n+          )}\n+        </MainContent>\n+      </PageContainer>\n+    </ThemeProvider>\n+  );\n+};\n+\n+export default ShopPage;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1736261849739,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,15 +20,23 @@\n   position: relative;\n   overflow-x: hidden;\n `;\n \n+const MainContent = styled.div`\n+  max-width: ${props => props.theme?.styles?.containerWidth || DEFAULT_THEME.styles.containerWidth};\n+  margin: 0 auto;\n+  padding: 6rem 2rem 2rem; // Increased top padding to accommodate tabs\n+  position: relative;\n+  z-index: 1;\n+`;\n+\n const ShopProfileSection = styled.div`\n   display: flex;\n   flex-direction: column;\n   align-items: center;\n   text-align: center;\n   max-width: 800px;\n-  margin: 0 auto 3rem auto;\n+  margin: 2rem auto 3rem;  // Added top margin\n   padding: 2rem;\n \n   .profile-image {\n     margin-bottom: 2rem;\n@@ -45,31 +53,65 @@\n     }\n   }\n \n   .shop-name-container {\n-    margin: 1rem 0;\n-    position: relative;\n-  }\n+    width: 100%;\n+    margin: 1.5rem 0;\n \n-  .font-size-control {\n-    position: absolute;\n-    right: -3rem;\n-    top: 50%;\n-    transform: translateY(-50%);\n-    display: flex;\n-    flex-direction: column;\n-    gap: 0.5rem;\n-    opacity: 0;\n-    transition: opacity 0.3s;\n-  }\n+    input {\n+      width: 100%;\n+      text-align: center;\n+      background: transparent;\n+      border: none;\n+      font-size: ${props => props.fontSize || '2.5rem'};\n+      font-family: ${props => props.theme?.fonts?.heading};\n+      background: ${props => `linear-gradient(45deg, ${props.theme?.colors?.primary}, ${props.theme?.colors?.accent})`};\n+      -webkit-background-clip: text;\n+      -webkit-text-fill-color: transparent;\n+      outline: none;\n+      padding: 0.5rem;\n \n-  .shop-name-container:hover .font-size-control {\n-    opacity: 1;\n+      &:focus {\n+        background: ${props => `linear-gradient(45deg, ${props.theme?.colors?.primary}, ${props.theme?.colors?.accent})`};\n+        -webkit-background-clip: text;\n+        -webkit-text-fill-color: transparent;\n+      }\n+\n+      &::placeholder {\n+        background: ${props => `linear-gradient(45deg, ${props.theme?.colors?.primary}80, ${props.theme?.colors?.accent}80)`};\n+        -webkit-background-clip: text;\n+        -webkit-text-fill-color: transparent;\n+      }\n+    }\n   }\n \n-  .shop-description {\n-    color: ${props => props.theme?.colors?.text};\n-    opacity: 0.8;\n+  .shop-description-container {\n+    width: 100%;\n+    margin-top: 1rem;\n+\n+    textarea {\n+      width: 100%;\n+      text-align: center;\n+      background: transparent;\n+      border: none;\n+      font-size: 1.1rem;\n+      font-family: ${props => props.theme?.fonts?.body};\n+      color: ${props => props.theme?.colors?.text};\n+      opacity: 0.8;\n+      outline: none;\n+      padding: 0.5rem;\n+      resize: none;\n+      min-height: 60px;\n+\n+      &:focus {\n+        opacity: 1;\n+      }\n+\n+      &::placeholder {\n+        color: ${props => props.theme?.colors?.text};\n+        opacity: 0.5;\n+      }\n+    }\n   }\n `;\n \n const FontSizeButton = styled.button`\n@@ -806,1595 +848,5 @@\n     </ThemeProvider>\n   );\n };\n \n-export default ShopPage;\n-// src/pages/shop/ShopPage.js\n-\n-import React, { useState, useEffect } from 'react';\n-import { useNavigate } from 'react-router-dom';\n-import styled, { ThemeProvider } from 'styled-components';\n-import { auth, db } from '../../firebase/config';\n-import { doc, getDoc, updateDoc } from 'firebase/firestore';\n-import { Plus, ChevronLeft, ChevronRight, X } from 'lucide-react';\n-import TabPositioner from './components/TabPositioner';\n-import EditableText from './components/EditableComponents/EditableText';\n-import EditableImage from './components/EditableComponents/EditableImage';\n-import { DEFAULT_THEME } from '../../theme/theme';\n-import { ref, uploadBytes, getDownloadURL } from 'firebase/storage';\n-import { storage } from '../../firebase/config';\n-\n-const PageContainer = styled.div`\n-  min-height: 100vh;\n-  background: ${props => props.theme?.colors?.background || DEFAULT_THEME.colors.background};\n-  color: ${props => props.theme?.colors?.text || DEFAULT_THEME.colors.text};\n-  position: relative;\n-  overflow-x: hidden;\n-`;\n-\n-const ShopProfileSection = styled.div`\n-  display: flex;\n-  flex-direction: column;\n-  align-items: center;\n-  text-align: center;\n-  max-width: 800px;\n-  margin: 0 auto 3rem auto;\n-  padding: 2rem;\n-\n-  .profile-image {\n-    margin-bottom: 2rem;\n-    width: 150px;\n-    height: 150px;\n-    border-radius: 50%;\n-    overflow: hidden;\n-    background: rgba(0, 0, 0, 0.1);\n-    \n-    img {\n-      width: 100%;\n-      height: 100%;\n-      object-fit: cover;\n-    }\n-  }\n-\n-  .shop-name-container {\n-    margin: 1rem 0;\n-    position: relative;\n-  }\n-\n-  .font-size-control {\n-    position: absolute;\n-    right: -3rem;\n-    top: 50%;\n-    transform: translateY(-50%);\n-    display: flex;\n-    flex-direction: column;\n-    gap: 0.5rem;\n-    opacity: 0;\n-    transition: opacity 0.3s;\n-  }\n-\n-  .shop-name-container:hover .font-size-control {\n-    opacity: 1;\n-  }\n-\n-  .shop-description {\n-    color: ${props => props.theme?.colors?.text};\n-    opacity: 0.8;\n-  }\n-`;\n-\n-const FontSizeButton = styled.button`\n-  background: rgba(255, 255, 255, 0.1);\n-  border: none;\n-  border-radius: 50%;\n-  width: 24px;\n-  height: 24px;\n-  display: flex;\n-  align-items: center;\n-  justify-content: center;\n-  color: white;\n-  cursor: pointer;\n-\n-  &:hover {\n-    background: rgba(255, 255, 255, 0.2);\n-  }\n-`;\n-\n-const ItemImageContainer = styled.div`\n-  position: relative;\n-  height: 250px;\n-  width: 100%;\n-  display: flex;\n-  overflow: hidden;\n-  background: rgba(0, 0, 0, 0.1);\n-\n-  .image-container {\n-    width: 100%;\n-    height: 100%;\n-    position: relative;\n-  }\n-\n-  .placeholder {\n-    width: 100%;\n-    height: 100%;\n-    display: flex;\n-    flex-direction: column;\n-    align-items: center;\n-    justify-content: center;\n-    gap: 0.5rem;\n-    color: ${props => props.theme?.colors?.text || '#fff'};\n-    opacity: 0.5;\n-    cursor: pointer;\n-    \n-    span {\n-      font-size: 0.9rem;\n-    }\n-  }\n-\n-  .carousel-arrow {\n-    position: absolute;\n-    top: 50%;\n-    transform: translateY(-50%);\n-    background: rgba(0, 0, 0, 0.5);\n-    border: none;\n-    border-radius: 50%;\n-    width: 32px;\n-    height: 32px;\n-    display: flex;\n-    align-items: center;\n-    justify-content: center;\n-    color: white;\n-    cursor: pointer;\n-    z-index: 2;\n-    transition: all 0.3s ease;\n-\n-    &:hover {\n-      background: rgba(0, 0, 0, 0.8);\n-    }\n-\n-    &.left {\n-      left: 10px;\n-    }\n-\n-    &.right {\n-      right: 10px;\n-    }\n-  }\n-\n-  .add-image {\n-    position: absolute;\n-    top: 10px;\n-    right: 10px;\n-    background: rgba(0, 0, 0, 0.5);\n-    border: none;\n-    border-radius: 50%;\n-    width: 32px;\n-    height: 32px;\n-    display: flex;\n-    align-items: center;\n-    justify-content: center;\n-    color: white;\n-    cursor: pointer;\n-    z-index: 2;\n-    transition: all 0.3s ease;\n-\n-    &:hover {\n-      background: rgba(0, 0, 0, 0.8);\n-    }\n-  }\n-`;\n-\n-const KalKodeCorner = styled.div`\n-  position: fixed;\n-  top: 2rem;\n-  right: 2rem;\n-  z-index: 100;\n-  cursor: pointer;\n-`;\n-\n-const KalKodeLogo = styled.div`\n-  color: #A00000;\n-  font-family: 'Impact', sans-serif;\n-  font-size: 2rem;\n-  letter-spacing: 2px;\n-  transform: skew(-5deg);\n-`;\n-\n-\n-const ShopBanner = styled.div`\n-  position: fixed;\n-  top: 0;\n-  left: 0;\n-  right: 0;\n-  height: 80px;\n-  background: ${props => `${props.theme?.colors?.background || DEFAULT_THEME.colors.background}CC`};\n-  backdrop-filter: blur(10px);\n-  display: flex;\n-  align-items: center;\n-  justify-content: space-between;\n-  padding: 0 2rem;\n-  z-index: 100;\n-  border-bottom: 1px solid ${props => `${props.theme?.colors?.accent || DEFAULT_THEME.colors.accent}30`};\n-`;\n-\n-const UploadingOverlay = styled.div`\n-  position: absolute;\n-  top: 0;\n-  left: 0;\n-  right: 0;\n-  bottom: 0;\n-  background: rgba(0, 0, 0, 0.5);\n-  display: flex;\n-  align-items: center;\n-  justify-content: center;\n-  color: white;\n-  z-index: 3;\n-`;\n-\n-const ItemContent = styled.div`\n-  padding: 1.5rem;\n-  display: flex;\n-  flex-direction: column;\n-  gap: 1rem;\n-  height: calc(100% - 250px); // This ensures the content takes the remaining space\n-  overflow-y: auto;\n-\n-  input, textarea {\n-    background: rgba(255, 255, 255, 0.05);\n-    border: 1px solid rgba(255, 255, 255, 0.1);\n-    border-radius: ${props => props.theme?.styles?.borderRadius || '8px'};\n-    padding: 0.8rem;\n-    color: ${props => props.theme?.colors?.text};\n-    \n-    &:focus {\n-      outline: none;\n-      border-color: ${props => props.theme?.colors?.accent};\n-    }\n-  }\n-`;\n-\n-const ShopName = styled.div`\n-  flex: 1;\n-  text-align: ${props => props.position};\n-  font-family: ${props => props.theme?.fonts?.heading || DEFAULT_THEME.fonts.heading};\n-  font-size: 1.8rem;\n-  padding: ${props => props.position === 'center' ? '0 80px' : '0'};\n-`;\n-\n-const MainContent = styled.div`\n-  max-width: ${props => props.theme?.styles?.containerWidth || DEFAULT_THEME.styles.containerWidth};\n-  margin: 0 auto;\n-  padding: 2rem;\n-  position: relative;\n-  z-index: 1;\n-`;\n-\n-const LoadingSpinner = styled.div`\n-  width: 20px;\n-  height: 20px;\n-  border: 2px solid rgba(255, 255, 255, 0.3);\n-  border-radius: 50%;\n-  border-top-color: white;\n-  animation: spin 1s linear infinite;\n-\n-  @keyframes spin {\n-    to {\n-      transform: rotate(360deg);\n-    }\n-  }\n-`;\n-\n-const ItemGrid = styled.div`\n-  display: grid;\n-  grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));\n-  gap: 2rem;\n-  margin-bottom: 2rem;\n-`;\n-\n-const ItemCard = styled.div`\n-  background: rgba(255, 255, 255, 0.05);\n-  border-radius: ${props => props.theme?.styles?.borderRadius || '12px'};\n-  overflow: hidden;\n-  border: 1px solid rgba(255, 255, 255, 0.1);\n-  width: 100%;\n-  height: 500px;\n-\n-  .item-content {\n-    padding: 1.5rem;\n-  }\n-`;\n-\n-const ZipCodeInput = styled.input`\n-  background: rgba(255, 255, 255, 0.05);\n-  border: 1px solid rgba(255, 255, 255, 0.1);\n-  padding: 0.5rem;\n-  border-radius: 4px;\n-  color: ${props => props.theme?.colors?.text};\n-  margin-top: 0.5rem;\n-  width: 100%;\n-\n-  &:focus {\n-    outline: none;\n-    border-color: ${props => props.theme?.colors?.accent};\n-  }\n-`;\n-\n-const AddItemButton = styled.button`\n-  background: ${props => props.theme?.colors?.primary};\n-  color: ${props => props.theme?.colors?.text};\n-  border: none;\n-  border-radius: 8px;\n-  padding: 1rem;\n-  display: flex;\n-  align-items: center;\n-  gap: 0.5rem;\n-  cursor: pointer;\n-  margin: 2rem auto;\n-  transition: all 0.3s;\n-\n-  &:hover {\n-    transform: translateY(-2px);\n-  }\n-`;\n-\n-const cleanDataForFirestore = (data) => {\n-  if (!data) return data;\n-  \n-  if (Array.isArray(data)) {\n-    return data.map(item => cleanDataForFirestore(item));\n-  }\n-  \n-  if (typeof data === 'object' && !(data instanceof Date)) {\n-    const cleanedData = {};\n-    for (const [key, value] of Object.entries(data)) {\n-      // Skip file objects\n-      if (value instanceof File) continue;\n-      // Skip null/undefined values\n-      if (value === null || value === undefined) continue;\n-      cleanedData[key] = cleanDataForFirestore(value);\n-    }\n-    return cleanedData;\n-  }\n-  \n-  return data;\n-};\n-\n-const ShopPage = () => {\n-  const navigate = useNavigate();\n-  const [shopData, setShopData] = useState(null); // Keep as null initially\n-  const [isReady, setIsReady] = useState(false);  // Add this state\n-  const [activeTab, setActiveTab] = useState('shop');\n-  const [saving, setSaving] = useState(false);\n-  const [shopNameFontSize, setShopNameFontSize] = useState(2.5);\n-  const [uploading, setUploading] = useState({});\n-\n-  useEffect(() => {\n-    const loadShopData = async (userId) => {\n-      try {\n-        const shopDoc = await getDoc(doc(db, 'shops', userId));\n-        if (shopDoc.exists()) {\n-          const data = shopDoc.data();\n-          setShopData(data);\n-        }\n-        setIsReady(true); // Set ready after data is loaded\n-      } catch (error) {\n-        console.error('Error loading shop data:', error);\n-        setIsReady(true); // Still set ready even on error\n-      }\n-    };    \n-\n-    const unsubscribe = auth.onAuthStateChanged((user) => {\n-      if (!user) {\n-        navigate('/auth');\n-        return;\n-      }\n-      loadShopData(user.uid);\n-    });\n-\n-    return () => unsubscribe();\n-  }, [navigate]);\n-\n-  // Don't render anything until ready\n-  if (!isReady) {\n-    return null;\n-  }\n-\n-  const handleUpdateShop = async (updates) => {\n-    if (!auth.currentUser) return;\n-    \n-    try {\n-      setSaving(true);\n-      console.log('Updating shop with:', updates); // Debug log\n-      \n-      let finalUpdates = { ...updates };\n-      \n-      // Handle profile image upload\n-      if (updates.profile?.file instanceof File) {\n-        const file = updates.profile.file;\n-        const metadata = {\n-          contentType: file.type || 'image/jpeg',\n-          cacheControl: 'public,max-age=3600',\n-          customMetadata: {\n-            'Access-Control-Allow-Origin': '*'\n-          }\n-        };\n-        \n-        const profileRef = ref(\n-          storage, \n-          `shops/${auth.currentUser.uid}/profile/profile-${Date.now()}`\n-        );\n-        \n-        const snapshot = await uploadBytes(profileRef, file, metadata);\n-        const imageUrl = await getDownloadURL(snapshot.ref);\n-        \n-        // Update with image URL instead of file\n-        finalUpdates = {\n-          ...finalUpdates,\n-          profile: imageUrl\n-        };\n-      }\n-  \n-      // Update Firestore\n-      const shopRef = doc(db, 'shops', auth.currentUser.uid);\n-      await updateDoc(shopRef, {\n-        ...finalUpdates,\n-        updatedAt: new Date().toISOString()\n-      });\n-  \n-      // Update local state\n-      setShopData(prev => ({\n-        ...prev,\n-        ...finalUpdates\n-      }));\n-  \n-      console.log('Shop update successful:', finalUpdates);\n-    } catch (error) {\n-      console.error('Error updating shop:', error);\n-    } finally {\n-      setSaving(false);\n-    }\n-  };\n-\n-  const logImageState = (image) => {\n-    if (!image) return 'null';\n-    if (typeof image === 'string') return `URL: ${image}`;\n-    if (image instanceof File) return `File: ${image.name}`;\n-    if (image?.file instanceof File) return `File Object: ${image.file.name}`;\n-    return `Unknown type: ${typeof image}`;\n-  };\n-\n-  // Handle item updates\n-  const handleItemUpdate = async (itemId, updates) => {\n-    if (!auth.currentUser) return;\n-  \n-    try {\n-      setSaving(true);\n-      console.log('Updating item with:', updates); // Debug log\n-  \n-      const currentItem = shopData.items.find(item => item.id === itemId);\n-      let updatedItem = { ...currentItem, ...updates };\n-  \n-      // Handle image uploads if present\n-      if (updates.images) {\n-        const processedImages = await Promise.all(updates.images.map(async (image, index) => {\n-          // If it's a URL or null, keep it\n-          if (!image || typeof image === 'string') return image;\n-          \n-          // If it's a File object, upload it\n-          if (image instanceof File || image?.file instanceof File) {\n-            const file = image instanceof File ? image : image.file;\n-            try {\n-              const metadata = {\n-                contentType: file.type || 'image/jpeg',\n-                cacheControl: 'public,max-age=3600'\n-              };\n-              \n-              const imageRef = ref(\n-                storage, \n-                `shops/${auth.currentUser.uid}/items/${itemId}/image-${index}-${Date.now()}`\n-              );\n-              \n-              const snapshot = await uploadBytes(imageRef, file, metadata);\n-              return await getDownloadURL(snapshot.ref);\n-            } catch (uploadError) {\n-              console.error(`Failed to upload image ${index}:`, uploadError);\n-              return null;\n-            }\n-          }\n-          return null;\n-        }));\n-  \n-        updatedItem.images = processedImages;\n-      }\n-  \n-      // Update in Firestore\n-      const shopRef = doc(db, 'shops', auth.currentUser.uid);\n-      const updatedItems = shopData.items.map(item =>\n-        item.id === itemId ? updatedItem : item\n-      );\n-  \n-      await updateDoc(shopRef, {\n-        items: updatedItems,\n-        updatedAt: new Date().toISOString()\n-      });\n-  \n-      // Update local state\n-      setShopData(prev => ({\n-        ...prev,\n-        items: updatedItems\n-      }));\n-  \n-      console.log('Item updated successfully:', updatedItem); // Debug log\n-    } catch (error) {\n-      console.error('Error updating item:', error);\n-    } finally {\n-      setSaving(false);\n-    }\n-  };\n-  \n-    // Save shop data\n-  const saveShopData = async (updates) => {\n-    if (!auth.currentUser) return;\n-    setSaving(true);\n-    try {\n-      const shopRef = doc(db, 'shops', auth.currentUser.uid);\n-      await updateDoc(shopRef, {\n-        ...updates,\n-        updatedAt: new Date().toISOString()\n-      });\n-      setShopData(prev => ({ ...prev, ...updates }));\n-    } catch (error) {\n-      console.error('Error saving shop data:', error);\n-    } finally {\n-      setSaving(false);\n-    }\n-  };\n-\n-  const handleAddItem = () => {\n-    const newItem = {\n-      id: Date.now().toString(),\n-      name: 'New Item',\n-      price: '',\n-      description: '',\n-      zipCode: '',\n-      images: [null, null, null],\n-      currentImageIndex: 0\n-    };\n-\n-    const updatedItems = [...(shopData.items || []), newItem];\n-    saveShopData({ items: updatedItems });\n-  };\n-\n-  return (\n-    <ThemeProvider theme={shopData?.theme || DEFAULT_THEME}>\n-      <PageContainer>\n-        <KalKodeCorner>\n-          <KalKodeLogo onClick={() => navigate('/')}>\n-            KALKODE\n-          </KalKodeLogo>\n-        </KalKodeCorner>\n-    \n-        <TabPositioner\n-          position={shopData?.layout?.tabPosition || 'top'}\n-          activeTab={activeTab}\n-          onTabChange={setActiveTab}\n-          tabs={[\n-            { id: 'home', label: 'Home' },\n-            { id: 'community', label: 'Community' },\n-            { id: 'shop', label: 'Shop' }\n-          ]}\n-          theme={shopData?.theme}\n-        />\n-\n-        <MainContent>\n-        {activeTab === 'shop' && (\n-          <>\n-            <ShopProfileSection>\n-            <div className=\"profile-image\">\n-              {shopData?.profile && typeof shopData.profile === 'string' ? (\n-                // If we have a URL string, show the image directly\n-                <img \n-                  src={shopData.profile} \n-                  alt=\"Profile\" \n-                  style={{ \n-                    width: '100%',\n-                    height: '100%',\n-                    objectFit: 'cover',\n-                    cursor: 'pointer'\n-                  }}\n-                  onClick={() => {\n-                    // Allow changing the image by clicking on it\n-                    const input = document.createElement('input');\n-                    input.type = 'file';\n-                    input.accept = 'image/*';\n-                    input.onchange = (e) => {\n-                      if (e.target.files?.[0]) {\n-                        handleUpdateShop({ \n-                          profile: {\n-                            file: e.target.files[0],\n-                            type: e.target.files[0].type\n-                          }\n-                        });\n-                      }\n-                    };\n-                    input.click();\n-                  }}\n-                />\n-              ) : (\n-                // If no image URL, show the EditableImage component\n-                <EditableImage\n-                  value={null}\n-                  onChange={(value) => {\n-                    console.log('Profile image update:', value);\n-                    if (value instanceof File) {\n-                      handleUpdateShop({ \n-                        profile: {\n-                          file: value,\n-                          type: value.type\n-                        }\n-                      });\n-                    }\n-                  }}\n-                  theme={shopData?.theme}\n-                  round\n-                  width=\"150px\"\n-                  height=\"150px\"\n-                  style={{ \n-                    width: '150px',\n-                    height: '150px',\n-                    borderRadius: '50%',\n-                    objectFit: 'cover'\n-                  }}\n-                />\n-              )}\n-            </div>\n-            <div className=\"shop-name\">\n-              {shopData?.name || \"Your Shop Name\"}\n-            </div>\n-            <div className=\"shop-description\">\n-              {shopData?.description || \"Shop Description\"}\n-            </div>\n-            </ShopProfileSection>\n-\n-            <ItemGrid>\n-              {shopData?.items?.map(item => (\n-                <ItemCard key={item.id}>\n-                  <ItemImageContainer>\n-                    {uploading[item.id] && (\n-                      <UploadingOverlay>\n-                        <LoadingSpinner />\n-                      </UploadingOverlay>\n-                    )}\n-                    <div \n-                      className=\"image-container\"\n-                      onClick={() => {\n-                        if (!item.images[item.currentImageIndex]) {\n-                          document.getElementById(`image-upload-${item.id}-${item.currentImageIndex}`).click();\n-                        }\n-                      }}\n-                    >\n-                      {item.images[item.currentImageIndex] ? (\n-                        <img \n-                          src={item.images[item.currentImageIndex]} \n-                          alt={item.name}\n-                          style={{ width: '100%', height: '100%', objectFit: 'cover' }}\n-                        />\n-                      ) : (\n-                        <div className=\"placeholder\">\n-                          <Plus size={24} />\n-                          <span>Upload Image</span>\n-                        </div>\n-                      )}\n-                    </div>\n-                    \n-                    {/* Only show carousel arrows if there are images */}\n-                    {item.images.some(img => img) && (\n-                      <>\n-                        <button \n-                          className=\"carousel-arrow left\"\n-                          onClick={() => {\n-                            const newIndex = ((item.currentImageIndex - 1) + 3) % 3;\n-                            handleItemUpdate(item.id, { currentImageIndex: newIndex });\n-                          }}\n-                        >\n-                          <ChevronLeft size={16} />\n-                        </button>\n-                        <button \n-                          className=\"carousel-arrow right\"\n-                          onClick={() => {\n-                            const newIndex = (item.currentImageIndex + 1) % 3;\n-                            handleItemUpdate(item.id, { currentImageIndex: newIndex });\n-                          }}\n-                        >\n-                          <ChevronRight size={16} />\n-                        </button>\n-                      </>\n-                    )}\n-\n-                    {/* Add/Remove button */}\n-                    {item.images[item.currentImageIndex] && (\n-                      <button \n-                        className=\"add-image\"\n-                        onClick={() => {\n-                          const newImages = [...item.images];\n-                          newImages[item.currentImageIndex] = null;\n-                          handleItemUpdate(item.id, { images: newImages });\n-                        }}\n-                      >\n-                        <X size={16} />\n-                      </button>\n-                    )}\n-\n-                    <input\n-                      type=\"file\"\n-                      id={`image-upload-${item.id}-${item.currentImageIndex}`}\n-                      accept=\"image/*\"\n-                      style={{ display: 'none' }}\n-                      onChange={(e) => {\n-                        if (e.target.files?.[0]) {\n-                          const newImages = [...item.images];\n-                          newImages[item.currentImageIndex] = e.target.files[0];\n-                          handleItemUpdate(item.id, { images: newImages });\n-                        }\n-                      }}\n-                    />\n-                  </ItemImageContainer>\n-                  <ItemContent>\n-                    <EditableText\n-                      value={item.name}\n-                      onChange={(value) => handleItemUpdate(item.id, { name: value })}\n-                      placeholder=\"Item Name\"\n-                      theme={shopData?.theme}\n-                    />\n-                    <EditableText\n-                      value={item.price}\n-                      onChange={(value) => handleItemUpdate(item.id, { price: value })}\n-                      placeholder=\"Price\"\n-                      theme={shopData?.theme}\n-                    />\n-                    <EditableText\n-                      value={item.description}\n-                      onChange={(value) => handleItemUpdate(item.id, { description: value })}\n-                      placeholder=\"Item Description\"\n-                      multiline\n-                      theme={shopData?.theme}\n-                    />\n-                    <ZipCodeInput\n-                      value={item.zipCode || ''}\n-                      onChange={(e) => handleItemUpdate(item.id, { zipCode: e.target.value })}\n-                      placeholder=\"ZIP Code\"\n-                      maxLength=\"5\"\n-                      pattern=\"[0-9]*\"\n-                    />\n-                  </ItemContent>\n-                </ItemCard>\n-              ))}\n-            </ItemGrid>\n-\n-              <AddItemButton onClick={handleAddItem} theme={shopData?.theme}>\n-                <Plus size={20} />\n-                Add Item\n-              </AddItemButton>\n-            </>\n-          )}\n-\n-          {activeTab === 'home' && (\n-            <div>\n-              <EditableText\n-                value={shopData?.mission}\n-                onChange={(value) => saveShopData({ mission: value })}\n-                placeholder=\"Your Shop's Mission\"\n-                multiline\n-                theme={shopData?.theme}\n-              />\n-              {/* Add more home page customization options */}\n-            </div>\n-          )}\n-\n-          {activeTab === 'community' && (\n-            <div>\n-              {/* Add community customization options */}\n-            </div>\n-          )}\n-        </MainContent>\n-      </PageContainer>\n-    </ThemeProvider>\n-  );\n-};\n-\n-export default ShopPage;\n-// src/pages/shop/ShopPage.js\n-\n-import React, { useState, useEffect } from 'react';\n-import { useNavigate } from 'react-router-dom';\n-import styled, { ThemeProvider } from 'styled-components';\n-import { auth, db } from '../../firebase/config';\n-import { doc, getDoc, updateDoc } from 'firebase/firestore';\n-import { Plus, ChevronLeft, ChevronRight, X } from 'lucide-react';\n-import TabPositioner from './components/TabPositioner';\n-import EditableText from './components/EditableComponents/EditableText';\n-import EditableImage from './components/EditableComponents/EditableImage';\n-import { DEFAULT_THEME } from '../../theme/theme';\n-import { ref, uploadBytes, getDownloadURL } from 'firebase/storage';\n-import { storage } from '../../firebase/config';\n-\n-const PageContainer = styled.div`\n-  min-height: 100vh;\n-  background: ${props => props.theme?.colors?.background || DEFAULT_THEME.colors.background};\n-  color: ${props => props.theme?.colors?.text || DEFAULT_THEME.colors.text};\n-  position: relative;\n-  overflow-x: hidden;\n-`;\n-\n-const ShopProfileSection = styled.div`\n-  display: flex;\n-  flex-direction: column;\n-  align-items: center;\n-  text-align: center;\n-  max-width: 800px;\n-  margin: 0 auto 3rem auto;\n-  padding: 2rem;\n-\n-  .profile-image {\n-    margin-bottom: 2rem;\n-    width: 150px;\n-    height: 150px;\n-    border-radius: 50%;\n-    overflow: hidden;\n-    background: rgba(0, 0, 0, 0.1);\n-    \n-    img {\n-      width: 100%;\n-      height: 100%;\n-      object-fit: cover;\n-    }\n-  }\n-\n-  .shop-name-container {\n-    margin: 1rem 0;\n-    position: relative;\n-  }\n-\n-  .font-size-control {\n-    position: absolute;\n-    right: -3rem;\n-    top: 50%;\n-    transform: translateY(-50%);\n-    display: flex;\n-    flex-direction: column;\n-    gap: 0.5rem;\n-    opacity: 0;\n-    transition: opacity 0.3s;\n-  }\n-\n-  .shop-name-container:hover .font-size-control {\n-    opacity: 1;\n-  }\n-\n-  .shop-description {\n-    color: ${props => props.theme?.colors?.text};\n-    opacity: 0.8;\n-  }\n-`;\n-\n-const FontSizeButton = styled.button`\n-  background: rgba(255, 255, 255, 0.1);\n-  border: none;\n-  border-radius: 50%;\n-  width: 24px;\n-  height: 24px;\n-  display: flex;\n-  align-items: center;\n-  justify-content: center;\n-  color: white;\n-  cursor: pointer;\n-\n-  &:hover {\n-    background: rgba(255, 255, 255, 0.2);\n-  }\n-`;\n-\n-const ItemImageContainer = styled.div`\n-  position: relative;\n-  height: 250px;\n-  width: 100%;\n-  display: flex;\n-  overflow: hidden;\n-  background: rgba(0, 0, 0, 0.1);\n-\n-  .image-container {\n-    width: 100%;\n-    height: 100%;\n-    position: relative;\n-  }\n-\n-  .placeholder {\n-    width: 100%;\n-    height: 100%;\n-    display: flex;\n-    flex-direction: column;\n-    align-items: center;\n-    justify-content: center;\n-    gap: 0.5rem;\n-    color: ${props => props.theme?.colors?.text || '#fff'};\n-    opacity: 0.5;\n-    cursor: pointer;\n-    \n-    span {\n-      font-size: 0.9rem;\n-    }\n-  }\n-\n-  .carousel-arrow {\n-    position: absolute;\n-    top: 50%;\n-    transform: translateY(-50%);\n-    background: rgba(0, 0, 0, 0.5);\n-    border: none;\n-    border-radius: 50%;\n-    width: 32px;\n-    height: 32px;\n-    display: flex;\n-    align-items: center;\n-    justify-content: center;\n-    color: white;\n-    cursor: pointer;\n-    z-index: 2;\n-    transition: all 0.3s ease;\n-\n-    &:hover {\n-      background: rgba(0, 0, 0, 0.8);\n-    }\n-\n-    &.left {\n-      left: 10px;\n-    }\n-\n-    &.right {\n-      right: 10px;\n-    }\n-  }\n-\n-  .add-image {\n-    position: absolute;\n-    top: 10px;\n-    right: 10px;\n-    background: rgba(0, 0, 0, 0.5);\n-    border: none;\n-    border-radius: 50%;\n-    width: 32px;\n-    height: 32px;\n-    display: flex;\n-    align-items: center;\n-    justify-content: center;\n-    color: white;\n-    cursor: pointer;\n-    z-index: 2;\n-    transition: all 0.3s ease;\n-\n-    &:hover {\n-      background: rgba(0, 0, 0, 0.8);\n-    }\n-  }\n-`;\n-\n-const KalKodeCorner = styled.div`\n-  position: fixed;\n-  top: 2rem;\n-  right: 2rem;\n-  z-index: 100;\n-  cursor: pointer;\n-`;\n-\n-const KalKodeLogo = styled.div`\n-  color: #A00000;\n-  font-family: 'Impact', sans-serif;\n-  font-size: 2rem;\n-  letter-spacing: 2px;\n-  transform: skew(-5deg);\n-`;\n-\n-\n-const ShopBanner = styled.div`\n-  position: fixed;\n-  top: 0;\n-  left: 0;\n-  right: 0;\n-  height: 80px;\n-  background: ${props => `${props.theme?.colors?.background || DEFAULT_THEME.colors.background}CC`};\n-  backdrop-filter: blur(10px);\n-  display: flex;\n-  align-items: center;\n-  justify-content: space-between;\n-  padding: 0 2rem;\n-  z-index: 100;\n-  border-bottom: 1px solid ${props => `${props.theme?.colors?.accent || DEFAULT_THEME.colors.accent}30`};\n-`;\n-\n-const UploadingOverlay = styled.div`\n-  position: absolute;\n-  top: 0;\n-  left: 0;\n-  right: 0;\n-  bottom: 0;\n-  background: rgba(0, 0, 0, 0.5);\n-  display: flex;\n-  align-items: center;\n-  justify-content: center;\n-  color: white;\n-  z-index: 3;\n-`;\n-\n-const ItemContent = styled.div`\n-  padding: 1.5rem;\n-  display: flex;\n-  flex-direction: column;\n-  gap: 1rem;\n-  height: calc(100% - 250px); // This ensures the content takes the remaining space\n-  overflow-y: auto;\n-\n-  input, textarea {\n-    background: rgba(255, 255, 255, 0.05);\n-    border: 1px solid rgba(255, 255, 255, 0.1);\n-    border-radius: ${props => props.theme?.styles?.borderRadius || '8px'};\n-    padding: 0.8rem;\n-    color: ${props => props.theme?.colors?.text};\n-    \n-    &:focus {\n-      outline: none;\n-      border-color: ${props => props.theme?.colors?.accent};\n-    }\n-  }\n-`;\n-\n-const ShopName = styled.div`\n-  flex: 1;\n-  text-align: ${props => props.position};\n-  font-family: ${props => props.theme?.fonts?.heading || DEFAULT_THEME.fonts.heading};\n-  font-size: 1.8rem;\n-  padding: ${props => props.position === 'center' ? '0 80px' : '0'};\n-`;\n-\n-const MainContent = styled.div`\n-  max-width: ${props => props.theme?.styles?.containerWidth || DEFAULT_THEME.styles.containerWidth};\n-  margin: 0 auto;\n-  padding: 2rem;\n-  position: relative;\n-  z-index: 1;\n-`;\n-\n-const LoadingSpinner = styled.div`\n-  width: 20px;\n-  height: 20px;\n-  border: 2px solid rgba(255, 255, 255, 0.3);\n-  border-radius: 50%;\n-  border-top-color: white;\n-  animation: spin 1s linear infinite;\n-\n-  @keyframes spin {\n-    to {\n-      transform: rotate(360deg);\n-    }\n-  }\n-`;\n-\n-const ItemGrid = styled.div`\n-  display: grid;\n-  grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));\n-  gap: 2rem;\n-  margin-bottom: 2rem;\n-`;\n-\n-const ItemCard = styled.div`\n-  background: rgba(255, 255, 255, 0.05);\n-  border-radius: ${props => props.theme?.styles?.borderRadius || '12px'};\n-  overflow: hidden;\n-  border: 1px solid rgba(255, 255, 255, 0.1);\n-  width: 100%;\n-  height: 500px;\n-\n-  .item-content {\n-    padding: 1.5rem;\n-  }\n-`;\n-\n-const ZipCodeInput = styled.input`\n-  background: rgba(255, 255, 255, 0.05);\n-  border: 1px solid rgba(255, 255, 255, 0.1);\n-  padding: 0.5rem;\n-  border-radius: 4px;\n-  color: ${props => props.theme?.colors?.text};\n-  margin-top: 0.5rem;\n-  width: 100%;\n-\n-  &:focus {\n-    outline: none;\n-    border-color: ${props => props.theme?.colors?.accent};\n-  }\n-`;\n-\n-const AddItemButton = styled.button`\n-  background: ${props => props.theme?.colors?.primary};\n-  color: ${props => props.theme?.colors?.text};\n-  border: none;\n-  border-radius: 8px;\n-  padding: 1rem;\n-  display: flex;\n-  align-items: center;\n-  gap: 0.5rem;\n-  cursor: pointer;\n-  margin: 2rem auto;\n-  transition: all 0.3s;\n-\n-  &:hover {\n-    transform: translateY(-2px);\n-  }\n-`;\n-\n-const cleanDataForFirestore = (data) => {\n-  if (!data) return data;\n-  \n-  if (Array.isArray(data)) {\n-    return data.map(item => cleanDataForFirestore(item));\n-  }\n-  \n-  if (typeof data === 'object' && !(data instanceof Date)) {\n-    const cleanedData = {};\n-    for (const [key, value] of Object.entries(data)) {\n-      // Skip file objects\n-      if (value instanceof File) continue;\n-      // Skip null/undefined values\n-      if (value === null || value === undefined) continue;\n-      cleanedData[key] = cleanDataForFirestore(value);\n-    }\n-    return cleanedData;\n-  }\n-  \n-  return data;\n-};\n-\n-const ShopPage = () => {\n-  const navigate = useNavigate();\n-  const [shopData, setShopData] = useState(null); // Keep as null initially\n-  const [isReady, setIsReady] = useState(false);  // Add this state\n-  const [activeTab, setActiveTab] = useState('shop');\n-  const [saving, setSaving] = useState(false);\n-  const [uploading, setUploading] = useState({});\n-\n-  useEffect(() => {\n-    const loadShopData = async (userId) => {\n-      try {\n-        const shopDoc = await getDoc(doc(db, 'shops', userId));\n-        if (shopDoc.exists()) {\n-          const data = shopDoc.data();\n-          setShopData(data);\n-        }\n-        setIsReady(true); // Set ready after data is loaded\n-      } catch (error) {\n-        console.error('Error loading shop data:', error);\n-        setIsReady(true); // Still set ready even on error\n-      }\n-    };    \n-\n-    const unsubscribe = auth.onAuthStateChanged((user) => {\n-      if (!user) {\n-        navigate('/auth');\n-        return;\n-      }\n-      loadShopData(user.uid);\n-    });\n-\n-    return () => unsubscribe();\n-  }, [navigate]);\n-\n-  // Don't render anything until ready\n-  if (!isReady) {\n-    return null;\n-  }\n-\n-  const handleUpdateShop = async (updates) => {\n-    if (!auth.currentUser) return;\n-    \n-    try {\n-      setSaving(true);\n-      console.log('Updating shop with:', updates); // Debug log\n-      \n-      let finalUpdates = { ...updates };\n-      \n-      // Handle profile image upload\n-      if (updates.profile?.file instanceof File) {\n-        const file = updates.profile.file;\n-        const metadata = {\n-          contentType: file.type || 'image/jpeg',\n-          cacheControl: 'public,max-age=3600',\n-          customMetadata: {\n-            'Access-Control-Allow-Origin': '*'\n-          }\n-        };\n-        \n-        const profileRef = ref(\n-          storage, \n-          `shops/${auth.currentUser.uid}/profile/profile-${Date.now()}`\n-        );\n-        \n-        const snapshot = await uploadBytes(profileRef, file, metadata);\n-        const imageUrl = await getDownloadURL(snapshot.ref);\n-        \n-        // Update with image URL instead of file\n-        finalUpdates = {\n-          ...finalUpdates,\n-          profile: imageUrl\n-        };\n-      }\n-  \n-      // Update Firestore\n-      const shopRef = doc(db, 'shops', auth.currentUser.uid);\n-      await updateDoc(shopRef, {\n-        ...finalUpdates,\n-        updatedAt: new Date().toISOString()\n-      });\n-  \n-      // Update local state\n-      setShopData(prev => ({\n-        ...prev,\n-        ...finalUpdates\n-      }));\n-  \n-      console.log('Shop update successful:', finalUpdates);\n-    } catch (error) {\n-      console.error('Error updating shop:', error);\n-    } finally {\n-      setSaving(false);\n-    }\n-  };\n-\n-  const logImageState = (image) => {\n-    if (!image) return 'null';\n-    if (typeof image === 'string') return `URL: ${image}`;\n-    if (image instanceof File) return `File: ${image.name}`;\n-    if (image?.file instanceof File) return `File Object: ${image.file.name}`;\n-    return `Unknown type: ${typeof image}`;\n-  };\n-\n-  // Handle item updates\n-  const handleItemUpdate = async (itemId, updates) => {\n-    if (!auth.currentUser) return;\n-  \n-    try {\n-      setSaving(true);\n-      console.log('Updating item with:', updates); // Debug log\n-  \n-      const currentItem = shopData.items.find(item => item.id === itemId);\n-      let updatedItem = { ...currentItem, ...updates };\n-  \n-      // Handle image uploads if present\n-      if (updates.images) {\n-        const processedImages = await Promise.all(updates.images.map(async (image, index) => {\n-          // If it's a URL or null, keep it\n-          if (!image || typeof image === 'string') return image;\n-          \n-          // If it's a File object, upload it\n-          if (image instanceof File || image?.file instanceof File) {\n-            const file = image instanceof File ? image : image.file;\n-            try {\n-              const metadata = {\n-                contentType: file.type || 'image/jpeg',\n-                cacheControl: 'public,max-age=3600'\n-              };\n-              \n-              const imageRef = ref(\n-                storage, \n-                `shops/${auth.currentUser.uid}/items/${itemId}/image-${index}-${Date.now()}`\n-              );\n-              \n-              const snapshot = await uploadBytes(imageRef, file, metadata);\n-              return await getDownloadURL(snapshot.ref);\n-            } catch (uploadError) {\n-              console.error(`Failed to upload image ${index}:`, uploadError);\n-              return null;\n-            }\n-          }\n-          return null;\n-        }));\n-  \n-        updatedItem.images = processedImages;\n-      }\n-  \n-      // Update in Firestore\n-      const shopRef = doc(db, 'shops', auth.currentUser.uid);\n-      const updatedItems = shopData.items.map(item =>\n-        item.id === itemId ? updatedItem : item\n-      );\n-  \n-      await updateDoc(shopRef, {\n-        items: updatedItems,\n-        updatedAt: new Date().toISOString()\n-      });\n-  \n-      // Update local state\n-      setShopData(prev => ({\n-        ...prev,\n-        items: updatedItems\n-      }));\n-  \n-      console.log('Item updated successfully:', updatedItem); // Debug log\n-    } catch (error) {\n-      console.error('Error updating item:', error);\n-    } finally {\n-      setSaving(false);\n-    }\n-  };\n-  \n-    // Save shop data\n-  const saveShopData = async (updates) => {\n-    if (!auth.currentUser) return;\n-    setSaving(true);\n-    try {\n-      const shopRef = doc(db, 'shops', auth.currentUser.uid);\n-      await updateDoc(shopRef, {\n-        ...updates,\n-        updatedAt: new Date().toISOString()\n-      });\n-      setShopData(prev => ({ ...prev, ...updates }));\n-    } catch (error) {\n-      console.error('Error saving shop data:', error);\n-    } finally {\n-      setSaving(false);\n-    }\n-  };\n-\n-  const handleAddItem = () => {\n-    const newItem = {\n-      id: Date.now().toString(),\n-      name: 'New Item',\n-      price: '',\n-      description: '',\n-      zipCode: '',\n-      images: [null, null, null],\n-      currentImageIndex: 0\n-    };\n-\n-    const updatedItems = [...(shopData.items || []), newItem];\n-    saveShopData({ items: updatedItems });\n-  };\n-\n-  return (\n-    <ThemeProvider theme={shopData?.theme || DEFAULT_THEME}>\n-      <PageContainer>\n-        <ShopBanner>\n-          <EditableText\n-            value={shopData?.name}\n-            onChange={(value) => saveShopData({ name: value })}\n-            placeholder=\"Your Shop Name\"\n-            theme={shopData?.theme}\n-          />\n-        </ShopBanner>\n-\n-        <TabPositioner\n-          position={shopData?.layout?.tabPosition || 'top'}\n-          activeTab={activeTab}\n-          onTabChange={setActiveTab}\n-          tabs={[\n-            { id: 'home', label: 'Home' },\n-            { id: 'community', label: 'Community' },\n-            { id: 'shop', label: 'Shop' }\n-          ]}\n-          theme={shopData?.theme}\n-        />\n-\n-        <MainContent>\n-        {activeTab === 'shop' && (\n-          <>\n-            <ShopProfileSection>\n-            <div className=\"profile-image\">\n-              {shopData?.profile && typeof shopData.profile === 'string' ? (\n-                // If we have a URL string, show the image directly\n-                <img \n-                  src={shopData.profile} \n-                  alt=\"Profile\" \n-                  style={{ \n-                    width: '100%',\n-                    height: '100%',\n-                    objectFit: 'cover',\n-                    cursor: 'pointer'\n-                  }}\n-                  onClick={() => {\n-                    // Allow changing the image by clicking on it\n-                    const input = document.createElement('input');\n-                    input.type = 'file';\n-                    input.accept = 'image/*';\n-                    input.onchange = (e) => {\n-                      if (e.target.files?.[0]) {\n-                        handleUpdateShop({ \n-                          profile: {\n-                            file: e.target.files[0],\n-                            type: e.target.files[0].type\n-                          }\n-                        });\n-                      }\n-                    };\n-                    input.click();\n-                  }}\n-                />\n-              ) : (\n-                // If no image URL, show the EditableImage component\n-                <EditableImage\n-                  value={null}\n-                  onChange={(value) => {\n-                    console.log('Profile image update:', value);\n-                    if (value instanceof File) {\n-                      handleUpdateShop({ \n-                        profile: {\n-                          file: value,\n-                          type: value.type\n-                        }\n-                      });\n-                    }\n-                  }}\n-                  theme={shopData?.theme}\n-                  round\n-                  width=\"150px\"\n-                  height=\"150px\"\n-                  style={{ \n-                    width: '150px',\n-                    height: '150px',\n-                    borderRadius: '50%',\n-                    objectFit: 'cover'\n-                  }}\n-                />\n-              )}\n-            </div>\n-            <div className=\"shop-name\">\n-              {shopData?.name || \"Your Shop Name\"}\n-            </div>\n-            <div className=\"shop-description\">\n-              {shopData?.description || \"Shop Description\"}\n-            </div>\n-            </ShopProfileSection>\n-\n-            <ItemGrid>\n-              {shopData?.items?.map(item => (\n-                <ItemCard key={item.id}>\n-                  <ItemImageContainer>\n-                    {uploading[item.id] && (\n-                      <UploadingOverlay>\n-                        <LoadingSpinner />\n-                      </UploadingOverlay>\n-                    )}\n-                    <div \n-                      className=\"image-container\"\n-                      onClick={() => {\n-                        if (!item.images[item.currentImageIndex]) {\n-                          document.getElementById(`image-upload-${item.id}-${item.currentImageIndex}`).click();\n-                        }\n-                      }}\n-                    >\n-                      {item.images[item.currentImageIndex] ? (\n-                        <img \n-                          src={item.images[item.currentImageIndex]} \n-                          alt={item.name}\n-                          style={{ width: '100%', height: '100%', objectFit: 'cover' }}\n-                        />\n-                      ) : (\n-                        <div className=\"placeholder\">\n-                          <Plus size={24} />\n-                          <span>Upload Image</span>\n-                        </div>\n-                      )}\n-                    </div>\n-                    \n-                    {/* Only show carousel arrows if there are images */}\n-                    {item.images.some(img => img) && (\n-                      <>\n-                        <button \n-                          className=\"carousel-arrow left\"\n-                          onClick={() => {\n-                            const newIndex = ((item.currentImageIndex - 1) + 3) % 3;\n-                            handleItemUpdate(item.id, { currentImageIndex: newIndex });\n-                          }}\n-                        >\n-                          <ChevronLeft size={16} />\n-                        </button>\n-                        <button \n-                          className=\"carousel-arrow right\"\n-                          onClick={() => {\n-                            const newIndex = (item.currentImageIndex + 1) % 3;\n-                            handleItemUpdate(item.id, { currentImageIndex: newIndex });\n-                          }}\n-                        >\n-                          <ChevronRight size={16} />\n-                        </button>\n-                      </>\n-                    )}\n-\n-                    {/* Add/Remove button */}\n-                    {item.images[item.currentImageIndex] && (\n-                      <button \n-                        className=\"add-image\"\n-                        onClick={() => {\n-                          const newImages = [...item.images];\n-                          newImages[item.currentImageIndex] = null;\n-                          handleItemUpdate(item.id, { images: newImages });\n-                        }}\n-                      >\n-                        <X size={16} />\n-                      </button>\n-                    )}\n-\n-                    <input\n-                      type=\"file\"\n-                      id={`image-upload-${item.id}-${item.currentImageIndex}`}\n-                      accept=\"image/*\"\n-                      style={{ display: 'none' }}\n-                      onChange={(e) => {\n-                        if (e.target.files?.[0]) {\n-                          const newImages = [...item.images];\n-                          newImages[item.currentImageIndex] = e.target.files[0];\n-                          handleItemUpdate(item.id, { images: newImages });\n-                        }\n-                      }}\n-                    />\n-                  </ItemImageContainer>\n-                  <ItemContent>\n-                    <EditableText\n-                      value={item.name}\n-                      onChange={(value) => handleItemUpdate(item.id, { name: value })}\n-                      placeholder=\"Item Name\"\n-                      theme={shopData?.theme}\n-                    />\n-                    <EditableText\n-                      value={item.price}\n-                      onChange={(value) => handleItemUpdate(item.id, { price: value })}\n-                      placeholder=\"Price\"\n-                      theme={shopData?.theme}\n-                    />\n-                    <EditableText\n-                      value={item.description}\n-                      onChange={(value) => handleItemUpdate(item.id, { description: value })}\n-                      placeholder=\"Item Description\"\n-                      multiline\n-                      theme={shopData?.theme}\n-                    />\n-                    <ZipCodeInput\n-                      value={item.zipCode || ''}\n-                      onChange={(e) => handleItemUpdate(item.id, { zipCode: e.target.value })}\n-                      placeholder=\"ZIP Code\"\n-                      maxLength=\"5\"\n-                      pattern=\"[0-9]*\"\n-                    />\n-                  </ItemContent>\n-                </ItemCard>\n-              ))}\n-            </ItemGrid>\n-\n-              <AddItemButton onClick={handleAddItem} theme={shopData?.theme}>\n-                <Plus size={20} />\n-                Add Item\n-              </AddItemButton>\n-            </>\n-          )}\n-\n-          {activeTab === 'home' && (\n-            <div>\n-              <EditableText\n-                value={shopData?.mission}\n-                onChange={(value) => saveShopData({ mission: value })}\n-                placeholder=\"Your Shop's Mission\"\n-                multiline\n-                theme={shopData?.theme}\n-              />\n-              {/* Add more home page customization options */}\n-            </div>\n-          )}\n-\n-          {activeTab === 'community' && (\n-            <div>\n-              {/* Add community customization options */}\n-            </div>\n-          )}\n-        </MainContent>\n-      </PageContainer>\n-    </ThemeProvider>\n-  );\n-};\n-\n export default ShopPage;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1736261863207,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -291,16 +291,8 @@\n   font-size: 1.8rem;\n   padding: ${props => props.position === 'center' ? '0 80px' : '0'};\n `;\n \n-const MainContent = styled.div`\n-  max-width: ${props => props.theme?.styles?.containerWidth || DEFAULT_THEME.styles.containerWidth};\n-  margin: 0 auto;\n-  padding: 2rem;\n-  position: relative;\n-  z-index: 1;\n-`;\n-\n const LoadingSpinner = styled.div`\n   width: 20px;\n   height: 20px;\n   border: 2px solid rgba(255, 255, 255, 0.3);\n"
                },
                {
                    "date": 1736262023752,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,840 @@\n+// src/pages/shop/ShopPage.js\n+\n+import React, { useState, useEffect } from 'react';\n+import { useNavigate } from 'react-router-dom';\n+import styled, { ThemeProvider } from 'styled-components';\n+import { auth, db } from '../../firebase/config';\n+import { doc, getDoc, updateDoc } from 'firebase/firestore';\n+import { Plus, ChevronLeft, ChevronRight, X } from 'lucide-react';\n+import TabPositioner from './components/TabPositioner';\n+import EditableText from './components/EditableComponents/EditableText';\n+import EditableImage from './components/EditableComponents/EditableImage';\n+import { DEFAULT_THEME } from '../../theme/theme';\n+import { ref, uploadBytes, getDownloadURL } from 'firebase/storage';\n+import { storage } from '../../firebase/config';\n+\n+const PageContainer = styled.div`\n+  min-height: 100vh;\n+  background: ${props => props.theme?.colors?.background || DEFAULT_THEME.colors.background};\n+  color: ${props => props.theme?.colors?.text || DEFAULT_THEME.colors.text};\n+  position: relative;\n+  overflow-x: hidden;\n+`;\n+\n+const MainContent = styled.div`\n+  max-width: ${props => props.theme?.styles?.containerWidth || DEFAULT_THEME.styles.containerWidth};\n+  margin: 0 auto;\n+  padding: 6rem 2rem 2rem; // Increased top padding to accommodate tabs\n+  position: relative;\n+  z-index: 1;\n+`;\n+\n+const ShopProfileSection = styled.div`\n+  display: flex;\n+  flex-direction: column;\n+  align-items: center;\n+  text-align: center;\n+  max-width: 800px;\n+  margin: 2rem auto 3rem;  // Added top margin\n+  padding: 2rem;\n+\n+  .profile-image {\n+    margin-bottom: 2rem;\n+    width: 150px;\n+    height: 150px;\n+    border-radius: 50%;\n+    overflow: hidden;\n+    background: rgba(0, 0, 0, 0.1);\n+    \n+    img {\n+      width: 100%;\n+      height: 100%;\n+      object-fit: cover;\n+    }\n+  }\n+\n+  .shop-name-container {\n+    width: 100%;\n+    margin: 1.5rem 0;\n+\n+    input {\n+      width: 100%;\n+      text-align: center;\n+      background: transparent;\n+      border: none;\n+      font-size: ${props => props.fontSize || '2.5rem'};\n+      font-family: ${props => props.theme?.fonts?.heading};\n+      background: ${props => `linear-gradient(45deg, ${props.theme?.colors?.primary}, ${props.theme?.colors?.accent})`};\n+      -webkit-background-clip: text;\n+      -webkit-text-fill-color: transparent;\n+      outline: none;\n+      padding: 0.5rem;\n+\n+      &:focus {\n+        background: ${props => `linear-gradient(45deg, ${props.theme?.colors?.primary}, ${props.theme?.colors?.accent})`};\n+        -webkit-background-clip: text;\n+        -webkit-text-fill-color: transparent;\n+      }\n+\n+      &::placeholder {\n+        background: ${props => `linear-gradient(45deg, ${props.theme?.colors?.primary}80, ${props.theme?.colors?.accent}80)`};\n+        -webkit-background-clip: text;\n+        -webkit-text-fill-color: transparent;\n+      }\n+    }\n+  }\n+\n+  .shop-description-container {\n+    width: 100%;\n+    margin-top: 1rem;\n+\n+    textarea {\n+      width: 100%;\n+      text-align: center;\n+      background: transparent;\n+      border: none;\n+      font-size: 1.1rem;\n+      font-family: ${props => props.theme?.fonts?.body};\n+      color: ${props => props.theme?.colors?.text};\n+      opacity: 0.8;\n+      outline: none;\n+      padding: 0.5rem;\n+      resize: none;\n+      min-height: 60px;\n+\n+      &:focus {\n+        opacity: 1;\n+      }\n+\n+      &::placeholder {\n+        color: ${props => props.theme?.colors?.text};\n+        opacity: 0.5;\n+      }\n+    }\n+  }\n+`;\n+\n+const FontSizeButton = styled.button`\n+  background: rgba(255, 255, 255, 0.1);\n+  border: none;\n+  border-radius: 50%;\n+  width: 24px;\n+  height: 24px;\n+  display: flex;\n+  align-items: center;\n+  justify-content: center;\n+  color: white;\n+  cursor: pointer;\n+\n+  &:hover {\n+    background: rgba(255, 255, 255, 0.2);\n+  }\n+`;\n+\n+const ItemImageContainer = styled.div`\n+  position: relative;\n+  height: 250px;\n+  width: 100%;\n+  display: flex;\n+  overflow: hidden;\n+  background: rgba(0, 0, 0, 0.1);\n+\n+  .image-container {\n+    width: 100%;\n+    height: 100%;\n+    position: relative;\n+  }\n+\n+  .placeholder {\n+    width: 100%;\n+    height: 100%;\n+    display: flex;\n+    flex-direction: column;\n+    align-items: center;\n+    justify-content: center;\n+    gap: 0.5rem;\n+    color: ${props => props.theme?.colors?.text || '#fff'};\n+    opacity: 0.5;\n+    cursor: pointer;\n+    \n+    span {\n+      font-size: 0.9rem;\n+    }\n+  }\n+\n+  .carousel-arrow {\n+    position: absolute;\n+    top: 50%;\n+    transform: translateY(-50%);\n+    background: rgba(0, 0, 0, 0.5);\n+    border: none;\n+    border-radius: 50%;\n+    width: 32px;\n+    height: 32px;\n+    display: flex;\n+    align-items: center;\n+    justify-content: center;\n+    color: white;\n+    cursor: pointer;\n+    z-index: 2;\n+    transition: all 0.3s ease;\n+\n+    &:hover {\n+      background: rgba(0, 0, 0, 0.8);\n+    }\n+\n+    &.left {\n+      left: 10px;\n+    }\n+\n+    &.right {\n+      right: 10px;\n+    }\n+  }\n+\n+  .add-image {\n+    position: absolute;\n+    top: 10px;\n+    right: 10px;\n+    background: rgba(0, 0, 0, 0.5);\n+    border: none;\n+    border-radius: 50%;\n+    width: 32px;\n+    height: 32px;\n+    display: flex;\n+    align-items: center;\n+    justify-content: center;\n+    color: white;\n+    cursor: pointer;\n+    z-index: 2;\n+    transition: all 0.3s ease;\n+\n+    &:hover {\n+      background: rgba(0, 0, 0, 0.8);\n+    }\n+  }\n+`;\n+\n+const KalKodeCorner = styled.div`\n+  position: fixed;\n+  top: 2rem;\n+  right: 2rem;\n+  z-index: 100;\n+  cursor: pointer;\n+`;\n+\n+const KalKodeLogo = styled.div`\n+  color: #A00000;\n+  font-family: 'Impact', sans-serif;\n+  font-size: 2rem;\n+  letter-spacing: 2px;\n+  transform: skew(-5deg);\n+`;\n+\n+\n+const ShopBanner = styled.div`\n+  position: fixed;\n+  top: 0;\n+  left: 0;\n+  right: 0;\n+  height: 80px;\n+  background: ${props => `${props.theme?.colors?.background || DEFAULT_THEME.colors.background}CC`};\n+  backdrop-filter: blur(10px);\n+  display: flex;\n+  align-items: center;\n+  justify-content: space-between;\n+  padding: 0 2rem;\n+  z-index: 100;\n+  border-bottom: 1px solid ${props => `${props.theme?.colors?.accent || DEFAULT_THEME.colors.accent}30`};\n+`;\n+\n+const UploadingOverlay = styled.div`\n+  position: absolute;\n+  top: 0;\n+  left: 0;\n+  right: 0;\n+  bottom: 0;\n+  background: rgba(0, 0, 0, 0.5);\n+  display: flex;\n+  align-items: center;\n+  justify-content: center;\n+  color: white;\n+  z-index: 3;\n+`;\n+\n+const ItemContent = styled.div`\n+  padding: 1.5rem;\n+  display: flex;\n+  flex-direction: column;\n+  gap: 1rem;\n+  height: calc(100% - 250px); // This ensures the content takes the remaining space\n+  overflow-y: auto;\n+\n+  input, textarea {\n+    background: rgba(255, 255, 255, 0.05);\n+    border: 1px solid rgba(255, 255, 255, 0.1);\n+    border-radius: ${props => props.theme?.styles?.borderRadius || '8px'};\n+    padding: 0.8rem;\n+    color: ${props => props.theme?.colors?.text};\n+    \n+    &:focus {\n+      outline: none;\n+      border-color: ${props => props.theme?.colors?.accent};\n+    }\n+  }\n+`;\n+\n+const ShopName = styled.div`\n+  flex: 1;\n+  text-align: ${props => props.position};\n+  font-family: ${props => props.theme?.fonts?.heading || DEFAULT_THEME.fonts.heading};\n+  font-size: 1.8rem;\n+  padding: ${props => props.position === 'center' ? '0 80px' : '0'};\n+`;\n+\n+const LoadingSpinner = styled.div`\n+  width: 20px;\n+  height: 20px;\n+  border: 2px solid rgba(255, 255, 255, 0.3);\n+  border-radius: 50%;\n+  border-top-color: white;\n+  animation: spin 1s linear infinite;\n+\n+  @keyframes spin {\n+    to {\n+      transform: rotate(360deg);\n+    }\n+  }\n+`;\n+\n+const ItemGrid = styled.div`\n+  display: grid;\n+  grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));\n+  gap: 2rem;\n+  margin-bottom: 2rem;\n+`;\n+\n+const ItemCard = styled.div`\n+  background: rgba(255, 255, 255, 0.05);\n+  border-radius: ${props => props.theme?.styles?.borderRadius || '12px'};\n+  overflow: hidden;\n+  border: 1px solid rgba(255, 255, 255, 0.1);\n+  width: 100%;\n+  height: 500px;\n+\n+  .item-content {\n+    padding: 1.5rem;\n+  }\n+`;\n+\n+const ZipCodeInput = styled.input`\n+  background: rgba(255, 255, 255, 0.05);\n+  border: 1px solid rgba(255, 255, 255, 0.1);\n+  padding: 0.5rem;\n+  border-radius: 4px;\n+  color: ${props => props.theme?.colors?.text};\n+  margin-top: 0.5rem;\n+  width: 100%;\n+\n+  &:focus {\n+    outline: none;\n+    border-color: ${props => props.theme?.colors?.accent};\n+  }\n+`;\n+\n+const AddItemButton = styled.button`\n+  background: ${props => props.theme?.colors?.primary};\n+  color: ${props => props.theme?.colors?.text};\n+  border: none;\n+  border-radius: 8px;\n+  padding: 1rem;\n+  display: flex;\n+  align-items: center;\n+  gap: 0.5rem;\n+  cursor: pointer;\n+  margin: 2rem auto;\n+  transition: all 0.3s;\n+\n+  &:hover {\n+    transform: translateY(-2px);\n+  }\n+`;\n+\n+const cleanDataForFirestore = (data) => {\n+  if (!data) return data;\n+  \n+  if (Array.isArray(data)) {\n+    return data.map(item => cleanDataForFirestore(item));\n+  }\n+  \n+  if (typeof data === 'object' && !(data instanceof Date)) {\n+    const cleanedData = {};\n+    for (const [key, value] of Object.entries(data)) {\n+      // Skip file objects\n+      if (value instanceof File) continue;\n+      // Skip null/undefined values\n+      if (value === null || value === undefined) continue;\n+      cleanedData[key] = cleanDataForFirestore(value);\n+    }\n+    return cleanedData;\n+  }\n+  \n+  return data;\n+};\n+\n+const ShopPage = () => {\n+  const navigate = useNavigate();\n+  const [shopData, setShopData] = useState(null); // Keep as null initially\n+  const [isReady, setIsReady] = useState(false);  // Add this state\n+  const [activeTab, setActiveTab] = useState('shop');\n+  const [saving, setSaving] = useState(false);\n+  const [shopNameFontSize, setShopNameFontSize] = useState(2.5);\n+  const [uploading, setUploading] = useState({});\n+\n+  useEffect(() => {\n+    const loadShopData = async (userId) => {\n+      try {\n+        const shopDoc = await getDoc(doc(db, 'shops', userId));\n+        if (shopDoc.exists()) {\n+          const data = shopDoc.data();\n+          setShopData(data);\n+        }\n+        setIsReady(true); // Set ready after data is loaded\n+      } catch (error) {\n+        console.error('Error loading shop data:', error);\n+        setIsReady(true); // Still set ready even on error\n+      }\n+    };    \n+\n+    const unsubscribe = auth.onAuthStateChanged((user) => {\n+      if (!user) {\n+        navigate('/auth');\n+        return;\n+      }\n+      loadShopData(user.uid);\n+    });\n+\n+    return () => unsubscribe();\n+  }, [navigate]);\n+\n+  // Don't render anything until ready\n+  if (!isReady) {\n+    return null;\n+  }\n+\n+  const handleUpdateShop = async (updates) => {\n+    if (!auth.currentUser) return;\n+    \n+    try {\n+      setSaving(true);\n+      console.log('Updating shop with:', updates); // Debug log\n+      \n+      let finalUpdates = { ...updates };\n+      \n+      // Handle profile image upload\n+      if (updates.profile?.file instanceof File) {\n+        const file = updates.profile.file;\n+        const metadata = {\n+          contentType: file.type || 'image/jpeg',\n+          cacheControl: 'public,max-age=3600',\n+          customMetadata: {\n+            'Access-Control-Allow-Origin': '*'\n+          }\n+        };\n+        \n+        const profileRef = ref(\n+          storage, \n+          `shops/${auth.currentUser.uid}/profile/profile-${Date.now()}`\n+        );\n+        \n+        const snapshot = await uploadBytes(profileRef, file, metadata);\n+        const imageUrl = await getDownloadURL(snapshot.ref);\n+        \n+        // Update with image URL instead of file\n+        finalUpdates = {\n+          ...finalUpdates,\n+          profile: imageUrl\n+        };\n+      }\n+  \n+      // Update Firestore\n+      const shopRef = doc(db, 'shops', auth.currentUser.uid);\n+      await updateDoc(shopRef, {\n+        ...finalUpdates,\n+        updatedAt: new Date().toISOString()\n+      });\n+  \n+      // Update local state\n+      setShopData(prev => ({\n+        ...prev,\n+        ...finalUpdates\n+      }));\n+  \n+      console.log('Shop update successful:', finalUpdates);\n+    } catch (error) {\n+      console.error('Error updating shop:', error);\n+    } finally {\n+      setSaving(false);\n+    }\n+  };\n+\n+  const logImageState = (image) => {\n+    if (!image) return 'null';\n+    if (typeof image === 'string') return `URL: ${image}`;\n+    if (image instanceof File) return `File: ${image.name}`;\n+    if (image?.file instanceof File) return `File Object: ${image.file.name}`;\n+    return `Unknown type: ${typeof image}`;\n+  };\n+\n+  // Handle item updates\n+  const handleItemUpdate = async (itemId, updates) => {\n+    if (!auth.currentUser) return;\n+  \n+    try {\n+      setSaving(true);\n+      console.log('Updating item with:', updates); // Debug log\n+  \n+      const currentItem = shopData.items.find(item => item.id === itemId);\n+      let updatedItem = { ...currentItem, ...updates };\n+  \n+      // Handle image uploads if present\n+      if (updates.images) {\n+        const processedImages = await Promise.all(updates.images.map(async (image, index) => {\n+          // If it's a URL or null, keep it\n+          if (!image || typeof image === 'string') return image;\n+          \n+          // If it's a File object, upload it\n+          if (image instanceof File || image?.file instanceof File) {\n+            const file = image instanceof File ? image : image.file;\n+            try {\n+              const metadata = {\n+                contentType: file.type || 'image/jpeg',\n+                cacheControl: 'public,max-age=3600'\n+              };\n+              \n+              const imageRef = ref(\n+                storage, \n+                `shops/${auth.currentUser.uid}/items/${itemId}/image-${index}-${Date.now()}`\n+              );\n+              \n+              const snapshot = await uploadBytes(imageRef, file, metadata);\n+              return await getDownloadURL(snapshot.ref);\n+            } catch (uploadError) {\n+              console.error(`Failed to upload image ${index}:`, uploadError);\n+              return null;\n+            }\n+          }\n+          return null;\n+        }));\n+  \n+        updatedItem.images = processedImages;\n+      }\n+  \n+      // Update in Firestore\n+      const shopRef = doc(db, 'shops', auth.currentUser.uid);\n+      const updatedItems = shopData.items.map(item =>\n+        item.id === itemId ? updatedItem : item\n+      );\n+  \n+      await updateDoc(shopRef, {\n+        items: updatedItems,\n+        updatedAt: new Date().toISOString()\n+      });\n+  \n+      // Update local state\n+      setShopData(prev => ({\n+        ...prev,\n+        items: updatedItems\n+      }));\n+  \n+      console.log('Item updated successfully:', updatedItem); // Debug log\n+    } catch (error) {\n+      console.error('Error updating item:', error);\n+    } finally {\n+      setSaving(false);\n+    }\n+  };\n+  \n+    // Save shop data\n+  const saveShopData = async (updates) => {\n+    if (!auth.currentUser) return;\n+    setSaving(true);\n+    try {\n+      const shopRef = doc(db, 'shops', auth.currentUser.uid);\n+      await updateDoc(shopRef, {\n+        ...updates,\n+        updatedAt: new Date().toISOString()\n+      });\n+      setShopData(prev => ({ ...prev, ...updates }));\n+    } catch (error) {\n+      console.error('Error saving shop data:', error);\n+    } finally {\n+      setSaving(false);\n+    }\n+  };\n+\n+  const handleAddItem = () => {\n+    const newItem = {\n+      id: Date.now().toString(),\n+      name: 'New Item',\n+      price: '',\n+      description: '',\n+      zipCode: '',\n+      images: [null, null, null],\n+      currentImageIndex: 0\n+    };\n+\n+    const updatedItems = [...(shopData.items || []), newItem];\n+    saveShopData({ items: updatedItems });\n+  };\n+\n+  return (\n+    <ThemeProvider theme={shopData?.theme || DEFAULT_THEME}>\n+      <PageContainer>\n+        <KalKodeCorner>\n+          <KalKodeLogo onClick={() => navigate('/')}>\n+            KALKODE\n+          </KalKodeLogo>\n+        </KalKodeCorner>\n+\n+        <TabPositioner\n+          position={shopData?.layout?.tabPosition || 'top'}\n+          activeTab={activeTab}\n+          onTabChange={setActiveTab}\n+          tabs={[\n+            { id: 'home', label: 'Home' },\n+            { id: 'community', label: 'Community' },\n+            { id: 'shop', label: 'Shop' }\n+          ]}\n+          theme={shopData?.theme}\n+        />\n+\n+        <MainContent>\n+        {activeTab === 'shop' && (\n+          <>\n+            <ShopProfileSection>\n+            <div className=\"profile-image\">\n+              {shopData?.profile && typeof shopData.profile === 'string' ? (\n+                // If we have a URL string, show the image directly\n+                <img \n+                  src={shopData.profile} \n+                  alt=\"Profile\" \n+                  style={{ \n+                    width: '100%',\n+                    height: '100%',\n+                    objectFit: 'cover',\n+                    cursor: 'pointer'\n+                  }}\n+                  onClick={() => {\n+                    // Allow changing the image by clicking on it\n+                    const input = document.createElement('input');\n+                    input.type = 'file';\n+                    input.accept = 'image/*';\n+                    input.onchange = (e) => {\n+                      if (e.target.files?.[0]) {\n+                        handleUpdateShop({ \n+                          profile: {\n+                            file: e.target.files[0],\n+                            type: e.target.files[0].type\n+                          }\n+                        });\n+                      }\n+                    };\n+                    input.click();\n+                  }}\n+                />\n+              ) : (\n+                // If no image URL, show the EditableImage component\n+                <EditableImage\n+                  value={null}\n+                  onChange={(value) => {\n+                    console.log('Profile image update:', value);\n+                    if (value instanceof File) {\n+                      handleUpdateShop({ \n+                        profile: {\n+                          file: value,\n+                          type: value.type\n+                        }\n+                      });\n+                    }\n+                  }}\n+                  theme={shopData?.theme}\n+                  round\n+                  width=\"150px\"\n+                  height=\"150px\"\n+                  style={{ \n+                    width: '150px',\n+                    height: '150px',\n+                    borderRadius: '50%',\n+                    objectFit: 'cover'\n+                  }}\n+                />\n+              )}\n+            </div>\n+            <div className=\"shop-name-container\">\n+              <EditableText\n+                value={shopData?.name}\n+                onChange={(value) => handleUpdateShop({ name: value })}\n+                placeholder=\"Shop Name\"\n+                style={{\n+                  fontSize: `${shopNameFontSize}rem`,\n+                }}\n+              />\n+            </div>\n+            <div className=\"shop-description-container\">\n+              <EditableText\n+                value={shopData?.description}\n+                onChange={(value) => handleUpdateShop({ description: value })}\n+                placeholder=\"Shop Description\"\n+                multiline\n+              />\n+            </div>\n+            </ShopProfileSection>\n+\n+            <ItemGrid>\n+              {shopData?.items?.map(item => (\n+                <ItemCard key={item.id}>\n+                  <ItemImageContainer>\n+                    {uploading[item.id] && (\n+                      <UploadingOverlay>\n+                        <LoadingSpinner />\n+                      </UploadingOverlay>\n+                    )}\n+                    <div \n+                      className=\"image-container\"\n+                      onClick={() => {\n+                        if (!item.images[item.currentImageIndex]) {\n+                          document.getElementById(`image-upload-${item.id}-${item.currentImageIndex}`).click();\n+                        }\n+                      }}\n+                    >\n+                      {item.images[item.currentImageIndex] ? (\n+                        <img \n+                          src={item.images[item.currentImageIndex]} \n+                          alt={item.name}\n+                          style={{ width: '100%', height: '100%', objectFit: 'cover' }}\n+                        />\n+                      ) : (\n+                        <div className=\"placeholder\">\n+                          <Plus size={24} />\n+                          <span>Upload Image</span>\n+                        </div>\n+                      )}\n+                    </div>\n+                    \n+                    {/* Only show carousel arrows if there are images */}\n+                    {item.images.some(img => img) && (\n+                      <>\n+                        <button \n+                          className=\"carousel-arrow left\"\n+                          onClick={() => {\n+                            const newIndex = ((item.currentImageIndex - 1) + 3) % 3;\n+                            handleItemUpdate(item.id, { currentImageIndex: newIndex });\n+                          }}\n+                        >\n+                          <ChevronLeft size={16} />\n+                        </button>\n+                        <button \n+                          className=\"carousel-arrow right\"\n+                          onClick={() => {\n+                            const newIndex = (item.currentImageIndex + 1) % 3;\n+                            handleItemUpdate(item.id, { currentImageIndex: newIndex });\n+                          }}\n+                        >\n+                          <ChevronRight size={16} />\n+                        </button>\n+                      </>\n+                    )}\n+\n+                    {/* Add/Remove button */}\n+                    {item.images[item.currentImageIndex] && (\n+                      <button \n+                        className=\"add-image\"\n+                        onClick={() => {\n+                          const newImages = [...item.images];\n+                          newImages[item.currentImageIndex] = null;\n+                          handleItemUpdate(item.id, { images: newImages });\n+                        }}\n+                      >\n+                        <X size={16} />\n+                      </button>\n+                    )}\n+\n+                    <input\n+                      type=\"file\"\n+                      id={`image-upload-${item.id}-${item.currentImageIndex}`}\n+                      accept=\"image/*\"\n+                      style={{ display: 'none' }}\n+                      onChange={(e) => {\n+                        if (e.target.files?.[0]) {\n+                          const newImages = [...item.images];\n+                          newImages[item.currentImageIndex] = e.target.files[0];\n+                          handleItemUpdate(item.id, { images: newImages });\n+                        }\n+                      }}\n+                    />\n+                  </ItemImageContainer>\n+                  <ItemContent>\n+                    <EditableText\n+                      value={item.name}\n+                      onChange={(value) => handleItemUpdate(item.id, { name: value })}\n+                      placeholder=\"Item Name\"\n+                      theme={shopData?.theme}\n+                    />\n+                    <EditableText\n+                      value={item.price}\n+                      onChange={(value) => handleItemUpdate(item.id, { price: value })}\n+                      placeholder=\"Price\"\n+                      theme={shopData?.theme}\n+                    />\n+                    <EditableText\n+                      value={item.description}\n+                      onChange={(value) => handleItemUpdate(item.id, { description: value })}\n+                      placeholder=\"Item Description\"\n+                      multiline\n+                      theme={shopData?.theme}\n+                    />\n+                    <ZipCodeInput\n+                      value={item.zipCode || ''}\n+                      onChange={(e) => handleItemUpdate(item.id, { zipCode: e.target.value })}\n+                      placeholder=\"ZIP Code\"\n+                      maxLength=\"5\"\n+                      pattern=\"[0-9]*\"\n+                    />\n+                  </ItemContent>\n+                </ItemCard>\n+              ))}\n+            </ItemGrid>\n+\n+              <AddItemButton onClick={handleAddItem} theme={shopData?.theme}>\n+                <Plus size={20} />\n+                Add Item\n+              </AddItemButton>\n+            </>\n+          )}\n+\n+          {activeTab === 'home' && (\n+            <div>\n+              <EditableText\n+                value={shopData?.mission}\n+                onChange={(value) => saveShopData({ mission: value })}\n+                placeholder=\"Your Shop's Mission\"\n+                multiline\n+                theme={shopData?.theme}\n+              />\n+              {/* Add more home page customization options */}\n+            </div>\n+          )}\n+\n+          {activeTab === 'community' && (\n+            <div>\n+              {/* Add community customization options */}\n+            </div>\n+          )}\n+        </MainContent>\n+      </PageContainer>\n+    </ThemeProvider>\n+  );\n+};\n+\n+export default ShopPage;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1736262964069,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,8 +11,9 @@\n import EditableImage from './components/EditableComponents/EditableImage';\n import { DEFAULT_THEME } from '../../theme/theme';\n import { ref, uploadBytes, getDownloadURL } from 'firebase/storage';\n import { storage } from '../../firebase/config';\n+import { Trash2 } from 'lucide-react';\n \n const PageContainer = styled.div`\n   min-height: 100vh;\n   background: ${props => props.theme?.colors?.background || DEFAULT_THEME.colors.background};\n@@ -836,849 +837,5 @@\n     </ThemeProvider>\n   );\n };\n \n-export default ShopPage;\n-// src/pages/shop/ShopPage.js\n-\n-import React, { useState, useEffect } from 'react';\n-import { useNavigate } from 'react-router-dom';\n-import styled, { ThemeProvider } from 'styled-components';\n-import { auth, db } from '../../firebase/config';\n-import { doc, getDoc, updateDoc } from 'firebase/firestore';\n-import { Plus, ChevronLeft, ChevronRight, X } from 'lucide-react';\n-import TabPositioner from './components/TabPositioner';\n-import EditableText from './components/EditableComponents/EditableText';\n-import EditableImage from './components/EditableComponents/EditableImage';\n-import { DEFAULT_THEME } from '../../theme/theme';\n-import { ref, uploadBytes, getDownloadURL } from 'firebase/storage';\n-import { storage } from '../../firebase/config';\n-\n-const PageContainer = styled.div`\n-  min-height: 100vh;\n-  background: ${props => props.theme?.colors?.background || DEFAULT_THEME.colors.background};\n-  color: ${props => props.theme?.colors?.text || DEFAULT_THEME.colors.text};\n-  position: relative;\n-  overflow-x: hidden;\n-`;\n-\n-const MainContent = styled.div`\n-  max-width: ${props => props.theme?.styles?.containerWidth || DEFAULT_THEME.styles.containerWidth};\n-  margin: 0 auto;\n-  padding: 6rem 2rem 2rem; // Increased top padding to accommodate tabs\n-  position: relative;\n-  z-index: 1;\n-`;\n-\n-const ShopProfileSection = styled.div`\n-  display: flex;\n-  flex-direction: column;\n-  align-items: center;\n-  text-align: center;\n-  max-width: 800px;\n-  margin: 2rem auto 3rem;  // Added top margin\n-  padding: 2rem;\n-\n-  .profile-image {\n-    margin-bottom: 2rem;\n-    width: 150px;\n-    height: 150px;\n-    border-radius: 50%;\n-    overflow: hidden;\n-    background: rgba(0, 0, 0, 0.1);\n-    \n-    img {\n-      width: 100%;\n-      height: 100%;\n-      object-fit: cover;\n-    }\n-  }\n-\n-  .shop-name-container {\n-    width: 100%;\n-    margin: 1.5rem 0;\n-\n-    input {\n-      width: 100%;\n-      text-align: center;\n-      background: transparent;\n-      border: none;\n-      font-size: ${props => props.fontSize || '2.5rem'};\n-      font-family: ${props => props.theme?.fonts?.heading};\n-      background: ${props => `linear-gradient(45deg, ${props.theme?.colors?.primary}, ${props.theme?.colors?.accent})`};\n-      -webkit-background-clip: text;\n-      -webkit-text-fill-color: transparent;\n-      outline: none;\n-      padding: 0.5rem;\n-\n-      &:focus {\n-        background: ${props => `linear-gradient(45deg, ${props.theme?.colors?.primary}, ${props.theme?.colors?.accent})`};\n-        -webkit-background-clip: text;\n-        -webkit-text-fill-color: transparent;\n-      }\n-\n-      &::placeholder {\n-        background: ${props => `linear-gradient(45deg, ${props.theme?.colors?.primary}80, ${props.theme?.colors?.accent}80)`};\n-        -webkit-background-clip: text;\n-        -webkit-text-fill-color: transparent;\n-      }\n-    }\n-  }\n-\n-  .shop-description-container {\n-    width: 100%;\n-    margin-top: 1rem;\n-\n-    textarea {\n-      width: 100%;\n-      text-align: center;\n-      background: transparent;\n-      border: none;\n-      font-size: 1.1rem;\n-      font-family: ${props => props.theme?.fonts?.body};\n-      color: ${props => props.theme?.colors?.text};\n-      opacity: 0.8;\n-      outline: none;\n-      padding: 0.5rem;\n-      resize: none;\n-      min-height: 60px;\n-\n-      &:focus {\n-        opacity: 1;\n-      }\n-\n-      &::placeholder {\n-        color: ${props => props.theme?.colors?.text};\n-        opacity: 0.5;\n-      }\n-    }\n-  }\n-`;\n-\n-const FontSizeButton = styled.button`\n-  background: rgba(255, 255, 255, 0.1);\n-  border: none;\n-  border-radius: 50%;\n-  width: 24px;\n-  height: 24px;\n-  display: flex;\n-  align-items: center;\n-  justify-content: center;\n-  color: white;\n-  cursor: pointer;\n-\n-  &:hover {\n-    background: rgba(255, 255, 255, 0.2);\n-  }\n-`;\n-\n-const ItemImageContainer = styled.div`\n-  position: relative;\n-  height: 250px;\n-  width: 100%;\n-  display: flex;\n-  overflow: hidden;\n-  background: rgba(0, 0, 0, 0.1);\n-\n-  .image-container {\n-    width: 100%;\n-    height: 100%;\n-    position: relative;\n-  }\n-\n-  .placeholder {\n-    width: 100%;\n-    height: 100%;\n-    display: flex;\n-    flex-direction: column;\n-    align-items: center;\n-    justify-content: center;\n-    gap: 0.5rem;\n-    color: ${props => props.theme?.colors?.text || '#fff'};\n-    opacity: 0.5;\n-    cursor: pointer;\n-    \n-    span {\n-      font-size: 0.9rem;\n-    }\n-  }\n-\n-  .carousel-arrow {\n-    position: absolute;\n-    top: 50%;\n-    transform: translateY(-50%);\n-    background: rgba(0, 0, 0, 0.5);\n-    border: none;\n-    border-radius: 50%;\n-    width: 32px;\n-    height: 32px;\n-    display: flex;\n-    align-items: center;\n-    justify-content: center;\n-    color: white;\n-    cursor: pointer;\n-    z-index: 2;\n-    transition: all 0.3s ease;\n-\n-    &:hover {\n-      background: rgba(0, 0, 0, 0.8);\n-    }\n-\n-    &.left {\n-      left: 10px;\n-    }\n-\n-    &.right {\n-      right: 10px;\n-    }\n-  }\n-\n-  .add-image {\n-    position: absolute;\n-    top: 10px;\n-    right: 10px;\n-    background: rgba(0, 0, 0, 0.5);\n-    border: none;\n-    border-radius: 50%;\n-    width: 32px;\n-    height: 32px;\n-    display: flex;\n-    align-items: center;\n-    justify-content: center;\n-    color: white;\n-    cursor: pointer;\n-    z-index: 2;\n-    transition: all 0.3s ease;\n-\n-    &:hover {\n-      background: rgba(0, 0, 0, 0.8);\n-    }\n-  }\n-`;\n-\n-const KalKodeCorner = styled.div`\n-  position: fixed;\n-  top: 2rem;\n-  right: 2rem;\n-  z-index: 100;\n-  cursor: pointer;\n-`;\n-\n-const KalKodeLogo = styled.div`\n-  color: #A00000;\n-  font-family: 'Impact', sans-serif;\n-  font-size: 2rem;\n-  letter-spacing: 2px;\n-  transform: skew(-5deg);\n-`;\n-\n-\n-const ShopBanner = styled.div`\n-  position: fixed;\n-  top: 0;\n-  left: 0;\n-  right: 0;\n-  height: 80px;\n-  background: ${props => `${props.theme?.colors?.background || DEFAULT_THEME.colors.background}CC`};\n-  backdrop-filter: blur(10px);\n-  display: flex;\n-  align-items: center;\n-  justify-content: space-between;\n-  padding: 0 2rem;\n-  z-index: 100;\n-  border-bottom: 1px solid ${props => `${props.theme?.colors?.accent || DEFAULT_THEME.colors.accent}30`};\n-`;\n-\n-const UploadingOverlay = styled.div`\n-  position: absolute;\n-  top: 0;\n-  left: 0;\n-  right: 0;\n-  bottom: 0;\n-  background: rgba(0, 0, 0, 0.5);\n-  display: flex;\n-  align-items: center;\n-  justify-content: center;\n-  color: white;\n-  z-index: 3;\n-`;\n-\n-const ItemContent = styled.div`\n-  padding: 1.5rem;\n-  display: flex;\n-  flex-direction: column;\n-  gap: 1rem;\n-  height: calc(100% - 250px); // This ensures the content takes the remaining space\n-  overflow-y: auto;\n-\n-  input, textarea {\n-    background: rgba(255, 255, 255, 0.05);\n-    border: 1px solid rgba(255, 255, 255, 0.1);\n-    border-radius: ${props => props.theme?.styles?.borderRadius || '8px'};\n-    padding: 0.8rem;\n-    color: ${props => props.theme?.colors?.text};\n-    \n-    &:focus {\n-      outline: none;\n-      border-color: ${props => props.theme?.colors?.accent};\n-    }\n-  }\n-`;\n-\n-const ShopName = styled.div`\n-  flex: 1;\n-  text-align: ${props => props.position};\n-  font-family: ${props => props.theme?.fonts?.heading || DEFAULT_THEME.fonts.heading};\n-  font-size: 1.8rem;\n-  padding: ${props => props.position === 'center' ? '0 80px' : '0'};\n-`;\n-\n-const LoadingSpinner = styled.div`\n-  width: 20px;\n-  height: 20px;\n-  border: 2px solid rgba(255, 255, 255, 0.3);\n-  border-radius: 50%;\n-  border-top-color: white;\n-  animation: spin 1s linear infinite;\n-\n-  @keyframes spin {\n-    to {\n-      transform: rotate(360deg);\n-    }\n-  }\n-`;\n-\n-const ItemGrid = styled.div`\n-  display: grid;\n-  grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));\n-  gap: 2rem;\n-  margin-bottom: 2rem;\n-`;\n-\n-const ItemCard = styled.div`\n-  background: rgba(255, 255, 255, 0.05);\n-  border-radius: ${props => props.theme?.styles?.borderRadius || '12px'};\n-  overflow: hidden;\n-  border: 1px solid rgba(255, 255, 255, 0.1);\n-  width: 100%;\n-  height: 500px;\n-\n-  .item-content {\n-    padding: 1.5rem;\n-  }\n-`;\n-\n-const ZipCodeInput = styled.input`\n-  background: rgba(255, 255, 255, 0.05);\n-  border: 1px solid rgba(255, 255, 255, 0.1);\n-  padding: 0.5rem;\n-  border-radius: 4px;\n-  color: ${props => props.theme?.colors?.text};\n-  margin-top: 0.5rem;\n-  width: 100%;\n-\n-  &:focus {\n-    outline: none;\n-    border-color: ${props => props.theme?.colors?.accent};\n-  }\n-`;\n-\n-const AddItemButton = styled.button`\n-  background: ${props => props.theme?.colors?.primary};\n-  color: ${props => props.theme?.colors?.text};\n-  border: none;\n-  border-radius: 8px;\n-  padding: 1rem;\n-  display: flex;\n-  align-items: center;\n-  gap: 0.5rem;\n-  cursor: pointer;\n-  margin: 2rem auto;\n-  transition: all 0.3s;\n-\n-  &:hover {\n-    transform: translateY(-2px);\n-  }\n-`;\n-\n-const cleanDataForFirestore = (data) => {\n-  if (!data) return data;\n-  \n-  if (Array.isArray(data)) {\n-    return data.map(item => cleanDataForFirestore(item));\n-  }\n-  \n-  if (typeof data === 'object' && !(data instanceof Date)) {\n-    const cleanedData = {};\n-    for (const [key, value] of Object.entries(data)) {\n-      // Skip file objects\n-      if (value instanceof File) continue;\n-      // Skip null/undefined values\n-      if (value === null || value === undefined) continue;\n-      cleanedData[key] = cleanDataForFirestore(value);\n-    }\n-    return cleanedData;\n-  }\n-  \n-  return data;\n-};\n-\n-const ShopPage = () => {\n-  const navigate = useNavigate();\n-  const [shopData, setShopData] = useState(null); // Keep as null initially\n-  const [isReady, setIsReady] = useState(false);  // Add this state\n-  const [activeTab, setActiveTab] = useState('shop');\n-  const [saving, setSaving] = useState(false);\n-  const [shopNameFontSize, setShopNameFontSize] = useState(2.5);\n-  const [uploading, setUploading] = useState({});\n-\n-  useEffect(() => {\n-    const loadShopData = async (userId) => {\n-      try {\n-        const shopDoc = await getDoc(doc(db, 'shops', userId));\n-        if (shopDoc.exists()) {\n-          const data = shopDoc.data();\n-          setShopData(data);\n-        }\n-        setIsReady(true); // Set ready after data is loaded\n-      } catch (error) {\n-        console.error('Error loading shop data:', error);\n-        setIsReady(true); // Still set ready even on error\n-      }\n-    };    \n-\n-    const unsubscribe = auth.onAuthStateChanged((user) => {\n-      if (!user) {\n-        navigate('/auth');\n-        return;\n-      }\n-      loadShopData(user.uid);\n-    });\n-\n-    return () => unsubscribe();\n-  }, [navigate]);\n-\n-  // Don't render anything until ready\n-  if (!isReady) {\n-    return null;\n-  }\n-\n-  const handleUpdateShop = async (updates) => {\n-    if (!auth.currentUser) return;\n-    \n-    try {\n-      setSaving(true);\n-      console.log('Updating shop with:', updates); // Debug log\n-      \n-      let finalUpdates = { ...updates };\n-      \n-      // Handle profile image upload\n-      if (updates.profile?.file instanceof File) {\n-        const file = updates.profile.file;\n-        const metadata = {\n-          contentType: file.type || 'image/jpeg',\n-          cacheControl: 'public,max-age=3600',\n-          customMetadata: {\n-            'Access-Control-Allow-Origin': '*'\n-          }\n-        };\n-        \n-        const profileRef = ref(\n-          storage, \n-          `shops/${auth.currentUser.uid}/profile/profile-${Date.now()}`\n-        );\n-        \n-        const snapshot = await uploadBytes(profileRef, file, metadata);\n-        const imageUrl = await getDownloadURL(snapshot.ref);\n-        \n-        // Update with image URL instead of file\n-        finalUpdates = {\n-          ...finalUpdates,\n-          profile: imageUrl\n-        };\n-      }\n-  \n-      // Update Firestore\n-      const shopRef = doc(db, 'shops', auth.currentUser.uid);\n-      await updateDoc(shopRef, {\n-        ...finalUpdates,\n-        updatedAt: new Date().toISOString()\n-      });\n-  \n-      // Update local state\n-      setShopData(prev => ({\n-        ...prev,\n-        ...finalUpdates\n-      }));\n-  \n-      console.log('Shop update successful:', finalUpdates);\n-    } catch (error) {\n-      console.error('Error updating shop:', error);\n-    } finally {\n-      setSaving(false);\n-    }\n-  };\n-\n-  const logImageState = (image) => {\n-    if (!image) return 'null';\n-    if (typeof image === 'string') return `URL: ${image}`;\n-    if (image instanceof File) return `File: ${image.name}`;\n-    if (image?.file instanceof File) return `File Object: ${image.file.name}`;\n-    return `Unknown type: ${typeof image}`;\n-  };\n-\n-  // Handle item updates\n-  const handleItemUpdate = async (itemId, updates) => {\n-    if (!auth.currentUser) return;\n-  \n-    try {\n-      setSaving(true);\n-      console.log('Updating item with:', updates); // Debug log\n-  \n-      const currentItem = shopData.items.find(item => item.id === itemId);\n-      let updatedItem = { ...currentItem, ...updates };\n-  \n-      // Handle image uploads if present\n-      if (updates.images) {\n-        const processedImages = await Promise.all(updates.images.map(async (image, index) => {\n-          // If it's a URL or null, keep it\n-          if (!image || typeof image === 'string') return image;\n-          \n-          // If it's a File object, upload it\n-          if (image instanceof File || image?.file instanceof File) {\n-            const file = image instanceof File ? image : image.file;\n-            try {\n-              const metadata = {\n-                contentType: file.type || 'image/jpeg',\n-                cacheControl: 'public,max-age=3600'\n-              };\n-              \n-              const imageRef = ref(\n-                storage, \n-                `shops/${auth.currentUser.uid}/items/${itemId}/image-${index}-${Date.now()}`\n-              );\n-              \n-              const snapshot = await uploadBytes(imageRef, file, metadata);\n-              return await getDownloadURL(snapshot.ref);\n-            } catch (uploadError) {\n-              console.error(`Failed to upload image ${index}:`, uploadError);\n-              return null;\n-            }\n-          }\n-          return null;\n-        }));\n-  \n-        updatedItem.images = processedImages;\n-      }\n-  \n-      // Update in Firestore\n-      const shopRef = doc(db, 'shops', auth.currentUser.uid);\n-      const updatedItems = shopData.items.map(item =>\n-        item.id === itemId ? updatedItem : item\n-      );\n-  \n-      await updateDoc(shopRef, {\n-        items: updatedItems,\n-        updatedAt: new Date().toISOString()\n-      });\n-  \n-      // Update local state\n-      setShopData(prev => ({\n-        ...prev,\n-        items: updatedItems\n-      }));\n-  \n-      console.log('Item updated successfully:', updatedItem); // Debug log\n-    } catch (error) {\n-      console.error('Error updating item:', error);\n-    } finally {\n-      setSaving(false);\n-    }\n-  };\n-  \n-    // Save shop data\n-  const saveShopData = async (updates) => {\n-    if (!auth.currentUser) return;\n-    setSaving(true);\n-    try {\n-      const shopRef = doc(db, 'shops', auth.currentUser.uid);\n-      await updateDoc(shopRef, {\n-        ...updates,\n-        updatedAt: new Date().toISOString()\n-      });\n-      setShopData(prev => ({ ...prev, ...updates }));\n-    } catch (error) {\n-      console.error('Error saving shop data:', error);\n-    } finally {\n-      setSaving(false);\n-    }\n-  };\n-\n-  const handleAddItem = () => {\n-    const newItem = {\n-      id: Date.now().toString(),\n-      name: 'New Item',\n-      price: '',\n-      description: '',\n-      zipCode: '',\n-      images: [null, null, null],\n-      currentImageIndex: 0\n-    };\n-\n-    const updatedItems = [...(shopData.items || []), newItem];\n-    saveShopData({ items: updatedItems });\n-  };\n-\n-  return (\n-    <ThemeProvider theme={shopData?.theme || DEFAULT_THEME}>\n-      <PageContainer>\n-        <KalKodeCorner>\n-          <KalKodeLogo onClick={() => navigate('/')}>\n-            KALKODE\n-          </KalKodeLogo>\n-        </KalKodeCorner>\n-\n-        <TabPositioner\n-          position={shopData?.layout?.tabPosition || 'top'}\n-          activeTab={activeTab}\n-          onTabChange={setActiveTab}\n-          tabs={[\n-            { id: 'home', label: 'Home' },\n-            { id: 'community', label: 'Community' },\n-            { id: 'shop', label: 'Shop' }\n-          ]}\n-          theme={shopData?.theme}\n-        />\n-\n-        <MainContent>\n-        {activeTab === 'shop' && (\n-          <>\n-            <ShopProfileSection>\n-            <div className=\"profile-image\">\n-              {shopData?.profile && typeof shopData.profile === 'string' ? (\n-                // If we have a URL string, show the image directly\n-                <img \n-                  src={shopData.profile} \n-                  alt=\"Profile\" \n-                  style={{ \n-                    width: '100%',\n-                    height: '100%',\n-                    objectFit: 'cover',\n-                    cursor: 'pointer'\n-                  }}\n-                  onClick={() => {\n-                    // Allow changing the image by clicking on it\n-                    const input = document.createElement('input');\n-                    input.type = 'file';\n-                    input.accept = 'image/*';\n-                    input.onchange = (e) => {\n-                      if (e.target.files?.[0]) {\n-                        handleUpdateShop({ \n-                          profile: {\n-                            file: e.target.files[0],\n-                            type: e.target.files[0].type\n-                          }\n-                        });\n-                      }\n-                    };\n-                    input.click();\n-                  }}\n-                />\n-              ) : (\n-                // If no image URL, show the EditableImage component\n-                <EditableImage\n-                  value={null}\n-                  onChange={(value) => {\n-                    console.log('Profile image update:', value);\n-                    if (value instanceof File) {\n-                      handleUpdateShop({ \n-                        profile: {\n-                          file: value,\n-                          type: value.type\n-                        }\n-                      });\n-                    }\n-                  }}\n-                  theme={shopData?.theme}\n-                  round\n-                  width=\"150px\"\n-                  height=\"150px\"\n-                  style={{ \n-                    width: '150px',\n-                    height: '150px',\n-                    borderRadius: '50%',\n-                    objectFit: 'cover'\n-                  }}\n-                />\n-              )}\n-            </div>\n-              <div className=\"shop-name-container\">\n-                  <EditableText\n-                    value={shopData?.name}\n-                    onChange={(value) => handleUpdateShop({ name: value })}\n-                    placeholder=\"Shop Name\"\n-                    theme={shopData?.theme}\n-                    style={{\n-                      fontSize: `${shopNameFontSize}rem`,\n-                      background: `linear-gradient(45deg, ${shopData?.theme?.colors?.primary}, ${shopData?.theme?.colors?.accent})`,\n-                      WebkitBackgroundClip: 'text',\n-                      WebkitTextFillColor: 'transparent',\n-                      fontFamily: shopData?.theme?.fonts?.heading\n-                    }}\n-                  />\n-                  <div className=\"font-size-control\">\n-                    <FontSizeButton onClick={() => setShopNameFontSize(prev => prev + 0.5)}>+</FontSizeButton>\n-                    <FontSizeButton onClick={() => setShopNameFontSize(prev => Math.max(1, prev - 0.5))}>-</FontSizeButton>\n-                  </div>\n-                </div>\n-            <div className=\"shop-description\">\n-              {shopData?.description || \"Shop Description\"}\n-            </div>\n-            </ShopProfileSection>\n-\n-            <ItemGrid>\n-              {shopData?.items?.map(item => (\n-                <ItemCard key={item.id}>\n-                  <ItemImageContainer>\n-                    {uploading[item.id] && (\n-                      <UploadingOverlay>\n-                        <LoadingSpinner />\n-                      </UploadingOverlay>\n-                    )}\n-                    <div \n-                      className=\"image-container\"\n-                      onClick={() => {\n-                        if (!item.images[item.currentImageIndex]) {\n-                          document.getElementById(`image-upload-${item.id}-${item.currentImageIndex}`).click();\n-                        }\n-                      }}\n-                    >\n-                      {item.images[item.currentImageIndex] ? (\n-                        <img \n-                          src={item.images[item.currentImageIndex]} \n-                          alt={item.name}\n-                          style={{ width: '100%', height: '100%', objectFit: 'cover' }}\n-                        />\n-                      ) : (\n-                        <div className=\"placeholder\">\n-                          <Plus size={24} />\n-                          <span>Upload Image</span>\n-                        </div>\n-                      )}\n-                    </div>\n-                    \n-                    {/* Only show carousel arrows if there are images */}\n-                    {item.images.some(img => img) && (\n-                      <>\n-                        <button \n-                          className=\"carousel-arrow left\"\n-                          onClick={() => {\n-                            const newIndex = ((item.currentImageIndex - 1) + 3) % 3;\n-                            handleItemUpdate(item.id, { currentImageIndex: newIndex });\n-                          }}\n-                        >\n-                          <ChevronLeft size={16} />\n-                        </button>\n-                        <button \n-                          className=\"carousel-arrow right\"\n-                          onClick={() => {\n-                            const newIndex = (item.currentImageIndex + 1) % 3;\n-                            handleItemUpdate(item.id, { currentImageIndex: newIndex });\n-                          }}\n-                        >\n-                          <ChevronRight size={16} />\n-                        </button>\n-                      </>\n-                    )}\n-\n-                    {/* Add/Remove button */}\n-                    {item.images[item.currentImageIndex] && (\n-                      <button \n-                        className=\"add-image\"\n-                        onClick={() => {\n-                          const newImages = [...item.images];\n-                          newImages[item.currentImageIndex] = null;\n-                          handleItemUpdate(item.id, { images: newImages });\n-                        }}\n-                      >\n-                        <X size={16} />\n-                      </button>\n-                    )}\n-\n-                    <input\n-                      type=\"file\"\n-                      id={`image-upload-${item.id}-${item.currentImageIndex}`}\n-                      accept=\"image/*\"\n-                      style={{ display: 'none' }}\n-                      onChange={(e) => {\n-                        if (e.target.files?.[0]) {\n-                          const newImages = [...item.images];\n-                          newImages[item.currentImageIndex] = e.target.files[0];\n-                          handleItemUpdate(item.id, { images: newImages });\n-                        }\n-                      }}\n-                    />\n-                  </ItemImageContainer>\n-                  <ItemContent>\n-                    <EditableText\n-                      value={item.name}\n-                      onChange={(value) => handleItemUpdate(item.id, { name: value })}\n-                      placeholder=\"Item Name\"\n-                      theme={shopData?.theme}\n-                    />\n-                    <EditableText\n-                      value={item.price}\n-                      onChange={(value) => handleItemUpdate(item.id, { price: value })}\n-                      placeholder=\"Price\"\n-                      theme={shopData?.theme}\n-                    />\n-                    <EditableText\n-                      value={item.description}\n-                      onChange={(value) => handleItemUpdate(item.id, { description: value })}\n-                      placeholder=\"Item Description\"\n-                      multiline\n-                      theme={shopData?.theme}\n-                    />\n-                    <ZipCodeInput\n-                      value={item.zipCode || ''}\n-                      onChange={(e) => handleItemUpdate(item.id, { zipCode: e.target.value })}\n-                      placeholder=\"ZIP Code\"\n-                      maxLength=\"5\"\n-                      pattern=\"[0-9]*\"\n-                    />\n-                  </ItemContent>\n-                </ItemCard>\n-              ))}\n-            </ItemGrid>\n-\n-              <AddItemButton onClick={handleAddItem} theme={shopData?.theme}>\n-                <Plus size={20} />\n-                Add Item\n-              </AddItemButton>\n-            </>\n-          )}\n-\n-          {activeTab === 'home' && (\n-            <div>\n-              <EditableText\n-                value={shopData?.mission}\n-                onChange={(value) => saveShopData({ mission: value })}\n-                placeholder=\"Your Shop's Mission\"\n-                multiline\n-                theme={shopData?.theme}\n-              />\n-              {/* Add more home page customization options */}\n-            </div>\n-          )}\n-\n-          {activeTab === 'community' && (\n-            <div>\n-              {/* Add community customization options */}\n-            </div>\n-          )}\n-        </MainContent>\n-      </PageContainer>\n-    </ThemeProvider>\n-  );\n-};\n-\n export default ShopPage;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1736262976863,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,8 +13,36 @@\n import { ref, uploadBytes, getDownloadURL } from 'firebase/storage';\n import { storage } from '../../firebase/config';\n import { Trash2 } from 'lucide-react';\n \n+const DeleteButton = styled.button`\n+  position: absolute;\n+  top: 10px;\n+  left: 10px;\n+  background: rgba(0, 0, 0, 0.5);\n+  border: none;\n+  border-radius: 50%;\n+  width: 32px;\n+  height: 32px;\n+  display: flex;\n+  align-items: center;\n+  justify-content: center;\n+  color: #ff4444;\n+  cursor: pointer;\n+  z-index: 2;\n+  opacity: 0;\n+  transition: all 0.3s ease;\n+\n+  &:hover {\n+    background: rgba(0, 0, 0, 0.8);\n+    transform: scale(1.1);\n+  }\n+\n+  ${ItemCard}:hover & {\n+    opacity: 1;\n+  }\n+`;\n+\n const PageContainer = styled.div`\n   min-height: 100vh;\n   background: ${props => props.theme?.colors?.background || DEFAULT_THEME.colors.background};\n   color: ${props => props.theme?.colors?.text || DEFAULT_THEME.colors.text};\n"
                },
                {
                    "date": 1736263121719,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -858,5 +858,20 @@\n                 placeholder=\"Your Shop's Mission\"\n                 multiline\n                 theme={shopData?.theme}\n               />\n-         \n\\ No newline at end of file\n+              {/* Add more home page customization options */}\n+            </div>\n+          )}\n+\n+          {activeTab === 'community' && (\n+            <div>\n+              {/* Add community customization options */}\n+            </div>\n+          )}\n+        </MainContent>\n+      </PageContainer>\n+    </ThemeProvider>\n+  );\n+};\n+\n+export default ShopPage;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1736264275043,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,916 @@\n+// src/pages/shop/ShopPage.js\n+\n+import React, { useState, useEffect } from 'react';\n+import { useNavigate } from 'react-router-dom';\n+import styled, { ThemeProvider } from 'styled-components';\n+import { auth, db } from '../../firebase/config';\n+import { doc, getDoc, updateDoc } from 'firebase/firestore';\n+import { Plus, ChevronLeft, ChevronRight, X } from 'lucide-react';\n+import TabPositioner from './components/TabPositioner';\n+import EditableText from './components/EditableComponents/EditableText';\n+import EditableImage from './components/EditableComponents/EditableImage';\n+import { DEFAULT_THEME } from '../../theme/theme';\n+import { ref, uploadBytes, getDownloadURL } from 'firebase/storage';\n+import { storage } from '../../firebase/config';\n+import { Trash2 } from 'lucide-react';\n+\n+const DeleteButton = styled.button`\n+  position: absolute;\n+  top: 10px;\n+  left: 10px;\n+  background: rgba(0, 0, 0, 0.5);\n+  border: none;\n+  border-radius: 50%;\n+  width: 32px;\n+  height: 32px;\n+  display: flex;\n+  align-items: center;\n+  justify-content: center;\n+  color: #ff4444;\n+  cursor: pointer;\n+  z-index: 2;\n+  opacity: 0;\n+  transition: all 0.3s ease;\n+\n+  &:hover {\n+    background: rgba(0, 0, 0, 0.8);\n+    transform: scale(1.1);\n+  }\n+\n+  ${ItemCard}:hover & {\n+    opacity: 1;\n+  }\n+`;\n+\n+const PageContainer = styled.div`\n+  min-height: 100vh;\n+  background: ${props => props.theme?.colors?.background || DEFAULT_THEME.colors.background};\n+  color: ${props => props.theme?.colors?.text || DEFAULT_THEME.colors.text};\n+  position: relative;\n+  overflow-x: hidden;\n+`;\n+\n+const MainContent = styled.div`\n+  max-width: ${props => props.theme?.styles?.containerWidth || DEFAULT_THEME.styles.containerWidth};\n+  margin: 0 auto;\n+  padding: 6rem 2rem 2rem; // Increased top padding to accommodate tabs\n+  position: relative;\n+  z-index: 1;\n+`;\n+\n+const ShopProfileSection = styled.div`\n+  display: flex;\n+  flex-direction: column;\n+  align-items: center;\n+  text-align: center;\n+  max-width: 800px;\n+  margin: 2rem auto 3rem;  // Added top margin\n+  padding: 2rem;\n+\n+  .profile-image {\n+    margin-bottom: 2rem;\n+    width: 150px;\n+    height: 150px;\n+    border-radius: 50%;\n+    overflow: hidden;\n+    background: rgba(0, 0, 0, 0.1);\n+    \n+    img {\n+      width: 100%;\n+      height: 100%;\n+      object-fit: cover;\n+    }\n+  }\n+\n+  .shop-name-container {\n+    width: 100%;\n+    margin: 1.5rem 0;\n+\n+    input {\n+      width: 100%;\n+      text-align: center;\n+      background: transparent;\n+      border: none;\n+      font-size: ${props => props.fontSize || '2.5rem'};\n+      font-family: ${props => props.theme?.fonts?.heading};\n+      background: ${props => `linear-gradient(45deg, ${props.theme?.colors?.primary}, ${props.theme?.colors?.accent})`};\n+      -webkit-background-clip: text;\n+      -webkit-text-fill-color: transparent;\n+      outline: none;\n+      padding: 0.5rem;\n+\n+      &:focus {\n+        background: ${props => `linear-gradient(45deg, ${props.theme?.colors?.primary}, ${props.theme?.colors?.accent})`};\n+        -webkit-background-clip: text;\n+        -webkit-text-fill-color: transparent;\n+      }\n+\n+      &::placeholder {\n+        background: ${props => `linear-gradient(45deg, ${props.theme?.colors?.primary}80, ${props.theme?.colors?.accent}80)`};\n+        -webkit-background-clip: text;\n+        -webkit-text-fill-color: transparent;\n+      }\n+    }\n+  }\n+\n+  .shop-description-container {\n+    width: 100%;\n+    margin-top: 1rem;\n+\n+    textarea {\n+      width: 100%;\n+      text-align: center;\n+      background: transparent;\n+      border: none;\n+      font-size: 1.1rem;\n+      font-family: ${props => props.theme?.fonts?.body};\n+      color: ${props => props.theme?.colors?.text};\n+      opacity: 0.8;\n+      outline: none;\n+      padding: 0.5rem;\n+      resize: none;\n+      min-height: 60px;\n+\n+      &:focus {\n+        opacity: 1;\n+      }\n+\n+      &::placeholder {\n+        color: ${props => props.theme?.colors?.text};\n+        opacity: 0.5;\n+      }\n+    }\n+  }\n+`;\n+\n+const FontSizeButton = styled.button`\n+  background: rgba(255, 255, 255, 0.1);\n+  border: none;\n+  border-radius: 50%;\n+  width: 24px;\n+  height: 24px;\n+  display: flex;\n+  align-items: center;\n+  justify-content: center;\n+  color: white;\n+  cursor: pointer;\n+\n+  &:hover {\n+    background: rgba(255, 255, 255, 0.2);\n+  }\n+`;\n+\n+const ItemImageContainer = styled.div`\n+  position: relative;\n+  height: 250px;\n+  width: 100%;\n+  display: flex;\n+  overflow: hidden;\n+  background: rgba(0, 0, 0, 0.1);\n+\n+  .image-container {\n+    width: 100%;\n+    height: 100%;\n+    position: relative;\n+  }\n+\n+  .placeholder {\n+    width: 100%;\n+    height: 100%;\n+    display: flex;\n+    flex-direction: column;\n+    align-items: center;\n+    justify-content: center;\n+    gap: 0.5rem;\n+    color: ${props => props.theme?.colors?.text || '#fff'};\n+    opacity: 0.5;\n+    cursor: pointer;\n+    \n+    span {\n+      font-size: 0.9rem;\n+    }\n+  }\n+\n+  .carousel-arrow {\n+    position: absolute;\n+    top: 50%;\n+    transform: translateY(-50%);\n+    background: rgba(0, 0, 0, 0.5);\n+    border: none;\n+    border-radius: 50%;\n+    width: 32px;\n+    height: 32px;\n+    display: flex;\n+    align-items: center;\n+    justify-content: center;\n+    color: white;\n+    cursor: pointer;\n+    z-index: 2;\n+    transition: all 0.3s ease;\n+\n+    &:hover {\n+      background: rgba(0, 0, 0, 0.8);\n+    }\n+\n+    &.left {\n+      left: 10px;\n+    }\n+\n+    &.right {\n+      right: 10px;\n+    }\n+  }\n+\n+  .add-image {\n+    position: absolute;\n+    top: 10px;\n+    right: 10px;\n+    background: rgba(0, 0, 0, 0.5);\n+    border: none;\n+    border-radius: 50%;\n+    width: 32px;\n+    height: 32px;\n+    display: flex;\n+    align-items: center;\n+    justify-content: center;\n+    color: white;\n+    cursor: pointer;\n+    z-index: 2;\n+    transition: all 0.3s ease;\n+\n+    &:hover {\n+      background: rgba(0, 0, 0, 0.8);\n+    }\n+  }\n+`;\n+\n+const KalKodeCorner = styled.div`\n+  position: fixed;\n+  top: 2rem;\n+  right: 2rem;\n+  z-index: 100;\n+  cursor: pointer;\n+`;\n+\n+const KalKodeLogo = styled.div`\n+  color: #A00000;\n+  font-family: 'Impact', sans-serif;\n+  font-size: 2rem;\n+  letter-spacing: 2px;\n+  transform: skew(-5deg);\n+`;\n+\n+const TabPositionControl = styled.div`\n+  position: fixed;\n+  right: 2rem;\n+  top: 50%;\n+  transform: translateY(-50%);\n+  display: flex;\n+  flex-direction: column;\n+  gap: 0.5rem;\n+  z-index: 100;\n+`;\n+\n+const PositionButton = styled.button`\n+  background: rgba(255, 255, 255, 0.1);\n+  border: 1px solid ${props => props.active ? props.theme?.colors?.accent : 'transparent'};\n+  border-radius: 8px;\n+  padding: 0.5rem;\n+  color: ${props => props.active ? props.theme?.colors?.accent : props.theme?.colors?.text};\n+  cursor: pointer;\n+  transition: all 0.3s ease;\n+\n+  &:hover {\n+    background: rgba(255, 255, 255, 0.2);\n+  }\n+`;\n+\n+const ShopBanner = styled.div`\n+  position: fixed;\n+  top: 0;\n+  left: 0;\n+  right: 0;\n+  height: 80px;\n+  background: ${props => `${props.theme?.colors?.background || DEFAULT_THEME.colors.background}CC`};\n+  backdrop-filter: blur(10px);\n+  display: flex;\n+  align-items: center;\n+  justify-content: space-between;\n+  padding: 0 2rem;\n+  z-index: 100;\n+  border-bottom: 1px solid ${props => `${props.theme?.colors?.accent || DEFAULT_THEME.colors.accent}30`};\n+`;\n+\n+const UploadingOverlay = styled.div`\n+  position: absolute;\n+  top: 0;\n+  left: 0;\n+  right: 0;\n+  bottom: 0;\n+  background: rgba(0, 0, 0, 0.5);\n+  display: flex;\n+  align-items: center;\n+  justify-content: center;\n+  color: white;\n+  z-index: 3;\n+`;\n+\n+const ItemContent = styled.div`\n+  padding: 1.5rem;\n+  display: flex;\n+  flex-direction: column;\n+  gap: 1rem;\n+  height: calc(100% - 250px); // This ensures the content takes the remaining space\n+  overflow-y: auto;\n+\n+  input, textarea {\n+    background: rgba(255, 255, 255, 0.05);\n+    border: 1px solid rgba(255, 255, 255, 0.1);\n+    border-radius: ${props => props.theme?.styles?.borderRadius || '8px'};\n+    padding: 0.8rem;\n+    color: ${props => props.theme?.colors?.text};\n+    \n+    &:focus {\n+      outline: none;\n+      border-color: ${props => props.theme?.colors?.accent};\n+    }\n+  }\n+`;\n+\n+const ShopName = styled.div`\n+  flex: 1;\n+  text-align: ${props => props.position};\n+  font-family: ${props => props.theme?.fonts?.heading || DEFAULT_THEME.fonts.heading};\n+  font-size: 1.8rem;\n+  padding: ${props => props.position === 'center' ? '0 80px' : '0'};\n+`;\n+\n+const LoadingSpinner = styled.div`\n+  width: 20px;\n+  height: 20px;\n+  border: 2px solid rgba(255, 255, 255, 0.3);\n+  border-radius: 50%;\n+  border-top-color: white;\n+  animation: spin 1s linear infinite;\n+\n+  @keyframes spin {\n+    to {\n+      transform: rotate(360deg);\n+    }\n+  }\n+`;\n+\n+const ItemGrid = styled.div`\n+  display: grid;\n+  grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));\n+  gap: 2rem;\n+  margin-bottom: 2rem;\n+`;\n+\n+const ItemCard = styled.div`\n+  background: rgba(255, 255, 255, 0.05);\n+  border-radius: ${props => props.theme?.styles?.borderRadius || '12px'};\n+  overflow: hidden;\n+  border: 1px solid rgba(255, 255, 255, 0.1);\n+  width: 100%;\n+  height: 500px;\n+\n+  .item-content {\n+    padding: 1.5rem;\n+  }\n+`;\n+\n+const ZipCodeInput = styled.input`\n+  background: rgba(255, 255, 255, 0.05);\n+  border: 1px solid rgba(255, 255, 255, 0.1);\n+  padding: 0.5rem;\n+  border-radius: 4px;\n+  color: ${props => props.theme?.colors?.text};\n+  margin-top: 0.5rem;\n+  width: 100%;\n+\n+  &:focus {\n+    outline: none;\n+    border-color: ${props => props.theme?.colors?.accent};\n+  }\n+`;\n+\n+const AddItemButton = styled.button`\n+  background: ${props => props.theme?.colors?.primary};\n+  color: ${props => props.theme?.colors?.text};\n+  border: none;\n+  border-radius: 8px;\n+  padding: 1rem;\n+  display: flex;\n+  align-items: center;\n+  gap: 0.5rem;\n+  cursor: pointer;\n+  margin: 2rem auto;\n+  transition: all 0.3s;\n+\n+  &:hover {\n+    transform: translateY(-2px);\n+  }\n+`;\n+\n+const cleanDataForFirestore = (data) => {\n+  if (!data) return data;\n+  \n+  if (Array.isArray(data)) {\n+    return data.map(item => cleanDataForFirestore(item));\n+  }\n+  \n+  if (typeof data === 'object' && !(data instanceof Date)) {\n+    const cleanedData = {};\n+    for (const [key, value] of Object.entries(data)) {\n+      // Skip file objects\n+      if (value instanceof File) continue;\n+      // Skip null/undefined values\n+      if (value === null || value === undefined) continue;\n+      cleanedData[key] = cleanDataForFirestore(value);\n+    }\n+    return cleanedData;\n+  }\n+  \n+  return data;\n+};\n+\n+const ShopPage = () => {\n+  const navigate = useNavigate();\n+  const [shopData, setShopData] = useState(null); // Keep as null initially\n+  const [isReady, setIsReady] = useState(false);  // Add this state\n+  const [activeTab, setActiveTab] = useState('shop');\n+  const [saving, setSaving] = useState(false);\n+  const [shopNameFontSize, setShopNameFontSize] = useState(2.5);\n+  const [uploading, setUploading] = useState({});\n+\n+  useEffect(() => {\n+    const loadShopData = async (userId) => {\n+      try {\n+        const shopDoc = await getDoc(doc(db, 'shops', userId));\n+        if (shopDoc.exists()) {\n+          const data = shopDoc.data();\n+          setShopData(data);\n+        }\n+        setIsReady(true); // Set ready after data is loaded\n+      } catch (error) {\n+        console.error('Error loading shop data:', error);\n+        setIsReady(true); // Still set ready even on error\n+      }\n+    };    \n+\n+    const unsubscribe = auth.onAuthStateChanged((user) => {\n+      if (!user) {\n+        navigate('/auth');\n+        return;\n+      }\n+      loadShopData(user.uid);\n+    });\n+\n+    return () => unsubscribe();\n+  }, [navigate]);\n+\n+  // Don't render anything until ready\n+  if (!isReady) {\n+    return null;\n+  }\n+\n+  const handleUpdateShop = async (updates) => {\n+    if (!auth.currentUser) return;\n+    \n+    try {\n+      setSaving(true);\n+      console.log('Updating shop with:', updates); // Debug log\n+      \n+      let finalUpdates = { ...updates };\n+      \n+      // Handle profile image upload\n+      if (updates.profile?.file instanceof File) {\n+        const file = updates.profile.file;\n+        const metadata = {\n+          contentType: file.type || 'image/jpeg',\n+          cacheControl: 'public,max-age=3600',\n+          customMetadata: {\n+            'Access-Control-Allow-Origin': '*'\n+          }\n+        };\n+        \n+        const profileRef = ref(\n+          storage, \n+          `shops/${auth.currentUser.uid}/profile/profile-${Date.now()}`\n+        );\n+        \n+        const snapshot = await uploadBytes(profileRef, file, metadata);\n+        const imageUrl = await getDownloadURL(snapshot.ref);\n+        \n+        // Update with image URL instead of file\n+        finalUpdates = {\n+          ...finalUpdates,\n+          profile: imageUrl\n+        };\n+      }\n+  \n+      // Update Firestore\n+      const shopRef = doc(db, 'shops', auth.currentUser.uid);\n+      await updateDoc(shopRef, {\n+        ...finalUpdates,\n+        updatedAt: new Date().toISOString()\n+      });\n+  \n+      // Update local state\n+      setShopData(prev => ({\n+        ...prev,\n+        ...finalUpdates\n+      }));\n+  \n+      console.log('Shop update successful:', finalUpdates);\n+    } catch (error) {\n+      console.error('Error updating shop:', error);\n+    } finally {\n+      setSaving(false);\n+    }\n+  };\n+\n+  const logImageState = (image) => {\n+    if (!image) return 'null';\n+    if (typeof image === 'string') return `URL: ${image}`;\n+    if (image instanceof File) return `File: ${image.name}`;\n+    if (image?.file instanceof File) return `File Object: ${image.file.name}`;\n+    return `Unknown type: ${typeof image}`;\n+  };\n+\n+  // Handle item updates\n+  const handleItemUpdate = async (itemId, updates) => {\n+    if (!auth.currentUser) return;\n+  \n+    try {\n+      setSaving(true);\n+      console.log('Updating item with:', updates); // Debug log\n+  \n+      const currentItem = shopData.items.find(item => item.id === itemId);\n+      let updatedItem = { ...currentItem, ...updates };\n+  \n+      // Handle image uploads if present\n+      if (updates.images) {\n+        const processedImages = await Promise.all(updates.images.map(async (image, index) => {\n+          // If it's a URL or null, keep it\n+          if (!image || typeof image === 'string') return image;\n+          \n+          // If it's a File object, upload it\n+          if (image instanceof File || image?.file instanceof File) {\n+            const file = image instanceof File ? image : image.file;\n+            try {\n+              const metadata = {\n+                contentType: file.type || 'image/jpeg',\n+                cacheControl: 'public,max-age=3600'\n+              };\n+              \n+              const imageRef = ref(\n+                storage, \n+                `shops/${auth.currentUser.uid}/items/${itemId}/image-${index}-${Date.now()}`\n+              );\n+              \n+              const snapshot = await uploadBytes(imageRef, file, metadata);\n+              return await getDownloadURL(snapshot.ref);\n+            } catch (uploadError) {\n+              console.error(`Failed to upload image ${index}:`, uploadError);\n+              return null;\n+            }\n+          }\n+          return null;\n+        }));\n+  \n+        updatedItem.images = processedImages;\n+      }\n+  \n+      // Update in Firestore\n+      const shopRef = doc(db, 'shops', auth.currentUser.uid);\n+      const updatedItems = shopData.items.map(item =>\n+        item.id === itemId ? updatedItem : item\n+      );\n+  \n+      await updateDoc(shopRef, {\n+        items: updatedItems,\n+        updatedAt: new Date().toISOString()\n+      });\n+  \n+      // Update local state\n+      setShopData(prev => ({\n+        ...prev,\n+        items: updatedItems\n+      }));\n+  \n+      console.log('Item updated successfully:', updatedItem); // Debug log\n+    } catch (error) {\n+      console.error('Error updating item:', error);\n+    } finally {\n+      setSaving(false);\n+    }\n+  };\n+  \n+    // Save shop data\n+  const saveShopData = async (updates) => {\n+    if (!auth.currentUser) return;\n+    setSaving(true);\n+    try {\n+      const shopRef = doc(db, 'shops', auth.currentUser.uid);\n+      await updateDoc(shopRef, {\n+        ...updates,\n+        updatedAt: new Date().toISOString()\n+      });\n+      setShopData(prev => ({ ...prev, ...updates }));\n+    } catch (error) {\n+      console.error('Error saving shop data:', error);\n+    } finally {\n+      setSaving(false);\n+    }\n+  };\n+\n+  const handleAddItem = () => {\n+    const newItem = {\n+      id: Date.now().toString(),\n+      name: 'New Item',\n+      price: '',\n+      description: '',\n+      zipCode: '',\n+      images: [null, null, null],\n+      currentImageIndex: 0\n+    };\n+\n+    const updatedItems = [...(shopData.items || []), newItem];\n+    saveShopData({ items: updatedItems });\n+  };\n+\n+  return (\n+    <ThemeProvider theme={shopData?.theme || DEFAULT_THEME}>\n+      <PageContainer>\n+        <KalKodeCorner>\n+          <KalKodeLogo onClick={() => navigate('/')}>\n+            KALKODE\n+          </KalKodeLogo>\n+        </KalKodeCorner>\n+\n+        <TabPositionControl>\n+          <PositionButton \n+            active={tabPosition === 'top'}\n+            onClick={() => saveShopData({ layout: { ...shopData.layout, tabPosition: 'top' } })}\n+          >\n+            Top Tabs\n+          </PositionButton>\n+          <PositionButton \n+            active={tabPosition === 'bottom'}\n+            onClick={() => saveShopData({ layout: { ...shopData.layout, tabPosition: 'bottom' } })}\n+          >\n+            Bottom Tabs\n+          </PositionButton>\n+        </TabPositionControl>\n+\n+        <TabPositioner\n+          position={shopData?.layout?.tabPosition || 'top'}\n+          activeTab={activeTab}\n+          onTabChange={setActiveTab}\n+          tabs={[\n+            { id: 'home', label: 'Home' },\n+            { id: 'community', label: 'Community' },\n+            { id: 'shop', label: 'Shop' }\n+          ]}\n+          theme={shopData?.theme}\n+        />\n+\n+        <MainContent>\n+        {activeTab === 'shop' && (\n+          <>\n+            <ShopProfileSection>\n+            <div className=\"profile-image\">\n+              {shopData?.profile && typeof shopData.profile === 'string' ? (\n+                // If we have a URL string, show the image directly\n+                <img \n+                  src={shopData.profile} \n+                  alt=\"Profile\" \n+                  style={{ \n+                    width: '100%',\n+                    height: '100%',\n+                    objectFit: 'cover',\n+                    cursor: 'pointer'\n+                  }}\n+                  onClick={() => {\n+                    // Allow changing the image by clicking on it\n+                    const input = document.createElement('input');\n+                    input.type = 'file';\n+                    input.accept = 'image/*';\n+                    input.onchange = (e) => {\n+                      if (e.target.files?.[0]) {\n+                        handleUpdateShop({ \n+                          profile: {\n+                            file: e.target.files[0],\n+                            type: e.target.files[0].type\n+                          }\n+                        });\n+                      }\n+                    };\n+                    input.click();\n+                  }}\n+                />\n+              ) : (\n+                // If no image URL, show the EditableImage component\n+                <EditableImage\n+                  value={null}\n+                  onChange={(value) => {\n+                    console.log('Profile image update:', value);\n+                    if (value instanceof File) {\n+                      handleUpdateShop({ \n+                        profile: {\n+                          file: value,\n+                          type: value.type\n+                        }\n+                      });\n+                    }\n+                  }}\n+                  theme={shopData?.theme}\n+                  round\n+                  width=\"150px\"\n+                  height=\"150px\"\n+                  style={{ \n+                    width: '150px',\n+                    height: '150px',\n+                    borderRadius: '50%',\n+                    objectFit: 'cover'\n+                  }}\n+                />\n+              )}\n+            </div>\n+            <div className=\"shop-name-container\">\n+              <EditableText\n+                value={shopData?.name}\n+                onChange={(value) => handleUpdateShop({ name: value })}\n+                placeholder=\"Shop Name\"\n+                style={{\n+                  fontSize: `${shopNameFontSize}rem`,\n+                }}\n+              />\n+            </div>\n+            <div className=\"shop-description-container\">\n+              <EditableText\n+                value={shopData?.description}\n+                onChange={(value) => handleUpdateShop({ description: value })}\n+                placeholder=\"Shop Description\"\n+                multiline\n+              />\n+            </div>\n+            </ShopProfileSection>\n+\n+            <ItemGrid>\n+              {shopData?.items?.map(item => (\n+                <ItemCard key={item.id}>\n+                  <DeleteButton\n+                    onClick={() => {\n+                      const updatedItems = shopData.items.filter(i => i.id !== item.id);\n+                      saveShopData({ items: updatedItems });\n+                    }}\n+                  >\n+                    <Trash2 size={16} />\n+                  </DeleteButton>\n+                  <ItemImageContainer>\n+                    {uploading[item.id] && (\n+                      <UploadingOverlay>\n+                        <LoadingSpinner />\n+                      </UploadingOverlay>\n+                    )}\n+                    <div \n+                      className=\"image-container\"\n+                      onClick={() => {\n+                        if (!item.images[item.currentImageIndex]) {\n+                          document.getElementById(`image-upload-${item.id}-${item.currentImageIndex}`).click();\n+                        }\n+                      }}\n+                    >\n+                      {item.images[item.currentImageIndex] ? (\n+                        <img \n+                          src={item.images[item.currentImageIndex]} \n+                          alt={item.name}\n+                          style={{ width: '100%', height: '100%', objectFit: 'cover' }}\n+                        />\n+                      ) : (\n+                        <div className=\"placeholder\">\n+                          <Plus size={24} />\n+                          <span>Upload Image</span>\n+                        </div>\n+                      )}\n+                    </div>\n+                    \n+                    {/* Only show carousel arrows if there are images */}\n+                    {item.images.some(img => img) && (\n+                      <>\n+                        <button \n+                          className=\"carousel-arrow left\"\n+                          onClick={() => {\n+                            const newIndex = ((item.currentImageIndex - 1) + 3) % 3;\n+                            handleItemUpdate(item.id, { currentImageIndex: newIndex });\n+                          }}\n+                        >\n+                          <ChevronLeft size={16} />\n+                        </button>\n+                        <button \n+                          className=\"carousel-arrow right\"\n+                          onClick={() => {\n+                            const newIndex = (item.currentImageIndex + 1) % 3;\n+                            handleItemUpdate(item.id, { currentImageIndex: newIndex });\n+                          }}\n+                        >\n+                          <ChevronRight size={16} />\n+                        </button>\n+                      </>\n+                    )}\n+\n+                    {/* Add/Remove button */}\n+                    {item.images[item.currentImageIndex] && (\n+                      <button \n+                        className=\"add-image\"\n+                        onClick={() => {\n+                          const newImages = [...item.images];\n+                          newImages[item.currentImageIndex] = null;\n+                          handleItemUpdate(item.id, { images: newImages });\n+                        }}\n+                      >\n+                        <X size={16} />\n+                      </button>\n+                    )}\n+\n+                    <input\n+                      type=\"file\"\n+                      id={`image-upload-${item.id}-${item.currentImageIndex}`}\n+                      accept=\"image/*\"\n+                      style={{ display: 'none' }}\n+                      onChange={(e) => {\n+                        if (e.target.files?.[0]) {\n+                          const newImages = [...item.images];\n+                          newImages[item.currentImageIndex] = e.target.files[0];\n+                          handleItemUpdate(item.id, { images: newImages });\n+                        }\n+                      }}\n+                    />\n+                  </ItemImageContainer>\n+                  <ItemContent>\n+                    <EditableText\n+                      value={item.name}\n+                      onChange={(value) => handleItemUpdate(item.id, { name: value })}\n+                      placeholder=\"Item Name\"\n+                      theme={shopData?.theme}\n+                    />\n+                    <EditableText\n+                      value={item.price}\n+                      onChange={(value) => handleItemUpdate(item.id, { price: value })}\n+                      placeholder=\"Price\"\n+                      theme={shopData?.theme}\n+                    />\n+                    <EditableText\n+                      value={item.description}\n+                      onChange={(value) => handleItemUpdate(item.id, { description: value })}\n+                      placeholder=\"Item Description\"\n+                      multiline\n+                      theme={shopData?.theme}\n+                    />\n+                    <ZipCodeInput\n+                      value={item.zipCode || ''}\n+                      onChange={(e) => handleItemUpdate(item.id, { zipCode: e.target.value })}\n+                      placeholder=\"ZIP Code\"\n+                      maxLength=\"5\"\n+                      pattern=\"[0-9]*\"\n+                    />\n+                  </ItemContent>\n+                </ItemCard>\n+              ))}\n+            </ItemGrid>\n+\n+              <AddItemButton onClick={handleAddItem} theme={shopData?.theme}>\n+                <Plus size={20} />\n+                Add Item\n+              </AddItemButton>\n+            </>\n+          )}\n+\n+          {activeTab === 'home' && (\n+            <div>\n+              <EditableText\n+                value={shopData?.mission}\n+                onChange={(value) => saveShopData({ mission: value })}\n+                placeholder=\"Your Shop's Mission\"\n+                multiline\n+                theme={shopData?.theme}\n+              />\n+              {/* Add more home page customization options */}\n+            </div>\n+          )}\n+\n+          {activeTab === 'community' && (\n+            <div>\n+              {/* Add community customization options */}\n+            </div>\n+          )}\n+        </MainContent>\n+      </PageContainer>\n+    </ThemeProvider>\n+  );\n+};\n+\n+export default ShopPage;\n\\ No newline at end of file\n"
                }
            ],
            "date": 1735694568437,
            "name": "Commit-0",
            "content": "// src/pages/shop/ShopPage.js\n\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport styled, { ThemeProvider } from 'styled-components';\nimport { auth, db } from '../../firebase/config';\nimport { doc, getDoc, updateDoc } from 'firebase/firestore';\nimport { Plus, ChevronLeft, ChevronRight, X } from 'lucide-react';\nimport TabPositioner from './components/TabPositioner';\nimport NavMenu from './components/NavMenu';\nimport EditableText from './components/EditableComponents/EditableText';\nimport EditableImage from './components/EditableComponents/EditableImage';\nimport { DEFAULT_THEME } from './LiveShopCreation';\nimport { ref, uploadBytes, getDownloadURL } from 'firebase/storage';\nimport { storage } from '../../firebase/config';\nimport PageTransitionWrapper from '../../components/PageTransition';\n\nconst PageContainer = styled.div`\n  min-height: 100vh;\n  background: ${props => props.theme?.colors?.background || DEFAULT_THEME.colors.background};\n  color: ${props => props.theme?.colors?.text || DEFAULT_THEME.colors.text};\n  padding-top: 80px;\n  position: relative;\n  overflow-x: hidden;\n`;\n\nconst ShopProfileSection = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  text-align: center;\n  max-width: 800px;\n  margin: 0 auto 3rem auto;\n  padding: 2rem;\n\n  .profile-image {\n    margin-bottom: 2rem;\n    width: 150px;\n    height: 150px;\n    border-radius: 50%;\n    overflow: hidden;\n    background: rgba(0, 0, 0, 0.1);\n    \n    img {\n      width: 100%;\n      height: 100%;\n      object-fit: cover;\n    }\n\n    .placeholder {\n      width: 100%;\n      height: 100%;\n      display: flex;\n      flex-direction: column;\n      align-items: center;\n      justify-content: center;\n      gap: 0.5rem;\n      color: ${props => props.theme?.colors?.text || '#fff'};\n      opacity: 0.5;\n      cursor: pointer;\n      \n      span {\n        font-size: 0.9rem;\n      }\n    }\n  }\n\n  .shop-info {\n    width: 100%;\n  }\n`;\n\nconst ItemImageContainer = styled.div`\n  position: relative;\n  height: 250px;\n  width: 100%;\n  display: flex;\n  overflow: hidden;\n  background: rgba(0, 0, 0, 0.1);\n\n  .image-container {\n    width: 100%;\n    height: 100%;\n    position: relative;\n  }\n\n  .placeholder {\n    width: 100%;\n    height: 100%;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    gap: 0.5rem;\n    color: ${props => props.theme?.colors?.text || '#fff'};\n    opacity: 0.5;\n    cursor: pointer;\n    \n    span {\n      font-size: 0.9rem;\n    }\n  }\n\n  .carousel-arrow {\n    position: absolute;\n    top: 50%;\n    transform: translateY(-50%);\n    background: rgba(0, 0, 0, 0.5);\n    border: none;\n    border-radius: 50%;\n    width: 32px;\n    height: 32px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    color: white;\n    cursor: pointer;\n    z-index: 2;\n    transition: all 0.3s ease;\n\n    &:hover {\n      background: rgba(0, 0, 0, 0.8);\n    }\n\n    &.left {\n      left: 10px;\n    }\n\n    &.right {\n      right: 10px;\n    }\n  }\n\n  .add-image {\n    position: absolute;\n    top: 10px;\n    right: 10px;\n    background: rgba(0, 0, 0, 0.5);\n    border: none;\n    border-radius: 50%;\n    width: 32px;\n    height: 32px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    color: white;\n    cursor: pointer;\n    z-index: 2;\n    transition: all 0.3s ease;\n\n    &:hover {\n      background: rgba(0, 0, 0, 0.8);\n    }\n  }\n`;\n\n\nconst ShopBanner = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  height: 80px;\n  background: ${props => `${props.theme?.colors?.background || DEFAULT_THEME.colors.background}CC`};\n  backdrop-filter: blur(10px);\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 0 2rem;\n  z-index: 100;\n  border-bottom: 1px solid ${props => `${props.theme?.colors?.accent || DEFAULT_THEME.colors.accent}30`};\n`;\n\nconst UploadingOverlay = styled.div`\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background: rgba(0, 0, 0, 0.5);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  color: white;\n  z-index: 3;\n`;\n\nconst ItemContent = styled.div`\n  padding: 1.5rem;\n  display: flex;\n  flex-direction: column;\n  gap: 1rem;\n  height: calc(100% - 250px); // This ensures the content takes the remaining space\n  overflow-y: auto;\n\n  input, textarea {\n    background: rgba(255, 255, 255, 0.05);\n    border: 1px solid rgba(255, 255, 255, 0.1);\n    border-radius: ${props => props.theme?.styles?.borderRadius || '8px'};\n    padding: 0.8rem;\n    color: ${props => props.theme?.colors?.text};\n    \n    &:focus {\n      outline: none;\n      border-color: ${props => props.theme?.colors?.accent};\n    }\n  }\n`;\n\nconst ShopName = styled.div`\n  flex: 1;\n  text-align: ${props => props.position};\n  font-family: ${props => props.theme?.fonts?.heading || DEFAULT_THEME.fonts.heading};\n  font-size: 1.8rem;\n  padding: ${props => props.position === 'center' ? '0 80px' : '0'};\n`;\n\nconst MainContent = styled.div`\n  max-width: ${props => props.theme?.styles?.containerWidth || DEFAULT_THEME.styles.containerWidth};\n  margin: 0 auto;\n  padding: 2rem;\n  position: relative;\n  z-index: 1;\n`;\n\nconst LoadingSpinner = styled.div`\n  width: 20px;\n  height: 20px;\n  border: 2px solid rgba(255, 255, 255, 0.3);\n  border-radius: 50%;\n  border-top-color: white;\n  animation: spin 1s linear infinite;\n\n  @keyframes spin {\n    to {\n      transform: rotate(360deg);\n    }\n  }\n`;\n\nconst LoadingIndicator = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  min-height: 50vh;\n  font-size: 1.2rem;\n  color: ${props => props.theme?.colors?.text || DEFAULT_THEME.colors.text};\n`;\n\nconst ItemGrid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));\n  gap: 2rem;\n  margin-bottom: 2rem;\n`;\n\nconst ItemCard = styled.div`\n  background: rgba(255, 255, 255, 0.05);\n  border-radius: ${props => props.theme?.styles?.borderRadius || '12px'};\n  overflow: hidden;\n  transition: all 0.3s ease;\n  border: 1px solid rgba(255, 255, 255, 0.1);\n  width: 100%;\n  height: 500px;\n\n  &:hover {\n    transform: translateY(-5px);\n    border-color: ${props => props.theme?.colors?.accent};\n  }\n\n  .item-content {\n    padding: 1.5rem;\n  }\n`;\n\nconst ZipCodeInput = styled.input`\n  background: rgba(255, 255, 255, 0.05);\n  border: 1px solid rgba(255, 255, 255, 0.1);\n  padding: 0.5rem;\n  border-radius: 4px;\n  color: ${props => props.theme?.colors?.text};\n  margin-top: 0.5rem;\n  width: 100%;\n\n  &:focus {\n    outline: none;\n    border-color: ${props => props.theme?.colors?.accent};\n  }\n`;\n\nconst AddItemButton = styled.button`\n  background: ${props => props.theme?.colors?.primary};\n  color: ${props => props.theme?.colors?.text};\n  border: none;\n  border-radius: 8px;\n  padding: 1rem;\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n  cursor: pointer;\n  margin: 2rem auto;\n  transition: all 0.3s;\n\n  &:hover {\n    transform: translateY(-2px);\n  }\n`;\n\nconst cleanDataForFirestore = (data) => {\n  if (!data) return data;\n  \n  if (Array.isArray(data)) {\n    return data.map(item => cleanDataForFirestore(item));\n  }\n  \n  if (typeof data === 'object' && !(data instanceof Date)) {\n    const cleanedData = {};\n    for (const [key, value] of Object.entries(data)) {\n      // Skip file objects\n      if (value instanceof File) continue;\n      // Skip null/undefined values\n      if (value === null || value === undefined) continue;\n      cleanedData[key] = cleanDataForFirestore(value);\n    }\n    return cleanedData;\n  }\n  \n  return data;\n};\n\nconst ShopPage = () => {\n  const navigate = useNavigate();\n  const [shopData, setShopData] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [activeTab, setActiveTab] = useState('shop');\n  const [saving, setSaving] = useState(false);\n  const [uploading, setUploading] = useState({});\n\n  // Load shop data\n  useEffect(() => {\n    console.log('Current profile image value:', shopData?.profile);\n  }, [shopData?.profile]);\n\n  useEffect(() => {\n    if (shopData?.profile && typeof shopData.profile === 'string') {\n      // Pre-load the image\n      const img = new Image();\n      img.src = shopData.profile;\n      img.onload = () => {\n        // Force a re-render when image loads\n        setShopData(prev => ({...prev}));\n      };\n    }\n  }, [shopData?.profile]);\n\n  useEffect(() => {\n    const loadShopData = async (userId) => {\n      try {\n        const shopDoc = await getDoc(doc(db, 'shops', userId));\n        if (shopDoc.exists()) {\n          const data = shopDoc.data();\n          console.log('Loaded shop data:', data); // Debug log\n          setShopData(data);\n        } else {\n          console.log('No shop data found');\n        }\n      } catch (error) {\n        console.error('Error loading shop data:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    \n\n    const unsubscribe = auth.onAuthStateChanged((user) => {\n      if (!user) {\n        navigate('/auth');\n        return;\n      }\n      loadShopData(user.uid);\n    });\n\n    return () => unsubscribe();\n  }, [navigate]);\n\n  const handleUpdateShop = async (updates) => {\n    if (!auth.currentUser) return;\n    \n    try {\n      setSaving(true);\n      console.log('Updating shop with:', updates); // Debug log\n      \n      let finalUpdates = { ...updates };\n      \n      // Handle profile image upload\n      if (updates.profile?.file instanceof File) {\n        const file = updates.profile.file;\n        const metadata = {\n          contentType: file.type || 'image/jpeg',\n          cacheControl: 'public,max-age=3600',\n          customMetadata: {\n            'Access-Control-Allow-Origin': '*'\n          }\n        };\n        \n        const profileRef = ref(\n          storage, \n          `shops/${auth.currentUser.uid}/profile/profile-${Date.now()}`\n        );\n        \n        const snapshot = await uploadBytes(profileRef, file, metadata);\n        const imageUrl = await getDownloadURL(snapshot.ref);\n        \n        // Update with image URL instead of file\n        finalUpdates = {\n          ...finalUpdates,\n          profile: imageUrl\n        };\n      }\n  \n      // Update Firestore\n      const shopRef = doc(db, 'shops', auth.currentUser.uid);\n      await updateDoc(shopRef, {\n        ...finalUpdates,\n        updatedAt: new Date().toISOString()\n      });\n  \n      // Update local state\n      setShopData(prev => ({\n        ...prev,\n        ...finalUpdates\n      }));\n  \n      console.log('Shop update successful:', finalUpdates);\n    } catch (error) {\n      console.error('Error updating shop:', error);\n    } finally {\n      setSaving(false);\n    }\n  };\n\n  const logImageState = (image) => {\n    if (!image) return 'null';\n    if (typeof image === 'string') return `URL: ${image}`;\n    if (image instanceof File) return `File: ${image.name}`;\n    if (image?.file instanceof File) return `File Object: ${image.file.name}`;\n    return `Unknown type: ${typeof image}`;\n  };\n\n  // Handle item updates\n  const handleItemUpdate = async (itemId, updates) => {\n    if (!auth.currentUser) return;\n  \n    try {\n      setSaving(true);\n      console.log('Updating item with:', updates); // Debug log\n  \n      const currentItem = shopData.items.find(item => item.id === itemId);\n      let updatedItem = { ...currentItem, ...updates };\n  \n      // Handle image uploads if present\n      if (updates.images) {\n        const processedImages = await Promise.all(updates.images.map(async (image, index) => {\n          // If it's a URL or null, keep it\n          if (!image || typeof image === 'string') return image;\n          \n          // If it's a File object, upload it\n          if (image instanceof File || image?.file instanceof File) {\n            const file = image instanceof File ? image : image.file;\n            try {\n              const metadata = {\n                contentType: file.type || 'image/jpeg',\n                cacheControl: 'public,max-age=3600'\n              };\n              \n              const imageRef = ref(\n                storage, \n                `shops/${auth.currentUser.uid}/items/${itemId}/image-${index}-${Date.now()}`\n              );\n              \n              const snapshot = await uploadBytes(imageRef, file, metadata);\n              return await getDownloadURL(snapshot.ref);\n            } catch (uploadError) {\n              console.error(`Failed to upload image ${index}:`, uploadError);\n              return null;\n            }\n          }\n          return null;\n        }));\n  \n        updatedItem.images = processedImages;\n      }\n  \n      // Update in Firestore\n      const shopRef = doc(db, 'shops', auth.currentUser.uid);\n      const updatedItems = shopData.items.map(item =>\n        item.id === itemId ? updatedItem : item\n      );\n  \n      await updateDoc(shopRef, {\n        items: updatedItems,\n        updatedAt: new Date().toISOString()\n      });\n  \n      // Update local state\n      setShopData(prev => ({\n        ...prev,\n        items: updatedItems\n      }));\n  \n      console.log('Item updated successfully:', updatedItem); // Debug log\n    } catch (error) {\n      console.error('Error updating item:', error);\n    } finally {\n      setSaving(false);\n    }\n  };\n  \n    // Save shop data\n  const saveShopData = async (updates) => {\n    if (!auth.currentUser) return;\n    setSaving(true);\n    try {\n      const shopRef = doc(db, 'shops', auth.currentUser.uid);\n      await updateDoc(shopRef, {\n        ...updates,\n        updatedAt: new Date().toISOString()\n      });\n      setShopData(prev => ({ ...prev, ...updates }));\n    } catch (error) {\n      console.error('Error saving shop data:', error);\n    } finally {\n      setSaving(false);\n    }\n  };\n\n  const handleAddItem = () => {\n    const newItem = {\n      id: Date.now().toString(),\n      name: 'New Item',\n      price: '',\n      description: '',\n      zipCode: '',\n      images: [null, null, null],\n      currentImageIndex: 0\n    };\n\n    const updatedItems = [...(shopData.items || []), newItem];\n    saveShopData({ items: updatedItems });\n  };\n\n  if (loading) {\n    return <LoadingIndicator>Loading your shop...</LoadingIndicator>;\n  }\n\n  return (\n    <ThemeProvider theme={shopData?.theme || DEFAULT_THEME}>\n      <PageTransitionWrapper>\n      <PageContainer>\n        <ShopBanner>\n          <EditableText\n            value={shopData?.name}\n            onChange={(value) => saveShopData({ name: value })}\n            placeholder=\"Your Shop Name\"\n            theme={shopData?.theme}\n          />\n        </ShopBanner>\n\n        <TabPositioner\n          position={shopData?.layout?.tabPosition || 'top'}\n          activeTab={activeTab}\n          onTabChange={setActiveTab}\n          tabs={[\n            { id: 'shop', label: 'Shop' },\n            { id: 'home', label: 'Home' },\n            { id: 'community', label: 'Community' }\n          ]}\n          theme={shopData?.theme}\n        />\n\n        <NavMenu theme={shopData?.theme} />\n\n        <MainContent>\n        {activeTab === 'shop' && (\n          <>\n            <ShopProfileSection>\n            <div className=\"profile-image\">\n              {shopData?.profile && typeof shopData.profile === 'string' ? (\n                // If we have a URL string, show the image directly\n                <img \n                  src={shopData.profile} \n                  alt=\"Profile\" \n                  style={{ \n                    width: '100%',\n                    height: '100%',\n                    objectFit: 'cover',\n                    cursor: 'pointer'\n                  }}\n                  onClick={() => {\n                    // Allow changing the image by clicking on it\n                    const input = document.createElement('input');\n                    input.type = 'file';\n                    input.accept = 'image/*';\n                    input.onchange = (e) => {\n                      if (e.target.files?.[0]) {\n                        handleUpdateShop({ \n                          profile: {\n                            file: e.target.files[0],\n                            type: e.target.files[0].type\n                          }\n                        });\n                      }\n                    };\n                    input.click();\n                  }}\n                />\n              ) : (\n                // If no image URL, show the EditableImage component\n                <EditableImage\n                  value={null}\n                  onChange={(value) => {\n                    console.log('Profile image update:', value);\n                    if (value instanceof File) {\n                      handleUpdateShop({ \n                        profile: {\n                          file: value,\n                          type: value.type\n                        }\n                      });\n                    }\n                  }}\n                  theme={shopData?.theme}\n                  round\n                  width=\"150px\"\n                  height=\"150px\"\n                  style={{ \n                    width: '150px',\n                    height: '150px',\n                    borderRadius: '50%',\n                    objectFit: 'cover'\n                  }}\n                />\n              )}\n            </div>\n              <div className=\"shop-info\">\n                <EditableText\n                  value={shopData?.name}\n                  onChange={(value) => handleUpdateShop({ name: value })}\n                  placeholder=\"Shop Name\"\n                  theme={shopData?.theme}\n                />\n                <EditableText\n                  value={shopData?.description}\n                  onChange={(value) => handleUpdateShop({ description: value })}\n                  placeholder=\"Shop Description\"\n                  multiline\n                  theme={shopData?.theme}\n                />\n              </div>\n            </ShopProfileSection>\n\n            <ItemGrid>\n              {shopData?.items?.map(item => (\n                <ItemCard key={item.id}>\n                  <ItemImageContainer>\n                    {uploading[item.id] && (\n                      <UploadingOverlay>\n                        <LoadingSpinner />\n                      </UploadingOverlay>\n                    )}\n                    <div \n                      className=\"image-container\"\n                      onClick={() => {\n                        if (!item.images[item.currentImageIndex]) {\n                          document.getElementById(`image-upload-${item.id}-${item.currentImageIndex}`).click();\n                        }\n                      }}\n                    >\n                      {item.images[item.currentImageIndex] ? (\n                        <img \n                          src={item.images[item.currentImageIndex]} \n                          alt={item.name}\n                          style={{ width: '100%', height: '100%', objectFit: 'cover' }}\n                        />\n                      ) : (\n                        <div className=\"placeholder\">\n                          <Plus size={24} />\n                          <span>Upload Image</span>\n                        </div>\n                      )}\n                    </div>\n                    \n                    {/* Only show carousel arrows if there are images */}\n                    {item.images.some(img => img) && (\n                      <>\n                        <button \n                          className=\"carousel-arrow left\"\n                          onClick={() => {\n                            const newIndex = ((item.currentImageIndex - 1) + 3) % 3;\n                            handleItemUpdate(item.id, { currentImageIndex: newIndex });\n                          }}\n                        >\n                          <ChevronLeft size={16} />\n                        </button>\n                        <button \n                          className=\"carousel-arrow right\"\n                          onClick={() => {\n                            const newIndex = (item.currentImageIndex + 1) % 3;\n                            handleItemUpdate(item.id, { currentImageIndex: newIndex });\n                          }}\n                        >\n                          <ChevronRight size={16} />\n                        </button>\n                      </>\n                    )}\n\n                    {/* Add/Remove button */}\n                    {item.images[item.currentImageIndex] && (\n                      <button \n                        className=\"add-image\"\n                        onClick={() => {\n                          const newImages = [...item.images];\n                          newImages[item.currentImageIndex] = null;\n                          handleItemUpdate(item.id, { images: newImages });\n                        }}\n                      >\n                        <X size={16} />\n                      </button>\n                    )}\n\n                    <input\n                      type=\"file\"\n                      id={`image-upload-${item.id}-${item.currentImageIndex}`}\n                      accept=\"image/*\"\n                      style={{ display: 'none' }}\n                      onChange={(e) => {\n                        if (e.target.files?.[0]) {\n                          const newImages = [...item.images];\n                          newImages[item.currentImageIndex] = e.target.files[0];\n                          handleItemUpdate(item.id, { images: newImages });\n                        }\n                      }}\n                    />\n                  </ItemImageContainer>\n                  <ItemContent>\n                    <EditableText\n                      value={item.name}\n                      onChange={(value) => handleItemUpdate(item.id, { name: value })}\n                      placeholder=\"Item Name\"\n                      theme={shopData?.theme}\n                    />\n                    <EditableText\n                      value={item.price}\n                      onChange={(value) => handleItemUpdate(item.id, { price: value })}\n                      placeholder=\"Price\"\n                      theme={shopData?.theme}\n                    />\n                    <EditableText\n                      value={item.description}\n                      onChange={(value) => handleItemUpdate(item.id, { description: value })}\n                      placeholder=\"Item Description\"\n                      multiline\n                      theme={shopData?.theme}\n                    />\n                    <ZipCodeInput\n                      value={item.zipCode || ''}\n                      onChange={(e) => handleItemUpdate(item.id, { zipCode: e.target.value })}\n                      placeholder=\"ZIP Code\"\n                      maxLength=\"5\"\n                      pattern=\"[0-9]*\"\n                    />\n                  </ItemContent>\n                </ItemCard>\n              ))}\n            </ItemGrid>\n\n              <AddItemButton onClick={handleAddItem} theme={shopData?.theme}>\n                <Plus size={20} />\n                Add Item\n              </AddItemButton>\n            </>\n          )}\n\n          {activeTab === 'home' && (\n            <div>\n              <EditableText\n                value={shopData?.mission}\n                onChange={(value) => saveShopData({ mission: value })}\n                placeholder=\"Your Shop's Mission\"\n                multiline\n                theme={shopData?.theme}\n              />\n              {/* Add more home page customization options */}\n            </div>\n          )}\n\n          {activeTab === 'community' && (\n            <div>\n              {/* Add community customization options */}\n            </div>\n          )}\n        </MainContent>\n      </PageContainer>\n      </PageTransitionWrapper>\n    </ThemeProvider>\n  );\n};\n\nexport default ShopPage;"
        }
    ]
}