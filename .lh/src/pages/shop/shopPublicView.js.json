{
    "sourceFile": "src/pages/shop/shopPublicView.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1759901428320,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1759901440106,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -86,9 +86,79 @@\n     100% { transform: rotate(360deg); }\r\n   }\r\n `;\r\n \r\n+// Compact Floating Controls - positioned below header on right\r\n+const FloatingControls = styled.div`\r\n+  position: fixed;\r\n+  top: 70px; /* Just below header */\r\n+  right: 1rem;\r\n+  display: flex;\r\n+  gap: 0.5rem;\r\n+  z-index: 90;\r\n+  \r\n+  @media (min-width: 768px) {\r\n+    top: 90px;\r\n+    right: 2rem;\r\n+  }\r\n+`;\r\n \r\n+const FloatingButton = styled.button`\r\n+  width: 36px;\r\n+  height: 36px;\r\n+  border-radius: 8px;\r\n+  background: ${props => props.theme?.colors?.accent || '#800000'};\r\n+  color: white;\r\n+  border: none;\r\n+  display: flex;\r\n+  align-items: center;\r\n+  justify-content: center;\r\n+  cursor: pointer;\r\n+  box-shadow: 0 2px 8px ${props => `${props.theme?.colors?.accent}40` || 'rgba(128, 0, 0, 0.25)'};\r\n+  transition: all 0.3s ease;\r\n+  \r\n+  ${props => props.isPinned && `\r\n+    background: white;\r\n+    color: ${props.theme?.colors?.accent || '#800000'};\r\n+    border: 2px solid ${props.theme?.colors?.accent || '#800000'};\r\n+  `}\r\n+  \r\n+  @media (min-width: 768px) {\r\n+    width: 40px;\r\n+    height: 40px;\r\n+  }\r\n+  \r\n+  &:active {\r\n+    transform: scale(0.9);\r\n+  }\r\n+  \r\n+  @media (hover: hover) {\r\n+    &:hover {\r\n+      transform: translateY(-2px);\r\n+      box-shadow: 0 4px 12px ${props => `${props.theme?.colors?.accent}60` || 'rgba(128, 0, 0, 0.4)'};\r\n+    }\r\n+  }\r\n+  \r\n+  &.spinning {\r\n+    animation: spin 0.5s ease-in-out;\r\n+  }\r\n+  \r\n+  @keyframes spin {\r\n+    from { transform: rotate(0deg); }\r\n+    to { transform: rotate(360deg); }\r\n+  }\r\n+  \r\n+  svg {\r\n+    width: 18px;\r\n+    height: 18px;\r\n+    \r\n+    @media (min-width: 768px) {\r\n+      width: 20px;\r\n+      height: 20px;\r\n+    }\r\n+  }\r\n+`;\r\n+\r\n const HeaderTabButton = styled.button`\r\n   background: transparent;\r\n   border: none;\r\n   color: ${props => props.active ? \r\n"
                }
            ],
            "date": 1759901428320,
            "name": "Commit-0",
            "content": "// src/pages/shop/shopPublicView.js - Mobile Optimized\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport { useParams, useNavigate } from 'react-router-dom';\r\nimport styled, { ThemeProvider } from 'styled-components';\r\nimport { doc, getDoc } from 'firebase/firestore';\r\nimport { useAuth } from '../../contexts/AuthContext';\r\nimport { db } from '../../firebase/config';\r\nimport { signOut } from 'firebase/auth';\r\nimport { auth } from '../../firebase/config';\r\nimport { DEFAULT_THEME } from '../../theme/config/themes';\r\nimport BuyDialog from '../../components/Transaction/BuyDialog';\r\nimport OrderChat from '../../components/Chat/OrderChat';\r\nimport { useLocation } from '../../contexts/LocationContext';\r\nimport { getDistance } from 'geolib';\r\nimport { \r\n  ShoppingCart, \r\n  Heart, \r\n  MessageCircle, \r\n  Navigation, \r\n  ChevronLeft, \r\n  ChevronRight, \r\n  Search, \r\n  Store,\r\n  X,\r\n  RefreshCw,\r\n  Pin,\r\n  Grid,\r\n  Columns,\r\n  ArrowLeft,\r\n  Home,\r\n  Users,\r\n  LogOut\r\n} from 'lucide-react';\r\nimport {\r\n  CountdownWidget,\r\n  TestimonialsWidget,\r\n  GalleryWidget,\r\n  SocialFeedWidget,\r\n  VideoWidget,\r\n  FAQWidget,\r\n  TeamWidget\r\n} from './HomePageWidgets';\r\nimport TabPositioner from './components/TabPositioner';\r\nimport { WELCOME_STYLES } from '../../theme/welcomeStyles';\r\n\r\n\r\n\r\n// Mobile-first styled components following WelcomePage pattern\r\nconst PageContainer = styled.div.attrs({ className: 'page-container' })`\r\n  min-height: 100vh;\r\n  background: ${props => props.theme?.colors?.background || '#000000'};\r\n  color: ${props => props.theme?.colors?.text || '#FFFFFF'};\r\n  position: relative;\r\n  overflow: hidden;\r\n  \r\n  /* Mobile-optimized background effects */\r\n  &::before {\r\n    content: '';\r\n    position: absolute;\r\n    width: 100%;\r\n    height: 100%;\r\n    background: ${props => props.theme?.colors?.backgroundGradient || 'radial-gradient(circle at 20% 30%, rgba(128, 0, 0, 0.2) 0%, transparent 50%)'};\r\n    opacity: 0.8;\r\n    animation: ${props => props.theme?.animations?.backgroundAnimation || 'galaxySwirl 30s linear infinite'};\r\n  }\r\n\r\n  /* Simplified stars for mobile performance */\r\n  &::after {\r\n    content: '';\r\n    position: absolute;\r\n    width: 100%;\r\n    height: 100%;\r\n    background-image: radial-gradient(circle 1px, ${props => props.theme?.colors?.text || '#FFF'} 1px, transparent 1px);\r\n    background-size: 100px 100px;\r\n    opacity: 0.05;\r\n    \r\n    @media (min-width: 768px) {\r\n      background-size: 200px 200px;\r\n      opacity: 0.1;\r\n    }\r\n  }\r\n\r\n  @keyframes galaxySwirl {\r\n    0% { transform: rotate(0deg); }\r\n    100% { transform: rotate(360deg); }\r\n  }\r\n`;\r\n\r\n\r\n\r\n\r\nconst HeaderTabButton = styled.button`\r\n  background: transparent;\r\n  border: none;\r\n  color: ${props => props.active ? \r\n    props.theme?.colors?.accent : \r\n    `${props.theme?.colors?.text}60`};\r\n  padding: 0.5rem;\r\n  cursor: pointer;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  transition: all 0.3s ease;\r\n  position: relative;\r\n  \r\n  &:active {\r\n    transform: scale(0.9);\r\n  }\r\n  \r\n  /* Bottom underline indicator */\r\n  &::after {\r\n    content: '';\r\n    position: absolute;\r\n    bottom: -1px;\r\n    left: 50%;\r\n    transform: translateX(-50%);\r\n    width: ${props => props.active ? '80%' : '0'};\r\n    height: 3px;\r\n    background: ${props => props.theme?.colors?.accent || '#800000'};\r\n    border-radius: 2px 2px 0 0;\r\n    transition: width 0.3s ease;\r\n  }\r\n  \r\n  @media (hover: hover) {\r\n    &:hover {\r\n      color: ${props => props.theme?.colors?.accent};\r\n      opacity: 1;\r\n    }\r\n  }\r\n  \r\n  svg {\r\n    width: 22px;\r\n    height: 22px;\r\n    \r\n    @media (min-width: 768px) {\r\n      width: 24px;\r\n      height: 24px;\r\n    }\r\n  }\r\n`;\r\n\r\n// Update HeaderLeft and HeaderRight\r\nconst HeaderLeft = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 0.75rem;\r\n`;\r\n\r\nconst HeaderRight = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 0.75rem;\r\n`;\r\n\r\n// For ShopPublicView.js - where bottom nav exists\r\nconst FloatingControls = styled.div`\r\n  position: fixed;\r\n  bottom: 100px; /* Adjusted to clear bottom navigation */\r\n  right: 2rem;\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 1rem;\r\n  z-index: 90;\r\n  \r\n  @media (min-width: 768px) {\r\n    bottom: 2rem; /* No bottom nav on desktop */\r\n  }\r\n  \r\n  @media (max-width: 767px) {\r\n    right: 1.5rem;\r\n    gap: 0.75rem;\r\n  }\r\n`;\r\n\r\nconst FloatingButton = styled.button`\r\n  width: 56px;\r\n  height: 56px;\r\n  border-radius: 50%;\r\n  background: ${props => props.theme?.colors?.accent || '#800000'};\r\n  color: ${props => props.theme?.colors?.background || '#FFFFFF'};\r\n  border: none;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  cursor: pointer;\r\n  box-shadow: 0 4px 12px ${props => `${props.theme?.colors?.accent}40` || 'rgba(128, 0, 0, 0.25)'};\r\n  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\r\n  \r\n  ${props => props.isPinned && `\r\n    background: ${props.theme?.colors?.background || '#000000'};\r\n    color: ${props.theme?.colors?.accent || '#800000'};\r\n    border: 2px solid ${props.theme?.colors?.accent || '#800000'};\r\n  `}\r\n  \r\n  @media (max-width: 767px) {\r\n    width: 48px;\r\n    height: 48px;\r\n  }\r\n  \r\n  &:active {\r\n    transform: scale(0.9);\r\n  }\r\n  \r\n  @media (hover: hover) {\r\n    &:hover {\r\n      transform: scale(1.1);\r\n      box-shadow: 0 6px 16px ${props => `${props.theme?.colors?.accent}60` || 'rgba(128, 0, 0, 0.4)'};\r\n    }\r\n  }\r\n  \r\n  &.spinning {\r\n    animation: spin 0.5s ease-in-out;\r\n  }\r\n  \r\n  @keyframes spin {\r\n    from { transform: rotate(0deg); }\r\n    to { transform: rotate(360deg); }\r\n  }\r\n  \r\n  svg {\r\n    width: 24px;\r\n    height: 24px;\r\n    \r\n    @media (max-width: 767px) {\r\n      width: 20px;\r\n      height: 20px;\r\n    }\r\n  }\r\n`;\r\n\r\nconst HeaderTab = styled.button`\r\n  background: ${props => props.active ? \r\n    props.theme?.colors?.tabActiveBg || 'rgba(128, 0, 0, 0.2)' : 'transparent'};\r\n  border: 1px solid ${props => props.active ? \r\n    props.theme?.colors?.tabBorder || '#800000' : \r\n    `${props.theme?.colors?.accent}4D` || 'rgba(128, 0, 0, 0.3)'};\r\n  color: ${props => props.active ? \r\n    props.theme?.colors?.text || '#FFFFFF' : \r\n    `${props.theme?.colors?.text}99` || 'rgba(255, 255, 255, 0.6)'};\r\n  padding: 0.6rem 1.2rem;\r\n  border-radius: 20px;\r\n  cursor: pointer;\r\n  transition: all 0.3s;\r\n  text-transform: uppercase;\r\n  letter-spacing: 0.5px;\r\n  font-weight: 500;\r\n  font-size: 0.85rem;\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 0.5rem;\r\n\r\n  &:hover {\r\n    background: ${props => props.active ? \r\n      props.theme?.colors?.tabActiveBg || 'rgba(128, 0, 0, 0.2)' : \r\n      `${props.theme?.colors?.accent}10` || 'rgba(128, 0, 0, 0.1)'};\r\n  }\r\n\r\n  svg {\r\n    width: 16px;\r\n    height: 16px;\r\n  }\r\n`;\r\n\r\n// Update TabContainer to hide on desktop\r\nconst TabContainer = styled.div`\r\n  display: flex;\r\n  gap: 0.5rem;\r\n  margin: 1rem 0;\r\n  overflow-x: auto;\r\n  padding: 0.5rem 0;\r\n  -webkit-overflow-scrolling: touch;\r\n  \r\n  &::-webkit-scrollbar {\r\n    height: 4px;\r\n  }\r\n  \r\n  &::-webkit-scrollbar-track {\r\n    background: transparent;\r\n  }\r\n  \r\n  &::-webkit-scrollbar-thumb {\r\n    background: ${props => props.theme?.colors?.accent || '#800000'};\r\n    border-radius: 2px;\r\n  }\r\n  \r\n  @media (min-width: 768px) {\r\n    display: none; // Hide on desktop\r\n  }\r\n`;\r\n\r\nconst ProfileCover = styled.div`\r\n  width: 100%;\r\n  height: 160px; /* Reduced from 200px by 20% */\r\n  background: ${props => props.coverImage ? \r\n    `url(${props.coverImage})` : \r\n    props.theme?.colors?.accentGradient || 'linear-gradient(45deg, #800000, #4A0404)'};\r\n  background-size: cover;\r\n  background-position: center;\r\n  position: relative;\r\n  margin-bottom: -48px; /* Reduced from -60px by 20% */\r\n  \r\n  @media (min-width: 768px) {\r\n    height: 240px; /* Reduced from 300px by 20% */\r\n    margin-bottom: -60px; /* Reduced from -75px by 20% */\r\n  }\r\n\r\n  &::after {\r\n    content: '';\r\n    position: absolute;\r\n    bottom: 0;\r\n    left: 0;\r\n    right: 0;\r\n    height: 50%;\r\n    background: linear-gradient(to bottom, transparent, ${props => props.theme?.colors?.background || '#000000'});\r\n  }\r\n`;\r\n\r\nconst ShopProfileSection = styled.section`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  text-align: center;\r\n  margin: 0 0 1.5rem 0; /* Reduced from 2rem */\r\n  padding: 0 1rem 1rem 1rem;\r\n\r\n  .profile-image {\r\n    margin-bottom: 1rem;\r\n    width: 120px;\r\n    height: 120px;\r\n    border-radius: 50%;\r\n    overflow: hidden;\r\n    background: rgba(0, 0, 0, 0.1);\r\n    border: 4px solid ${props => props.theme?.colors?.background || '#000000'};\r\n    box-shadow: 0 0 20px ${props => `${props.theme?.colors?.accent}40` || 'rgba(128, 0, 0, 0.25)'};\r\n    transition: all 0.3s ease;\r\n    position: relative;\r\n    z-index: 2;\r\n    \r\n    @media (min-width: 768px) {\r\n      width: 150px;\r\n      height: 150px;\r\n      border-width: 5px;\r\n    }\r\n    \r\n    img {\r\n      width: 100%;\r\n      height: 100%;\r\n      object-fit: cover;\r\n    }\r\n  }\r\n\r\n  .shop-name {\r\n    font-size: ${props => props.fontSize || '2rem'};\r\n    font-family: ${props => props.theme?.fonts?.heading || \"'Space Grotesk', sans-serif\"};\r\n    background: ${props => props.theme?.colors?.accentGradient || 'linear-gradient(45deg, #800000, #4A0404)'};\r\n    -webkit-background-clip: text;\r\n    -webkit-text-fill-color: transparent;\r\n    margin: 0.5rem 0;\r\n    \r\n    @media (min-width: 768px) {\r\n      font-size: ${props => props.fontSize || '2.5rem'};\r\n    }\r\n  }\r\n\r\n  .shop-description {\r\n    font-size: 1rem;\r\n    color: ${props => props.theme?.colors?.text || '#FFFFFF'};\r\n    opacity: 0.8;\r\n    font-family: ${props => props.theme?.fonts?.body || \"'Inter', sans-serif\"};\r\n    max-width: 600px;\r\n    margin: 0 auto;\r\n    \r\n    @media (min-width: 768px) {\r\n      font-size: 1.1rem;\r\n    }\r\n  }\r\n`;\r\n\r\nconst HeaderControls = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 0.75rem;\r\n`;\r\n\r\nconst HeaderButton = styled.button`\r\n  background: transparent;\r\n  border: none;\r\n  color: ${props => props.theme?.colors?.accent || '#800000'};\r\n  padding: 0.5rem;\r\n  cursor: pointer;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  border-radius: 50%;\r\n  transition: all 0.3s ease;\r\n  opacity: 0.8;\r\n  \r\n  &:active {\r\n    transform: scale(0.9);\r\n    opacity: 1;\r\n  }\r\n  \r\n  @media (hover: hover) {\r\n    &:hover {\r\n      opacity: 1;\r\n      background: ${props => `${props.theme?.colors?.accent}10` || 'rgba(128, 0, 0, 0.1)'};\r\n    }\r\n  }\r\n  \r\n  &.pinned {\r\n    color: ${props => props.theme?.colors?.accent || '#800000'};\r\n    opacity: 1;\r\n  }\r\n  \r\n  &.spinning {\r\n    animation: spin 0.5s ease-in-out;\r\n  }\r\n  \r\n  @keyframes spin {\r\n    from { transform: rotate(0deg); }\r\n    to { transform: rotate(360deg); }\r\n  }\r\n  \r\n  svg {\r\n    width: 20px;\r\n    height: 20px;\r\n    \r\n    @media (min-width: 768px) {\r\n      width: 22px;\r\n      height: 22px;\r\n    }\r\n  }\r\n`;\r\n\r\nconst MainContent = styled.main`\r\n  padding: 80px 1rem 2rem 1rem; /* Back to original padding */\r\n  position: relative;\r\n  z-index: 1;\r\n  \r\n  @media (min-width: 768px) {\r\n    max-width: 1200px;\r\n    margin: 0 auto;\r\n    padding: 6rem 2rem 2rem 2rem;\r\n  }\r\n`;\r\n\r\nconst Header = styled.header`\r\n  width: 100%;\r\n  height: 60px;\r\n  padding: 0 1rem;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  background: ${props => props.theme?.colors?.headerBg || 'rgba(0, 0, 0, 1)'}; /* Solid, no blur */\r\n  border-bottom: 1px solid ${props => `${props.theme?.colors?.accent}4D` || 'rgba(128, 0, 0, 0.3)'};\r\n  position: fixed;\r\n  top: 0;\r\n  z-index: 100;\r\n\r\n  @media (min-width: 768px) {\r\n    height: 80px;\r\n    padding: 0 2rem;\r\n  }\r\n`;\r\n\r\nconst Logo = styled.div`\r\n  color: ${props => props.theme?.colors?.accent || '#800000'};\r\n  font-family: ${props => props.theme?.fonts?.heading || \"'Impact', sans-serif\"};\r\n  font-size: 1.2rem;\r\n  letter-spacing: 1px;\r\n  cursor: pointer;\r\n  flex-shrink: 0;\r\n  text-align: right;\r\n\r\n  @media (min-width: 768px) {\r\n    font-size: 1.5rem;\r\n    letter-spacing: 1.5px;\r\n  }\r\n`;\r\n\r\nconst Tab = styled.button`\r\n  background: ${props => props.active ? \r\n    props.theme?.colors?.tabActiveBg || 'rgba(128, 0, 0, 0.2)' : 'transparent'};\r\n  border: 1px solid ${props => props.active ? \r\n    props.theme?.colors?.tabBorder || '#800000' : \r\n    `${props.theme?.colors?.accent}4D` || 'rgba(128, 0, 0, 0.3)'};\r\n  color: ${props => props.active ? \r\n    props.theme?.colors?.text || '#FFFFFF' : \r\n    `${props.theme?.colors?.text}99` || 'rgba(255, 255, 255, 0.6)'};\r\n  padding: 0.6rem 1rem;\r\n  border-radius: 20px;\r\n  cursor: pointer;\r\n  transition: all 0.3s;\r\n  text-transform: uppercase;\r\n  letter-spacing: 0.5px;\r\n  font-weight: 500;\r\n  font-size: 0.8rem;\r\n  white-space: nowrap;\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 0.3rem;\r\n  flex-shrink: 0;\r\n  \r\n  @media (min-width: 768px) {\r\n    padding: 0.8rem 1.5rem;\r\n    font-size: 0.9rem;\r\n    letter-spacing: 1px;\r\n    gap: 0.5rem;\r\n  }\r\n\r\n  &:active {\r\n    transform: scale(0.98);\r\n  }\r\n\r\n  svg {\r\n    width: 14px;\r\n    height: 14px;\r\n    \r\n    @media (min-width: 768px) {\r\n      width: 16px;\r\n      height: 16px;\r\n    }\r\n  }\r\n`;\r\n\r\n// View toggle controls\r\nconst ViewToggle = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 0.5rem;\r\n  margin: 1rem 0;\r\n  \r\n  .view-button {\r\n    background: ${props => props.active ? \r\n      props.theme?.colors?.accent || '#800000' : 'transparent'};\r\n    border: 1px solid ${props => props.theme?.colors?.accent || '#800000'};\r\n    color: ${props => props.active ? \r\n      'white' : props.theme?.colors?.accent || '#800000'};\r\n    padding: 0.5rem;\r\n    border-radius: 8px;\r\n    cursor: pointer;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    transition: all 0.3s ease;\r\n    \r\n    &:active {\r\n      transform: scale(0.95);\r\n    }\r\n    \r\n    svg {\r\n      width: 18px;\r\n      height: 18px;\r\n    }\r\n  }\r\n  \r\n  span {\r\n    font-size: 0.9rem;\r\n    color: ${props => props.theme?.colors?.text || '#FFFFFF'};\r\n    margin-left: 0.5rem;\r\n  }\r\n`;\r\n\r\n// Mobile-friendly item grid\r\nconst ItemGrid = styled.div`\r\n  display: ${props => props.viewMode === 'gallery' ? 'grid' : 'flex'};\r\n  \r\n  ${props => props.viewMode === 'gallery' ? `\r\n    grid-template-columns: repeat(2, 1fr);\r\n    gap: 0.75rem;\r\n    \r\n    @media (min-width: 480px) {\r\n      gap: 1rem;\r\n    }\r\n    \r\n    @media (min-width: 768px) {\r\n      grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));\r\n      gap: 2rem;\r\n    }\r\n  ` : `\r\n    overflow-x: auto;\r\n    gap: 1rem;\r\n    padding: 1rem 0;\r\n    scroll-snap-type: x mandatory;\r\n    -webkit-overflow-scrolling: touch;\r\n    \r\n    &::-webkit-scrollbar {\r\n      height: 4px;\r\n    }\r\n    \r\n    &::-webkit-scrollbar-track {\r\n      background: transparent;\r\n    }\r\n    \r\n    &::-webkit-scrollbar-thumb {\r\n      background: ${props.theme?.colors?.accent || '#800000'};\r\n      border-radius: 2px;\r\n    }\r\n  `}\r\n`;\r\n\r\nconst ItemCard = styled.div`\r\n  background: ${props => props.theme?.colors?.surface || 'rgba(255, 255, 255, 0.05)'};\r\n  border-radius: ${props => props.theme?.styles?.borderRadius || '12px'};\r\n  overflow: hidden;\r\n  border: 1px solid ${props => `${props.theme?.colors?.accent}30` || 'rgba(255, 255, 255, 0.1)'};\r\n  transition: all 0.3s ease;\r\n  \r\n  ${props => props.viewMode === 'gallery' ? `\r\n    min-height: 250px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    \r\n    @media (min-width: 768px) {\r\n      min-height: 400px;\r\n      &:hover {\r\n        transform: translateY(-5px);\r\n        border-color: ${props.theme?.colors?.accent};\r\n      }\r\n    }\r\n  ` : `\r\n    flex: 0 0 300px;\r\n    height: 400px;\r\n    scroll-snap-align: start;\r\n    display: flex;\r\n    flex-direction: column;\r\n    \r\n    @media (min-width: 768px) {\r\n      flex: 0 0 350px;\r\n      height: 450px;\r\n    }\r\n  `}\r\n`;\r\n\r\nconst ItemImageContainer = styled.div`\r\n  position: relative;\r\n  height: ${props => props.viewMode === 'gallery' ? '150px' : '200px'};\r\n  overflow: hidden;\r\n  background: ${props => `${props.theme?.colors?.background || '#000000'}80`};\r\n  \r\n  @media (min-width: 768px) {\r\n    height: ${props => props.viewMode === 'gallery' ? '250px' : '300px'};\r\n  }\r\n\r\n  img {\r\n    width: 100%;\r\n    height: 100%;\r\n    object-fit: cover;\r\n    transition: transform 0.5s ease;\r\n  }\r\n  \r\n  ${ItemCard}:hover & img {\r\n    transform: scale(1.05);\r\n  }\r\n  \r\n  .carousel-arrow {\r\n    position: absolute;\r\n    top: 50%;\r\n    transform: translateY(-50%);\r\n    background: ${props => `${props.theme?.colors?.background || 'rgba(0, 0, 0, 0.5)'}90`};\r\n    border: 1px solid ${props => `${props.theme?.colors?.accent || 'rgba(255, 255, 255, 0.2)'}40`};\r\n    border-radius: 50%;\r\n    width: 28px;\r\n    height: 28px;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    color: ${props => props.theme?.colors?.text || 'white'};\r\n    cursor: pointer;\r\n    opacity: 0.7;\r\n    transition: all 0.2s;\r\n    z-index: 2;\r\n\r\n    &:active {\r\n      opacity: 1;\r\n      transform: translateY(-50%) scale(0.9);\r\n    }\r\n\r\n    @media (hover: hover) {\r\n      &:hover {\r\n        opacity: 1;\r\n        background: ${props => `${props.theme?.colors?.accent || 'rgba(0, 0, 0, 0.8)'}40`};\r\n      }\r\n    }\r\n\r\n    &.left {\r\n      left: 0.5rem;\r\n    }\r\n\r\n    &.right {\r\n      right: 0.5rem;\r\n    }\r\n    \r\n    @media (min-width: 768px) {\r\n      width: 32px;\r\n      height: 32px;\r\n      left: ${props => props.className?.includes('left') ? '1rem' : 'auto'};\r\n      right: ${props => props.className?.includes('right') ? '1rem' : 'auto'};\r\n    }\r\n  }\r\n`;\r\n\r\nconst ItemContent = styled.div`\r\n  padding: 1rem;\r\n  flex: 1;\r\n  display: flex;\r\n  flex-direction: column;\r\n  background: ${props => `${props.theme?.colors?.surface || 'rgba(255, 255, 255, 0.05)'}90`};\r\n  \r\n  @media (min-width: 768px) {\r\n    padding: 1.5rem;\r\n  }\r\n\r\n  h3 {\r\n    font-size: 1rem;\r\n    color: ${props => props.theme?.colors?.text || '#FFFFFF'};\r\n    margin: 0 0 0.5rem 0;\r\n    font-family: ${props => props.theme?.fonts?.heading || \"'Space Grotesk', sans-serif\"};\r\n    \r\n    @media (min-width: 768px) {\r\n      font-size: 1.2rem;\r\n    }\r\n  }\r\n\r\n  .price {\r\n    font-size: 1rem;\r\n    color: ${props => props.theme?.colors?.accent || '#800000'};\r\n    font-weight: bold;\r\n    margin-bottom: 0.5rem;\r\n    \r\n    @media (min-width: 768px) {\r\n      font-size: 1.1rem;\r\n    }\r\n  }\r\n\r\n  .description {\r\n    color: ${props => `${props.theme?.colors?.text}CC` || 'rgba(255, 255, 255, 0.8)'};\r\n    font-size: 0.8rem;\r\n    line-height: 1.4;\r\n    margin-bottom: 1rem;\r\n    flex: 1;\r\n    font-family: ${props => props.theme?.fonts?.body || \"'Inter', sans-serif\"};\r\n    display: -webkit-box;\r\n    -webkit-line-clamp: 3;\r\n    -webkit-box-orient: vertical;\r\n    overflow: hidden;\r\n    \r\n    @media (min-width: 768px) {\r\n      font-size: 0.9rem;\r\n      line-height: 1.5;\r\n      -webkit-line-clamp: 4;\r\n    }\r\n  }\r\n`;\r\n\r\nconst CategoryBadge = styled.div`\r\n  display: inline-block;\r\n  background: ${props => `${props.theme?.colors?.accent || '#800000'}20`};\r\n  color: ${props => props.theme?.colors?.accent || '#800000'};\r\n  padding: 0.2rem 0.6rem;\r\n  border-radius: 10px;\r\n  font-size: 0.7rem;\r\n  font-weight: 500;\r\n  text-transform: uppercase;\r\n  letter-spacing: 0.3px;\r\n  margin-bottom: 0.5rem;\r\n  \r\n  @media (min-width: 768px) {\r\n    padding: 0.25rem 0.75rem;\r\n    border-radius: 12px;\r\n    font-size: 0.75rem;\r\n  }\r\n`;\r\n\r\nconst ItemLocation = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 0.3rem;\r\n  font-size: 0.7rem;\r\n  color: ${props => `${props.theme?.colors?.text}99` || 'rgba(255, 255, 255, 0.6)'};\r\n  margin-bottom: 0.75rem;\r\n  \r\n  @media (min-width: 768px) {\r\n    font-size: 0.8rem;\r\n    gap: 0.5rem;\r\n    margin-bottom: 1rem;\r\n  }\r\n`;\r\n\r\nconst ActionButtons = styled.div`\r\n  display: flex;\r\n  gap: 0.5rem;\r\n  margin-top: auto;\r\n`;\r\n\r\nconst ActionButton = styled.button`\r\n  flex: 1;\r\n  padding: 0.6rem;\r\n  border-radius: ${props => props.theme?.styles?.borderRadius || '6px'};\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  gap: 0.3rem;\r\n  font-weight: 500;\r\n  cursor: pointer;\r\n  transition: all 0.2s;\r\n  position: relative;\r\n  z-index: 5;\r\n  font-size: 0.8rem;\r\n  \r\n  @media (min-width: 768px) {\r\n    padding: 0.75rem;\r\n    gap: 0.5rem;\r\n    font-size: 0.9rem;\r\n  }\r\n  \r\n  &.primary {\r\n    background: ${props => props.theme?.colors?.accent || '#800000'};\r\n    color: white;\r\n    border: none;\r\n    \r\n    &:active {\r\n      background: ${props => props.theme?.colors?.primary || '#4A0404'};\r\n      transform: scale(0.98);\r\n    }\r\n    \r\n    @media (hover: hover) {\r\n      &:hover {\r\n        background: ${props => props.theme?.colors?.primary || '#4A0404'};\r\n      }\r\n    }\r\n  }\r\n  \r\n  &.secondary {\r\n    background: transparent;\r\n    border: 1px solid ${props => props.theme?.colors?.accent || '#800000'};\r\n    color: ${props => props.theme?.colors?.accent || '#800000'};\r\n    \r\n    &:active {\r\n      background: ${props => `${props.theme?.colors?.accent}10` || 'rgba(128, 0, 0, 0.1)'};\r\n      transform: scale(0.98);\r\n    }\r\n    \r\n    @media (hover: hover) {\r\n      &:hover {\r\n        background: ${props => `${props.theme?.colors?.accent}10` || 'rgba(128, 0, 0, 0.1)'};\r\n      }\r\n    }\r\n  }\r\n  \r\n  svg {\r\n    width: 14px;\r\n    height: 14px;\r\n    \r\n    @media (min-width: 768px) {\r\n      width: 16px;\r\n      height: 16px;\r\n    }\r\n  }\r\n`;\r\n\r\n// Mobile-optimized search container\r\nconst SearchContainer = styled.div`\r\n  max-width: 100%;\r\n  margin: 1.5rem 0 2rem;\r\n  position: relative;\r\n  \r\n  @media (min-width: 768px) {\r\n    max-width: 600px;\r\n    margin: 2rem auto 3rem;\r\n  }\r\n`;\r\n\r\nconst SearchInput = styled.input`\r\n  width: 100%;\r\n  background: transparent;\r\n  border: none;\r\n  border-bottom: 2px solid ${props => props.theme?.colors?.accent || '#800000'};\r\n  color: ${props => props.theme?.colors?.text || '#FFFFFF'};\r\n  font-family: ${props => props.theme?.fonts?.body || \"'Inter', sans-serif\"};\r\n  padding: 0.75rem 2.5rem 0.75rem 0.5rem;\r\n  font-size: 1rem;\r\n  transition: all 0.3s ease;\r\n  box-shadow: 0 4px 8px ${props => `${props.theme?.colors?.accent}30` || 'rgba(128, 0, 0, 0.3)'};\r\n  \r\n  @media (min-width: 768px) {\r\n    font-size: 1.1rem;\r\n  }\r\n  \r\n  &:focus {\r\n    outline: none;\r\n    border-bottom-width: 3px;\r\n    box-shadow: 0 6px 12px ${props => `${props.theme?.colors?.accent}40` || 'rgba(128, 0, 0, 0.4)'};\r\n  }\r\n  \r\n  &::placeholder {\r\n    color: ${props => `${props.theme?.colors?.text}60` || 'rgba(255, 255, 255, 0.4)'};\r\n    font-style: italic;\r\n  }\r\n`;\r\n\r\nconst SearchIcon = styled.div`\r\n  position: absolute;\r\n  right: 0.5rem;\r\n  bottom: 0.75rem;\r\n  color: ${props => props.theme?.colors?.accent || '#800000'};\r\n  opacity: 0.8;\r\n`;\r\n\r\nconst ClearButton = styled.button`\r\n  position: absolute;\r\n  right: 2rem;\r\n  bottom: 0.75rem;\r\n  background: transparent;\r\n  border: none;\r\n  color: ${props => props.theme?.colors?.accent || '#800000'};\r\n  cursor: pointer;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  opacity: 0.7;\r\n  \r\n  &:active {\r\n    opacity: 1;\r\n    transform: scale(0.9);\r\n  }\r\n  \r\n  @media (hover: hover) {\r\n    &:hover {\r\n      opacity: 1;\r\n    }\r\n  }\r\n`;\r\n\r\nconst EmptyStateMessage = styled.div`\r\n  text-align: center;\r\n  padding: 3rem 1rem;\r\n  background: ${props => `${props.theme?.colors?.surface || 'rgba(255, 255, 255, 0.05)'}50`};\r\n  border-radius: ${props => props.theme?.styles?.borderRadius || '12px'};\r\n  \r\n  @media (min-width: 768px) {\r\n    padding: 4rem 2rem;\r\n  }\r\n  \r\n  h3 {\r\n    font-size: 1.3rem;\r\n    margin-bottom: 1rem;\r\n    color: ${props => props.theme?.colors?.accent || '#800000'};\r\n    font-family: ${props => props.theme?.fonts?.heading || \"'Space Grotesk', sans-serif\"};\r\n    \r\n    @media (min-width: 768px) {\r\n      font-size: 1.5rem;\r\n    }\r\n  }\r\n  \r\n  p {\r\n    color: ${props => `${props.theme?.colors?.text}CC` || 'rgba(255, 255, 255, 0.8)'};\r\n    font-family: ${props => props.theme?.fonts?.body || \"'Inter', sans-serif\"};\r\n    font-size: 0.9rem;\r\n    \r\n    @media (min-width: 768px) {\r\n      font-size: 1rem;\r\n    }\r\n  }\r\n`;\r\n\r\n// Add these specific widget components\r\nconst HeroBannerWidget = ({ config, theme }) => (\r\n  <div style={{\r\n    height: '400px',\r\n    background: `linear-gradient(135deg, ${theme?.colors?.accent}20 0%, ${theme?.colors?.background} 100%)`,\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n    fontSize: '2rem',\r\n    fontWeight: 'bold'\r\n  }}>\r\n    {config.headline || \"Welcome\"}\r\n  </div>\r\n);\r\n\r\nconst ProductCarouselWidget = ({ config, theme, items = [] }) => (\r\n  <div style={{ padding: '2rem 0' }}>\r\n    <h2 style={{ marginBottom: '1.5rem', color: theme?.colors?.accent }}>\r\n      Featured Products\r\n    </h2>\r\n    <div style={{ \r\n      display: 'grid', \r\n      gridTemplateColumns: 'repeat(auto-fill, minmax(200px, 1fr))',\r\n      gap: '1rem'\r\n    }}>\r\n      {items.slice(0, config.itemsToShow || 4).map((item, i) => (\r\n        <div key={i} style={{\r\n          background: `${theme?.colors?.surface}80`,\r\n          borderRadius: '8px',\r\n          padding: '1rem'\r\n        }}>\r\n          <h4>{item.name}</h4>\r\n          <p>${item.price}</p>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  </div>\r\n);\r\n\r\nconst StatsWidget = ({ config, theme }) => (\r\n  <div style={{\r\n    display: 'grid',\r\n    gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))',\r\n    gap: '2rem',\r\n    padding: '3rem'\r\n  }}>\r\n    <div style={{ textAlign: 'center' }}>\r\n      <div style={{ fontSize: '2rem', color: theme?.colors?.accent }}>100+</div>\r\n      <div>Products</div>\r\n    </div>\r\n  </div>\r\n);\r\n\r\nconst AnnouncementBar = styled.div`\r\n  background: ${props => props.theme?.colors?.accent || '#800000'};\r\n  color: white;\r\n  padding: 0.75rem;\r\n  text-align: center;\r\n  font-weight: 600;\r\n`;\r\n\r\nconst ChatOverlay = styled.div`\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  background: rgba(0, 0, 0, 0.5);\r\n  z-index: 999;\r\n  opacity: ${props => props.isOpen ? 1 : 0};\r\n  pointer-events: ${props => props.isOpen ? 'auto' : 'none'};\r\n  transition: opacity 0.3s ease;\r\n`;\r\n\r\nconst LoadingSpinner = styled.div`\r\n  width: 40px;\r\n  height: 40px;\r\n  border: 3px solid rgba(128, 0, 0, 0.1);\r\n  border-radius: 50%;\r\n  border-top-color: #800000;\r\n  animation: spin 1s linear infinite;\r\n  margin: 2rem auto;\r\n\r\n  @keyframes spin {\r\n    to {\r\n      transform: rotate(360deg);\r\n    }\r\n  }\r\n`;\r\n\r\n// The ShopPublicView component\r\nconst ShopPublicView = () => {\r\n  const { shopId } = useParams();\r\n  const navigate = useNavigate();\r\n  const handleLogout = async () => {\r\n    try {\r\n      await signOut(auth);\r\n      navigate('/');\r\n    } catch (error) {\r\n      console.error('Error signing out:', error);\r\n    }\r\n  };\r\n  const [shopData, setShopData] = useState(null);\r\n  const [activeTab, setActiveTab] = useState('shop');\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [viewMode, setViewMode] = useState('gallery');\r\n  const [isPinned, setIsPinned] = useState(false);\r\n  const [isRefreshing, setIsRefreshing] = useState(false);\r\n  \r\n  const [currentImageIndices, setCurrentImageIndices] = useState({});\r\n  const [chatOpen, setChatOpen] = useState(false);\r\n  const [selectedChatItem, setSelectedChatItem] = useState(null);\r\n  const { userLocation } = useLocation();\r\n  const { isAuthenticated } = useAuth(); // ADD THIS LINE\r\n\r\n  useEffect(() => {\r\n    const pinnedStyleId = localStorage.getItem('pinnedStyleId');\r\n    \r\n    if (pinnedStyleId && shopData?.theme) {\r\n      const pinnedStyle = Object.values(WELCOME_STYLES).find(\r\n        style => style.id.toString() === pinnedStyleId\r\n      );\r\n      \r\n      if (pinnedStyle) {\r\n        setIsPinned(true);\r\n      }\r\n    }\r\n  }, [shopData?.theme]);\r\n\r\n  const refreshTheme = () => {\r\n    if (isRefreshing) return;\r\n    \r\n    setIsRefreshing(true);\r\n    \r\n    const styles = Object.values(WELCOME_STYLES);\r\n    const otherStyles = styles.filter(style => style.id !== shopData?.theme?.id);\r\n    \r\n    if (otherStyles.length > 0) {\r\n      const randomStyle = otherStyles[Math.floor(Math.random() * otherStyles.length)];\r\n      setShopData(prev => ({ ...prev, theme: randomStyle }));\r\n\r\n      if (isPinned) {\r\n        localStorage.removeItem('pinnedStyleId');\r\n        setIsPinned(false);\r\n      }\r\n    }\r\n\r\n    setTimeout(() => setIsRefreshing(false), 500);\r\n  };\r\n\r\n  const renderPublicWidget = (widget) => {\r\n    const props = {\r\n      config: widget.config,\r\n      theme: shopData?.theme\r\n    };\r\n\r\n    switch (widget.type) {\r\n      case 'hero-banner':\r\n        return <HeroBannerWidget {...props} />;\r\n      case 'product-carousel':\r\n        return <ProductCarouselWidget {...props} items={shopData?.items || []} />;\r\n      case 'stats-dashboard':\r\n        return <StatsWidget {...props} stats={shopData?.stats} />;\r\n      case 'countdown-timer':\r\n        return <CountdownWidget {...props} />;\r\n      case 'testimonials':\r\n        return <TestimonialsWidget {...props} />;\r\n      case 'gallery':\r\n        return <GalleryWidget {...props} />;\r\n      case 'social-feed':\r\n        return <SocialFeedWidget {...props} />;\r\n      case 'video-section':\r\n        return <VideoWidget {...props} />;\r\n      case 'faq-section':\r\n        return <FAQWidget {...props} />;\r\n      case 'team-section':\r\n        return <TeamWidget {...props} />;\r\n      case 'announcement-bar':\r\n        return <AnnouncementBar {...props} />;\r\n      default:\r\n        return null;\r\n    }\r\n  };\r\n\r\n  const togglePinStyle = () => {\r\n    if (isPinned) {\r\n      localStorage.removeItem('pinnedStyleId');\r\n      setIsPinned(false);\r\n\r\n      const styles = Object.values(WELCOME_STYLES).filter(\r\n        style => style.id !== shopData?.theme?.id\r\n      );\r\n\r\n      if (styles.length > 0) {\r\n        const randomStyle = styles[Math.floor(Math.random() * styles.length)];\r\n        setShopData(prev => ({ ...prev, theme: randomStyle }));\r\n      }\r\n    } else {\r\n      localStorage.setItem('pinnedStyleId', shopData?.theme?.id.toString());\r\n      setIsPinned(true);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const fetchShopData = async () => {\r\n      try {\r\n        setLoading(true);\r\n        setError(null);\r\n        \r\n        const shopRef = doc(db, 'shops', shopId);\r\n        const shopSnap = await getDoc(shopRef);\r\n        \r\n        if (!shopSnap.exists()) {\r\n          setError('Shop not found');\r\n          setLoading(false);\r\n          return;\r\n        }\r\n        \r\n        const shop = shopSnap.data();\r\n\r\n        if (userLocation && shop.items && Array.isArray(shop.items)) {\r\n          shop.items = shop.items.map(item => {\r\n            if (item.coordinates && item.coordinates.lat && item.coordinates.lng) {\r\n              try {\r\n                const distanceInMeters = getDistance(\r\n                  { latitude: userLocation.latitude, longitude: userLocation.longitude },\r\n                  { latitude: item.coordinates.lat, longitude: item.coordinates.lng }\r\n                );\r\n                const distanceInMiles = (distanceInMeters / 1609.34).toFixed(1);\r\n                \r\n                return {\r\n                  ...item,\r\n                  distance: distanceInMeters,\r\n                  distanceInMiles,\r\n                  formattedDistance: `${distanceInMiles} mi`\r\n                };\r\n              } catch (e) {\r\n                console.warn('Error calculating distance for item:', e);\r\n                return item;\r\n              }\r\n            }\r\n            return item;\r\n          });\r\n        }\r\n        \r\n        setShopData(shop);\r\n        \r\n        // Initialize current image indices for items\r\n        if (shop.items && Array.isArray(shop.items)) {\r\n          const indices = {};\r\n          shop.items.forEach(item => {\r\n            indices[item.id] = item.currentImageIndex || 0;\r\n          });\r\n          setCurrentImageIndices(indices);\r\n        }\r\n        \r\n        setLoading(false);\r\n      } catch (err) {\r\n        console.error('Error fetching shop data:', err);\r\n        setError('Failed to load shop data');\r\n        setLoading(false);\r\n      }\r\n    };\r\n    \r\n    if (shopId) {\r\n      fetchShopData();\r\n    }\r\n  }, [shopId, userLocation]);\r\n\r\n  const handleNextImage = (e, itemId) => {\r\n    e.stopPropagation();\r\n    const item = shopData.items.find(i => i.id === itemId);\r\n    if (item && item.images && item.images.filter(Boolean).length > 0) {\r\n      const validImages = item.images.filter(Boolean);\r\n      setCurrentImageIndices(prev => ({\r\n        ...prev,\r\n        [itemId]: (prev[itemId] + 1) % validImages.length\r\n      }));\r\n    }\r\n  };\r\n\r\nconst handleGoHome = () => {\r\n  window.location.href = 'https://kalkode.com';\r\n};\r\n\r\n  const handlePrevImage = (e, itemId) => {\r\n    e.stopPropagation();\r\n    const item = shopData.items.find(i => i.id === itemId);\r\n    if (item && item.images && item.images.filter(Boolean).length > 0) {\r\n      const validImages = item.images.filter(Boolean);\r\n      setCurrentImageIndices(prev => ({\r\n        ...prev,\r\n        [itemId]: (prev[itemId] - 1 + validImages.length) % validImages.length\r\n      }));\r\n    }\r\n  };\r\n\r\n  // Filter items based on search term\r\n  const filteredItems = shopData?.items?.filter(item => \r\n    !item.deleted && \r\n    (searchTerm === '' || \r\n      (item.name && item.name.toLowerCase().includes(searchTerm.toLowerCase())) ||\r\n      (item.description && item.description.toLowerCase().includes(searchTerm.toLowerCase()))\r\n    )\r\n  ) || [];\r\n\r\n  if (loading) {\r\n    return (\r\n      <PageContainer>\r\n        <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh', flexDirection: 'column', gap: '1rem' }}>\r\n          <LoadingSpinner />\r\n          <div>Loading shop...</div>\r\n        </div>\r\n      </PageContainer>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return (\r\n      <PageContainer>\r\n        <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh', flexDirection: 'column', gap: '1rem' }}>\r\n          <div>{error}</div>\r\n          <button \r\n            onClick={() => navigate('/')}\r\n            style={{\r\n              background: '#800000',\r\n              color: 'white',\r\n              border: 'none',\r\n              padding: '0.75rem 1.5rem',\r\n              borderRadius: '8px',\r\n              cursor: 'pointer'\r\n            }}\r\n          >\r\n            Return to Homepage\r\n          </button>\r\n        </div>\r\n      </PageContainer>\r\n    );\r\n  }\r\n\r\n  const renderShopView = () => (\r\n    <>\r\n      <ShopProfileSection fontSize={shopData?.layout?.nameSize || '2rem'}>\r\n        <div className=\"profile-image\">\r\n          {shopData?.profile ? (\r\n            <img src={shopData.profile} alt={shopData.name || 'Shop'} />\r\n          ) : (\r\n            <div style={{ \r\n              width: '100%', \r\n              height: '100%', \r\n              background: shopData?.theme?.colors?.accent || '#800000',\r\n              display: 'flex',\r\n              alignItems: 'center',\r\n              justifyContent: 'center',\r\n              color: '#fff',\r\n              fontSize: '2rem'\r\n            }}>\r\n              {shopData?.name?.charAt(0) || 'S'}\r\n            </div>\r\n          )}\r\n        </div>\r\n        <h1 className=\"shop-name\">{shopData?.name || 'Shop Name'}</h1>\r\n        <p className=\"shop-description\">{shopData?.description}</p>\r\n      </ShopProfileSection>\r\n      \r\n      <SearchContainer>\r\n        <SearchInput \r\n          placeholder=\"Search items...\"\r\n          value={searchTerm}\r\n          onChange={(e) => setSearchTerm(e.target.value)}\r\n        />\r\n        {searchTerm ? (\r\n          <ClearButton onClick={() => setSearchTerm('')}>\r\n            <X size={18} />\r\n          </ClearButton>\r\n        ) : (\r\n          <SearchIcon>\r\n            <Search size={18} />\r\n          </SearchIcon>\r\n        )}\r\n      </SearchContainer>\r\n      \r\n      {filteredItems.length > 0 ? (\r\n        <ItemGrid viewMode={viewMode}>\r\n          {filteredItems.map((item) => {\r\n            const validImages = item.images?.filter(Boolean) || [];\r\n            const imageIndex = currentImageIndices[item.id] || 0;\r\n            \r\n            return (\r\n              <ItemCard key={item.id} viewMode={viewMode}>\r\n                <ItemImageContainer viewMode={viewMode}>\r\n                  {validImages.length > 0 ? (\r\n                    <img \r\n                      src={validImages[imageIndex % validImages.length]} \r\n                      alt={item.name} \r\n                    />\r\n                  ) : (\r\n                    <div style={{\r\n                      width: '100%',\r\n                      height: '100%',\r\n                      display: 'flex',\r\n                      alignItems: 'center',\r\n                      justifyContent: 'center',\r\n                      color: shopData?.theme?.colors?.text || '#fff',\r\n                      opacity: 0.5,\r\n                      fontSize: '0.8rem'\r\n                    }}>\r\n                      No Image Available\r\n                    </div>\r\n                  )}\r\n                  \r\n                  {validImages.length > 1 && (\r\n                    <>\r\n                      <button \r\n                        className=\"carousel-arrow left\"\r\n                        onClick={(e) => handlePrevImage(e, item.id)}\r\n                      >\r\n                        <ChevronLeft size={14} />\r\n                      </button>\r\n                      <button \r\n                        className=\"carousel-arrow right\"\r\n                        onClick={(e) => handleNextImage(e, item.id)}\r\n                      >\r\n                        <ChevronRight size={14} />\r\n                      </button>\r\n                    </>\r\n                  )}\r\n                </ItemImageContainer>\r\n                \r\n                <ItemContent>\r\n                  {item.category && item.category !== 'Other' && (\r\n                    <CategoryBadge theme={shopData?.theme}>\r\n                      {item.category}\r\n                    </CategoryBadge>\r\n                  )}\r\n\r\n                  <div style={{ \r\n                    display: 'flex', \r\n                    justifyContent: 'space-between',\r\n                    alignItems: 'flex-start',\r\n                    marginBottom: '0.5rem'\r\n                  }}>\r\n                    <h3 style={{ margin: 0, flex: 1 }}>{item.name}</h3>\r\n\r\n                    {item.quantity !== undefined && (\r\n                      <span style={{\r\n                        background: parseInt(item.quantity) > 0 ? \r\n                          `${shopData?.theme?.colors?.accent || '#800000'}30` : '#FF525230',\r\n                        color: parseInt(item.quantity) > 0 ? \r\n                          shopData?.theme?.colors?.accent || '#800000' : '#FF5252',\r\n                        padding: '2px 6px',\r\n                        borderRadius: '8px',\r\n                        fontSize: '0.7rem',\r\n                        fontWeight: '500',\r\n                        marginLeft: '0.5rem',\r\n                        flexShrink: 0\r\n                      }}>\r\n                        {parseInt(item.quantity) > 0 ? `x${item.quantity}` : 'Sold Out'}\r\n                      </span>\r\n                    )}\r\n                  </div>\r\n\r\n                  <div className=\"price\">\r\n                    ${parseFloat(item.price || 0).toFixed(2)}\r\n                  </div>\r\n                  <div className=\"description\">\r\n                    {item.description}\r\n                  </div>\r\n                  \r\n                  {item.formattedDistance && (\r\n                    <ItemLocation>\r\n                      <Navigation size={12} />\r\n                      {item.formattedDistance} from you\r\n                    </ItemLocation>\r\n                  )}\r\n                  \r\n                  <ActionButtons>\r\n                    <ActionButton \r\n                      className=\"primary\"\r\n                      onClick={(e) => {\r\n                        e.preventDefault();\r\n                        e.stopPropagation();\r\n\r\n                        // CHECK AUTHENTICATION\r\n                        if (!isAuthenticated) {\r\n                          // Redirect to LiveShopCreation\r\n                              navigate('/auth', { \r\n      state: { \r\n        mode: 'login',\r\n        from: window.location.pathname\r\n      }\r\n    });\r\n                          return;\r\n                        }\r\n\r\n                        // Proceed with order if authenticated\r\n                        setSelectedChatItem(item);\r\n                        setChatOpen(true);\r\n                      }}\r\n                    >\r\n                      <ShoppingCart size={14} />\r\n                      Order\r\n                    </ActionButton>\r\n                  </ActionButtons>\r\n                </ItemContent>\r\n              </ItemCard>\r\n            );\r\n          })}\r\n        </ItemGrid>\r\n      ) : (\r\n        <EmptyStateMessage>\r\n          <h3>No Items Found</h3>\r\n          <p>\r\n            {searchTerm \r\n              ? `No items match your search for \"${searchTerm}\"`\r\n              : \"This shop doesn't have any items yet.\"}\r\n          </p>\r\n        </EmptyStateMessage>\r\n      )}\r\n    </>\r\n  );\r\n\r\n  const renderHomeView = () => {\r\n    if (shopData?.homeWidgets && shopData.homeWidgets.length > 0) {\r\n      return (\r\n        <div>\r\n          {shopData.homeWidgets\r\n            .filter(widget => widget.visible)\r\n            .map(widget => (\r\n              <div key={widget.id} style={{ marginBottom: '2rem' }}>\r\n                {renderPublicWidget(widget)}\r\n              </div>\r\n            ))}\r\n        </div>\r\n      );\r\n    }\r\n  \r\n    // Fallback to existing home view content\r\n    return (\r\n      <div style={{ textAlign: 'center', padding: '3rem 1rem' }}>\r\n        <h2 style={{ \r\n          color: shopData?.theme?.colors?.accent || '#800000',\r\n          fontFamily: shopData?.theme?.fonts?.heading,\r\n          marginBottom: '1rem',\r\n          fontSize: '1.5rem'\r\n        }}>\r\n          Welcome to our Shop\r\n        </h2>\r\n        <p style={{ \r\n          maxWidth: '800px',\r\n          margin: '0 auto',\r\n          lineHeight: '1.6'\r\n        }}>\r\n          {shopData?.mission || 'Our mission is to provide quality products and excellent service.'}\r\n        </p>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const renderCommunityView = () => (\r\n    <div style={{ textAlign: 'center', padding: '3rem 1rem' }}>\r\n      <h2 style={{ \r\n        color: shopData?.theme?.colors?.accent || '#800000',\r\n        fontFamily: shopData?.theme?.fonts?.heading || \"'Space Grotesk', sans-serif\",\r\n        marginBottom: '1rem',\r\n        fontSize: '1.5rem'\r\n      }}>\r\n        Community\r\n      </h2>\r\n      <p style={{ \r\n        maxWidth: '800px',\r\n        margin: '0 auto',\r\n        lineHeight: '1.6',\r\n        color: shopData?.theme?.colors?.text || '#FFFFFF',\r\n        fontFamily: shopData?.theme?.fonts?.body || \"'Inter', sans-serif\",\r\n        fontSize: '1rem'\r\n      }}>\r\n        This is where community content will appear.\r\n      </p>\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <ThemeProvider theme={shopData?.theme || DEFAULT_THEME}>\r\n      <PageContainer>\r\n        <Header theme={shopData?.theme}>\r\n          {/* Left: Shop Name/Logo */}\r\n          <HeaderLeft>\r\n            <Logo theme={shopData?.theme} onClick={handleGoHome}>\r\n              {shopData?.name || 'SHOP'}\r\n            </Logo>\r\n          </HeaderLeft>\r\n\r\n          {/* Right: Tab Buttons */}\r\n          <HeaderRight>\r\n            <HeaderTabButton\r\n              theme={shopData?.theme}\r\n              active={activeTab === 'home'}\r\n              onClick={() => setActiveTab('home')}\r\n              title=\"Home\"\r\n            >\r\n              <Home size={22} />\r\n            </HeaderTabButton>\r\n\r\n            <HeaderTabButton\r\n              theme={shopData?.theme}\r\n              active={activeTab === 'shop'}\r\n              onClick={() => setActiveTab('shop')}\r\n              title=\"Shop\"\r\n            >\r\n              <Store size={22} />\r\n            </HeaderTabButton>\r\n\r\n            <HeaderTabButton\r\n              theme={shopData?.theme}\r\n              active={activeTab === 'community'}\r\n              onClick={() => setActiveTab('community')}\r\n              title=\"Community\"\r\n            >\r\n              <Users size={22} />\r\n            </HeaderTabButton>\r\n          </HeaderRight>\r\n        </Header>\r\n\r\n        <MainContent>\r\n          {/* Profile Cover and Shop View */}\r\n          {activeTab === 'shop' && (\r\n            <>\r\n              <ProfileCover \r\n                coverImage={shopData?.coverImage}\r\n                theme={shopData?.theme}\r\n              />\r\n              {renderShopView()}\r\n            </>\r\n          )}\r\n          {activeTab === 'home' && renderHomeView()}\r\n          {activeTab === 'community' && renderCommunityView()}\r\n        </MainContent>\r\n\r\n        {/* Floating Controls - Bottom Right */}\r\n        <FloatingControls>\r\n          <FloatingButton\r\n            onClick={refreshTheme}\r\n            theme={shopData?.theme}\r\n            className={isRefreshing ? \"spinning\" : \"\"}\r\n            title=\"Random theme\"\r\n          >\r\n            <RefreshCw size={24} />\r\n          </FloatingButton>\r\n\r\n          <FloatingButton\r\n            onClick={togglePinStyle}\r\n            theme={shopData?.theme}\r\n            isPinned={isPinned}\r\n            title={isPinned ? \"Unpin theme\" : \"Pin theme\"}\r\n          >\r\n            <Pin size={24} />\r\n          </FloatingButton>\r\n        </FloatingControls>\r\n\r\n        <ChatOverlay \r\n          isOpen={chatOpen} \r\n          onClick={() => {\r\n            setChatOpen(false);\r\n            setSelectedChatItem(null);\r\n          }}\r\n        />\r\n\r\n        {selectedChatItem && (\r\n          <OrderChat \r\n            isOpen={chatOpen} \r\n            onClose={() => {\r\n              setChatOpen(false);\r\n              setSelectedChatItem(null);\r\n            }} \r\n            item={selectedChatItem}\r\n            shopId={shopId}\r\n            shopName={shopData?.name}\r\n            theme={shopData?.theme}\r\n          />\r\n        )}\r\n      </PageContainer>\r\n    </ThemeProvider>\r\n  );\r\n};\r\n\r\nexport default ShopPublicView;"
        }
    ]
}