{
    "sourceFile": "src/pages/shop/LiveShopCreation.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 11,
            "patches": [
                {
                    "date": 1735712337787,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1735712395999,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,8 @@\n import EditableText from './components/EditableComponents/EditableText';\n import EditableImage from './components/EditableComponents/EditableImage';\n import EditableItem from './components/EditableComponents/EditableItem';\n import TabPositioner from './components/TabPositioner';\n-import { DEFAULT_THEME } from '../../theme/theme';\n \n // Theme Constants\n export const ELEMENTAL_THEMES = {\n   WATER: {\n"
                },
                {
                    "date": 1735712411382,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,8 +16,9 @@\n import { useTempStore } from '../../contexts/TempStoreContext';\n import EditableText from './components/EditableComponents/EditableText';\n import EditableImage from './components/EditableComponents/EditableImage';\n import EditableItem from './components/EditableComponents/EditableItem';\n+import { DEFAULT_THEME } from '../../theme/theme';\n import TabPositioner from './components/TabPositioner';\n \n // Theme Constants\n export const ELEMENTAL_THEMES = {\n"
                },
                {
                    "date": 1735712485194,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,12 +16,30 @@\n import { useTempStore } from '../../contexts/TempStoreContext';\n import EditableText from './components/EditableComponents/EditableText';\n import EditableImage from './components/EditableComponents/EditableImage';\n import EditableItem from './components/EditableComponents/EditableItem';\n-import { DEFAULT_THEME } from '../../theme/theme';\n import TabPositioner from './components/TabPositioner';\n \n // Theme Constants\n+export const DEFAULT_THEME = {\n+  colors: {\n+    background: '#000000',\n+    text: '#FFFFFF',\n+    primary: '#800000',\n+    secondary: '#4A0404',\n+    accent: '#800000',\n+    surface: 'rgba(255, 255, 255, 0.05)'\n+  },\n+  fonts: {\n+    heading: \"'Space Grotesk', sans-serif\",\n+    body: \"'Inter', sans-serif\"\n+  },\n+  styles: {\n+    borderRadius: '12px',\n+    containerWidth: '1400px'\n+  }\n+};\n+\n export const ELEMENTAL_THEMES = {\n   WATER: {\n     id: 'water',\n     name: 'Ocean Depths',\n"
                },
                {
                    "date": 1735712502929,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,11 @@\n import EditableText from './components/EditableComponents/EditableText';\n import EditableImage from './components/EditableComponents/EditableImage';\n import EditableItem from './components/EditableComponents/EditableItem';\n import TabPositioner from './components/TabPositioner';\n+import { DEFAULT_THEME } from '../../theme/theme';\n \n+\n // Theme Constants\n export const DEFAULT_THEME = {\n   colors: {\n     background: '#000000',\n"
                },
                {
                    "date": 1735712524382,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,27 +21,8 @@\n import { DEFAULT_THEME } from '../../theme/theme';\n \n \n // Theme Constants\n-export const DEFAULT_THEME = {\n-  colors: {\n-    background: '#000000',\n-    text: '#FFFFFF',\n-    primary: '#800000',\n-    secondary: '#4A0404',\n-    accent: '#800000',\n-    surface: 'rgba(255, 255, 255, 0.05)'\n-  },\n-  fonts: {\n-    heading: \"'Space Grotesk', sans-serif\",\n-    body: \"'Inter', sans-serif\"\n-  },\n-  styles: {\n-    borderRadius: '12px',\n-    containerWidth: '1400px'\n-  }\n-};\n-\n export const ELEMENTAL_THEMES = {\n   WATER: {\n     id: 'water',\n     name: 'Ocean Depths',\n"
                },
                {
                    "date": 1759888854926,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,1158 +1,2339 @@\n-// Save at: src/pages/shop/LiveShopCreation.js\n-\n-import React, { useState, useEffect, useMemo } from 'react';\n-import { useNavigate } from 'react-router-dom';\n-import styled, { ThemeProvider, createGlobalStyle } from 'styled-components';\n-import { \n-  ChevronLeft, \n-  ChevronRight, \n-  Settings, \n-  Plus,\n-  Heart,\n-  MessageCircle,\n-  Share2,\n-  X\n-} from 'lucide-react';\n-import { useTempStore } from '../../contexts/TempStoreContext';\n-import EditableText from './components/EditableComponents/EditableText';\n-import EditableImage from './components/EditableComponents/EditableImage';\n-import EditableItem from './components/EditableComponents/EditableItem';\n-import TabPositioner from './components/TabPositioner';\n-import { DEFAULT_THEME } from '../../theme/theme';\n-\n-\n-// Theme Constants\n-export const ELEMENTAL_THEMES = {\n-  WATER: {\n-    id: 'water',\n-    name: 'Ocean Depths',\n-    description: 'Flowing and calm like the deep sea',\n-    colors: {\n-      background: '#1E3D59',\n-      text: '#FFFFFF',\n-      primary: '#2D6187',\n-      secondary: '#41B3D3',\n-      accent: '#41B3D3'\n-    },\n-    fonts: {\n-      heading: \"'Quicksand', sans-serif\",\n-      body: \"'Source Sans Pro', sans-serif\"\n-    }\n-  },\n-  FIRE: {\n-    id: 'fire',\n-    name: 'Ember Forge',\n-    description: 'Bold and energetic like flames',\n-    colors: {\n-      background: '#1A0F0F',\n-      text: '#FFFFFF',\n-      primary: '#CD2B2B',\n-      secondary: '#FF6B4A',\n-      accent: '#FFA07A'\n-    },\n-    fonts: {\n-      heading: \"'Bebas Neue', sans-serif\",\n-      body: \"'Montserrat', sans-serif\"\n-    }\n-  },\n-  EARTH: {\n-    id: 'earth',\n-    name: 'Terra Firma',\n-    description: 'Grounded and natural like earth',\n-    colors: {\n-      background: '#1A2213',\n-      text: '#E8F3E8',\n-      primary: '#2D4A22',\n-      secondary: '#5C832F',\n-      accent: '#98C379'\n-    },\n-    fonts: {\n-      heading: \"'Playfair Display', serif\",\n-      body: \"'Lora', serif\"\n-    }\n-  },\n-  AIR: {\n-    id: 'air',\n-    name: 'Sky Whisper',\n-    description: 'Light and ethereal like the wind',\n-    colors: {\n-      background: '#2B4865',\n-      text: '#FFFFFF',\n-      primary: '#6E85B7',\n-      secondary: '#C4D7E0',\n-      accent: '#F8F9FA'\n-    },\n-    fonts: {\n-      heading: \"'Raleway', sans-serif\",\n-      body: \"'Open Sans', sans-serif\"\n-    }\n-  }\n-};\n-\n-// Navigation Constants\n-export const TAB_POSITIONS = {\n-  TOP: 'top',\n-  LEFT: 'left',\n-  BOTTOM: 'bottom'\n-};\n-\n-export const SHOP_NAME_POSITIONS = {\n-  LEFT: 'left',\n-  CENTER: 'center'\n-};\n-\n-const HiddenInput = styled.input`\n-  display: none;\n-`;\n-\n-// Mock Data\n-const MOCK_POSTS = [\n-  {\n-    id: 1,\n-    type: 'media',\n-    author: 'ArtisanCrafts',\n-    content: 'Just launched our new collection! Check out these handmade pieces. ðŸŽ¨',\n-    likes: 42,\n-    comments: 12,\n-    timeAgo: '2h ago'\n-  },\n-  {\n-    id: 2,\n-    type: 'item',\n-    author: 'VintageTreasures',\n-    item: {\n-      name: 'Antique Pocket Watch',\n-      price: 299.99,\n-      wants: 15\n-    },\n-    timeAgo: '4h ago'\n-  }\n-];\n-\n-// Base Styled Components\n-// In LiveShopCreation.js, add these styled components\n-const SelectionBanner = styled.div`\n-  position: fixed;\n-  top: 0;\n-  left: 0;\n-  right: 0;\n-  height: 80px;\n-  background: rgba(0, 0, 0, 0.9);\n-  backdrop-filter: blur(10px);\n-  display: flex;\n-  align-items: center;\n-  justify-content: space-between;\n-  padding: 0 2rem;\n-  z-index: 100;\n-  border-bottom: 1px solid rgba(160, 0, 0, 0.3);\n-`;\n-\n-// Update your ThemeHeader styling\n-const ThemeHeader = styled.div`\n-  text-align: center;\n-  margin-bottom: 4rem;\n-\n-  h1 {\n-    font-family: 'Impact', 'Arial Black', sans-serif;\n-    font-size: 4.5rem;\n-    margin-bottom: 1rem;\n-    background: linear-gradient(45deg, #800000, #4A0404);\n-    -webkit-background-clip: text;\n-    -webkit-text-fill-color: transparent;\n-    text-shadow: 0 0 30px rgba(128, 0, 0, 0.3);\n-    letter-spacing: 2px;\n-    transform: skew(-5deg);\n-  }\n-\n-  p {\n-    font-size: 1.2rem;\n-    line-height: 1.6;\n-    max-width: 800px;\n-    margin: 0 auto;\n-    color: rgba(255, 255, 255, 0.8);\n-    font-weight: 300;\n-  }\n-`;\n-\n-// Update ThemeSelectorContainer to center content\n-const ThemeSelectorContainer = styled.div`\n-  position: relative;\n-  min-height: 100vh;\n-  padding: 0;\n-  overflow: hidden;\n-  background: #000000;\n-\n-  &::before {\n-    content: '';\n-    position: absolute;\n-    top: 0;\n-    left: 0;\n-    right: 0;\n-    bottom: 0;\n-    background: \n-      radial-gradient(circle at 20% 30%, rgba(160, 0, 0, 0.2) 0%, transparent 50%),\n-      radial-gradient(circle at 80% 70%, rgba(160, 0, 0, 0.15) 0%, transparent 50%);\n-    opacity: 0.8;\n-    animation: galaxySwirl 30s linear infinite;\n-  }\n-\n-  &::after {\n-    content: '';\n-    position: absolute;\n-    top: 0;\n-    left: 0;\n-    right: 0;\n-    bottom: 0;\n-    background-image: \n-      radial-gradient(circle 1px, #FFF 1px, transparent 1px),\n-      radial-gradient(circle 2px, #A00000 1px, transparent 2px);\n-    background-size: 200px 200px, 300px 300px;\n-    background-position: 0 0;\n-    opacity: 0.1;\n-    animation: twinkle 4s infinite alternate;\n-  }\n-\n-  .content-wrapper {\n-    position: relative;\n-    z-index: 1;\n-    max-width: ${props => props.theme?.styles?.containerWidth || DEFAULT_THEME.styles.containerWidth};\n-    margin: 0 auto;\n-    padding: 4rem 2rem;\n-    min-height: 100vh;\n-    display: flex;\n-    flex-direction: column;\n-    justify-content: center;\n-  }\n-`;\n-\n-\n-const PageContainer = styled.div`\n-  min-height: 100vh;\n-  background: ${props => props.hasTheme ? props.theme?.colors?.background || DEFAULT_THEME.colors.background : 'transparent'};  // Changed this line\n-  color: ${props => props.theme?.colors?.text || DEFAULT_THEME.colors.text};\n-  padding-top: ${props => props.hasTheme ? '80px' : '0'};\n-  position: relative;\n-  overflow-x: hidden;\n-`;\n-\n-const ShopBanner = styled.div`\n-  position: fixed;\n-  top: 0;\n-  left: 0;\n-  right: 0;\n-  height: 80px;\n-  background: ${props => `${props.theme?.colors?.background || DEFAULT_THEME.colors.background}CC`};\n-  backdrop-filter: blur(10px);\n-  display: flex;\n-  align-items: center;\n-  justify-content: space-between;\n-  padding: 0 2rem;\n-  z-index: 100;\n-  border-bottom: 1px solid ${props => `${props.theme?.colors?.accent || DEFAULT_THEME.colors.accent}30`};\n-`;\n-\n-const ShopName = styled.div`\n-  flex: 1;\n-  text-align: ${props => props.position};\n-  font-family: ${props => props.theme?.fonts?.heading || DEFAULT_THEME.fonts.heading};\n-  font-size: 1.8rem;\n-  padding: ${props => props.position === 'center' ? '0 80px' : '0'};\n-`;\n-\n-const KalkodeLogo = styled.div`\n-  color: #800000;\n-  font-family: 'Impact', sans-serif;\n-  font-size: 2rem;\n-  letter-spacing: 2px;\n-  transform: skew(-5deg);\n-  cursor: pointer;\n-  transition: transform 0.3s ease;\n-\n-  &:hover {\n-    transform: skew(-5deg) translateY(-2px);\n-  }\n-`;\n-\n-const KalKodeLogo = styled.div`\n-  color: #A00000;\n-  font-family: 'Impact', sans-serif;\n-  font-size: 2rem;\n-  letter-spacing: 2px;\n-  transform: skew(-5deg);\n-`;\n-\n-const MainContent = styled.div`\n-  max-width: ${props => props.theme?.styles?.containerWidth || DEFAULT_THEME.styles.containerWidth};\n-  margin: 0 auto;\n-  padding: 2rem;\n-  position: relative;\n-  z-index: 1;\n-`;\n-\n-const ThemeGrid = styled.div`\n-  display: grid;\n-  grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));\n-  gap: 2rem;\n-  margin-bottom: 4rem;\n-`;\n-\n-const ActionButtons = styled.div`\n-  position: fixed;\n-  bottom: 2rem;\n-  right: 2rem;\n-  display: flex;\n-  gap: 1rem;\n-  z-index: 100;\n-`;\n-\n-const ActionButton = styled.button`\n-  background: ${props => props.theme?.colors?.accent || DEFAULT_THEME.colors.accent};\n-  color: ${props => props.theme?.colors?.text || DEFAULT_THEME.colors.text};\n-  border: none;\n-  border-radius: 30px;\n-  padding: 1rem 2rem;\n-  font-family: ${props => props.theme?.fonts?.heading || DEFAULT_THEME.fonts.heading};\n-  font-size: 1rem;\n-  cursor: pointer;\n-  display: flex;\n-  align-items: center;\n-  gap: 0.8rem;\n-  transition: all 0.3s ease;\n-\n-  &:hover {\n-    transform: translateY(-2px);\n-    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);\n-  }\n-\n-  &:disabled {\n-    opacity: 0.5;\n-    cursor: not-allowed;\n-  }\n-`;\n-\n-const CategoryTabs = styled.div`\n-  display: flex;\n-  justify-content: center;\n-  gap: 1rem;\n-  margin-bottom: 3rem;\n-`;\n-\n-const CategoryTab = styled.button`\n-  background: ${props => props.active ? props.theme?.colors?.surface : 'transparent'};\n-  border: 1px solid ${props => props.active ? \n-    props.theme?.colors?.accent || DEFAULT_THEME.colors.accent : \n-    'rgba(255, 255, 255, 0.1)'};\n-  color: ${props => props.active ? \n-    props.theme?.colors?.text || DEFAULT_THEME.colors.text : \n-    `${props.theme?.colors?.text || DEFAULT_THEME.colors.text}80`};\n-  padding: 0.8rem 1.5rem;\n-  border-radius: 30px;\n-  font-family: ${props => props.theme?.fonts?.heading || DEFAULT_THEME.fonts.heading};\n-  cursor: pointer;\n-  transition: all 0.3s ease;\n-\n-  &:hover {\n-    background: ${props => props.theme?.colors?.surface || 'rgba(255, 255, 255, 0.05)'};\n-    border-color: ${props => props.theme?.colors?.accent || DEFAULT_THEME.colors.accent};\n-  }\n-`;\n-\n-// Shop View Styled Components\n-const ShopSection = styled.section`\n-  display: flex;\n-  flex-direction: column;\n-  gap: 2rem;\n-`;\n-\n-const ShopHeader = styled.div`\n-  display: flex;\n-  gap: 2rem;\n-  align-items: start;\n-  margin-bottom: 2rem;\n-\n-  .profile-section {\n-    flex-shrink: 0;\n-  }\n-\n-  .info-section {\n-    flex: 1;\n-  }\n-`;\n-\n-// Update the ItemsGrid styled component\n-// Update ItemsGrid back to original size\n-const ItemsGrid = styled.div`\n-  display: grid;\n-  grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));\n-  gap: 2rem;\n-  margin-bottom: 2rem;\n-`;\n-\n-// Update ItemCard\n-const ItemCard = styled.div`\n-  background: rgba(255, 255, 255, 0.05);\n-  border-radius: ${props => props.theme?.styles?.borderRadius || '12px'};\n-  overflow: hidden;\n-  transition: all 0.3s ease;\n-  border: 1px solid rgba(255, 255, 255, 0.1);\n-  width: 100%;\n-  height: 500px; // Fixed height to ensure rectangular shape\n-\n-  &:hover {\n-    transform: translateY(-5px);\n-    border-color: ${props => props.theme?.colors?.accent};\n-  }\n-\n-  .item-content {\n-    padding: 1.5rem;\n-  }\n-`;\n-\n-// Update ItemImageCarousel\n-const ItemImageCarousel = styled.div`\n-  position: relative;\n-  height: 250px; // Half of ItemCard height\n-  width: 100%;\n-  display: flex;\n-  overflow: hidden;\n-  background: rgba(0, 0, 0, 0.1);\n-\n-  .image-container {\n-    width: 100%;\n-    height: 100%;\n-    position: relative;\n-  }\n-\n-  .carousel-arrow {\n-    position: absolute;\n-    top: 50%;\n-    transform: translateY(-50%);\n-    background: rgba(0, 0, 0, 0.5);\n-    border: none;\n-    border-radius: 50%;\n-    width: 32px;\n-    height: 32px;\n-    display: flex;\n-    align-items: center;\n-    justify-content: center;\n-    color: white;\n-    cursor: pointer;\n-    z-index: 2;\n-    transition: all 0.3s ease;\n-\n-    &:hover {\n-      background: rgba(0, 0, 0, 0.8);\n-    }\n-\n-    &.left {\n-      left: 10px;\n-    }\n-\n-    &.right {\n-      right: 10px;\n-    }\n-  }\n-\n-  .add-image {\n-    position: absolute;\n-    top: 10px;\n-    right: 10px;\n-    background: rgba(0, 0, 0, 0.5);\n-    border: none;\n-    border-radius: 50%;\n-    width: 32px;\n-    height: 32px;\n-    display: flex;\n-    align-items: center;\n-    justify-content: center;\n-    color: white;\n-    cursor: pointer;\n-    z-index: 2;\n-\n-    &:hover {\n-      background: rgba(0, 0, 0, 0.8);\n-    }\n-  }\n-`;\n-\n-const AddItemButton = styled.button`\n-  background: ${props => props.theme?.colors?.primary || DEFAULT_THEME.colors.primary};\n-  color: ${props => props.theme?.colors?.text || DEFAULT_THEME.colors.text};\n-  border: none;\n-  border-radius: ${props => props.theme?.styles?.borderRadius || DEFAULT_THEME.styles.borderRadius};\n-  padding: 1rem 2rem;\n-  font-family: ${props => props.theme?.fonts?.heading || DEFAULT_THEME.fonts.heading};\n-  cursor: pointer;\n-  display: flex;\n-  align-items: center;\n-  gap: 0.8rem;\n-  margin: 2rem auto;\n-  transition: all 0.3s ease;\n-\n-  &:hover {\n-    transform: translateY(-2px);\n-    background: ${props => props.theme?.colors?.secondary || DEFAULT_THEME.colors.secondary};\n-  }\n-\n-  svg {\n-    transition: transform 0.3s ease;\n-  }\n-\n-  &:hover svg {\n-    transform: rotate(90deg);\n-  }\n-`;\n-\n-// Home View Styled Components\n-const HomeSection = styled.div`\n-  max-width: 800px;\n-  margin: 0 auto;\n-  padding: 2rem;\n-\n-  .mission-statement {\n-    text-align: center;\n-    margin: 3rem 0;\n-    \n-    h3 {\n-      font-family: ${props => props.theme?.fonts?.heading || DEFAULT_THEME.fonts.heading};\n-      color: ${props => props.theme?.colors?.accent || DEFAULT_THEME.colors.accent};\n-      margin-bottom: 1rem;\n-    }\n-  }\n-`;\n-\n-const GalleryGrid = styled.div`\n-  display: grid;\n-  grid-template-columns: repeat(2, 1fr);\n-  gap: 2rem;\n-  margin-top: 3rem;\n-`;\n-\n-const GalleryCard = styled.div`\n-  background: ${props => `${props.theme?.colors?.primary || DEFAULT_THEME.colors.primary}15`};\n-  border-radius: ${props => props.theme?.styles?.borderRadius || DEFAULT_THEME.styles.borderRadius};\n-  padding: 2rem;\n-  text-align: center;\n-  border: 1px solid ${props => `${props.theme?.colors?.accent || DEFAULT_THEME.colors.accent}20`};\n-  transition: all 0.3s ease;\n-\n-  h3 {\n-    font-family: ${props => props.theme?.fonts?.heading || DEFAULT_THEME.fonts.heading};\n-    color: ${props => props.theme?.colors?.accent || DEFAULT_THEME.colors.accent};\n-    margin-bottom: 1rem;\n-  }\n-\n-  p {\n-    color: ${props => `${props.theme?.colors?.text || DEFAULT_THEME.colors.text}CC`};\n-    font-family: ${props => props.theme?.fonts?.body || DEFAULT_THEME.fonts.body};\n-    line-height: 1.6;\n-  }\n-\n-  &:hover {\n-    transform: translateY(-5px);\n-    border-color: ${props => props.theme?.colors?.accent || DEFAULT_THEME.colors.accent};\n-    box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1);\n-  }\n-`;\n-\n-// Community View Styled Components\n-const CommunitySection = styled.div`\n-  display: grid;\n-  grid-template-columns: repeat(2, 1fr);\n-  gap: 2rem;\n-`;\n-\n-const FeedColumn = styled.div`\n-  h2 {\n-    font-family: ${props => props.theme?.fonts?.heading || DEFAULT_THEME.fonts.heading};\n-    color: ${props => props.theme?.colors?.accent || DEFAULT_THEME.colors.accent};\n-    margin-bottom: 2rem;\n-  }\n-`;\n-\n-const PostCard = styled.div`\n-  background: ${props => `${props.theme?.colors?.primary || DEFAULT_THEME.colors.primary}15`};\n-  border-radius: ${props => props.theme?.styles?.borderRadius || DEFAULT_THEME.styles.borderRadius};\n-  overflow: hidden;\n-  border: 1px solid ${props => `${props.theme?.colors?.accent || DEFAULT_THEME.colors.accent}20`};\n-  margin-bottom: 2rem;\n-  transition: all 0.3s ease;\n-\n-  &:hover {\n-    transform: translateY(-5px);\n-    border-color: ${props => props.theme?.colors?.accent || DEFAULT_THEME.colors.accent};\n-  }\n-`;\n-\n-const PostContent = styled.div`\n-  padding: 1.5rem;\n-\n-  h3 {\n-    font-family: ${props => props.theme?.fonts?.heading || DEFAULT_THEME.fonts.heading};\n-    color: ${props => props.theme?.colors?.text || DEFAULT_THEME.colors.text};\n-    margin-bottom: 1rem;\n-  }\n-\n-  p {\n-    color: ${props => `${props.theme?.colors?.text || DEFAULT_THEME.colors.text}CC`};\n-    line-height: 1.6;\n-    margin-bottom: 1rem;\n-  }\n-\n-  .timestamp {\n-    font-size: 0.9rem;\n-    color: ${props => `${props.theme?.colors?.text || DEFAULT_THEME.colors.text}80`};\n-  }\n-`;\n-\n-const PostActions = styled.div`\n-  display: flex;\n-  gap: 1rem;\n-  padding: 1rem 1.5rem;\n-  border-top: 1px solid ${props => `${props.theme?.colors?.accent || DEFAULT_THEME.colors.accent}20`};\n-\n-  button {\n-    background: transparent;\n-    border: none;\n-    color: ${props => `${props.theme?.colors?.text || DEFAULT_THEME.colors.text}CC`};\n-    display: flex;\n-    align-items: center;\n-    gap: 0.5rem;\n-    cursor: pointer;\n-    transition: all 0.2s;\n-    padding: 0.5rem;\n-    border-radius: 4px;\n-\n-    &:hover {\n-      color: ${props => props.theme?.colors?.accent || DEFAULT_THEME.colors.accent};\n-      background: ${props => `${props.theme?.colors?.accent || DEFAULT_THEME.colors.accent}15`};\n-    }\n-  }\n-`;\n-\n-const GlobalStyles = createGlobalStyle`\n-  .ping {\n-    position: absolute;\n-    width: 2px;\n-    height: 2px;\n-    border-radius: 50%;\n-    background: #800000;\n-    pointer-events: none;\n-  }\n-\n-  .ping::before {\n-    content: '';\n-    position: absolute;\n-    top: 50%;\n-    left: 50%;\n-    width: 200px;\n-    height: 200px;\n-    transform: translate(-50%, -50%);\n-    border-radius: 50%;\n-    background: radial-gradient(circle, rgba(128, 0, 0, 0.4) 0%, transparent 70%);\n-    animation: ping 2s ease-out forwards;\n-  }\n-\n-  @keyframes ping {\n-    0% {\n-      width: 0px;\n-      height: 0px;\n-      opacity: 1;\n-    }\n-    100% {\n-      width: 200px;\n-      height: 200px;\n-      opacity: 0;\n-    }\n-  }\n-`;\n-\n-// Main Component\n-const LiveShopCreation = () => {\n-  const navigate = useNavigate();\n-  const { saveTempStore } = useTempStore();\n-  \n-  // State\n-  const [currentStep, setCurrentStep] = useState(1);\n-  const [selectedTheme, setSelectedTheme] = useState(DEFAULT_THEME);\n-  const [hasSelectedTheme, setHasSelectedTheme] = useState(false);\n-  const [shopNamePosition, setShopNamePosition] = useState(SHOP_NAME_POSITIONS.LEFT);\n-  const [tabPosition, setTabPosition] = useState(TAB_POSITIONS.TOP);\n-  const [activeTab, setActiveTab] = useState('shop');\n-  const [isPurchasing, setIsPurchasing] = useState(false);\n-  \n-  const [shopData, setShopData] = useState({\n-    name: '',\n-    description: '',\n-    profile: null,\n-    mission: '',\n-    location: '',\n-    items: [{\n-      id: 1,\n-      name: 'New Item',\n-      price: '',\n-      description: 'Describe your item here',\n-      images: [null, null, null], // Initialize with three empty slots\n-      currentImageIndex: 0,\n-      location: '',\n-      tags: [],\n-      wants: 0\n-    }],\n-    wants: {},\n-    layout: {\n-      namePosition: SHOP_NAME_POSITIONS.LEFT,\n-      tabPosition: TAB_POSITIONS.TOP\n-    }\n-  });\n-\n-  // Theme Selection Handler\n-  const handleThemeSelect = (themeId) => {\n-    console.log('Theme selected:', themeId); // For debugging\n-    \n-    const themeData = ELEMENTAL_THEMES[themeId];\n-    if (themeData) {\n-      const newTheme = {\n-        ...DEFAULT_THEME,\n-        ...themeData,\n-        id: themeId\n-      };\n-      setSelectedTheme(newTheme);\n-      setHasSelectedTheme(true); // This should trigger the view change\n-    }\n-  };\n-\n-  // Shop Data Handlers\n-  const handleShopDataChange = (field, value) => {\n-    setShopData(prev => ({\n-      ...prev,\n-      [field]: value\n-    }));\n-  };\n-\n-  const handleItemAdd = () => {\n-    setShopData(prev => ({\n-      ...prev,\n-      items: [...prev.items, {\n-        id: Date.now(),\n-        name: '',\n-        price: '',\n-        description: '',\n-        images: [null, null, null], // Initialize with three empty slots\n-        currentImageIndex: 0,\n-        location: '',\n-        tags: [],\n-        wants: 0\n-      }]\n-    }));\n-  };\n-  const handleItemUpdate = (itemId, updatedItem) => {\n-    setShopData(prev => ({\n-      ...prev,\n-      items: prev.items.map(item => \n-        item.id === itemId ? { ...updatedItem } : item\n-      )\n-    }));\n-  };\n-\n-  const handleItemDelete = (itemId) => {\n-    setShopData(prev => ({\n-      ...prev,\n-      items: prev.items.filter(item => item.id !== itemId)\n-    }));\n-  };\n-\n-  // Render Methods\n-  const renderThemeSelector = () => (\n-    <ThemeSelectorContainer className=\"theme-selector-container\">\n-      <SelectionBanner>\n-        <KalkodeLogo onClick={() => navigate('/')}>KALKODE</KalkodeLogo>\n-      </SelectionBanner>\n-      <div className=\"content-wrapper\">\n-        <ThemeHeader>\n-          <h1>Choose Your Theme</h1>\n-          <p>Select a theme that reflects your brand's personality.</p>\n-        </ThemeHeader>\n-        <ThemeGrid>\n-          {Object.entries(ELEMENTAL_THEMES).map(([id, theme]) => (\n-            <div\n-              key={id}\n-              onClick={() => handleThemeSelect(id)}\n-              style={{\n-                cursor: 'pointer',\n-                padding: '20px',\n-                border: `1px solid ${theme.colors.accent}`,\n-                borderRadius: '8px',\n-                background: theme.colors.background,\n-                transition: 'all 0.3s ease',\n-              }}\n-            >\n-              <h3 style={{ color: theme.colors.text }}>{theme.name}</h3>\n-              <p style={{ color: theme.colors.text }}>{theme.description}</p>\n-            </div>\n-          ))}\n-        </ThemeGrid>\n-      </div>\n-    </ThemeSelectorContainer>\n-  );\n-\n-  const ShopProfileSection = styled.section`\n-  display: flex;\n-  flex-direction: column;\n-  align-items: center;\n-  text-align: center;\n-  max-width: 800px;\n-  margin: 0 auto 3rem auto;\n-  padding: 2rem;\n-\n-  .profile-image {\n-    margin-bottom: 2rem;\n-  }\n-\n-  .shop-name {\n-    margin-bottom: 1.5rem;\n-    width: 100%;\n-    font-family: ${props => props.theme?.fonts?.heading};\n-  }\n-\n-  .shop-description {\n-    width: 100%;\n-  }\n-`;\n-const handleAddImage = (itemId, newImage) => {\n-  setShopData(prev => ({\n-    ...prev,\n-    items: prev.items.map(item => {\n-      if (item.id === itemId && item.images.length < 3) {\n-        return {\n-          ...item,\n-          images: [...item.images, newImage]\n-        };\n-      }\n-      return item;\n-    })\n-  }));\n-};\n-\n-// Then update your renderShopView method\n-\n-const renderShopView = () => (\n-  <MainContent>\n-    <ShopProfileSection>\n-      <div className=\"profile-image\">\n-        <EditableImage\n-          value={shopData.profile}\n-          onChange={(value) => handleShopDataChange('profile', value)}\n-          theme={selectedTheme}\n-          round\n-          width=\"150px\"\n-          height=\"150px\"\n-        />\n-      </div>\n-      <div className=\"shop-name\">\n-        <EditableText\n-          value={shopData.name}\n-          onChange={(value) => handleShopDataChange('name', value)}\n-          placeholder=\"Enter Your Shop Name\"\n-          theme={selectedTheme}\n-          fontSize=\"2rem\"\n-          fontWeight=\"bold\"\n-        />\n-      </div>\n-      <div className=\"shop-description\">\n-        <EditableText\n-          value={shopData.description}\n-          onChange={(value) => handleShopDataChange('description', value)}\n-          placeholder=\"Tell people about your shop...\"\n-          multiline\n-          theme={selectedTheme}\n-        />\n-      </div>\n-    </ShopProfileSection>\n-\n-    <ItemsGrid>\n-      {shopData.items.map(item => (\n-        <ItemCard key={item.id}>\n-          <ItemImageCarousel>\n-            <div className=\"image-container\">\n-              <EditableImage\n-                value={item.images[item.currentImageIndex]}\n-                onChange={(value) => {\n-                  const newImages = [...item.images];\n-                  newImages[item.currentImageIndex] = value;\n-                  handleItemUpdate(item.id, { \n-                    ...item, \n-                    images: newImages\n-                  });\n-                }}\n-                theme={selectedTheme}\n-                height=\"100%\"\n-                width=\"100%\"\n-                round={false}\n-              />\n-            </div>\n-              \n-            <button \n-              className=\"carousel-arrow left\"\n-              onClick={() => {\n-                const newIndex = ((item.currentImageIndex - 1) + 3) % 3;\n-                handleItemUpdate(item.id, { ...item, currentImageIndex: newIndex });\n-              }}\n-            >\n-              <ChevronLeft size={16} />\n-            </button>\n-            <button \n-              className=\"carousel-arrow right\"\n-              onClick={() => {\n-                const newIndex = (item.currentImageIndex + 1) % 3;\n-                handleItemUpdate(item.id, { ...item, currentImageIndex: newIndex });\n-              }}\n-            >\n-              <ChevronRight size={16} />\n-            </button>\n-\n-            {item.images[item.currentImageIndex] ? (\n-              <button \n-                className=\"add-image\"\n-                onClick={() => {\n-                  const newImages = [...item.images];\n-                  newImages[item.currentImageIndex] = null;\n-                  handleItemUpdate(item.id, { \n-                    ...item, \n-                    images: newImages\n-                  });\n-                }}\n-              >\n-                <X size={16} />\n-              </button>\n-            ) : (\n-              <button \n-                className=\"add-image\"\n-                onClick={() => {\n-                  const input = document.getElementById(`image-input-${item.id}`);\n-                  if (input) input.click();\n-                }}\n-              >\n-                <Plus size={16} />\n-              </button>\n-            )}\n-            \n-            {!item.images[item.currentImageIndex] && (\n-              <button \n-                className=\"add-image\"\n-                onClick={() => {\n-                  const input = document.getElementById(`image-input-${item.id}`);\n-                  if (input) input.click();\n-                }}\n-              >\n-                <Plus size={16} />\n-              </button>\n-            )}\n-\n-            <HiddenInput\n-              type=\"file\"\n-              id={`image-input-${item.id}`}\n-              accept=\"image/*\"\n-              onChange={(e) => {\n-                if (e.target.files?.[0]) {\n-                  const newImages = [...item.images];\n-                  newImages[item.currentImageIndex] = e.target.files[0];\n-                  handleItemUpdate(item.id, { \n-                    ...item, \n-                    images: newImages\n-                  });\n-                }\n-              }}\n-            />\n-          </ItemImageCarousel>\n-          \n-          <div className=\"item-content\">\n-            <EditableText\n-              value={item.name}\n-              onChange={(value) => handleItemUpdate(item.id, { ...item, name: value })}\n-              placeholder=\"Item Name\"\n-              theme={selectedTheme}\n-              fontSize=\"1.2rem\"\n-              fontWeight=\"bold\"\n-            />\n-            <EditableText\n-              value={item.price}\n-              onChange={(value) => handleItemUpdate(item.id, { ...item, price: value })}\n-              placeholder=\"Price\"\n-              theme={selectedTheme}\n-            />\n-            <EditableText\n-              value={item.description}\n-              onChange={(value) => handleItemUpdate(item.id, { ...item, description: value })}\n-              placeholder=\"Item Description\"\n-              multiline\n-              theme={selectedTheme}\n-            />\n-          </div>\n-        </ItemCard>\n-      ))}\n-    </ItemsGrid>\n-\n-    <AddItemButton onClick={handleItemAdd} theme={selectedTheme}>\n-      <Plus size={20} />\n-      Add Item\n-    </AddItemButton>\n-    </MainContent>\n-  );\n-\n-  const renderHomeView = () => (\n-    <HomeSection>\n-      <div className=\"mission-statement\">\n-        <h3>Mission Statement</h3>\n-        <EditableText\n-          value={shopData.mission}\n-          onChange={(value) => handleShopDataChange('mission', value)}\n-          placeholder=\"What's your shop's mission?\"\n-          multiline\n-          maxLength={500}\n-          theme={selectedTheme}\n-        />\n-      </div>\n-\n-      <GalleryGrid>\n-        {['Events', 'Activities', 'Features', 'Updates'].map(section => (\n-          <GalleryCard key={section}>\n-            <h3>{section}</h3>\n-            <p>Content will be editable after signup</p>\n-          </GalleryCard>\n-        ))}\n-      </GalleryGrid>\n-    </HomeSection>\n-  );\n-\n-  const renderCommunityView = () => (\n-    <CommunitySection>\n-      <FeedColumn>\n-        <h2>Media Posts</h2>\n-        {MOCK_POSTS\n-          .filter(post => post.type === 'media')\n-          .map(post => (\n-            <PostCard key={post.id}>\n-              <PostContent>\n-                <h3>{post.author}</h3>\n-                <p>{post.content}</p>\n-                <span className=\"timestamp\">{post.timeAgo}</span>\n-              </PostContent>\n-              <PostActions>\n-                <button><Heart size={18} /> {post.likes}</button>\n-                <button><MessageCircle size={18} /> {post.comments}</button>\n-                <button><Share2 size={18} /></button>\n-              </PostActions>\n-            </PostCard>\n-          ))}\n-      </FeedColumn>\n-\n-      <FeedColumn>\n-        <h2>Featured Items</h2>\n-        {MOCK_POSTS\n-          .filter(post => post.type === 'item')\n-          .map(post => (\n-            <PostCard key={post.id}>\n-              <PostContent>\n-                <h3>{post.author}</h3>\n-                <div>\n-                  <h4>{post.item.name}</h4>\n-                  <p>${post.item.price}</p>\n-                </div>\n-              </PostContent>\n-              <PostActions>\n-                <button><Heart size={18} /> {post.item.wants}</button>\n-                <button><Share2 size={18} /></button>\n-              </PostActions>\n-            </PostCard>\n-          ))}\n-      </FeedColumn>\n-    </CommunitySection>\n-  );\n-\n-  // Main Render\n-  return (\n-    <ThemeProvider theme={selectedTheme}>\n-      <GlobalStyles />\n-      <PageContainer hasTheme={hasSelectedTheme}>\n-        {!hasSelectedTheme ? (\n-          renderThemeSelector()\n-        ) : (\n-          <>\n-            <ShopBanner>\n-              <ShopName position={shopNamePosition}>\n-                {shopData.name || \"Your Shop Name\"}\n-              </ShopName>\n-              <KalKodeLogo onClick={() => navigate('/')}>\n-                KALKODE\n-              </KalKodeLogo>\n-            </ShopBanner>\n-\n-            <TabPositioner\n-              position={tabPosition}\n-              onPositionChange={setTabPosition}\n-              activeTab={activeTab}\n-              onTabChange={setActiveTab}\n-              tabs={[\n-                { id: 'shop', label: 'Shop' },\n-                { id: 'home', label: 'Home' },\n-                { id: 'community', label: 'Community' }\n-              ]}\n-              theme={selectedTheme}\n-            />\n-\n-            <MainContent>\n-              {activeTab === 'shop' && renderShopView()}\n-              {activeTab === 'home' && renderHomeView()}\n-              {activeTab === 'community' && renderCommunityView()}\n-            </MainContent>\n-\n-            <ActionButtons>\n-              <ActionButton onClick={() => setHasSelectedTheme(false)}>\n-                <Settings size={20} />\n-                Change Theme\n-              </ActionButton>\n-              <ActionButton\n-                onClick={() => {\n-                  const shopDataToSave = {\n-                    ...shopData,\n-                    theme: selectedTheme,\n-                    layout: {\n-                      namePosition: shopNamePosition,\n-                      tabPosition: tabPosition\n-                    },\n-                    // Properly structure profile image\n-                    profile: shopData.profile ? {\n-                      file: shopData.profile.file,\n-                      type: shopData.profile.type\n-                    } : null,\n-                    // Properly structure item images\n-                    items: shopData.items.map(item => ({\n-                      ...item,\n-                      images: item.images.map(img => img ? {\n-                        file: img.file,\n-                        type: img.type\n-                      } : null)\n-                    }))\n-                  };\n-                  console.log('Shop data being passed:', shopDataToSave);\n-                  navigate('/auth', {\n-                    state: { \n-                      mode: 'signup', \n-                      tempData: shopDataToSave \n-                    }\n-                  });\n-                }}\n-                disabled={!shopData.name}\n-              >\n-                Continue to Signup\n-                <ChevronRight size={20} />\n-              </ActionButton>\n-            </ActionButtons>\n-          </>\n-        )}\n-      </PageContainer>\n-    </ThemeProvider>\n-  );\n-};\n-\n+// src/pages/shop/LiveShopCreation.js - Mobile Optimized\r\n+\r\n+import React, { useState, useEffect, useMemo } from 'react';\r\n+import { useNavigate } from 'react-router-dom';\r\n+import styled, { ThemeProvider, createGlobalStyle } from 'styled-components';\r\n+import ValidatedEditableText from '../../components/common/ValidatedEditableText';\r\n+import { VALIDATION_RULES, validateShopData, validateAllItems } from '../../utils/inputValidation';\r\n+import { \r\n+  ChevronLeft, \r\n+  ChevronRight, \r\n+  Settings, \r\n+  Plus,\r\n+  Minus, \r\n+  Heart,\r\n+  MessageCircle,\r\n+  Users,\r\n+  RefreshCw, \r\n+  Pin,\r\n+  X,\r\n+  ChevronDown,\r\n+  ChevronUp,\r\n+  Store,\r\n+  Home,\r\n+  LogOut,\r\n+  Check,\r\n+  Package\r\n+} from 'lucide-react';\r\n+import { useTempStore } from '../../contexts/TempStoreContext';\r\n+import EditableText from './components/EditableComponents/EditableText';\r\n+import EditableImage from './components/EditableComponents/EditableImage';\r\n+import EditableItem from './components/EditableComponents/EditableItem';\r\n+import TabPositioner from './components/TabPositioner';\r\n+import { DEFAULT_THEME } from '../../theme/config/themes';\r\n+import ThemeSelector from '../../components/ThemeSelector/ThemeSelector';\r\n+import AddressInput from '../../components/shop/AddressInput';\r\n+import { WELCOME_STYLES } from '../../theme/welcomeStyles';\r\n+import QuantitySelector from '../../components/shop/QuantitySelector';\r\n+import { useAuth } from '../../contexts/AuthContext';\r\n+import { signOut } from 'firebase/auth';\r\n+import { auth } from '../../firebase/config';\r\n+\r\n+const ITEM_CATEGORIES = [\r\n+  'Electronics & Tech',\r\n+  'Clothing & Accessories',\r\n+  'Home & Garden',\r\n+  'Sports & Outdoors',\r\n+  'Books & Media',\r\n+  'Toys & Games',\r\n+  'Health & Beauty',\r\n+  'Automotive',\r\n+  'Collectibles & Art',\r\n+  'Food & Beverages',\r\n+  'Other'\r\n+];\r\n+\r\n+// Mobile-first styled components\r\n+const PageContainer = styled.div.attrs({ className: 'page-container' })`\r\n+  min-height: 100vh;\r\n+  background: ${props => props.theme?.colors?.background || '#000000'};\r\n+  color: ${props => props.theme?.colors?.text || '#FFFFFF'};\r\n+  position: relative;\r\n+  overflow-x: hidden;\r\n+  \r\n+  /* Mobile-optimized background effects */\r\n+  &::before {\r\n+    content: '';\r\n+    position: absolute;\r\n+    width: 100%;\r\n+    height: 100%;\r\n+    background: ${props => props.theme?.colors?.backgroundGradient || 'radial-gradient(circle at 20% 30%, rgba(128, 0, 0, 0.2) 0%, transparent 50%)'};\r\n+    opacity: 0.8;\r\n+    animation: ${props => props.theme?.animations?.backgroundAnimation || 'galaxySwirl 30s linear infinite'};\r\n+  }\r\n+\r\n+  /* Simplified stars for mobile performance */\r\n+  &::after {\r\n+    content: '';\r\n+    position: absolute;\r\n+    width: 100%;\r\n+    height: 100%;\r\n+    background-image: radial-gradient(circle 1px, ${props => props.theme?.colors?.text || '#FFF'} 1px, transparent 1px);\r\n+    background-size: 100px 100px;\r\n+    opacity: 0.05;\r\n+    \r\n+    @media (min-width: 768px) {\r\n+      background-size: 200px 200px;\r\n+      opacity: 0.1;\r\n+    }\r\n+  }\r\n+\r\n+  @keyframes galaxySwirl {\r\n+    0% { transform: rotate(0deg); }\r\n+    100% { transform: rotate(360deg); }\r\n+  }\r\n+`;\r\n+\r\n+// Add after existing styled components (around line 800)\r\n+const ShopNameInputContainer = styled.div`\r\n+  width: 100%;\r\n+  margin: 0.5rem 0;\r\n+  position: relative;\r\n+`;\r\n+\r\n+// In LiveShopCreation.js, update the ShopNameInput styled component (around line 250)\r\n+\r\n+const ShopNameInput = styled.input`\r\n+  width: 100%;\r\n+  text-align: center;\r\n+  background: transparent;\r\n+  border: none;\r\n+  border-bottom: 2px solid ${props => props.isError ? '#ff4444' : `${props.theme?.colors?.accent}40` || 'rgba(128, 0, 0, 0.25)'};\r\n+  font-size: ${props => Math.min(props.fontSize || 2.5, 2)}rem;\r\n+  font-family: ${props => props.theme?.fonts?.heading};\r\n+  color: ${props => props.theme?.colors?.accent || '#800000'};\r\n+  outline: none;\r\n+  padding: 0.5rem;\r\n+  transition: all 0.3s ease;\r\n+  caret-color: ${props => props.theme?.colors?.accent || '#800000'}; /* ADD THIS LINE */\r\n+  \r\n+  @media (min-width: 768px) {\r\n+    font-size: ${props => props.fontSize || '2.5rem'};\r\n+  }\r\n+\r\n+  &:focus {\r\n+    border-bottom-color: ${props => props.isError ? '#ff4444' : props.theme?.colors?.accent || '#800000'};\r\n+    border-bottom-width: 3px;\r\n+  }\r\n+\r\n+  &::placeholder {\r\n+    color: ${props => `${props.theme?.colors?.accent}60` || 'rgba(128, 0, 0, 0.4)'};\r\n+  }\r\n+\r\n+  /* ADD BLINKING CURSOR ANIMATION */\r\n+  @keyframes blink {\r\n+    0%, 49% { border-right: 2px solid ${props => props.theme?.colors?.accent || '#800000'}; }\r\n+    50%, 100% { border-right: 2px solid transparent; }\r\n+  }\r\n+  \r\n+  &:focus {\r\n+    animation: blink 1s step-end infinite;\r\n+  }\r\n+`;\r\n+\r\n+const ShopNameError = styled.div`\r\n+  color: #ff4444;\r\n+  font-size: 0.8rem;\r\n+  margin-top: 0.25rem;\r\n+  text-align: center;\r\n+  font-family: ${props => props.theme?.fonts?.body || \"'Inter', sans-serif\"};\r\n+  min-height: 20px;\r\n+  \r\n+  @media (min-width: 768px) {\r\n+    font-size: 0.9rem;\r\n+  }\r\n+`;\r\n+\r\n+const ShopNameSuccess = styled.div`\r\n+  color: #4CAF50;\r\n+  font-size: 0.8rem;\r\n+  margin-top: 0.25rem;\r\n+  text-align: center;\r\n+  font-family: ${props => props.theme?.fonts?.body || \"'Inter', sans-serif\"};\r\n+  min-height: 20px;\r\n+  \r\n+  @media (min-width: 768px) {\r\n+    font-size: 0.9rem;\r\n+  }\r\n+`;\r\n+\r\n+// REPLACE Header with:\r\n+const Header = styled.header`\r\n+  width: 100%;\r\n+  height: 60px;\r\n+  padding: 0 1rem;\r\n+  display: flex;\r\n+  align-items: center;\r\n+  justify-content: space-between;\r\n+  background: ${props => props.theme?.colors?.headerBg || 'rgba(0, 0, 0, 1)'};\r\n+  border-bottom: 1px solid ${props => `${props.theme?.colors?.accent}4D` || 'rgba(128, 0, 0, 0.3)'};\r\n+  position: fixed;\r\n+  top: 0;\r\n+  z-index: 100;\r\n+\r\n+  @media (min-width: 768px) {\r\n+    height: 80px;\r\n+    padding: 0 2rem;\r\n+  }\r\n+`;\r\n+\r\n+// ADD these new styled components after Header:\r\n+const HeaderLeft = styled.div`\r\n+  display: flex;\r\n+  align-items: center;\r\n+  gap: 0.75rem;\r\n+`;\r\n+\r\n+const HeaderRight = styled.div`\r\n+  display: flex;\r\n+  align-items: center;\r\n+  gap: 0.75rem;\r\n+`;\r\n+\r\n+const HeaderTabButton = styled.button`\r\n+  background: transparent;\r\n+  border: none;\r\n+  color: ${props => props.active ? \r\n+    props.theme?.colors?.accent : \r\n+    `${props.theme?.colors?.text}60`};\r\n+  padding: 0.5rem;\r\n+  cursor: pointer;\r\n+  display: flex;\r\n+  align-items: center;\r\n+  justify-content: center;\r\n+  transition: all 0.3s ease;\r\n+  position: relative;\r\n+  \r\n+  &:active {\r\n+    transform: scale(0.9);\r\n+  }\r\n+  \r\n+  &::after {\r\n+    content: '';\r\n+    position: absolute;\r\n+    bottom: -1px;\r\n+    left: 50%;\r\n+    transform: translateX(-50%);\r\n+    width: ${props => props.active ? '80%' : '0'};\r\n+    height: 3px;\r\n+    background: ${props => props.theme?.colors?.accent || '#800000'};\r\n+    border-radius: 2px 2px 0 0;\r\n+    transition: width 0.3s ease;\r\n+  }\r\n+  \r\n+  @media (hover: hover) {\r\n+    &:hover {\r\n+      color: ${props => props.theme?.colors?.accent};\r\n+      opacity: 1;\r\n+    }\r\n+  }\r\n+  \r\n+  svg {\r\n+    width: 22px;\r\n+    height: 22px;\r\n+    \r\n+    @media (min-width: 768px) {\r\n+      width: 24px;\r\n+      height: 24px;\r\n+    }\r\n+  }\r\n+`;\r\n+\r\n+// UPDATE FloatingControls (add if doesn't exist):\r\n+const FloatingControls = styled.div`\r\n+  position: fixed;\r\n+  bottom: 100px;\r\n+  right: 2rem;\r\n+  display: flex;\r\n+  flex-direction: column;\r\n+  gap: 1rem;\r\n+  z-index: 90;\r\n+  \r\n+  @media (min-width: 768px) {\r\n+    bottom: 2rem;\r\n+  }\r\n+  \r\n+  @media (max-width: 767px) {\r\n+    right: 1.5rem;\r\n+    gap: 0.75rem;\r\n+  }\r\n+`;\r\n+\r\n+const FloatingButton = styled.button`\r\n+  width: 56px;\r\n+  height: 56px;\r\n+  border-radius: 50%;\r\n+  background: ${props => props.theme?.colors?.accent || '#800000'};\r\n+  color: ${props => props.theme?.colors?.background || '#FFFFFF'};\r\n+  border: none;\r\n+  display: flex;\r\n+  align-items: center;\r\n+  justify-content: center;\r\n+  cursor: pointer;\r\n+  box-shadow: 0 4px 12px ${props => `${props.theme?.colors?.accent}40` || 'rgba(128, 0, 0, 0.25)'};\r\n+  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\r\n+  \r\n+  ${props => props.isPinned && `\r\n+    background: ${props.theme?.colors?.background || '#000000'};\r\n+    color: ${props.theme?.colors?.accent || '#800000'};\r\n+    border: 2px solid ${props.theme?.colors?.accent || '#800000'};\r\n+  `}\r\n+  \r\n+  @media (max-width: 767px) {\r\n+    width: 48px;\r\n+    height: 48px;\r\n+  }\r\n+  \r\n+  &:active {\r\n+    transform: scale(0.9);\r\n+  }\r\n+  \r\n+  @media (hover: hover) {\r\n+    &:hover {\r\n+      transform: scale(1.1);\r\n+      box-shadow: 0 6px 16px ${props => `${props.theme?.colors?.accent}60` || 'rgba(128, 0, 0, 0.4)'};\r\n+    }\r\n+  }\r\n+  \r\n+  &.spinning {\r\n+    animation: spin 0.5s ease-in-out;\r\n+  }\r\n+  \r\n+  @keyframes spin {\r\n+    from { transform: rotate(0deg); }\r\n+    to { transform: rotate(360deg); }\r\n+  }\r\n+  \r\n+  svg {\r\n+    width: 24px;\r\n+    height: 24px;\r\n+    \r\n+    @media (max-width: 767px) {\r\n+      width: 20px;\r\n+      height: 20px;\r\n+    }\r\n+  }\r\n+`;\r\n+\r\n+const EditModal = styled.div`\r\n+  display: none;\r\n+\r\n+  @media (max-width: 767px) {\r\n+    display: flex;\r\n+    position: fixed;\r\n+    top: 95px; /* Start 1 inch below tab buttons (assuming tabs are around 60px + header 80px) */\r\n+    left: 0;\r\n+    right: 0;\r\n+    bottom: 30px; /* 1 inch from bottom (96px = 1 inch) */\r\n+    background: rgba(0, 0, 0, 0.9);\r\n+    align-items: center;\r\n+    justify-content: center;\r\n+    z-index: 999; /* Changed from 1000 to be below save button */\r\n+    padding: 1rem;\r\n+    overflow: hidden;\r\n+  }\r\n+`;\r\n+\r\n+const EditModalContent = styled.div`\r\n+  background: ${props => props.theme?.colors?.background || '#000000'};\r\n+  border: 2px solid ${props => props.theme?.colors?.accent || '#800000'};\r\n+  border-radius: 12px;\r\n+  width: 100%;\r\n+  max-width: 400px;\r\n+  height: 100%; /* Take full available height */\r\n+  display: flex;\r\n+  flex-direction: column;\r\n+  position: relative;\r\n+  margin: auto;\r\n+  box-shadow: 0 20px 60px rgba(0, 0, 0, 0.5);\r\n+  overflow: hidden;\r\n+`;\r\n+\r\n+// Add new action buttons for the image overlay\r\n+const ImageActionButtons = styled.div`\r\n+  position: absolute;\r\n+  top: 0.5rem;\r\n+  left: 50%;\r\n+  transform: translateX(-50%);\r\n+  display: flex;\r\n+  gap: 0.75rem;\r\n+  z-index: 10;\r\n+`;\r\n+\r\n+const ImageActionButton = styled.button`\r\n+  width: 40px;\r\n+  height: 40px;\r\n+  border-radius: 50%;\r\n+  border: 2px solid ${props => props.theme?.colors?.accent || '#800000'};\r\n+  display: flex;\r\n+  align-items: center;\r\n+  justify-content: center;\r\n+  cursor: pointer;\r\n+  transition: all 0.3s ease;\r\n+  backdrop-filter: blur(10px);\r\n+  \r\n+  &.check {\r\n+    background: ${props => `${props.theme?.colors?.background || 'rgba(0, 0, 0, 0.8)'}E5`};\r\n+    color: #4CAF50;\r\n+    \r\n+    &:active {\r\n+      background: #4CAF50;\r\n+      color: white;\r\n+      transform: scale(0.95);\r\n+    }\r\n+  }\r\n+  \r\n+  &.close {\r\n+    background: ${props => `${props.theme?.colors?.background || 'rgba(0, 0, 0, 0.8)'}E5`};\r\n+    color: #ff4444;\r\n+    \r\n+    &:active {\r\n+      background: #ff4444;\r\n+      color: white;\r\n+      transform: scale(0.95);\r\n+    }\r\n+  }\r\n+\r\n+  svg {\r\n+    width: 20px;\r\n+    height: 20px;\r\n+  }\r\n+`;\r\n+\r\n+const EditModalImageSection = styled.div`\r\n+  height: 50%;\r\n+  position: relative;\r\n+  flex-shrink: 0;\r\n+  overflow: hidden;\r\n+  border-bottom: 1px solid ${props => `${props.theme?.colors?.accent}30` || 'rgba(255, 255, 255, 0.1)'};\r\n+`;\r\n+\r\n+const EditModalBody = styled.div`\r\n+  height: 50%;\r\n+  padding: 1rem;\r\n+  display: flex;\r\n+  flex-direction: column;\r\n+  gap: 0.8rem;\r\n+  overflow-y: auto;\r\n+  overflow-x: hidden;\r\n+  -webkit-overflow-scrolling: touch;\r\n+  \r\n+  &::-webkit-scrollbar {\r\n+    width: 4px;\r\n+  }\r\n+\r\n+  &::-webkit-scrollbar-track {\r\n+    background: transparent;\r\n+  }\r\n+\r\n+  &::-webkit-scrollbar-thumb {\r\n+    background: ${props => props.theme?.colors?.accent || '#800000'};\r\n+    border-radius: 2px;\r\n+  }\r\n+`;\r\n+\r\n+const SaveButtonContainer = styled.div`\r\n+  position: fixed;\r\n+  bottom: 1rem;\r\n+  right: 1rem;\r\n+  z-index: 1000; /* Changed from 100 to 1000 to be above modal */\r\n+  \r\n+  @media (min-width: 768px) {\r\n+    bottom: 2rem;\r\n+    right: 2rem;\r\n+  }\r\n+`;\r\n+\r\n+const ModalButtons = styled.div`\r\n+  position: sticky;\r\n+  bottom: 0;\r\n+  background: ${props => props.theme?.colors?.surface || 'rgba(255, 255, 255, 0.05)'};\r\n+  padding: 0.8rem 1.2rem; /* Changed from 1rem 1.5rem */\r\n+  border-top: 1px solid ${props => `${props.theme?.colors?.accent}30` || 'rgba(255, 255, 255, 0.1)'};\r\n+  display: flex;\r\n+  gap: 0.8rem; /* Changed from 1rem */\r\n+  justify-content: flex-end;\r\n+  z-index: 1;\r\n+`;\r\n+\r\n+const CancelButton = styled.button`\r\n+  background: transparent;\r\n+  color: ${props => props.theme?.colors?.text || '#FFFFFF'};\r\n+  border: 1px solid ${props => `${props.theme?.colors?.accent}60` || 'rgba(255, 255, 255, 0.4)'};\r\n+  padding: 0.6rem 1.2rem; /* Changed from 0.75rem 1.5rem */\r\n+  border-radius: 8px;\r\n+  font-weight: 600;\r\n+  cursor: pointer;\r\n+  transition: all 0.3s ease;\r\n+  font-size: 0.9rem; /* Added */\r\n+\r\n+  &:active {\r\n+    background: ${props => `${props.theme?.colors?.accent}20` || 'rgba(255, 255, 255, 0.1)'};\r\n+    transform: scale(0.98);\r\n+  }\r\n+`;\r\n+\r\n+// Add these new components\r\n+const TemplateCard = styled.div`\r\n+  background: ${props => props.theme?.colors?.surface || 'rgba(255, 255, 255, 0.05)'};\r\n+  border-radius: ${props => props.theme?.styles?.borderRadius || '12px'};\r\n+  overflow: hidden;\r\n+  border: 1px solid ${props => `${props.theme?.colors?.accent}30` || 'rgba(255, 255, 255, 0.1)'};\r\n+  position: relative;\r\n+  transition: all 0.3s ease;\r\n+  cursor: pointer;\r\n+  min-height: 280px;\r\n+  display: flex;\r\n+  flex-direction: column;\r\n+\r\n+  &:hover {\r\n+    transform: translateY(-5px);\r\n+    border-color: ${props => props.theme?.colors?.accent};\r\n+    box-shadow: 0 8px 20px rgba(0, 0, 0, 0.2);\r\n+\r\n+    .delete-button {\r\n+      opacity: 1;\r\n+    }\r\n+  }\r\n+\r\n+  @media (max-width: 640px) {\r\n+    min-height: 260px;\r\n+  }\r\n+`;\r\n+\r\n+const TemplateImageContainer = styled.div`\r\n+  position: relative;\r\n+  height: 180px;\r\n+  overflow: hidden;\r\n+  background: ${props => `${props.theme?.colors?.background || '#000000'}50`};\r\n+  display: flex;\r\n+  align-items: center;\r\n+  justify-content: center;\r\n+\r\n+  img {\r\n+    width: 100%;\r\n+    height: 100%;\r\n+    object-fit: cover;\r\n+  }\r\n+\r\n+  .placeholder {\r\n+    color: ${props => props.theme?.colors?.text || '#fff'};\r\n+    opacity: 0.3;\r\n+    display: flex;\r\n+    flex-direction: column;\r\n+    align-items: center;\r\n+    gap: 0.5rem;\r\n+  }\r\n+\r\n+  @media (max-width: 640px) {\r\n+    height: 160px;\r\n+  }\r\n+`;\r\n+\r\n+const TemplateContent = styled.div`\r\n+  padding: 1rem;\r\n+  flex: 1;\r\n+  display: flex;\r\n+  flex-direction: column;\r\n+  justify-content: space-between;\r\n+\r\n+  .item-name {\r\n+    font-size: 1rem;\r\n+    font-weight: 600;\r\n+    color: ${props => props.theme?.colors?.text || '#FFFFFF'};\r\n+    margin-bottom: 0.5rem;\r\n+    overflow: hidden;\r\n+    text-overflow: ellipsis;\r\n+    white-space: nowrap;\r\n+  }\r\n+\r\n+  .item-price {\r\n+    font-size: 1.2rem;\r\n+    font-weight: bold;\r\n+    color: ${props => props.theme?.colors?.accent || '#800000'};\r\n+    text-align: right;\r\n+  }\r\n+\r\n+  .empty-text {\r\n+    font-size: 0.9rem;\r\n+    color: ${props => `${props.theme?.colors?.text}60` || 'rgba(255, 255, 255, 0.4)'};\r\n+    font-style: italic;\r\n+  }\r\n+`;\r\n+\r\n+const Logo = styled.div`\r\n+  color: ${props => props.theme?.colors?.accent || '#800000'};\r\n+  font-family: ${props => props.theme?.fonts?.heading || \"'Impact', sans-serif\"};\r\n+  font-size: 1.4rem;\r\n+  letter-spacing: 1px;\r\n+  transform: skew(-5deg);\r\n+  cursor: pointer;\r\n+  flex-shrink: 0;\r\n+\r\n+  @media (min-width: 768px) {\r\n+    font-size: 2rem;\r\n+    letter-spacing: 2px;\r\n+  }\r\n+`;\r\n+\r\n+const HeaderControls = styled.div`\r\n+  display: flex;\r\n+  align-items: center;\r\n+  gap: 0.75rem;\r\n+`;\r\n+\r\n+const HeaderButton = styled.button`\r\n+  background: transparent;\r\n+  border: none;\r\n+  color: ${props => props.theme?.colors?.accent || '#800000'};\r\n+  padding: 0.5rem;\r\n+  cursor: pointer;\r\n+  display: flex;\r\n+  align-items: center;\r\n+  justify-content: center;\r\n+  border-radius: 50%;\r\n+  transition: all 0.3s ease;\r\n+  opacity: 0.8;\r\n+  \r\n+  &:active {\r\n+    transform: scale(0.9);\r\n+    opacity: 1;\r\n+  }\r\n+  \r\n+  @media (hover: hover) {\r\n+    &:hover {\r\n+      opacity: 1;\r\n+      background: ${props => `${props.theme?.colors?.accent}10` || 'rgba(128, 0, 0, 0.1)'};\r\n+    }\r\n+  }\r\n+  \r\n+  &.pinned {\r\n+    color: ${props => props.theme?.colors?.accent || '#800000'};\r\n+    opacity: 1;\r\n+  }\r\n+  \r\n+  &.spinning {\r\n+    animation: spin 0.5s ease-in-out;\r\n+  }\r\n+  \r\n+  @keyframes spin {\r\n+    from { transform: rotate(0deg); }\r\n+    to { transform: rotate(360deg); }\r\n+  }\r\n+  \r\n+  svg {\r\n+    width: 20px;\r\n+    height: 20px;\r\n+    \r\n+    @media (min-width: 768px) {\r\n+      width: 22px;\r\n+      height: 22px;\r\n+    }\r\n+  }\r\n+`;\r\n+\r\n+const MainContent = styled.div`\r\n+  max-width: 1200px;\r\n+  margin: 0 auto;\r\n+  padding: 64px 1rem 100px 1rem; /* Reduced from 80px by 20% */\r\n+  position: relative;\r\n+  z-index: 1;\r\n+  \r\n+  @media (min-width: 768px) {\r\n+    padding: 80px 2rem 2rem 2rem; /* Reduced from 6rem (96px) to 80px - approximately 20% less */\r\n+  }\r\n+`;\r\n+\r\n+const ShopProfileSection = styled.section`\r\n+  display: flex;\r\n+  flex-direction: column;\r\n+  align-items: center;\r\n+  text-align: center;\r\n+  max-width: 800px;\r\n+  margin: 1.5rem auto 3rem; /* Reduced from 2rem and 4rem */\r\n+  padding: 0.8rem; /* Reduced from 1rem */\r\n+\r\n+  @media (min-width: 768px) {\r\n+    padding: 1.5rem; /* Reduced from 2rem */\r\n+  }\r\n+\r\n+  .profile-image {\r\n+    margin-bottom: 1rem;\r\n+    width: 120px;\r\n+    height: 120px;\r\n+    border-radius: 50%;\r\n+    overflow: hidden;\r\n+    background: rgba(0, 0, 0, 0.1);\r\n+    border: 3px solid ${props => props.theme?.colors?.accent || '#800000'};\r\n+    box-shadow: 0 0 20px ${props => `${props.theme?.colors?.accent}40` || 'rgba(128, 0, 0, 0.25)'};\r\n+    \r\n+    @media (min-width: 768px) {\r\n+      width: 150px;\r\n+      height: 150px;\r\n+    }\r\n+    \r\n+    img {\r\n+      width: 100%;\r\n+      height: 100%;\r\n+      object-fit: cover;\r\n+    }\r\n+  }\r\n+\r\n+  .shop-name-container {\r\n+    width: 100%;\r\n+    margin: 0.5rem 0;\r\n+\r\n+    input {\r\n+      width: 100%;\r\n+      text-align: center;\r\n+      background: transparent;\r\n+      border: none;\r\n+      font-size: ${props => Math.min(props.fontSize || 2.5, 2)}rem;\r\n+      font-family: ${props => props.theme?.fonts?.heading};\r\n+      color: ${props => props.theme?.colors?.accent || '#800000'};\r\n+      outline: none;\r\n+      padding: 0.5rem;\r\n+      \r\n+      @media (min-width: 768px) {\r\n+        font-size: ${props => props.fontSize || '2.5rem'};\r\n+      }\r\n+\r\n+      &:focus {\r\n+        color: ${props => props.theme?.colors?.accent || '#800000'};\r\n+      }\r\n+\r\n+      &::placeholder {\r\n+        color: ${props => `${props.theme?.colors?.accent}80` || 'rgba(128, 0, 0, 0.5)'};\r\n+      }\r\n+    }\r\n+  }\r\n+\r\n+  .shop-description-container {\r\n+    width: 100%;\r\n+    margin-top: 0.25rem;\r\n+\r\n+    textarea {\r\n+      width: 100%;\r\n+      text-align: center;\r\n+      background: transparent;\r\n+      border: none;\r\n+      font-size: 1rem;\r\n+      font-family: ${props => props.theme?.fonts?.body};\r\n+      color: ${props => props.theme?.colors?.text};\r\n+      opacity: 0.8;\r\n+      outline: none;\r\n+      padding: 0.5rem;\r\n+      resize: none;\r\n+      min-height: 60px;\r\n+\r\n+      @media (min-width: 768px) {\r\n+        font-size: 1.1rem;\r\n+      }\r\n+\r\n+      &:focus {\r\n+        opacity: 1;\r\n+      }\r\n+\r\n+      &::placeholder {\r\n+        color: ${props => props.theme?.colors?.text};\r\n+        opacity: 0.5;\r\n+      }\r\n+    }\r\n+  }\r\n+`;\r\n+\r\n+// View toggle container\r\n+const ViewToggleContainer = styled.div`\r\n+  position: fixed;\r\n+  bottom: 1rem;\r\n+  left: 24%;\r\n+  transform: translateX(-50%);\r\n+  z-index: 90;\r\n+  display: flex;\r\n+  background: ${props => `${props.theme?.colors?.background || '#000000'}E5`};\r\n+  backdrop-filter: blur(10px);\r\n+  border-radius: 20px;\r\n+  border: 1px solid ${props => `${props.theme?.colors?.accent}40` || 'rgba(128, 0, 0, 0.4)'};\r\n+  padding: 0.25rem;\r\n+  \r\n+  @media (min-width: 768px) {\r\n+    bottom: 2rem;\r\n+  }\r\n+`;\r\n+\r\n+const ViewToggleButton = styled.button`\r\n+  background: ${props => props.active ? props.theme?.colors?.accent || '#800000' : 'transparent'};\r\n+  border: none;\r\n+  color: ${props => props.active ? 'white' : props.theme?.colors?.text || '#FFFFFF'};\r\n+  padding: 0.5rem 1rem;\r\n+  border-radius: 16px;\r\n+  cursor: pointer;\r\n+  display: flex;\r\n+  align-items: center;\r\n+  gap: 0.5rem;\r\n+  font-size: 0.9rem;\r\n+  transition: all 0.3s ease;\r\n+  \r\n+  &:active {\r\n+    transform: scale(0.95);\r\n+  }\r\n+`;\r\n+\r\n+// Mobile-friendly grid container\r\n+const ItemsContainer = styled.div`\r\n+  margin-top: 2rem;\r\n+`;\r\n+\r\n+// CHANGE 3: Update ItemCard styled component (around line 346)\r\n+// REPLACE the entire ItemCard component with:\r\n+const ItemCard = styled.div`\r\n+  background: ${props => props.theme?.colors?.surface || 'rgba(255, 255, 255, 0.05)'};\r\n+  border-radius: ${props => props.theme?.styles?.borderRadius || '12px'};\r\n+  overflow: hidden;\r\n+  border: 1px solid ${props => `${props.theme?.colors?.accent}30` || 'rgba(255, 255, 255, 0.1)'};\r\n+  position: relative;\r\n+  transition: all 0.3s;\r\n+  width: 100%;\r\n+  min-width: 320px;\r\n+\r\n+  &:hover {\r\n+    transform: translateY(-5px);\r\n+    border-color: ${props => props.theme?.colors?.accent};\r\n+  }\r\n+`;\r\n+\r\n+const ItemImageContainer = styled.div`\r\n+  position: relative;\r\n+  height: 250px;\r\n+  overflow: hidden;\r\n+  display: flex;\r\n+  align-items: center;\r\n+  justify-content: center;\r\n+  background: ${props => `${props.theme?.colors?.background || '#000000'}50`};\r\n+\r\n+  @media (min-width: 768px) {\r\n+    height: 280px;\r\n+  }\r\n+\r\n+  .image-container {\r\n+    width: 100%;\r\n+    height: 100%;\r\n+    position: relative;\r\n+    touch-action: pan-y;\r\n+  }\r\n+\r\n+  .placeholder {\r\n+    width: 100%;\r\n+    height: 100%;\r\n+    display: flex;\r\n+    flex-direction: column;\r\n+    align-items: center;\r\n+    justify-content: center;\r\n+    gap: 0.5rem;\r\n+    color: ${props => props.theme?.colors?.text || '#fff'};\r\n+    opacity: 0.5;\r\n+    cursor: pointer;\r\n+    transition: all 0.3s ease;\r\n+    \r\n+    &:hover {\r\n+      opacity: 0.8;\r\n+      background: ${props => `${props.theme?.colors?.accent}10` || 'rgba(255, 255, 255, 0.05)'};\r\n+    }\r\n+    \r\n+    span {\r\n+      font-size: 0.9rem;\r\n+      font-family: ${props => props.theme?.fonts?.body || \"'Inter', sans-serif\"};\r\n+    }\r\n+  }\r\n+\r\n+  .carousel-arrow {\r\n+    position: absolute;\r\n+    top: 50%;\r\n+    transform: translateY(-50%);\r\n+    background: ${props => `${props.theme?.colors?.background || '#000000'}80`};\r\n+    border: 1px solid ${props => `${props.theme?.colors?.accent}40` || 'rgba(255, 255, 255, 0.2)'};\r\n+    border-radius: 50%;\r\n+    width: 32px;\r\n+    height: 32px;\r\n+    display: flex;\r\n+    align-items: center;\r\n+    justify-content: center;\r\n+    color: ${props => props.theme?.colors?.text || 'white'};\r\n+    cursor: pointer;\r\n+    z-index: 2;\r\n+    opacity: 0.8;\r\n+    transition: all 0.3s ease;\r\n+\r\n+    @media (max-width: 767px) {\r\n+      width: 28px;\r\n+      height: 28px;\r\n+      opacity: 0.9;\r\n+      \r\n+      &:active {\r\n+        transform: translateY(-50%) scale(0.9);\r\n+      }\r\n+    }\r\n+\r\n+    &:hover {\r\n+      background: ${props => `${props.theme?.colors?.accent}40` || 'rgba(0, 0, 0, 0.7)'};\r\n+      opacity: 1;\r\n+    }\r\n+\r\n+    &.left {\r\n+      left: 10px;\r\n+    }\r\n+\r\n+    &.right {\r\n+      right: 10px;\r\n+    }\r\n+  }\r\n+\r\n+  .image-dots {\r\n+    position: absolute;\r\n+    bottom: 0.5rem;\r\n+    left: 50%;\r\n+    transform: translateX(-50%);\r\n+    display: flex;\r\n+    gap: 0.25rem;\r\n+    z-index: 2;\r\n+    \r\n+    .dot {\r\n+      width: 6px;\r\n+      height: 6px;\r\n+      border-radius: 50%;\r\n+      background: ${props => props.theme?.colors?.text || '#FFFFFF'};\r\n+      opacity: 0.3;\r\n+      transition: opacity 0.3s ease;\r\n+      \r\n+      &.active {\r\n+        opacity: 1;\r\n+      }\r\n+    }\r\n+  }\r\n+`;\r\n+\r\n+const ItemContent = styled.div`\r\n+  padding: 1rem;\r\n+  display: flex;\r\n+  flex-direction: column;\r\n+  gap: 0.75rem;\r\n+  \r\n+  @media (min-width: 768px) {\r\n+    padding: 1.5rem;\r\n+    gap: 1rem;\r\n+  }\r\n+`;\r\n+\r\n+const ItemHeader = styled.div`\r\n+  display: flex;\r\n+  justify-content: space-between;\r\n+  align-items: center;\r\n+  margin-bottom: 0.5rem;\r\n+  cursor: pointer;\r\n+  \r\n+  h4 {\r\n+    margin: 0;\r\n+    font-size: 1rem;\r\n+    color: ${props => props.theme?.colors?.text || '#FFFFFF'};\r\n+    \r\n+    @media (min-width: 768px) {\r\n+      font-size: 1.1rem;\r\n+    }\r\n+  }\r\n+`;\r\n+\r\n+const ExpandButton = styled.button`\r\n+  background: transparent;\r\n+  border: none;\r\n+  color: ${props => props.theme?.colors?.accent || '#800000'};\r\n+  cursor: pointer;\r\n+  padding: 0.25rem;\r\n+  display: flex;\r\n+  align-items: center;\r\n+  justify-content: center;\r\n+  border-radius: 50%;\r\n+  transition: all 0.3s ease;\r\n+  \r\n+  &:active {\r\n+    transform: scale(0.9);\r\n+  }\r\n+`;\r\n+\r\n+const ItemDetails = styled.div`\r\n+  max-height: ${props => props.expanded ? '500px' : '0'};\r\n+  overflow: hidden;\r\n+  transition: max-height 0.3s ease;\r\n+  \r\n+  .details-content {\r\n+    padding-top: ${props => props.expanded ? '1rem' : '0'};\r\n+    display: flex;\r\n+    flex-direction: column;\r\n+    gap: 0.75rem;\r\n+  }\r\n+`;\r\n+\r\n+const DeleteButton = styled.button`\r\n+  position: absolute;\r\n+  top: 10px;\r\n+  right: 10px;\r\n+  background: rgba(0, 0, 0, 0.5);\r\n+  border: none;\r\n+  border-radius: 50%;\r\n+  width: 30px;\r\n+  height: 30px;\r\n+  display: flex;\r\n+  align-items: center;\r\n+  justify-content: center;\r\n+  color: white;\r\n+  cursor: pointer;\r\n+  z-index: 10;\r\n+  opacity: 0.7;\r\n+  \r\n+  &:hover {\r\n+    opacity: 1;\r\n+    background: rgba(255, 0, 0, 0.5);\r\n+  }\r\n+`;\r\n+\r\n+const AddItemButton = styled.button`\r\n+  background: ${props => props.theme?.colors?.accent || '#800000'};\r\n+  color: white;\r\n+  border: none;\r\n+  border-radius: ${props => props.theme?.styles?.borderRadius || '8px'};\r\n+  padding: 1rem 1.5rem;\r\n+  font-weight: 600;\r\n+  font-family: ${props => props.theme?.fonts?.heading || \"'Space Grotesk', sans-serif\"};\r\n+  display: flex;\r\n+  align-items: center;\r\n+  gap: 0.5rem;\r\n+  cursor: pointer;\r\n+  margin: 1rem auto 2rem;\r\n+  transition: all 0.3s ease;\r\n+  justify-content: center;\r\n+  width: 100%;\r\n+  max-width: 300px;\r\n+\r\n+  @media (min-width: 768px) {\r\n+    width: auto;\r\n+    max-width: none;\r\n+  }\r\n+\r\n+  &:hover {\r\n+    transform: translateY(-2px);\r\n+    box-shadow: 0 6px 15px ${props => `${props.theme?.colors?.accent}60` || 'rgba(128, 0, 0, 0.4)'};\r\n+  }\r\n+\r\n+  &:active {\r\n+    transform: translateY(1px);\r\n+  }\r\n+`;\r\n+\r\n+const CategorySelect = styled.select`\r\n+  width: 100%;\r\n+  background: #1a1a1a !important;\r\n+  border: 1px solid ${props => `${props.theme?.colors?.accent}30` || 'rgba(255, 255, 255, 0.1)'};\r\n+  border-radius: ${props => props.theme?.styles?.borderRadius || '8px'};\r\n+  padding: 0.75rem;\r\n+  color: #ffffff !important;\r\n+  font-family: ${props => props.theme?.fonts?.body || \"'Inter', sans-serif\"};\r\n+  \r\n+  &:focus {\r\n+    outline: none;\r\n+    border-color: ${props => props.theme?.colors?.accent || '#800000'};\r\n+  }\r\n+  \r\n+  option {\r\n+    background: #1a1a1a !important;\r\n+    color: #ffffff !important;\r\n+    padding: 0.5rem;\r\n+  }\r\n+`;\r\n+\r\n+\r\n+const ActionButton = styled.button`\r\n+  background: ${props => props.theme?.colors?.accent || '#800000'};\r\n+  color: white;\r\n+  border: none;\r\n+  padding: 1rem 2rem;\r\n+  border-radius: 30px;\r\n+  font-weight: bold;\r\n+  cursor: pointer;\r\n+  transition: all 0.3s;\r\n+  text-transform: uppercase;\r\n+  letter-spacing: 1px;\r\n+  font-family: ${props => props.theme?.fonts?.body || 'sans-serif'};\r\n+  display: flex;\r\n+  align-items: center;\r\n+  gap: 0.5rem;\r\n+  box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);\r\n+\r\n+  @media (max-width: 767px) {\r\n+    padding: 0.8rem 1.5rem;\r\n+    font-size: 0.9rem;\r\n+    letter-spacing: 0.5px;\r\n+  }\r\n+\r\n+  &:hover {\r\n+    transform: translateY(-2px);\r\n+    box-shadow: 0 6px 20px ${props => `${props.theme?.colors?.accent}4D` || 'rgba(128, 0, 0, 0.3)'};\r\n+  }\r\n+\r\n+  &:active {\r\n+    transform: translateY(1px);\r\n+  }\r\n+\r\n+  &:disabled {\r\n+    opacity: 0.5;\r\n+    cursor: not-allowed;\r\n+    transform: none;\r\n+  }\r\n+`;\r\n+\r\n+const TabControlsContainer = styled.div`\r\n+  display: flex;\r\n+  justify-content: center;\r\n+  margin: 2rem 0;\r\n+  padding: 0 1rem;\r\n+  \r\n+  @media (min-width: 768px) {\r\n+    margin: 3rem 0;\r\n+    padding: 0;\r\n+  }\r\n+`;\r\n+\r\n+const GlobalStyles = createGlobalStyle`\r\n+  .ping {\r\n+    position: absolute;\r\n+    width: 2px;\r\n+    height: 2px;\r\n+    border-radius: 50%;\r\n+    background: #800000;\r\n+    pointer-events: none;\r\n+    \r\n+    /* Disable on mobile for performance */\r\n+    @media (max-width: 767px) {\r\n+      display: none;\r\n+    }\r\n+  }\r\n+\r\n+  .ping::before {\r\n+    content: '';\r\n+    position: absolute;\r\n+    top: 50%;\r\n+    left: 50%;\r\n+    width: 200px;\r\n+    height: 200px;\r\n+    transform: translate(-50%, -50%);\r\n+    border-radius: 50%;\r\n+    background: radial-gradient(circle, rgba(128, 0, 0, 0.4) 0%, transparent 70%);\r\n+    animation: ping 2s ease-out forwards;\r\n+  }\r\n+\r\n+  @keyframes ping {\r\n+    0% {\r\n+      width: 0px;\r\n+      height: 0px;\r\n+      opacity: 1;\r\n+    }\r\n+    100% {\r\n+      width: 200px;\r\n+      height: 200px;\r\n+      opacity: 0;\r\n+    }\r\n+  }\r\n+`;\r\n+\r\n+const ItemsGrid = styled.div`\r\n+  display: grid;\r\n+  grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));\r\n+  gap: 1rem;\r\n+  \r\n+  @media (min-width: 480px) {\r\n+    gap: 1.5rem;\r\n+    grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));\r\n+  }\r\n+  \r\n+  @media (min-width: 768px) {\r\n+    gap: 2rem;\r\n+    grid-template-columns: repeat(auto-fill, minmax(380px, 1fr));\r\n+  }\r\n+  \r\n+  @media (min-width: 1024px) {\r\n+    grid-template-columns: repeat(auto-fill, minmax(400px, 1fr));\r\n+  }\r\n+\r\n+  /* Mobile template card grid - 2 items per row */\r\n+  @media (max-width: 767px) {\r\n+    grid-template-columns: repeat(2, 1fr); /* Changed from repeat(3, 1fr) */\r\n+    gap: 0.75rem;\r\n+    padding: 0 0.5rem;\r\n+  }\r\n+`;\r\n+\r\n+const MobileTemplateImageContainer = styled.div`\r\n+  position: relative;\r\n+  height: 120px;\r\n+  overflow: hidden;\r\n+  background: ${props => `${props.theme?.colors?.background || '#000000'}50`};\r\n+  display: flex;\r\n+  align-items: center;\r\n+  justify-content: center;\r\n+\r\n+  img {\r\n+    width: 100%;\r\n+    height: 100%;\r\n+    object-fit: cover;\r\n+  }\r\n+\r\n+  .placeholder {\r\n+    color: ${props => props.theme?.colors?.text || '#fff'};\r\n+    opacity: 0.3;\r\n+    display: flex;\r\n+    flex-direction: column;\r\n+    align-items: center;\r\n+    gap: 0.25rem;\r\n+\r\n+    svg {\r\n+      width: 24px;\r\n+      height: 24px;\r\n+    }\r\n+\r\n+    span {\r\n+      font-size: 0.75rem; /* Changed from 0.7rem and made slightly larger */\r\n+      font-weight: 500; /* Added for better readability */\r\n+    }\r\n+  }\r\n+\r\n+  .mobile-carousel-arrow {\r\n+    position: absolute;\r\n+    top: 50%;\r\n+    transform: translateY(-50%);\r\n+    background: ${props => `${props.theme?.colors?.background || 'rgba(0, 0, 0, 0.7)'}DD`};\r\n+    border: 1px solid ${props => `${props.theme?.colors?.accent}40` || 'rgba(255, 255, 255, 0.2)'};\r\n+    border-radius: 50%;\r\n+    width: 24px;\r\n+    height: 24px;\r\n+    display: flex;\r\n+    align-items: center;\r\n+    justify-content: center;\r\n+    color: ${props => props.theme?.colors?.text || 'white'};\r\n+    cursor: pointer;\r\n+    z-index: 3;\r\n+    opacity: 0.8;\r\n+    transition: all 0.2s ease;\r\n+\r\n+    &:active {\r\n+      opacity: 1;\r\n+      transform: translateY(-50%) scale(0.9);\r\n+      background: ${props => props.theme?.colors?.accent || '#800000'};\r\n+    }\r\n+\r\n+    &.left {\r\n+      left: 0.25rem;\r\n+    }\r\n+\r\n+    &.right {\r\n+      right: 0.25rem;\r\n+    }\r\n+\r\n+    svg {\r\n+      width: 12px;\r\n+      height: 12px;\r\n+    }\r\n+  }\r\n+\r\n+  .image-dots {\r\n+    position: absolute;\r\n+    bottom: 0.25rem;\r\n+    left: 50%;\r\n+    transform: translateX(-50%);\r\n+    display: flex;\r\n+    gap: 0.2rem;\r\n+    z-index: 2;\r\n+    \r\n+    .dot {\r\n+      width: 4px;\r\n+      height: 4px;\r\n+      border-radius: 50%;\r\n+      background: ${props => props.theme?.colors?.text || '#FFFFFF'};\r\n+      opacity: 0.3;\r\n+      transition: opacity 0.3s ease;\r\n+      \r\n+      &.active {\r\n+        opacity: 1;\r\n+      }\r\n+    }\r\n+  }\r\n+`;\r\n+\r\n+// Mobile Template Card (only shows on mobile)\r\n+const MobileTemplateCard = styled.div`\r\n+  display: none;\r\n+\r\n+  @media (max-width: 767px) {\r\n+    display: flex;\r\n+    flex-direction: column;\r\n+    background: ${props => props.theme?.colors?.surface || 'rgba(255, 255, 255, 0.05)'};\r\n+    border-radius: ${props => props.theme?.styles?.borderRadius || '12px'};\r\n+    overflow: hidden;\r\n+    border: 1px solid ${props => `${props.theme?.colors?.accent}30` || 'rgba(255, 255, 255, 0.1)'};\r\n+    position: relative;\r\n+    transition: all 0.3s ease;\r\n+    cursor: pointer;\r\n+    min-height: 200px;\r\n+\r\n+    &:active {\r\n+      transform: scale(0.98);\r\n+      border-color: ${props => props.theme?.colors?.accent};\r\n+    }\r\n+  }\r\n+`;\r\n+\r\n+const MobileTemplateContent = styled.div`\r\n+  padding: 0.5rem;\r\n+  flex: 1;\r\n+  display: flex;\r\n+  flex-direction: column;\r\n+  justify-content: space-between;\r\n+\r\n+  .item-name {\r\n+    font-size: 0.75rem;\r\n+    font-weight: 600;\r\n+    color: ${props => props.theme?.colors?.text || '#FFFFFF'};\r\n+    margin-bottom: 0.25rem;\r\n+    overflow: hidden;\r\n+    text-overflow: ellipsis;\r\n+    white-space: nowrap;\r\n+    line-height: 1.2;\r\n+  }\r\n+\r\n+  .item-price {\r\n+    font-size: 0.85rem;\r\n+    font-weight: bold;\r\n+    color: ${props => props.theme?.colors?.accent || '#800000'};\r\n+    text-align: right;\r\n+  }\r\n+\r\n+  .empty-text {\r\n+    font-size: 0.7rem;\r\n+    color: ${props => `${props.theme?.colors?.text}60` || 'rgba(255, 255, 255, 0.4)'};\r\n+    font-style: italic;\r\n+  }\r\n+`;\r\n+\r\n+const MobileDeleteButton = styled.button`\r\n+  position: absolute;\r\n+  top: 0.25rem;\r\n+  right: 0.25rem;\r\n+  background: ${props => `${props.theme?.colors?.background || 'rgba(0, 0, 0, 0.7)'}DD`};\r\n+  border: 1px solid ${props => `${props.theme?.colors?.accent}60` || 'rgba(255, 255, 255, 0.3)'};\r\n+  border-radius: 50%;\r\n+  width: 24px;\r\n+  height: 24px;\r\n+  display: flex;\r\n+  align-items: center;\r\n+  justify-content: center;\r\n+  color: #ff4444;\r\n+  cursor: pointer;\r\n+  z-index: 4;\r\n+  opacity: 0.9;\r\n+  transition: all 0.2s ease;\r\n+\r\n+  &:active {\r\n+    transform: scale(0.9);\r\n+    background: ${props => props.theme?.colors?.accent || '#800000'};\r\n+    color: white;\r\n+  }\r\n+\r\n+  svg {\r\n+    width: 12px;\r\n+    height: 12px;\r\n+  }\r\n+`;\r\n+\r\n+\r\n+// Desktop card - hide on mobile\r\n+const DesktopItemCard = styled(ItemCard)`\r\n+  @media (max-width: 767px) {\r\n+    display: none;\r\n+  }\r\n+`;\r\n+\r\n+// Main Component\r\n+const LiveShopCreation = () => {\r\n+  const navigate = useNavigate();\r\n+  const { saveTempStore } = useTempStore();\r\n+  const { isAuthenticated } = useAuth();\r\n+  \r\n+  // State management\r\n+  const [activeTab, setActiveTab] = useState('shop');\r\n+  const [selectedTheme, setSelectedTheme] = useState(WELCOME_STYLES.STYLE_1);\r\n+  const [shopNameFontSize, setShopNameFontSize] = useState(2.5);\r\n+  const [isPinned, setIsPinned] = useState(false);\r\n+  const [isRefreshing, setIsRefreshing] = useState(false);\r\n+  const [expandedItems, setExpandedItems] = useState(new Set());\r\n+  const [validationErrors, setValidationErrors] = useState({});\r\n+  const [editingItem, setEditingItem] = useState(null);\r\n+\r\n+  // Add these new state variables at the top of LiveShopCreation component (around line 1000)\r\n+  const [shopNameError, setShopNameError] = useState('');\r\n+  const [checkingUsername, setCheckingUsername] = useState(false);\r\n+  const [usernameAvailable, setUsernameAvailable] = useState(null);\r\n+\r\n+  const [shopData, setShopData] = useState({\r\n+    name: 'MyBrandName', // ADD DEFAULT NAME HERE\r\n+    description: '',\r\n+    profile: null,\r\n+    mission: '',\r\n+    items: [{\r\n+      id: Date.now().toString(),\r\n+      name: 'MyItemName',\r\n+      price: '',\r\n+      description: '',\r\n+      category: 'Other',\r\n+      images: [null, null, null],\r\n+      currentImageIndex: 0,\r\n+      address: '',\r\n+      coordinates: null,\r\n+      tags: [],\r\n+      quantity: 1\r\n+    }],\r\n+    layout: {\r\n+      namePosition: 'left',\r\n+      tabPosition: 'top'\r\n+    }\r\n+  });\r\n+\r\n+  // Add this function to check username availability\r\n+  // UPDATE checkUsernameAvailability function (around line 1050)\r\n+const checkUsernameAvailability = async (shopName) => {\r\n+  // Skip check for empty or default names\r\n+  if (!shopName || shopName.trim() === '' || shopName === 'MyBrandName') {\r\n+    setShopNameError('');\r\n+    setUsernameAvailable(null);\r\n+    return;\r\n+  }\r\n+\r\n+  setCheckingUsername(true);\r\n+  setShopNameError('');\r\n+  setUsernameAvailable(null);\r\n+\r\n+  try {\r\n+    // Generate potential username from shop name\r\n+    const potentialUsername = shopName\r\n+      .toLowerCase()\r\n+      .replace(/[^a-z0-9]/g, '')\r\n+      .substring(0, 20);\r\n+\r\n+    if (!potentialUsername) {\r\n+      setShopNameError('Shop name must contain letters or numbers');\r\n+      setUsernameAvailable(false);\r\n+      setCheckingUsername(false);\r\n+      return;\r\n+    }\r\n+\r\n+    // Check if username exists\r\n+    const { usernameExists } = await import('../../firebase/firebaseService');\r\n+    const exists = await usernameExists(potentialUsername);\r\n+\r\n+    if (exists) {\r\n+      setShopNameError('This shop name is already taken');\r\n+      setUsernameAvailable(false);\r\n+    } else {\r\n+      setUsernameAvailable(true);\r\n+    }\r\n+  } catch (error) {\r\n+    console.error('Error checking username:', error);\r\n+    setShopNameError('Error checking availability');\r\n+    setUsernameAvailable(false);\r\n+  } finally {\r\n+    setCheckingUsername(false);\r\n+  }\r\n+};\r\n+\r\n+  // Add debounced username check\r\n+  // UPDATE the debounced username check useEffect (around line 1100)\r\n+useEffect(() => {\r\n+  // Don't check on initial mount or if name is the default placeholder\r\n+  if (!shopData?.name || shopData.name === 'MyBrandName') {\r\n+    setShopNameError('');\r\n+    setUsernameAvailable(null);\r\n+    return;\r\n+  }\r\n+\r\n+  const timer = setTimeout(() => {\r\n+    checkUsernameAvailability(shopData.name);\r\n+  }, 500); // Check 500ms after user stops typing\r\n+\r\n+  return () => clearTimeout(timer);\r\n+}, [shopData?.name]); // Add optional chaining\r\n+\r\n+\r\n+  \r\n+\r\n+  // Add this useEffect for browser back button handling\r\n+  useEffect(() => {\r\n+    const handlePopState = (event) => {\r\n+      if (editingItem) {\r\n+        event.preventDefault();\r\n+        setEditingItem(null);\r\n+        // Push state again so user doesn't accidentally leave the page\r\n+        window.history.pushState(null, '', window.location.pathname);\r\n+      }\r\n+    };\r\n+\r\n+    // Push initial state when modal opens\r\n+    if (editingItem) {\r\n+      window.history.pushState(null, '', window.location.pathname);\r\n+      window.addEventListener('popstate', handlePopState);\r\n+    }\r\n+\r\n+    return () => {\r\n+      window.removeEventListener('popstate', handlePopState);\r\n+    };\r\n+  }, [editingItem]);\r\n+\r\n+  // Add these handler functions inside your component\r\n+  const handleMobileNextImage = (e, itemId) => {\r\n+    e.stopPropagation();\r\n+    const item = shopData.items.find(i => i.id === itemId);\r\n+    if (item && item.images) {\r\n+      const validImages = item.images.filter(Boolean);\r\n+      if (validImages.length > 1) {\r\n+        const currentIndex = item.currentImageIndex || 0;\r\n+        const newIndex = (currentIndex + 1) % validImages.length;\r\n+        handleItemUpdate(itemId, { currentImageIndex: newIndex });\r\n+      }\r\n+    }\r\n+  };\r\n+\r\n+  const handleMobilePrevImage = (e, itemId) => {\r\n+    e.stopPropagation();\r\n+    const item = shopData.items.find(i => i.id === itemId);\r\n+    if (item && item.images) {\r\n+      const validImages = item.images.filter(Boolean);\r\n+      if (validImages.length > 1) {\r\n+        const currentIndex = item.currentImageIndex || 0;\r\n+        const newIndex = (currentIndex - 1 + validImages.length) % validImages.length;\r\n+        handleItemUpdate(itemId, { currentImageIndex: newIndex });\r\n+      }\r\n+    }\r\n+  };\r\n+\r\n+  // Theme management\r\n+  useEffect(() => {\r\n+    const pinnedStyleId = localStorage.getItem('pinnedStyleId');\r\n+    \r\n+    if (pinnedStyleId) {\r\n+      const pinnedStyle = Object.values(WELCOME_STYLES).find(\r\n+        style => style.id.toString() === pinnedStyleId\r\n+      );\r\n+\r\n+      if (pinnedStyle) {\r\n+        setSelectedTheme(pinnedStyle);\r\n+        setIsPinned(true);\r\n+        return;\r\n+      }\r\n+    }\r\n+\r\n+    const styles = Object.values(WELCOME_STYLES);\r\n+    const randomStyle = styles[Math.floor(Math.random() * styles.length)];\r\n+    setSelectedTheme(randomStyle);\r\n+  }, []);\r\n+\r\n+  const refreshTheme = () => {\r\n+    if (isRefreshing) return;\r\n+    \r\n+    setIsRefreshing(true);\r\n+    \r\n+    const styles = Object.values(WELCOME_STYLES);\r\n+    const otherStyles = styles.filter(style => style.id !== selectedTheme.id);\r\n+    \r\n+    if (otherStyles.length > 0) {\r\n+      const randomStyle = otherStyles[Math.floor(Math.random() * otherStyles.length)];\r\n+      setSelectedTheme(randomStyle);\r\n+\r\n+      if (isPinned) {\r\n+        localStorage.removeItem('pinnedStyleId');\r\n+        setIsPinned(false);\r\n+      }\r\n+    }\r\n+\r\n+    setTimeout(() => setIsRefreshing(false), 500);\r\n+  };\r\n+\r\n+  const togglePinStyle = () => {\r\n+    if (isPinned) {\r\n+      localStorage.removeItem('pinnedStyleId');\r\n+      setIsPinned(false);\r\n+\r\n+      const styles = Object.values(WELCOME_STYLES).filter(\r\n+        style => style.id !== selectedTheme.id\r\n+      );\r\n+\r\n+      if (styles.length > 0) {\r\n+        const randomStyle = styles[Math.floor(Math.random() * styles.length)];\r\n+        setSelectedTheme(randomStyle);\r\n+      }\r\n+    } else {\r\n+      localStorage.setItem('pinnedStyleId', selectedTheme.id.toString());\r\n+      setIsPinned(true);\r\n+    }\r\n+  };\r\n+\r\n+  const handleLogout = async () => {\r\n+    try {\r\n+      await signOut(auth);\r\n+      navigate('/');\r\n+    } catch (error) {\r\n+      console.error('Error signing out:', error);\r\n+    }\r\n+  };\r\n+\r\n+  // Item management\r\n+  const handleShopDataChange = (field, value) => {\r\n+    setShopData(prev => ({\r\n+      ...prev,\r\n+      [field]: value\r\n+    }));\r\n+  };\r\n+\r\n+  const handleItemAdd = () => {\r\n+    const newItem = {\r\n+      id: Date.now().toString(),\r\n+      name: 'MyItemName',\r\n+      price: '',\r\n+      description: '',\r\n+      category: 'Other',\r\n+      images: [null, null, null],\r\n+      currentImageIndex: 0,\r\n+      address: '',\r\n+      coordinates: null,\r\n+      tags: [],\r\n+      quantity: 1\r\n+    };\r\n+\r\n+    // Add to beginning instead of end\r\n+    setShopData(prev => ({\r\n+      ...prev,\r\n+      items: [newItem, ...prev.items]\r\n+    }));\r\n+\r\n+    // Auto-expand on desktop\r\n+    if (window.innerWidth >= 768) {\r\n+      setExpandedItems(new Set([newItem.id]));\r\n+    }\r\n+  };\r\n+\r\n+  const handleItemUpdate = (itemId, updates) => {\r\n+    setShopData(prev => ({\r\n+      ...prev,\r\n+      items: prev.items.map(item => \r\n+        item.id === itemId ? { ...item, ...updates } : item\r\n+      )\r\n+    }));\r\n+  };\r\n+\r\n+  const handleItemDelete = (itemId) => {\r\n+    setShopData(prev => ({\r\n+      ...prev,\r\n+      items: prev.items.filter(item => item.id !== itemId)\r\n+    }));\r\n+  };\r\n+\r\n+  const toggleItemExpansion = (itemId) => {\r\n+    setExpandedItems(prev => {\r\n+      const newSet = new Set(prev);\r\n+      if (newSet.has(itemId)) {\r\n+        newSet.delete(itemId);\r\n+      } else {\r\n+        newSet.add(itemId);\r\n+      }\r\n+      return newSet;\r\n+    });\r\n+  };\r\n+\r\n+  // Update handleSave function (around line 1200)\r\n+  // UPDATE handleSave function in LiveShopCreation.js (around line 1200)\r\n+const handleSave = async () => {\r\n+  // Check if shop name is still default or empty\r\n+  let finalShopName = shopData.name;\r\n+  \r\n+  if (!finalShopName || finalShopName === 'MyBrandName') {\r\n+    const adjectives = ['Cool', 'Great', 'Super', 'Amazing', 'Awesome', 'Epic', 'Prime', 'Elite'];\r\n+    const nouns = ['Shop', 'Store', 'Market', 'Bazaar', 'Outlet', 'Hub', 'Spot', 'Place'];\r\n+    const randomAdjective = adjectives[Math.floor(Math.random() * adjectives.length)];\r\n+    const randomNoun = nouns[Math.floor(Math.random() * nouns.length)];\r\n+    const randomNumber = Math.floor(Math.random() * 1000);\r\n+    \r\n+    finalShopName = `${randomAdjective}${randomNoun}${randomNumber}`;\r\n+  }\r\n+\r\n+  if (shopNameError || usernameAvailable === false) {\r\n+    alert('Please choose a different shop name - this one is already taken');\r\n+    return;\r\n+  }\r\n+\r\n+  const shopValidation = validateShopData({ ...shopData, name: finalShopName });\r\n+  const itemsValidation = validateAllItems(shopData.items);\r\n+\r\n+  if (!shopValidation.isValid || !itemsValidation.isValid) {\r\n+    setValidationErrors({\r\n+      shop: shopValidation.errors,\r\n+      items: itemsValidation.itemErrors\r\n+    });\r\n+\r\n+    window.scrollTo({ top: 0, behavior: 'smooth' });\r\n+    alert('Please fix validation errors before saving');\r\n+    return;\r\n+  }\r\n+\r\n+  // Prepare data with proper profile handling\r\n+  const dataToSave = {\r\n+    ...shopData,\r\n+    name: finalShopName,\r\n+    theme: selectedTheme,\r\n+    layout: {\r\n+      namePosition: shopData.layout.namePosition,\r\n+      tabPosition: 'top',\r\n+      nameSize: shopNameFontSize\r\n+    },\r\n+    createdAt: new Date().toISOString()\r\n+  };\r\n+\r\n+  // Handle profile image - ensure it's in the correct format\r\n+  if (shopData.profile) {\r\n+    if (typeof shopData.profile === 'string') {\r\n+      // Already a URL\r\n+      dataToSave.profile = shopData.profile;\r\n+    } else if (shopData.profile.file) {\r\n+      // File object with preview\r\n+      dataToSave.profile = {\r\n+        file: shopData.profile.file,\r\n+        preview: shopData.profile.preview,\r\n+        type: shopData.profile.type,\r\n+        name: shopData.profile.name\r\n+      };\r\n+    }\r\n+  }\r\n+\r\n+  // Generate username\r\n+  if (dataToSave.name) {\r\n+    try {\r\n+      const { generateUsername } = await import('../../firebase/firebaseService');\r\n+      dataToSave.username = await generateUsername(dataToSave.name);\r\n+    } catch (error) {\r\n+      console.error('Error generating username:', error);\r\n+      dataToSave.username = dataToSave.name\r\n+        .toLowerCase()\r\n+        .replace(/[^a-z0-9]/g, '')\r\n+        .substring(0, 20) || 'shop';\r\n+    }\r\n+  }\r\n+\r\n+  console.log('Saving data with profile:', dataToSave.profile); // Debug log\r\n+\r\n+  saveTempStore(dataToSave);\r\n+\r\n+  navigate('/auth', {\r\n+    state: { \r\n+      mode: 'signup', \r\n+      tempData: dataToSave \r\n+    }\r\n+  });\r\n+};\r\n+\r\n+  const renderShopView = () => (\r\n+    <MainContent>\r\n+      <ShopProfileSection fontSize={shopNameFontSize}>\r\n+        <div className=\"profile-image\">\r\n+          <EditableImage\r\n+            value={shopData.profile}\r\n+            onChange={(value) => handleShopDataChange('profile', value)}\r\n+            theme={selectedTheme}\r\n+            round\r\n+            width=\"100%\"\r\n+            height=\"100%\"\r\n+          />\r\n+        </div>\r\n+        <div className=\"shop-name-container\">\r\n+          <ShopNameInputContainer>\r\n+            <ShopNameInput\r\n+              value={shopData?.name || ''} // Add optional chaining and fallback\r\n+              onChange={(e) => {\r\n+                handleShopDataChange('name', e.target.value);\r\n+              }}\r\n+              placeholder=\"MyBrandName*\" // Show asterisk in placeholder\r\n+              fontSize={shopNameFontSize}\r\n+              theme={selectedTheme}\r\n+              isError={!!shopNameError}\r\n+            />\r\n+            {checkingUsername && (\r\n+              <ShopNameError theme={selectedTheme}>\r\n+                Checking availability...\r\n+              </ShopNameError>\r\n+            )}\r\n+            {shopNameError && (\r\n+              <ShopNameError theme={selectedTheme}>\r\n+                {shopNameError}\r\n+              </ShopNameError>\r\n+            )}\r\n+            {usernameAvailable && !checkingUsername && shopData.name !== 'MyBrandName' && (\r\n+              <ShopNameSuccess theme={selectedTheme}>\r\n+                âœ“ Shop name available\r\n+              </ShopNameSuccess>\r\n+            )}\r\n+          </ShopNameInputContainer>\r\n+        </div>\r\n+        <div className=\"shop-description-container\">\r\n+          <ValidatedEditableText\r\n+            value={shopData.description}\r\n+            onChange={(value) => handleShopDataChange('description', value)}\r\n+            placeholder=\"Shop Description\"\r\n+            multiline={false}\r\n+            validationRules={VALIDATION_RULES.shop.description}\r\n+            theme={selectedTheme}\r\n+          />\r\n+        </div>\r\n+      </ShopProfileSection>\r\n+\r\n+      <AddItemButton onClick={handleItemAdd} theme={selectedTheme}>\r\n+        <Plus size={20} />\r\n+        Add Item\r\n+      </AddItemButton>\r\n+\r\n+      <ItemsContainer>\r\n+        <ItemsGrid>\r\n+          {shopData.items.map(item => {\r\n+            const isExpanded = expandedItems.has(item.id);\r\n+                    \r\n+            // FIX: Get the item directly from shopData.items each time to ensure fresh data\r\n+            const currentItem = shopData.items.find(i => i.id === item.id);\r\n+            const validImages = currentItem.images.filter(Boolean);\r\n+            const currentImageIndex = currentItem.currentImageIndex || 0;\r\n+            const currentImage = validImages[currentImageIndex] || null;\r\n+                    \r\n+            return (\r\n+              <React.Fragment key={item.id}>\r\n+                {/* Mobile Template Card */}\r\n+                <MobileTemplateCard \r\n+                  theme={selectedTheme}\r\n+                  onClick={() => {\r\n+                    // Create a deep copy of the current item\r\n+                    const itemToEdit = shopData.items.find(i => i.id === item.id);\r\n+                    console.log('Opening item for edit:', itemToEdit);\r\n+                    setEditingItem({\r\n+                      ...itemToEdit,\r\n+                      // Ensure all arrays are properly copied\r\n+                      images: [...itemToEdit.images],\r\n+                      currentImageIndex: itemToEdit.currentImageIndex || 0\r\n+                    });\r\n+                  }}\r\n+                >\r\n+                  <MobileTemplateImageContainer theme={selectedTheme}>\r\n+                    {currentImage ? (\r\n+                      <img src={currentImage} alt={currentItem.name || 'Item'} />\r\n+                    ) : (\r\n+                      <div className=\"placeholder\">\r\n+                        <Package size={24} />\r\n+                        <span>Image</span>\r\n+                      </div>\r\n+                    )}\r\n+                \r\n+                    {/* Carousel arrows for mobile */}\r\n+                    {validImages.length > 1 && (\r\n+                      <>\r\n+                        <button \r\n+                          className=\"mobile-carousel-arrow left\"\r\n+                          onClick={(e) => handleMobilePrevImage(e, currentItem.id)}\r\n+                        >\r\n+                          <ChevronLeft size={12} />\r\n+                        </button>\r\n+                        <button \r\n+                          className=\"mobile-carousel-arrow right\"\r\n+                          onClick={(e) => handleMobileNextImage(e, currentItem.id)}\r\n+                        >\r\n+                          <ChevronRight size={12} />\r\n+                        </button>\r\n+                    \r\n+                        {/* Image dots */}\r\n+                        <div className=\"image-dots\">\r\n+                          {validImages.map((_, index) => (\r\n+                            <div \r\n+                              key={index}\r\n+                              className={`dot ${index === currentImageIndex ? 'active' : ''}`}\r\n+                            />\r\n+                          ))}\r\n+                        </div>\r\n+                      </>\r\n+                    )}\r\n+                \r\n+                    <MobileDeleteButton \r\n+                      onClick={(e) => {\r\n+                        e.stopPropagation();\r\n+                        handleItemDelete(currentItem.id);\r\n+                      }}\r\n+                    >\r\n+                      <X size={12} />\r\n+                    </MobileDeleteButton>\r\n+                  </MobileTemplateImageContainer>\r\n+                    \r\n+                  <MobileTemplateContent theme={selectedTheme}>\r\n+                    <div className=\"item-name\">\r\n+                      {currentItem.name && currentItem.name !== 'MyItemName' ? \r\n+                        currentItem.name : \r\n+                        <span style={{ opacity: 0.5 }}>MyItemName</span>\r\n+                      }\r\n+                    </div>\r\n+                    <div className=\"item-price\">\r\n+                      {currentItem.price ? `$${parseFloat(currentItem.price).toFixed(2)}` : \r\n+                        <span className=\"empty-text\">$0.00</span>}\r\n+                    </div>\r\n+                  </MobileTemplateContent>\r\n+                </MobileTemplateCard>\r\n+\r\n+                {/* Desktop Card - Original Design */}\r\n+                <DesktopItemCard theme={selectedTheme}>\r\n+                  <DeleteButton onClick={() => handleItemDelete(item.id)}>\r\n+                    <X size={16} />\r\n+                  </DeleteButton>\r\n+                    \r\n+                  <ItemImageContainer theme={selectedTheme}>\r\n+                    <div className=\"image-container\">\r\n+                      <EditableImage\r\n+                        value={item.images[item.currentImageIndex]}\r\n+                        onChange={(value) => {\r\n+                          const newImages = [...item.images];\r\n+                          newImages[item.currentImageIndex] = value;\r\n+                          handleItemUpdate(item.id, { images: newImages });\r\n+                        }}\r\n+                        theme={selectedTheme}\r\n+                        height=\"100%\"\r\n+                        width=\"100%\"\r\n+                      />\r\n+                    </div>\r\n+                      \r\n+                    {validImages.length > 0 && (\r\n+                      <>\r\n+                        <button \r\n+                          className=\"carousel-arrow left\"\r\n+                          onClick={() => {\r\n+                            const newIndex = ((item.currentImageIndex - 1) + 3) % 3;\r\n+                            handleItemUpdate(item.id, { currentImageIndex: newIndex });\r\n+                          }}\r\n+                        >\r\n+                          <ChevronLeft size={16} />\r\n+                        </button>\r\n+                        <button \r\n+                          className=\"carousel-arrow right\"\r\n+                          onClick={() => {\r\n+                            const newIndex = (item.currentImageIndex + 1) % 3;\r\n+                            handleItemUpdate(item.id, { currentImageIndex: newIndex });\r\n+                          }}\r\n+                        >\r\n+                          <ChevronRight size={16} />\r\n+                        </button>\r\n+                      </>\r\n+                    )}\r\n+                  </ItemImageContainer>\r\n+\r\n+                  <ItemContent>\r\n+                    <ItemHeader onClick={() => toggleItemExpansion(item.id)}>\r\n+                      <h4>\r\n+                        {item.name && item.name !== 'MyItemName' ? \r\n+                          item.name : \r\n+                          <span style={{ opacity: 0.5 }}>MyItemName</span>\r\n+                        }\r\n+                      </h4>\r\n+                      <ExpandButton>\r\n+                        {isExpanded ? <ChevronUp size={20} /> : <ChevronDown size={20} />}\r\n+                      </ExpandButton>\r\n+                    </ItemHeader>\r\n+\r\n+                    <ItemDetails expanded={isExpanded}>\r\n+                      <div className=\"details-content\">\r\n+                        <ValidatedEditableText\r\n+                          value={item.name}\r\n+                          onChange={(value) => handleItemUpdate(item.id, { name: value })}\r\n+                          placeholder=\"MyItemName\"\r\n+                          validationRules={VALIDATION_RULES.item.name}\r\n+                          theme={selectedTheme}\r\n+                        />\r\n+                        <ValidatedEditableText\r\n+                          value={item.price}\r\n+                          onChange={(value) => handleItemUpdate(item.id, { price: value })}\r\n+                          placeholder=\"Price\"\r\n+                          validationRules={VALIDATION_RULES.item.price}\r\n+                          theme={selectedTheme}\r\n+                        />\r\n+                        <ValidatedEditableText\r\n+                          value={item.description}\r\n+                          onChange={(value) => handleItemUpdate(item.id, { description: value })}\r\n+                          placeholder=\"Item Description\"\r\n+                          validationRules={VALIDATION_RULES.item.description}\r\n+                          multiline\r\n+                          theme={selectedTheme}\r\n+                        />\r\n+                        <CategorySelect\r\n+                          value={item.category || 'Other'}\r\n+                          onChange={(e) => handleItemUpdate(item.id, { category: e.target.value })}\r\n+                          theme={selectedTheme}\r\n+                        >\r\n+                          {ITEM_CATEGORIES.map(category => (\r\n+                            <option key={category} value={category}>\r\n+                              {category}\r\n+                            </option>\r\n+                          ))}\r\n+                        </CategorySelect>\r\n+                        <QuantitySelector \r\n+                          value={parseInt(item.quantity) || 1}\r\n+                          onChange={(value) => handleItemUpdate(item.id, { quantity: value })}\r\n+                          theme={selectedTheme}\r\n+                          min={0}\r\n+                          max={9999}\r\n+                        />\r\n+                        <AddressInput\r\n+                          address={item.address || ''}\r\n+                          onAddressChange={(value) => handleItemUpdate(item.id, { \r\n+                            address: value,\r\n+                            coordinates: null\r\n+                          })}\r\n+                          onLocationSelect={(location) => {\r\n+                            if (location?.coordinates?.latitude && location?.coordinates?.longitude) {\r\n+                              const coords = {\r\n+                                lat: location.coordinates.latitude,\r\n+                                lng: location.coordinates.longitude\r\n+                              };\r\n+                              handleItemUpdate(item.id, {\r\n+                                address: location.address || `${coords.lat.toFixed(6)}, ${coords.lng.toFixed(6)}`,\r\n+                                coordinates: coords\r\n+                              });\r\n+                            }\r\n+                          }}\r\n+                        />\r\n+                      </div>\r\n+                    </ItemDetails>\r\n+                  </ItemContent>\r\n+                </DesktopItemCard>\r\n+              </React.Fragment>\r\n+            );\r\n+          })}\r\n+        </ItemsGrid>\r\n+      </ItemsContainer>\r\n+\r\n+      {/* Mobile Edit Modal */}\r\n+      {editingItem && (\r\n+        <EditModal onClick={() => setEditingItem(null)}>\r\n+          <EditModalContent \r\n+            theme={selectedTheme}\r\n+            onClick={(e) => e.stopPropagation()}\r\n+          >\r\n+            {/* Image Section - 50% */}\r\n+      <EditModalImageSection>\r\n+              {/* Action Buttons on Image */}\r\n+              <ImageActionButtons>\r\n+                <ImageActionButton \r\n+                  className=\"check\"\r\n+                  onClick={async () => {\r\n+                    console.log('Saving item:', editingItem);\r\n+                    \r\n+                    // Process images - extract the preview URL or keep string URLs\r\n+                    const processedImages = editingItem.images.map((img) => {\r\n+                      // If it's already a string URL, keep it\r\n+                      if (typeof img === 'string') return img;\r\n+                      \r\n+                      // If it's null or undefined, keep it\r\n+                      if (!img) return null;\r\n+                      \r\n+                      // If it's the EditableImage format with preview, use the preview\r\n+                      if (img?.preview) return img.preview;\r\n+                      \r\n+                      // If it's a File object, create blob URL\r\n+                      if (img instanceof File) {\r\n+                        return URL.createObjectURL(img);\r\n+                      }\r\n+                      \r\n+                      return img;\r\n+                    });\r\n+                    \r\n+                    const updatedItem = {\r\n+                      ...editingItem,\r\n+                      images: processedImages\r\n+                    };\r\n+                    \r\n+                    console.log('Processed item with images:', updatedItem);\r\n+                    handleItemUpdate(editingItem.id, updatedItem);\r\n+                    setEditingItem(null);\r\n+                  }}\r\n+                  title=\"Save changes\"\r\n+                >\r\n+                  <Check size={20} />\r\n+                </ImageActionButton>\r\n+                <ImageActionButton \r\n+                  className=\"close\"\r\n+                  onClick={() => setEditingItem(null)}\r\n+                  title=\"Discard changes\"\r\n+                >\r\n+                  <X size={20} />\r\n+                </ImageActionButton>\r\n+              </ImageActionButtons>\r\n+                \r\n+              <ItemImageContainer theme={selectedTheme} style={{ height: '100%' }}>\r\n+                <div className=\"image-container\">\r\n+                  <EditableImage\r\n+                    value={editingItem.images[editingItem.currentImageIndex]}\r\n+              onChange={(value) => {\r\n+                const newImages = [...editingItem.images];\r\n+                newImages[editingItem.currentImageIndex] = value;\r\n+                setEditingItem({ ...editingItem, images: newImages });\r\n+              }}\r\n+              theme={selectedTheme}\r\n+              height=\"100%\"\r\n+              width=\"100%\"\r\n+                  />\r\n+                </div>\r\n+\r\n+                {editingItem.images.filter(Boolean).length > 1 && (\r\n+                  <>\r\n+              <button \r\n+                className=\"carousel-arrow left\"\r\n+                onClick={() => {\r\n+                  const newIndex = ((editingItem.currentImageIndex - 1) + 3) % 3;\r\n+                  setEditingItem({ ...editingItem, currentImageIndex: newIndex });\r\n+                }}\r\n+              >\r\n+                <ChevronLeft size={16} />\r\n+              </button>\r\n+              <button \r\n+                className=\"carousel-arrow right\"\r\n+                onClick={() => {\r\n+                  const newIndex = (editingItem.currentImageIndex + 1) % 3;\r\n+                  setEditingItem({ ...editingItem, currentImageIndex: newIndex });\r\n+                }}\r\n+              >\r\n+                <ChevronRight size={16} />\r\n+              </button>\r\n+                  </>\r\n+                )}\r\n+              </ItemImageContainer>\r\n+            </EditModalImageSection>\r\n+              \r\n+            {/* Scrollable Info Section - 50% */}\r\n+      <EditModalBody>\r\n+        <ValidatedEditableText\r\n+          value={editingItem.name}\r\n+          onChange={(value) => setEditingItem({ ...editingItem, name: value })}\r\n+          placeholder=\"MyItemName\"\r\n+                validationRules={VALIDATION_RULES.item.name}\r\n+                theme={selectedTheme}\r\n+              />\r\n+\r\n+              <ValidatedEditableText\r\n+          value={editingItem.price}\r\n+          onChange={(value) => setEditingItem({ ...editingItem, price: value })}\r\n+          placeholder=\"Price\"\r\n+          validationRules={VALIDATION_RULES.item.price}\r\n+          theme={selectedTheme}\r\n+              />\r\n+\r\n+              <ValidatedEditableText\r\n+                value={editingItem.description}\r\n+          onChange={(value) => setEditingItem({ ...editingItem, description: value })}\r\n+          placeholder=\"Item Description\"\r\n+          validationRules={VALIDATION_RULES.item.description}\r\n+          multiline\r\n+                theme={selectedTheme}\r\n+        />\r\n+\r\n+        <CategorySelect\r\n+          value={editingItem.category || 'Other'}\r\n+          onChange={(e) => setEditingItem({ ...editingItem, category: e.target.value })}\r\n+                theme={selectedTheme}\r\n+              >\r\n+                {ITEM_CATEGORIES.map(category => (\r\n+            <option key={category} value={category}>\r\n+              {category}\r\n+            </option>\r\n+                ))}\r\n+              </CategorySelect>\r\n+              \r\n+              <QuantitySelector \r\n+                value={parseInt(editingItem.quantity) || 1}\r\n+                onChange={(value) => setEditingItem({ ...editingItem, quantity: value })}\r\n+                theme={selectedTheme}\r\n+                min={0}\r\n+                max={9999}\r\n+              />\r\n+\r\n+              <AddressInput\r\n+  address={editingItem.address || ''}\r\n+  onAddressChange={(value) => setEditingItem({ \r\n+    ...editingItem, \r\n+    address: value\r\n+  })}\r\n+  onLocationSelect={(location) => {\r\n+    console.log('Location selected:', location);\r\n+    if (location?.coordinates) {\r\n+      setEditingItem({\r\n+        ...editingItem,\r\n+        address: location.address,\r\n+        coordinates: location.coordinates\r\n+      });\r\n+    } else if (!location?.address) {\r\n+      setEditingItem({\r\n+        ...editingItem,\r\n+        address: '',\r\n+        coordinates: null\r\n+      });\r\n+    }\r\n+  }}\r\n+/>\r\n+            </EditModalBody>\r\n+          </EditModalContent>\r\n+        </EditModal>\r\n+      )}\r\n+    </MainContent>\r\n+  );\r\n+\r\n+  const renderHomeView = () => (\r\n+    <MainContent>\r\n+      <div style={{ textAlign: 'center', maxWidth: '800px', margin: '0 auto', padding: '2rem 1rem' }}>\r\n+        <h2 style={{ \r\n+          color: selectedTheme?.colors?.accent || '#800000',\r\n+          fontFamily: selectedTheme?.fonts?.heading || 'inherit',\r\n+          marginBottom: '1.5rem',\r\n+          fontSize: '1.5rem'\r\n+        }}>\r\n+          Mission Statement\r\n+        </h2>\r\n+        <ValidatedEditableText\r\n+          value={shopData.mission}\r\n+          onChange={(value) => handleShopDataChange('mission', value)}\r\n+          placeholder=\"What's your shop's mission?\"\r\n+          multiline\r\n+          validationRules={VALIDATION_RULES.shop.mission}\r\n+          theme={selectedTheme}\r\n+        />\r\n+      </div>\r\n+    </MainContent>\r\n+  );\r\n+\r\n+  const renderCommunityView = () => (\r\n+    <MainContent>\r\n+      <div style={{ textAlign: 'center', padding: '4rem 1rem' }}>\r\n+        <h2 style={{ \r\n+          color: selectedTheme?.colors?.accent || '#800000',\r\n+          fontFamily: selectedTheme?.fonts?.heading || 'inherit',\r\n+          marginBottom: '1rem',\r\n+          fontSize: '1.5rem'\r\n+        }}>\r\n+          Community\r\n+        </h2>\r\n+        <p>Community features will be available after shop creation</p>\r\n+      </div>\r\n+    </MainContent>\r\n+  );\r\n+\r\n+  return (\r\n+    <ThemeProvider theme={selectedTheme}>\r\n+      <GlobalStyles />\r\n+      <PageContainer className=\"page-container\">\r\n+        <Header theme={selectedTheme}>\r\n+          <HeaderLeft>\r\n+            <Logo onClick={() => navigate('/')} theme={selectedTheme}>\r\n+              KALKODE\r\n+            </Logo>\r\n+          </HeaderLeft>\r\n+\r\n+          <HeaderRight>\r\n+            <HeaderTabButton\r\n+              theme={selectedTheme}\r\n+              active={activeTab === 'shop'}\r\n+              onClick={() => setActiveTab('shop')}\r\n+              title=\"Shop\"\r\n+            >\r\n+              <Store size={22} />\r\n+            </HeaderTabButton>\r\n+\r\n+            <HeaderTabButton\r\n+              theme={selectedTheme}\r\n+              active={activeTab === 'home'}\r\n+              onClick={() => setActiveTab('home')}\r\n+              title=\"Home\"\r\n+            >\r\n+              <Home size={22} />\r\n+            </HeaderTabButton>\r\n+\r\n+            <HeaderTabButton\r\n+              theme={selectedTheme}\r\n+              active={activeTab === 'community'}\r\n+              onClick={() => setActiveTab('community')}\r\n+              title=\"Community\"\r\n+            >\r\n+              <Users size={22} />\r\n+            </HeaderTabButton>\r\n+\r\n+            {isAuthenticated && (\r\n+              <HeaderTabButton\r\n+                onClick={handleLogout}\r\n+                theme={selectedTheme}\r\n+                title=\"Logout\"\r\n+              >\r\n+                <LogOut size={22} />\r\n+              </HeaderTabButton>\r\n+            )}\r\n+          </HeaderRight>\r\n+        </Header>\r\n+          \r\n+        {/* ADD Floating Controls before closing PageContainer */}\r\n+        <FloatingControls>\r\n+          <FloatingButton\r\n+            onClick={refreshTheme}\r\n+            theme={selectedTheme}\r\n+            className={isRefreshing ? \"spinning\" : \"\"}\r\n+            title=\"Random theme\"\r\n+          >\r\n+            <RefreshCw size={24} />\r\n+          </FloatingButton>\r\n+          \r\n+          <FloatingButton\r\n+            onClick={togglePinStyle}\r\n+            theme={selectedTheme}\r\n+            isPinned={isPinned}\r\n+            title={isPinned ? \"Unpin theme\" : \"Pin theme\"}\r\n+          >\r\n+            <Pin size={24} />\r\n+          </FloatingButton>\r\n+        </FloatingControls>\r\n+\r\n+        {activeTab === 'shop' && renderShopView()}\r\n+        {activeTab === 'home' && renderHomeView()}\r\n+        {activeTab === 'community' && renderCommunityView()}\r\n+\r\n+        {/* Save Button */}\r\n+        <SaveButtonContainer>\r\n+          <ActionButton\r\n+            onClick={handleSave}\r\n+            disabled={!shopData.name}\r\n+            theme={selectedTheme}\r\n+          >\r\n+            Save / LogIn\r\n+            <ChevronRight size={20} />\r\n+          </ActionButton>\r\n+        </SaveButtonContainer>\r\n+      </PageContainer>\r\n+    </ThemeProvider>\r\n+  );\r\n+};\r\n+\r\n export default LiveShopCreation;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1759888872906,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2175,30 +2175,30 @@\n                 max={9999}\r\n               />\r\n \r\n               <AddressInput\r\n-  address={editingItem.address || ''}\r\n-  onAddressChange={(value) => setEditingItem({ \r\n-    ...editingItem, \r\n-    address: value\r\n-  })}\r\n-  onLocationSelect={(location) => {\r\n-    console.log('Location selected:', location);\r\n-    if (location?.coordinates) {\r\n-      setEditingItem({\r\n-        ...editingItem,\r\n-        address: location.address,\r\n-        coordinates: location.coordinates\r\n-      });\r\n-    } else if (!location?.address) {\r\n-      setEditingItem({\r\n-        ...editingItem,\r\n-        address: '',\r\n-        coordinates: null\r\n-      });\r\n-    }\r\n-  }}\r\n-/>\r\n+                address={editingItem.address || ''}\r\n+                onAddressChange={(value) => setEditingItem({ \r\n+                  ...editingItem, \r\n+                  address: value\r\n+                })}\r\n+                onLocationSelect={(location) => {\r\n+                  console.log('Location selected:', location);\r\n+                  if (location?.coordinates) {\r\n+                    setEditingItem({\r\n+                      ...editingItem,\r\n+                      address: location.address,\r\n+                      coordinates: location.coordinates\r\n+                    });\r\n+                  } else if (!location?.address) {\r\n+                    setEditingItem({\r\n+                      ...editingItem,\r\n+                      address: '',\r\n+                      coordinates: null\r\n+                    });\r\n+                  }\r\n+                }}\r\n+              />\r\n             </EditModalBody>\r\n           </EditModalContent>\r\n         </EditModal>\r\n       )}\r\n"
                },
                {
                    "date": 1759888931168,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2001,27 +2001,9 @@\n                           theme={selectedTheme}\r\n                           min={0}\r\n                           max={9999}\r\n                         />\r\n-                        <AddressInput\r\n-                          address={item.address || ''}\r\n-                          onAddressChange={(value) => handleItemUpdate(item.id, { \r\n-                            address: value,\r\n-                            coordinates: null\r\n-                          })}\r\n-                          onLocationSelect={(location) => {\r\n-                            if (location?.coordinates?.latitude && location?.coordinates?.longitude) {\r\n-                              const coords = {\r\n-                                lat: location.coordinates.latitude,\r\n-                                lng: location.coordinates.longitude\r\n-                              };\r\n-                              handleItemUpdate(item.id, {\r\n-                                address: location.address || `${coords.lat.toFixed(6)}, ${coords.lng.toFixed(6)}`,\r\n-                                coordinates: coords\r\n-                              });\r\n-                            }\r\n-                          }}\r\n-                        />\r\n+                        Desktop\r\n                       </div>\r\n                     </ItemDetails>\r\n                   </ItemContent>\r\n                 </DesktopItemCard>\r\n"
                },
                {
                    "date": 1759888944599,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2001,9 +2001,27 @@\n                           theme={selectedTheme}\r\n                           min={0}\r\n                           max={9999}\r\n                         />\r\n-                        Desktop\r\n+                        <AddressInput\r\n+                          address={item.address || ''}\r\n+                          onAddressChange={(value) => handleItemUpdate(item.id, { \r\n+                            address: value,\r\n+                            coordinates: null\r\n+                          })}\r\n+                          onLocationSelect={(location) => {\r\n+                            if (location?.coordinates?.latitude && location?.coordinates?.longitude) {\r\n+                              const coords = {\r\n+                                lat: location.coordinates.latitude,\r\n+                                lng: location.coordinates.longitude\r\n+                              };\r\n+                              handleItemUpdate(item.id, {\r\n+                                address: location.address || `${coords.lat.toFixed(6)}, ${coords.lng.toFixed(6)}`,\r\n+                                coordinates: coords\r\n+                              });\r\n+                            }\r\n+                          }}\r\n+                        />\r\n                       </div>\r\n                     </ItemDetails>\r\n                   </ItemContent>\r\n                 </DesktopItemCard>\r\n"
                },
                {
                    "date": 1759888950039,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2002,26 +2002,27 @@\n                           min={0}\r\n                           max={9999}\r\n                         />\r\n                         <AddressInput\r\n-                          address={item.address || ''}\r\n-                          onAddressChange={(value) => handleItemUpdate(item.id, { \r\n-                            address: value,\r\n-                            coordinates: null\r\n-                          })}\r\n-                          onLocationSelect={(location) => {\r\n-                            if (location?.coordinates?.latitude && location?.coordinates?.longitude) {\r\n-                              const coords = {\r\n-                                lat: location.coordinates.latitude,\r\n-                                lng: location.coordinates.longitude\r\n-                              };\r\n-                              handleItemUpdate(item.id, {\r\n-                                address: location.address || `${coords.lat.toFixed(6)}, ${coords.lng.toFixed(6)}`,\r\n-                                coordinates: coords\r\n-                              });\r\n-                            }\r\n-                          }}\r\n-                        />\r\n+  address={item.address || ''}\r\n+  onAddressChange={(value) => handleItemUpdate(item.id, { \r\n+    address: value\r\n+  })}\r\n+  onLocationSelect={(location) => {\r\n+    console.log('Location selected:', location);\r\n+    if (location?.coordinates) {\r\n+      handleItemUpdate(item.id, {\r\n+        address: location.address,\r\n+        coordinates: location.coordinates\r\n+      });\r\n+    } else if (!location?.address) {\r\n+      handleItemUpdate(item.id, {\r\n+        address: '',\r\n+        coordinates: null\r\n+      });\r\n+    }\r\n+  }}\r\n+/>\r\n                       </div>\r\n                     </ItemDetails>\r\n                   </ItemContent>\r\n                 </DesktopItemCard>\r\n"
                },
                {
                    "date": 1759888960305,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,2340 @@\n+// src/pages/shop/LiveShopCreation.js - Mobile Optimized\r\n+\r\n+import React, { useState, useEffect, useMemo } from 'react';\r\n+import { useNavigate } from 'react-router-dom';\r\n+import styled, { ThemeProvider, createGlobalStyle } from 'styled-components';\r\n+import ValidatedEditableText from '../../components/common/ValidatedEditableText';\r\n+import { VALIDATION_RULES, validateShopData, validateAllItems } from '../../utils/inputValidation';\r\n+import { \r\n+  ChevronLeft, \r\n+  ChevronRight, \r\n+  Settings, \r\n+  Plus,\r\n+  Minus, \r\n+  Heart,\r\n+  MessageCircle,\r\n+  Users,\r\n+  RefreshCw, \r\n+  Pin,\r\n+  X,\r\n+  ChevronDown,\r\n+  ChevronUp,\r\n+  Store,\r\n+  Home,\r\n+  LogOut,\r\n+  Check,\r\n+  Package\r\n+} from 'lucide-react';\r\n+import { useTempStore } from '../../contexts/TempStoreContext';\r\n+import EditableText from './components/EditableComponents/EditableText';\r\n+import EditableImage from './components/EditableComponents/EditableImage';\r\n+import EditableItem from './components/EditableComponents/EditableItem';\r\n+import TabPositioner from './components/TabPositioner';\r\n+import { DEFAULT_THEME } from '../../theme/config/themes';\r\n+import ThemeSelector from '../../components/ThemeSelector/ThemeSelector';\r\n+import AddressInput from '../../components/shop/AddressInput';\r\n+import { WELCOME_STYLES } from '../../theme/welcomeStyles';\r\n+import QuantitySelector from '../../components/shop/QuantitySelector';\r\n+import { useAuth } from '../../contexts/AuthContext';\r\n+import { signOut } from 'firebase/auth';\r\n+import { auth } from '../../firebase/config';\r\n+\r\n+const ITEM_CATEGORIES = [\r\n+  'Electronics & Tech',\r\n+  'Clothing & Accessories',\r\n+  'Home & Garden',\r\n+  'Sports & Outdoors',\r\n+  'Books & Media',\r\n+  'Toys & Games',\r\n+  'Health & Beauty',\r\n+  'Automotive',\r\n+  'Collectibles & Art',\r\n+  'Food & Beverages',\r\n+  'Other'\r\n+];\r\n+\r\n+// Mobile-first styled components\r\n+const PageContainer = styled.div.attrs({ className: 'page-container' })`\r\n+  min-height: 100vh;\r\n+  background: ${props => props.theme?.colors?.background || '#000000'};\r\n+  color: ${props => props.theme?.colors?.text || '#FFFFFF'};\r\n+  position: relative;\r\n+  overflow-x: hidden;\r\n+  \r\n+  /* Mobile-optimized background effects */\r\n+  &::before {\r\n+    content: '';\r\n+    position: absolute;\r\n+    width: 100%;\r\n+    height: 100%;\r\n+    background: ${props => props.theme?.colors?.backgroundGradient || 'radial-gradient(circle at 20% 30%, rgba(128, 0, 0, 0.2) 0%, transparent 50%)'};\r\n+    opacity: 0.8;\r\n+    animation: ${props => props.theme?.animations?.backgroundAnimation || 'galaxySwirl 30s linear infinite'};\r\n+  }\r\n+\r\n+  /* Simplified stars for mobile performance */\r\n+  &::after {\r\n+    content: '';\r\n+    position: absolute;\r\n+    width: 100%;\r\n+    height: 100%;\r\n+    background-image: radial-gradient(circle 1px, ${props => props.theme?.colors?.text || '#FFF'} 1px, transparent 1px);\r\n+    background-size: 100px 100px;\r\n+    opacity: 0.05;\r\n+    \r\n+    @media (min-width: 768px) {\r\n+      background-size: 200px 200px;\r\n+      opacity: 0.1;\r\n+    }\r\n+  }\r\n+\r\n+  @keyframes galaxySwirl {\r\n+    0% { transform: rotate(0deg); }\r\n+    100% { transform: rotate(360deg); }\r\n+  }\r\n+`;\r\n+\r\n+// Add after existing styled components (around line 800)\r\n+const ShopNameInputContainer = styled.div`\r\n+  width: 100%;\r\n+  margin: 0.5rem 0;\r\n+  position: relative;\r\n+`;\r\n+\r\n+// In LiveShopCreation.js, update the ShopNameInput styled component (around line 250)\r\n+\r\n+const ShopNameInput = styled.input`\r\n+  width: 100%;\r\n+  text-align: center;\r\n+  background: transparent;\r\n+  border: none;\r\n+  border-bottom: 2px solid ${props => props.isError ? '#ff4444' : `${props.theme?.colors?.accent}40` || 'rgba(128, 0, 0, 0.25)'};\r\n+  font-size: ${props => Math.min(props.fontSize || 2.5, 2)}rem;\r\n+  font-family: ${props => props.theme?.fonts?.heading};\r\n+  color: ${props => props.theme?.colors?.accent || '#800000'};\r\n+  outline: none;\r\n+  padding: 0.5rem;\r\n+  transition: all 0.3s ease;\r\n+  caret-color: ${props => props.theme?.colors?.accent || '#800000'}; /* ADD THIS LINE */\r\n+  \r\n+  @media (min-width: 768px) {\r\n+    font-size: ${props => props.fontSize || '2.5rem'};\r\n+  }\r\n+\r\n+  &:focus {\r\n+    border-bottom-color: ${props => props.isError ? '#ff4444' : props.theme?.colors?.accent || '#800000'};\r\n+    border-bottom-width: 3px;\r\n+  }\r\n+\r\n+  &::placeholder {\r\n+    color: ${props => `${props.theme?.colors?.accent}60` || 'rgba(128, 0, 0, 0.4)'};\r\n+  }\r\n+\r\n+  /* ADD BLINKING CURSOR ANIMATION */\r\n+  @keyframes blink {\r\n+    0%, 49% { border-right: 2px solid ${props => props.theme?.colors?.accent || '#800000'}; }\r\n+    50%, 100% { border-right: 2px solid transparent; }\r\n+  }\r\n+  \r\n+  &:focus {\r\n+    animation: blink 1s step-end infinite;\r\n+  }\r\n+`;\r\n+\r\n+const ShopNameError = styled.div`\r\n+  color: #ff4444;\r\n+  font-size: 0.8rem;\r\n+  margin-top: 0.25rem;\r\n+  text-align: center;\r\n+  font-family: ${props => props.theme?.fonts?.body || \"'Inter', sans-serif\"};\r\n+  min-height: 20px;\r\n+  \r\n+  @media (min-width: 768px) {\r\n+    font-size: 0.9rem;\r\n+  }\r\n+`;\r\n+\r\n+const ShopNameSuccess = styled.div`\r\n+  color: #4CAF50;\r\n+  font-size: 0.8rem;\r\n+  margin-top: 0.25rem;\r\n+  text-align: center;\r\n+  font-family: ${props => props.theme?.fonts?.body || \"'Inter', sans-serif\"};\r\n+  min-height: 20px;\r\n+  \r\n+  @media (min-width: 768px) {\r\n+    font-size: 0.9rem;\r\n+  }\r\n+`;\r\n+\r\n+// REPLACE Header with:\r\n+const Header = styled.header`\r\n+  width: 100%;\r\n+  height: 60px;\r\n+  padding: 0 1rem;\r\n+  display: flex;\r\n+  align-items: center;\r\n+  justify-content: space-between;\r\n+  background: ${props => props.theme?.colors?.headerBg || 'rgba(0, 0, 0, 1)'};\r\n+  border-bottom: 1px solid ${props => `${props.theme?.colors?.accent}4D` || 'rgba(128, 0, 0, 0.3)'};\r\n+  position: fixed;\r\n+  top: 0;\r\n+  z-index: 100;\r\n+\r\n+  @media (min-width: 768px) {\r\n+    height: 80px;\r\n+    padding: 0 2rem;\r\n+  }\r\n+`;\r\n+\r\n+// ADD these new styled components after Header:\r\n+const HeaderLeft = styled.div`\r\n+  display: flex;\r\n+  align-items: center;\r\n+  gap: 0.75rem;\r\n+`;\r\n+\r\n+const HeaderRight = styled.div`\r\n+  display: flex;\r\n+  align-items: center;\r\n+  gap: 0.75rem;\r\n+`;\r\n+\r\n+const HeaderTabButton = styled.button`\r\n+  background: transparent;\r\n+  border: none;\r\n+  color: ${props => props.active ? \r\n+    props.theme?.colors?.accent : \r\n+    `${props.theme?.colors?.text}60`};\r\n+  padding: 0.5rem;\r\n+  cursor: pointer;\r\n+  display: flex;\r\n+  align-items: center;\r\n+  justify-content: center;\r\n+  transition: all 0.3s ease;\r\n+  position: relative;\r\n+  \r\n+  &:active {\r\n+    transform: scale(0.9);\r\n+  }\r\n+  \r\n+  &::after {\r\n+    content: '';\r\n+    position: absolute;\r\n+    bottom: -1px;\r\n+    left: 50%;\r\n+    transform: translateX(-50%);\r\n+    width: ${props => props.active ? '80%' : '0'};\r\n+    height: 3px;\r\n+    background: ${props => props.theme?.colors?.accent || '#800000'};\r\n+    border-radius: 2px 2px 0 0;\r\n+    transition: width 0.3s ease;\r\n+  }\r\n+  \r\n+  @media (hover: hover) {\r\n+    &:hover {\r\n+      color: ${props => props.theme?.colors?.accent};\r\n+      opacity: 1;\r\n+    }\r\n+  }\r\n+  \r\n+  svg {\r\n+    width: 22px;\r\n+    height: 22px;\r\n+    \r\n+    @media (min-width: 768px) {\r\n+      width: 24px;\r\n+      height: 24px;\r\n+    }\r\n+  }\r\n+`;\r\n+\r\n+// UPDATE FloatingControls (add if doesn't exist):\r\n+const FloatingControls = styled.div`\r\n+  position: fixed;\r\n+  bottom: 100px;\r\n+  right: 2rem;\r\n+  display: flex;\r\n+  flex-direction: column;\r\n+  gap: 1rem;\r\n+  z-index: 90;\r\n+  \r\n+  @media (min-width: 768px) {\r\n+    bottom: 2rem;\r\n+  }\r\n+  \r\n+  @media (max-width: 767px) {\r\n+    right: 1.5rem;\r\n+    gap: 0.75rem;\r\n+  }\r\n+`;\r\n+\r\n+const FloatingButton = styled.button`\r\n+  width: 56px;\r\n+  height: 56px;\r\n+  border-radius: 50%;\r\n+  background: ${props => props.theme?.colors?.accent || '#800000'};\r\n+  color: ${props => props.theme?.colors?.background || '#FFFFFF'};\r\n+  border: none;\r\n+  display: flex;\r\n+  align-items: center;\r\n+  justify-content: center;\r\n+  cursor: pointer;\r\n+  box-shadow: 0 4px 12px ${props => `${props.theme?.colors?.accent}40` || 'rgba(128, 0, 0, 0.25)'};\r\n+  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\r\n+  \r\n+  ${props => props.isPinned && `\r\n+    background: ${props.theme?.colors?.background || '#000000'};\r\n+    color: ${props.theme?.colors?.accent || '#800000'};\r\n+    border: 2px solid ${props.theme?.colors?.accent || '#800000'};\r\n+  `}\r\n+  \r\n+  @media (max-width: 767px) {\r\n+    width: 48px;\r\n+    height: 48px;\r\n+  }\r\n+  \r\n+  &:active {\r\n+    transform: scale(0.9);\r\n+  }\r\n+  \r\n+  @media (hover: hover) {\r\n+    &:hover {\r\n+      transform: scale(1.1);\r\n+      box-shadow: 0 6px 16px ${props => `${props.theme?.colors?.accent}60` || 'rgba(128, 0, 0, 0.4)'};\r\n+    }\r\n+  }\r\n+  \r\n+  &.spinning {\r\n+    animation: spin 0.5s ease-in-out;\r\n+  }\r\n+  \r\n+  @keyframes spin {\r\n+    from { transform: rotate(0deg); }\r\n+    to { transform: rotate(360deg); }\r\n+  }\r\n+  \r\n+  svg {\r\n+    width: 24px;\r\n+    height: 24px;\r\n+    \r\n+    @media (max-width: 767px) {\r\n+      width: 20px;\r\n+      height: 20px;\r\n+    }\r\n+  }\r\n+`;\r\n+\r\n+const EditModal = styled.div`\r\n+  display: none;\r\n+\r\n+  @media (max-width: 767px) {\r\n+    display: flex;\r\n+    position: fixed;\r\n+    top: 95px; /* Start 1 inch below tab buttons (assuming tabs are around 60px + header 80px) */\r\n+    left: 0;\r\n+    right: 0;\r\n+    bottom: 30px; /* 1 inch from bottom (96px = 1 inch) */\r\n+    background: rgba(0, 0, 0, 0.9);\r\n+    align-items: center;\r\n+    justify-content: center;\r\n+    z-index: 999; /* Changed from 1000 to be below save button */\r\n+    padding: 1rem;\r\n+    overflow: hidden;\r\n+  }\r\n+`;\r\n+\r\n+const EditModalContent = styled.div`\r\n+  background: ${props => props.theme?.colors?.background || '#000000'};\r\n+  border: 2px solid ${props => props.theme?.colors?.accent || '#800000'};\r\n+  border-radius: 12px;\r\n+  width: 100%;\r\n+  max-width: 400px;\r\n+  height: 100%; /* Take full available height */\r\n+  display: flex;\r\n+  flex-direction: column;\r\n+  position: relative;\r\n+  margin: auto;\r\n+  box-shadow: 0 20px 60px rgba(0, 0, 0, 0.5);\r\n+  overflow: hidden;\r\n+`;\r\n+\r\n+// Add new action buttons for the image overlay\r\n+const ImageActionButtons = styled.div`\r\n+  position: absolute;\r\n+  top: 0.5rem;\r\n+  left: 50%;\r\n+  transform: translateX(-50%);\r\n+  display: flex;\r\n+  gap: 0.75rem;\r\n+  z-index: 10;\r\n+`;\r\n+\r\n+const ImageActionButton = styled.button`\r\n+  width: 40px;\r\n+  height: 40px;\r\n+  border-radius: 50%;\r\n+  border: 2px solid ${props => props.theme?.colors?.accent || '#800000'};\r\n+  display: flex;\r\n+  align-items: center;\r\n+  justify-content: center;\r\n+  cursor: pointer;\r\n+  transition: all 0.3s ease;\r\n+  backdrop-filter: blur(10px);\r\n+  \r\n+  &.check {\r\n+    background: ${props => `${props.theme?.colors?.background || 'rgba(0, 0, 0, 0.8)'}E5`};\r\n+    color: #4CAF50;\r\n+    \r\n+    &:active {\r\n+      background: #4CAF50;\r\n+      color: white;\r\n+      transform: scale(0.95);\r\n+    }\r\n+  }\r\n+  \r\n+  &.close {\r\n+    background: ${props => `${props.theme?.colors?.background || 'rgba(0, 0, 0, 0.8)'}E5`};\r\n+    color: #ff4444;\r\n+    \r\n+    &:active {\r\n+      background: #ff4444;\r\n+      color: white;\r\n+      transform: scale(0.95);\r\n+    }\r\n+  }\r\n+\r\n+  svg {\r\n+    width: 20px;\r\n+    height: 20px;\r\n+  }\r\n+`;\r\n+\r\n+const EditModalImageSection = styled.div`\r\n+  height: 50%;\r\n+  position: relative;\r\n+  flex-shrink: 0;\r\n+  overflow: hidden;\r\n+  border-bottom: 1px solid ${props => `${props.theme?.colors?.accent}30` || 'rgba(255, 255, 255, 0.1)'};\r\n+`;\r\n+\r\n+const EditModalBody = styled.div`\r\n+  height: 50%;\r\n+  padding: 1rem;\r\n+  display: flex;\r\n+  flex-direction: column;\r\n+  gap: 0.8rem;\r\n+  overflow-y: auto;\r\n+  overflow-x: hidden;\r\n+  -webkit-overflow-scrolling: touch;\r\n+  \r\n+  &::-webkit-scrollbar {\r\n+    width: 4px;\r\n+  }\r\n+\r\n+  &::-webkit-scrollbar-track {\r\n+    background: transparent;\r\n+  }\r\n+\r\n+  &::-webkit-scrollbar-thumb {\r\n+    background: ${props => props.theme?.colors?.accent || '#800000'};\r\n+    border-radius: 2px;\r\n+  }\r\n+`;\r\n+\r\n+const SaveButtonContainer = styled.div`\r\n+  position: fixed;\r\n+  bottom: 1rem;\r\n+  right: 1rem;\r\n+  z-index: 1000; /* Changed from 100 to 1000 to be above modal */\r\n+  \r\n+  @media (min-width: 768px) {\r\n+    bottom: 2rem;\r\n+    right: 2rem;\r\n+  }\r\n+`;\r\n+\r\n+const ModalButtons = styled.div`\r\n+  position: sticky;\r\n+  bottom: 0;\r\n+  background: ${props => props.theme?.colors?.surface || 'rgba(255, 255, 255, 0.05)'};\r\n+  padding: 0.8rem 1.2rem; /* Changed from 1rem 1.5rem */\r\n+  border-top: 1px solid ${props => `${props.theme?.colors?.accent}30` || 'rgba(255, 255, 255, 0.1)'};\r\n+  display: flex;\r\n+  gap: 0.8rem; /* Changed from 1rem */\r\n+  justify-content: flex-end;\r\n+  z-index: 1;\r\n+`;\r\n+\r\n+const CancelButton = styled.button`\r\n+  background: transparent;\r\n+  color: ${props => props.theme?.colors?.text || '#FFFFFF'};\r\n+  border: 1px solid ${props => `${props.theme?.colors?.accent}60` || 'rgba(255, 255, 255, 0.4)'};\r\n+  padding: 0.6rem 1.2rem; /* Changed from 0.75rem 1.5rem */\r\n+  border-radius: 8px;\r\n+  font-weight: 600;\r\n+  cursor: pointer;\r\n+  transition: all 0.3s ease;\r\n+  font-size: 0.9rem; /* Added */\r\n+\r\n+  &:active {\r\n+    background: ${props => `${props.theme?.colors?.accent}20` || 'rgba(255, 255, 255, 0.1)'};\r\n+    transform: scale(0.98);\r\n+  }\r\n+`;\r\n+\r\n+// Add these new components\r\n+const TemplateCard = styled.div`\r\n+  background: ${props => props.theme?.colors?.surface || 'rgba(255, 255, 255, 0.05)'};\r\n+  border-radius: ${props => props.theme?.styles?.borderRadius || '12px'};\r\n+  overflow: hidden;\r\n+  border: 1px solid ${props => `${props.theme?.colors?.accent}30` || 'rgba(255, 255, 255, 0.1)'};\r\n+  position: relative;\r\n+  transition: all 0.3s ease;\r\n+  cursor: pointer;\r\n+  min-height: 280px;\r\n+  display: flex;\r\n+  flex-direction: column;\r\n+\r\n+  &:hover {\r\n+    transform: translateY(-5px);\r\n+    border-color: ${props => props.theme?.colors?.accent};\r\n+    box-shadow: 0 8px 20px rgba(0, 0, 0, 0.2);\r\n+\r\n+    .delete-button {\r\n+      opacity: 1;\r\n+    }\r\n+  }\r\n+\r\n+  @media (max-width: 640px) {\r\n+    min-height: 260px;\r\n+  }\r\n+`;\r\n+\r\n+const TemplateImageContainer = styled.div`\r\n+  position: relative;\r\n+  height: 180px;\r\n+  overflow: hidden;\r\n+  background: ${props => `${props.theme?.colors?.background || '#000000'}50`};\r\n+  display: flex;\r\n+  align-items: center;\r\n+  justify-content: center;\r\n+\r\n+  img {\r\n+    width: 100%;\r\n+    height: 100%;\r\n+    object-fit: cover;\r\n+  }\r\n+\r\n+  .placeholder {\r\n+    color: ${props => props.theme?.colors?.text || '#fff'};\r\n+    opacity: 0.3;\r\n+    display: flex;\r\n+    flex-direction: column;\r\n+    align-items: center;\r\n+    gap: 0.5rem;\r\n+  }\r\n+\r\n+  @media (max-width: 640px) {\r\n+    height: 160px;\r\n+  }\r\n+`;\r\n+\r\n+const TemplateContent = styled.div`\r\n+  padding: 1rem;\r\n+  flex: 1;\r\n+  display: flex;\r\n+  flex-direction: column;\r\n+  justify-content: space-between;\r\n+\r\n+  .item-name {\r\n+    font-size: 1rem;\r\n+    font-weight: 600;\r\n+    color: ${props => props.theme?.colors?.text || '#FFFFFF'};\r\n+    margin-bottom: 0.5rem;\r\n+    overflow: hidden;\r\n+    text-overflow: ellipsis;\r\n+    white-space: nowrap;\r\n+  }\r\n+\r\n+  .item-price {\r\n+    font-size: 1.2rem;\r\n+    font-weight: bold;\r\n+    color: ${props => props.theme?.colors?.accent || '#800000'};\r\n+    text-align: right;\r\n+  }\r\n+\r\n+  .empty-text {\r\n+    font-size: 0.9rem;\r\n+    color: ${props => `${props.theme?.colors?.text}60` || 'rgba(255, 255, 255, 0.4)'};\r\n+    font-style: italic;\r\n+  }\r\n+`;\r\n+\r\n+const Logo = styled.div`\r\n+  color: ${props => props.theme?.colors?.accent || '#800000'};\r\n+  font-family: ${props => props.theme?.fonts?.heading || \"'Impact', sans-serif\"};\r\n+  font-size: 1.4rem;\r\n+  letter-spacing: 1px;\r\n+  transform: skew(-5deg);\r\n+  cursor: pointer;\r\n+  flex-shrink: 0;\r\n+\r\n+  @media (min-width: 768px) {\r\n+    font-size: 2rem;\r\n+    letter-spacing: 2px;\r\n+  }\r\n+`;\r\n+\r\n+const HeaderControls = styled.div`\r\n+  display: flex;\r\n+  align-items: center;\r\n+  gap: 0.75rem;\r\n+`;\r\n+\r\n+const HeaderButton = styled.button`\r\n+  background: transparent;\r\n+  border: none;\r\n+  color: ${props => props.theme?.colors?.accent || '#800000'};\r\n+  padding: 0.5rem;\r\n+  cursor: pointer;\r\n+  display: flex;\r\n+  align-items: center;\r\n+  justify-content: center;\r\n+  border-radius: 50%;\r\n+  transition: all 0.3s ease;\r\n+  opacity: 0.8;\r\n+  \r\n+  &:active {\r\n+    transform: scale(0.9);\r\n+    opacity: 1;\r\n+  }\r\n+  \r\n+  @media (hover: hover) {\r\n+    &:hover {\r\n+      opacity: 1;\r\n+      background: ${props => `${props.theme?.colors?.accent}10` || 'rgba(128, 0, 0, 0.1)'};\r\n+    }\r\n+  }\r\n+  \r\n+  &.pinned {\r\n+    color: ${props => props.theme?.colors?.accent || '#800000'};\r\n+    opacity: 1;\r\n+  }\r\n+  \r\n+  &.spinning {\r\n+    animation: spin 0.5s ease-in-out;\r\n+  }\r\n+  \r\n+  @keyframes spin {\r\n+    from { transform: rotate(0deg); }\r\n+    to { transform: rotate(360deg); }\r\n+  }\r\n+  \r\n+  svg {\r\n+    width: 20px;\r\n+    height: 20px;\r\n+    \r\n+    @media (min-width: 768px) {\r\n+      width: 22px;\r\n+      height: 22px;\r\n+    }\r\n+  }\r\n+`;\r\n+\r\n+const MainContent = styled.div`\r\n+  max-width: 1200px;\r\n+  margin: 0 auto;\r\n+  padding: 64px 1rem 100px 1rem; /* Reduced from 80px by 20% */\r\n+  position: relative;\r\n+  z-index: 1;\r\n+  \r\n+  @media (min-width: 768px) {\r\n+    padding: 80px 2rem 2rem 2rem; /* Reduced from 6rem (96px) to 80px - approximately 20% less */\r\n+  }\r\n+`;\r\n+\r\n+const ShopProfileSection = styled.section`\r\n+  display: flex;\r\n+  flex-direction: column;\r\n+  align-items: center;\r\n+  text-align: center;\r\n+  max-width: 800px;\r\n+  margin: 1.5rem auto 3rem; /* Reduced from 2rem and 4rem */\r\n+  padding: 0.8rem; /* Reduced from 1rem */\r\n+\r\n+  @media (min-width: 768px) {\r\n+    padding: 1.5rem; /* Reduced from 2rem */\r\n+  }\r\n+\r\n+  .profile-image {\r\n+    margin-bottom: 1rem;\r\n+    width: 120px;\r\n+    height: 120px;\r\n+    border-radius: 50%;\r\n+    overflow: hidden;\r\n+    background: rgba(0, 0, 0, 0.1);\r\n+    border: 3px solid ${props => props.theme?.colors?.accent || '#800000'};\r\n+    box-shadow: 0 0 20px ${props => `${props.theme?.colors?.accent}40` || 'rgba(128, 0, 0, 0.25)'};\r\n+    \r\n+    @media (min-width: 768px) {\r\n+      width: 150px;\r\n+      height: 150px;\r\n+    }\r\n+    \r\n+    img {\r\n+      width: 100%;\r\n+      height: 100%;\r\n+      object-fit: cover;\r\n+    }\r\n+  }\r\n+\r\n+  .shop-name-container {\r\n+    width: 100%;\r\n+    margin: 0.5rem 0;\r\n+\r\n+    input {\r\n+      width: 100%;\r\n+      text-align: center;\r\n+      background: transparent;\r\n+      border: none;\r\n+      font-size: ${props => Math.min(props.fontSize || 2.5, 2)}rem;\r\n+      font-family: ${props => props.theme?.fonts?.heading};\r\n+      color: ${props => props.theme?.colors?.accent || '#800000'};\r\n+      outline: none;\r\n+      padding: 0.5rem;\r\n+      \r\n+      @media (min-width: 768px) {\r\n+        font-size: ${props => props.fontSize || '2.5rem'};\r\n+      }\r\n+\r\n+      &:focus {\r\n+        color: ${props => props.theme?.colors?.accent || '#800000'};\r\n+      }\r\n+\r\n+      &::placeholder {\r\n+        color: ${props => `${props.theme?.colors?.accent}80` || 'rgba(128, 0, 0, 0.5)'};\r\n+      }\r\n+    }\r\n+  }\r\n+\r\n+  .shop-description-container {\r\n+    width: 100%;\r\n+    margin-top: 0.25rem;\r\n+\r\n+    textarea {\r\n+      width: 100%;\r\n+      text-align: center;\r\n+      background: transparent;\r\n+      border: none;\r\n+      font-size: 1rem;\r\n+      font-family: ${props => props.theme?.fonts?.body};\r\n+      color: ${props => props.theme?.colors?.text};\r\n+      opacity: 0.8;\r\n+      outline: none;\r\n+      padding: 0.5rem;\r\n+      resize: none;\r\n+      min-height: 60px;\r\n+\r\n+      @media (min-width: 768px) {\r\n+        font-size: 1.1rem;\r\n+      }\r\n+\r\n+      &:focus {\r\n+        opacity: 1;\r\n+      }\r\n+\r\n+      &::placeholder {\r\n+        color: ${props => props.theme?.colors?.text};\r\n+        opacity: 0.5;\r\n+      }\r\n+    }\r\n+  }\r\n+`;\r\n+\r\n+// View toggle container\r\n+const ViewToggleContainer = styled.div`\r\n+  position: fixed;\r\n+  bottom: 1rem;\r\n+  left: 24%;\r\n+  transform: translateX(-50%);\r\n+  z-index: 90;\r\n+  display: flex;\r\n+  background: ${props => `${props.theme?.colors?.background || '#000000'}E5`};\r\n+  backdrop-filter: blur(10px);\r\n+  border-radius: 20px;\r\n+  border: 1px solid ${props => `${props.theme?.colors?.accent}40` || 'rgba(128, 0, 0, 0.4)'};\r\n+  padding: 0.25rem;\r\n+  \r\n+  @media (min-width: 768px) {\r\n+    bottom: 2rem;\r\n+  }\r\n+`;\r\n+\r\n+const ViewToggleButton = styled.button`\r\n+  background: ${props => props.active ? props.theme?.colors?.accent || '#800000' : 'transparent'};\r\n+  border: none;\r\n+  color: ${props => props.active ? 'white' : props.theme?.colors?.text || '#FFFFFF'};\r\n+  padding: 0.5rem 1rem;\r\n+  border-radius: 16px;\r\n+  cursor: pointer;\r\n+  display: flex;\r\n+  align-items: center;\r\n+  gap: 0.5rem;\r\n+  font-size: 0.9rem;\r\n+  transition: all 0.3s ease;\r\n+  \r\n+  &:active {\r\n+    transform: scale(0.95);\r\n+  }\r\n+`;\r\n+\r\n+// Mobile-friendly grid container\r\n+const ItemsContainer = styled.div`\r\n+  margin-top: 2rem;\r\n+`;\r\n+\r\n+// CHANGE 3: Update ItemCard styled component (around line 346)\r\n+// REPLACE the entire ItemCard component with:\r\n+const ItemCard = styled.div`\r\n+  background: ${props => props.theme?.colors?.surface || 'rgba(255, 255, 255, 0.05)'};\r\n+  border-radius: ${props => props.theme?.styles?.borderRadius || '12px'};\r\n+  overflow: hidden;\r\n+  border: 1px solid ${props => `${props.theme?.colors?.accent}30` || 'rgba(255, 255, 255, 0.1)'};\r\n+  position: relative;\r\n+  transition: all 0.3s;\r\n+  width: 100%;\r\n+  min-width: 320px;\r\n+\r\n+  &:hover {\r\n+    transform: translateY(-5px);\r\n+    border-color: ${props => props.theme?.colors?.accent};\r\n+  }\r\n+`;\r\n+\r\n+const ItemImageContainer = styled.div`\r\n+  position: relative;\r\n+  height: 250px;\r\n+  overflow: hidden;\r\n+  display: flex;\r\n+  align-items: center;\r\n+  justify-content: center;\r\n+  background: ${props => `${props.theme?.colors?.background || '#000000'}50`};\r\n+\r\n+  @media (min-width: 768px) {\r\n+    height: 280px;\r\n+  }\r\n+\r\n+  .image-container {\r\n+    width: 100%;\r\n+    height: 100%;\r\n+    position: relative;\r\n+    touch-action: pan-y;\r\n+  }\r\n+\r\n+  .placeholder {\r\n+    width: 100%;\r\n+    height: 100%;\r\n+    display: flex;\r\n+    flex-direction: column;\r\n+    align-items: center;\r\n+    justify-content: center;\r\n+    gap: 0.5rem;\r\n+    color: ${props => props.theme?.colors?.text || '#fff'};\r\n+    opacity: 0.5;\r\n+    cursor: pointer;\r\n+    transition: all 0.3s ease;\r\n+    \r\n+    &:hover {\r\n+      opacity: 0.8;\r\n+      background: ${props => `${props.theme?.colors?.accent}10` || 'rgba(255, 255, 255, 0.05)'};\r\n+    }\r\n+    \r\n+    span {\r\n+      font-size: 0.9rem;\r\n+      font-family: ${props => props.theme?.fonts?.body || \"'Inter', sans-serif\"};\r\n+    }\r\n+  }\r\n+\r\n+  .carousel-arrow {\r\n+    position: absolute;\r\n+    top: 50%;\r\n+    transform: translateY(-50%);\r\n+    background: ${props => `${props.theme?.colors?.background || '#000000'}80`};\r\n+    border: 1px solid ${props => `${props.theme?.colors?.accent}40` || 'rgba(255, 255, 255, 0.2)'};\r\n+    border-radius: 50%;\r\n+    width: 32px;\r\n+    height: 32px;\r\n+    display: flex;\r\n+    align-items: center;\r\n+    justify-content: center;\r\n+    color: ${props => props.theme?.colors?.text || 'white'};\r\n+    cursor: pointer;\r\n+    z-index: 2;\r\n+    opacity: 0.8;\r\n+    transition: all 0.3s ease;\r\n+\r\n+    @media (max-width: 767px) {\r\n+      width: 28px;\r\n+      height: 28px;\r\n+      opacity: 0.9;\r\n+      \r\n+      &:active {\r\n+        transform: translateY(-50%) scale(0.9);\r\n+      }\r\n+    }\r\n+\r\n+    &:hover {\r\n+      background: ${props => `${props.theme?.colors?.accent}40` || 'rgba(0, 0, 0, 0.7)'};\r\n+      opacity: 1;\r\n+    }\r\n+\r\n+    &.left {\r\n+      left: 10px;\r\n+    }\r\n+\r\n+    &.right {\r\n+      right: 10px;\r\n+    }\r\n+  }\r\n+\r\n+  .image-dots {\r\n+    position: absolute;\r\n+    bottom: 0.5rem;\r\n+    left: 50%;\r\n+    transform: translateX(-50%);\r\n+    display: flex;\r\n+    gap: 0.25rem;\r\n+    z-index: 2;\r\n+    \r\n+    .dot {\r\n+      width: 6px;\r\n+      height: 6px;\r\n+      border-radius: 50%;\r\n+      background: ${props => props.theme?.colors?.text || '#FFFFFF'};\r\n+      opacity: 0.3;\r\n+      transition: opacity 0.3s ease;\r\n+      \r\n+      &.active {\r\n+        opacity: 1;\r\n+      }\r\n+    }\r\n+  }\r\n+`;\r\n+\r\n+const ItemContent = styled.div`\r\n+  padding: 1rem;\r\n+  display: flex;\r\n+  flex-direction: column;\r\n+  gap: 0.75rem;\r\n+  \r\n+  @media (min-width: 768px) {\r\n+    padding: 1.5rem;\r\n+    gap: 1rem;\r\n+  }\r\n+`;\r\n+\r\n+const ItemHeader = styled.div`\r\n+  display: flex;\r\n+  justify-content: space-between;\r\n+  align-items: center;\r\n+  margin-bottom: 0.5rem;\r\n+  cursor: pointer;\r\n+  \r\n+  h4 {\r\n+    margin: 0;\r\n+    font-size: 1rem;\r\n+    color: ${props => props.theme?.colors?.text || '#FFFFFF'};\r\n+    \r\n+    @media (min-width: 768px) {\r\n+      font-size: 1.1rem;\r\n+    }\r\n+  }\r\n+`;\r\n+\r\n+const ExpandButton = styled.button`\r\n+  background: transparent;\r\n+  border: none;\r\n+  color: ${props => props.theme?.colors?.accent || '#800000'};\r\n+  cursor: pointer;\r\n+  padding: 0.25rem;\r\n+  display: flex;\r\n+  align-items: center;\r\n+  justify-content: center;\r\n+  border-radius: 50%;\r\n+  transition: all 0.3s ease;\r\n+  \r\n+  &:active {\r\n+    transform: scale(0.9);\r\n+  }\r\n+`;\r\n+\r\n+const ItemDetails = styled.div`\r\n+  max-height: ${props => props.expanded ? '500px' : '0'};\r\n+  overflow: hidden;\r\n+  transition: max-height 0.3s ease;\r\n+  \r\n+  .details-content {\r\n+    padding-top: ${props => props.expanded ? '1rem' : '0'};\r\n+    display: flex;\r\n+    flex-direction: column;\r\n+    gap: 0.75rem;\r\n+  }\r\n+`;\r\n+\r\n+const DeleteButton = styled.button`\r\n+  position: absolute;\r\n+  top: 10px;\r\n+  right: 10px;\r\n+  background: rgba(0, 0, 0, 0.5);\r\n+  border: none;\r\n+  border-radius: 50%;\r\n+  width: 30px;\r\n+  height: 30px;\r\n+  display: flex;\r\n+  align-items: center;\r\n+  justify-content: center;\r\n+  color: white;\r\n+  cursor: pointer;\r\n+  z-index: 10;\r\n+  opacity: 0.7;\r\n+  \r\n+  &:hover {\r\n+    opacity: 1;\r\n+    background: rgba(255, 0, 0, 0.5);\r\n+  }\r\n+`;\r\n+\r\n+const AddItemButton = styled.button`\r\n+  background: ${props => props.theme?.colors?.accent || '#800000'};\r\n+  color: white;\r\n+  border: none;\r\n+  border-radius: ${props => props.theme?.styles?.borderRadius || '8px'};\r\n+  padding: 1rem 1.5rem;\r\n+  font-weight: 600;\r\n+  font-family: ${props => props.theme?.fonts?.heading || \"'Space Grotesk', sans-serif\"};\r\n+  display: flex;\r\n+  align-items: center;\r\n+  gap: 0.5rem;\r\n+  cursor: pointer;\r\n+  margin: 1rem auto 2rem;\r\n+  transition: all 0.3s ease;\r\n+  justify-content: center;\r\n+  width: 100%;\r\n+  max-width: 300px;\r\n+\r\n+  @media (min-width: 768px) {\r\n+    width: auto;\r\n+    max-width: none;\r\n+  }\r\n+\r\n+  &:hover {\r\n+    transform: translateY(-2px);\r\n+    box-shadow: 0 6px 15px ${props => `${props.theme?.colors?.accent}60` || 'rgba(128, 0, 0, 0.4)'};\r\n+  }\r\n+\r\n+  &:active {\r\n+    transform: translateY(1px);\r\n+  }\r\n+`;\r\n+\r\n+const CategorySelect = styled.select`\r\n+  width: 100%;\r\n+  background: #1a1a1a !important;\r\n+  border: 1px solid ${props => `${props.theme?.colors?.accent}30` || 'rgba(255, 255, 255, 0.1)'};\r\n+  border-radius: ${props => props.theme?.styles?.borderRadius || '8px'};\r\n+  padding: 0.75rem;\r\n+  color: #ffffff !important;\r\n+  font-family: ${props => props.theme?.fonts?.body || \"'Inter', sans-serif\"};\r\n+  \r\n+  &:focus {\r\n+    outline: none;\r\n+    border-color: ${props => props.theme?.colors?.accent || '#800000'};\r\n+  }\r\n+  \r\n+  option {\r\n+    background: #1a1a1a !important;\r\n+    color: #ffffff !important;\r\n+    padding: 0.5rem;\r\n+  }\r\n+`;\r\n+\r\n+\r\n+const ActionButton = styled.button`\r\n+  background: ${props => props.theme?.colors?.accent || '#800000'};\r\n+  color: white;\r\n+  border: none;\r\n+  padding: 1rem 2rem;\r\n+  border-radius: 30px;\r\n+  font-weight: bold;\r\n+  cursor: pointer;\r\n+  transition: all 0.3s;\r\n+  text-transform: uppercase;\r\n+  letter-spacing: 1px;\r\n+  font-family: ${props => props.theme?.fonts?.body || 'sans-serif'};\r\n+  display: flex;\r\n+  align-items: center;\r\n+  gap: 0.5rem;\r\n+  box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);\r\n+\r\n+  @media (max-width: 767px) {\r\n+    padding: 0.8rem 1.5rem;\r\n+    font-size: 0.9rem;\r\n+    letter-spacing: 0.5px;\r\n+  }\r\n+\r\n+  &:hover {\r\n+    transform: translateY(-2px);\r\n+    box-shadow: 0 6px 20px ${props => `${props.theme?.colors?.accent}4D` || 'rgba(128, 0, 0, 0.3)'};\r\n+  }\r\n+\r\n+  &:active {\r\n+    transform: translateY(1px);\r\n+  }\r\n+\r\n+  &:disabled {\r\n+    opacity: 0.5;\r\n+    cursor: not-allowed;\r\n+    transform: none;\r\n+  }\r\n+`;\r\n+\r\n+const TabControlsContainer = styled.div`\r\n+  display: flex;\r\n+  justify-content: center;\r\n+  margin: 2rem 0;\r\n+  padding: 0 1rem;\r\n+  \r\n+  @media (min-width: 768px) {\r\n+    margin: 3rem 0;\r\n+    padding: 0;\r\n+  }\r\n+`;\r\n+\r\n+const GlobalStyles = createGlobalStyle`\r\n+  .ping {\r\n+    position: absolute;\r\n+    width: 2px;\r\n+    height: 2px;\r\n+    border-radius: 50%;\r\n+    background: #800000;\r\n+    pointer-events: none;\r\n+    \r\n+    /* Disable on mobile for performance */\r\n+    @media (max-width: 767px) {\r\n+      display: none;\r\n+    }\r\n+  }\r\n+\r\n+  .ping::before {\r\n+    content: '';\r\n+    position: absolute;\r\n+    top: 50%;\r\n+    left: 50%;\r\n+    width: 200px;\r\n+    height: 200px;\r\n+    transform: translate(-50%, -50%);\r\n+    border-radius: 50%;\r\n+    background: radial-gradient(circle, rgba(128, 0, 0, 0.4) 0%, transparent 70%);\r\n+    animation: ping 2s ease-out forwards;\r\n+  }\r\n+\r\n+  @keyframes ping {\r\n+    0% {\r\n+      width: 0px;\r\n+      height: 0px;\r\n+      opacity: 1;\r\n+    }\r\n+    100% {\r\n+      width: 200px;\r\n+      height: 200px;\r\n+      opacity: 0;\r\n+    }\r\n+  }\r\n+`;\r\n+\r\n+const ItemsGrid = styled.div`\r\n+  display: grid;\r\n+  grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));\r\n+  gap: 1rem;\r\n+  \r\n+  @media (min-width: 480px) {\r\n+    gap: 1.5rem;\r\n+    grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));\r\n+  }\r\n+  \r\n+  @media (min-width: 768px) {\r\n+    gap: 2rem;\r\n+    grid-template-columns: repeat(auto-fill, minmax(380px, 1fr));\r\n+  }\r\n+  \r\n+  @media (min-width: 1024px) {\r\n+    grid-template-columns: repeat(auto-fill, minmax(400px, 1fr));\r\n+  }\r\n+\r\n+  /* Mobile template card grid - 2 items per row */\r\n+  @media (max-width: 767px) {\r\n+    grid-template-columns: repeat(2, 1fr); /* Changed from repeat(3, 1fr) */\r\n+    gap: 0.75rem;\r\n+    padding: 0 0.5rem;\r\n+  }\r\n+`;\r\n+\r\n+const MobileTemplateImageContainer = styled.div`\r\n+  position: relative;\r\n+  height: 120px;\r\n+  overflow: hidden;\r\n+  background: ${props => `${props.theme?.colors?.background || '#000000'}50`};\r\n+  display: flex;\r\n+  align-items: center;\r\n+  justify-content: center;\r\n+\r\n+  img {\r\n+    width: 100%;\r\n+    height: 100%;\r\n+    object-fit: cover;\r\n+  }\r\n+\r\n+  .placeholder {\r\n+    color: ${props => props.theme?.colors?.text || '#fff'};\r\n+    opacity: 0.3;\r\n+    display: flex;\r\n+    flex-direction: column;\r\n+    align-items: center;\r\n+    gap: 0.25rem;\r\n+\r\n+    svg {\r\n+      width: 24px;\r\n+      height: 24px;\r\n+    }\r\n+\r\n+    span {\r\n+      font-size: 0.75rem; /* Changed from 0.7rem and made slightly larger */\r\n+      font-weight: 500; /* Added for better readability */\r\n+    }\r\n+  }\r\n+\r\n+  .mobile-carousel-arrow {\r\n+    position: absolute;\r\n+    top: 50%;\r\n+    transform: translateY(-50%);\r\n+    background: ${props => `${props.theme?.colors?.background || 'rgba(0, 0, 0, 0.7)'}DD`};\r\n+    border: 1px solid ${props => `${props.theme?.colors?.accent}40` || 'rgba(255, 255, 255, 0.2)'};\r\n+    border-radius: 50%;\r\n+    width: 24px;\r\n+    height: 24px;\r\n+    display: flex;\r\n+    align-items: center;\r\n+    justify-content: center;\r\n+    color: ${props => props.theme?.colors?.text || 'white'};\r\n+    cursor: pointer;\r\n+    z-index: 3;\r\n+    opacity: 0.8;\r\n+    transition: all 0.2s ease;\r\n+\r\n+    &:active {\r\n+      opacity: 1;\r\n+      transform: translateY(-50%) scale(0.9);\r\n+      background: ${props => props.theme?.colors?.accent || '#800000'};\r\n+    }\r\n+\r\n+    &.left {\r\n+      left: 0.25rem;\r\n+    }\r\n+\r\n+    &.right {\r\n+      right: 0.25rem;\r\n+    }\r\n+\r\n+    svg {\r\n+      width: 12px;\r\n+      height: 12px;\r\n+    }\r\n+  }\r\n+\r\n+  .image-dots {\r\n+    position: absolute;\r\n+    bottom: 0.25rem;\r\n+    left: 50%;\r\n+    transform: translateX(-50%);\r\n+    display: flex;\r\n+    gap: 0.2rem;\r\n+    z-index: 2;\r\n+    \r\n+    .dot {\r\n+      width: 4px;\r\n+      height: 4px;\r\n+      border-radius: 50%;\r\n+      background: ${props => props.theme?.colors?.text || '#FFFFFF'};\r\n+      opacity: 0.3;\r\n+      transition: opacity 0.3s ease;\r\n+      \r\n+      &.active {\r\n+        opacity: 1;\r\n+      }\r\n+    }\r\n+  }\r\n+`;\r\n+\r\n+// Mobile Template Card (only shows on mobile)\r\n+const MobileTemplateCard = styled.div`\r\n+  display: none;\r\n+\r\n+  @media (max-width: 767px) {\r\n+    display: flex;\r\n+    flex-direction: column;\r\n+    background: ${props => props.theme?.colors?.surface || 'rgba(255, 255, 255, 0.05)'};\r\n+    border-radius: ${props => props.theme?.styles?.borderRadius || '12px'};\r\n+    overflow: hidden;\r\n+    border: 1px solid ${props => `${props.theme?.colors?.accent}30` || 'rgba(255, 255, 255, 0.1)'};\r\n+    position: relative;\r\n+    transition: all 0.3s ease;\r\n+    cursor: pointer;\r\n+    min-height: 200px;\r\n+\r\n+    &:active {\r\n+      transform: scale(0.98);\r\n+      border-color: ${props => props.theme?.colors?.accent};\r\n+    }\r\n+  }\r\n+`;\r\n+\r\n+const MobileTemplateContent = styled.div`\r\n+  padding: 0.5rem;\r\n+  flex: 1;\r\n+  display: flex;\r\n+  flex-direction: column;\r\n+  justify-content: space-between;\r\n+\r\n+  .item-name {\r\n+    font-size: 0.75rem;\r\n+    font-weight: 600;\r\n+    color: ${props => props.theme?.colors?.text || '#FFFFFF'};\r\n+    margin-bottom: 0.25rem;\r\n+    overflow: hidden;\r\n+    text-overflow: ellipsis;\r\n+    white-space: nowrap;\r\n+    line-height: 1.2;\r\n+  }\r\n+\r\n+  .item-price {\r\n+    font-size: 0.85rem;\r\n+    font-weight: bold;\r\n+    color: ${props => props.theme?.colors?.accent || '#800000'};\r\n+    text-align: right;\r\n+  }\r\n+\r\n+  .empty-text {\r\n+    font-size: 0.7rem;\r\n+    color: ${props => `${props.theme?.colors?.text}60` || 'rgba(255, 255, 255, 0.4)'};\r\n+    font-style: italic;\r\n+  }\r\n+`;\r\n+\r\n+const MobileDeleteButton = styled.button`\r\n+  position: absolute;\r\n+  top: 0.25rem;\r\n+  right: 0.25rem;\r\n+  background: ${props => `${props.theme?.colors?.background || 'rgba(0, 0, 0, 0.7)'}DD`};\r\n+  border: 1px solid ${props => `${props.theme?.colors?.accent}60` || 'rgba(255, 255, 255, 0.3)'};\r\n+  border-radius: 50%;\r\n+  width: 24px;\r\n+  height: 24px;\r\n+  display: flex;\r\n+  align-items: center;\r\n+  justify-content: center;\r\n+  color: #ff4444;\r\n+  cursor: pointer;\r\n+  z-index: 4;\r\n+  opacity: 0.9;\r\n+  transition: all 0.2s ease;\r\n+\r\n+  &:active {\r\n+    transform: scale(0.9);\r\n+    background: ${props => props.theme?.colors?.accent || '#800000'};\r\n+    color: white;\r\n+  }\r\n+\r\n+  svg {\r\n+    width: 12px;\r\n+    height: 12px;\r\n+  }\r\n+`;\r\n+\r\n+\r\n+// Desktop card - hide on mobile\r\n+const DesktopItemCard = styled(ItemCard)`\r\n+  @media (max-width: 767px) {\r\n+    display: none;\r\n+  }\r\n+`;\r\n+\r\n+// Main Component\r\n+const LiveShopCreation = () => {\r\n+  const navigate = useNavigate();\r\n+  const { saveTempStore } = useTempStore();\r\n+  const { isAuthenticated } = useAuth();\r\n+  \r\n+  // State management\r\n+  const [activeTab, setActiveTab] = useState('shop');\r\n+  const [selectedTheme, setSelectedTheme] = useState(WELCOME_STYLES.STYLE_1);\r\n+  const [shopNameFontSize, setShopNameFontSize] = useState(2.5);\r\n+  const [isPinned, setIsPinned] = useState(false);\r\n+  const [isRefreshing, setIsRefreshing] = useState(false);\r\n+  const [expandedItems, setExpandedItems] = useState(new Set());\r\n+  const [validationErrors, setValidationErrors] = useState({});\r\n+  const [editingItem, setEditingItem] = useState(null);\r\n+\r\n+  // Add these new state variables at the top of LiveShopCreation component (around line 1000)\r\n+  const [shopNameError, setShopNameError] = useState('');\r\n+  const [checkingUsername, setCheckingUsername] = useState(false);\r\n+  const [usernameAvailable, setUsernameAvailable] = useState(null);\r\n+\r\n+  const [shopData, setShopData] = useState({\r\n+    name: 'MyBrandName', // ADD DEFAULT NAME HERE\r\n+    description: '',\r\n+    profile: null,\r\n+    mission: '',\r\n+    items: [{\r\n+      id: Date.now().toString(),\r\n+      name: 'MyItemName',\r\n+      price: '',\r\n+      description: '',\r\n+      category: 'Other',\r\n+      images: [null, null, null],\r\n+      currentImageIndex: 0,\r\n+      address: '',\r\n+      coordinates: null,\r\n+      tags: [],\r\n+      quantity: 1\r\n+    }],\r\n+    layout: {\r\n+      namePosition: 'left',\r\n+      tabPosition: 'top'\r\n+    }\r\n+  });\r\n+\r\n+  // Add this function to check username availability\r\n+  // UPDATE checkUsernameAvailability function (around line 1050)\r\n+const checkUsernameAvailability = async (shopName) => {\r\n+  // Skip check for empty or default names\r\n+  if (!shopName || shopName.trim() === '' || shopName === 'MyBrandName') {\r\n+    setShopNameError('');\r\n+    setUsernameAvailable(null);\r\n+    return;\r\n+  }\r\n+\r\n+  setCheckingUsername(true);\r\n+  setShopNameError('');\r\n+  setUsernameAvailable(null);\r\n+\r\n+  try {\r\n+    // Generate potential username from shop name\r\n+    const potentialUsername = shopName\r\n+      .toLowerCase()\r\n+      .replace(/[^a-z0-9]/g, '')\r\n+      .substring(0, 20);\r\n+\r\n+    if (!potentialUsername) {\r\n+      setShopNameError('Shop name must contain letters or numbers');\r\n+      setUsernameAvailable(false);\r\n+      setCheckingUsername(false);\r\n+      return;\r\n+    }\r\n+\r\n+    // Check if username exists\r\n+    const { usernameExists } = await import('../../firebase/firebaseService');\r\n+    const exists = await usernameExists(potentialUsername);\r\n+\r\n+    if (exists) {\r\n+      setShopNameError('This shop name is already taken');\r\n+      setUsernameAvailable(false);\r\n+    } else {\r\n+      setUsernameAvailable(true);\r\n+    }\r\n+  } catch (error) {\r\n+    console.error('Error checking username:', error);\r\n+    setShopNameError('Error checking availability');\r\n+    setUsernameAvailable(false);\r\n+  } finally {\r\n+    setCheckingUsername(false);\r\n+  }\r\n+};\r\n+\r\n+  // Add debounced username check\r\n+  // UPDATE the debounced username check useEffect (around line 1100)\r\n+useEffect(() => {\r\n+  // Don't check on initial mount or if name is the default placeholder\r\n+  if (!shopData?.name || shopData.name === 'MyBrandName') {\r\n+    setShopNameError('');\r\n+    setUsernameAvailable(null);\r\n+    return;\r\n+  }\r\n+\r\n+  const timer = setTimeout(() => {\r\n+    checkUsernameAvailability(shopData.name);\r\n+  }, 500); // Check 500ms after user stops typing\r\n+\r\n+  return () => clearTimeout(timer);\r\n+}, [shopData?.name]); // Add optional chaining\r\n+\r\n+\r\n+  \r\n+\r\n+  // Add this useEffect for browser back button handling\r\n+  useEffect(() => {\r\n+    const handlePopState = (event) => {\r\n+      if (editingItem) {\r\n+        event.preventDefault();\r\n+        setEditingItem(null);\r\n+        // Push state again so user doesn't accidentally leave the page\r\n+        window.history.pushState(null, '', window.location.pathname);\r\n+      }\r\n+    };\r\n+\r\n+    // Push initial state when modal opens\r\n+    if (editingItem) {\r\n+      window.history.pushState(null, '', window.location.pathname);\r\n+      window.addEventListener('popstate', handlePopState);\r\n+    }\r\n+\r\n+    return () => {\r\n+      window.removeEventListener('popstate', handlePopState);\r\n+    };\r\n+  }, [editingItem]);\r\n+\r\n+  // Add these handler functions inside your component\r\n+  const handleMobileNextImage = (e, itemId) => {\r\n+    e.stopPropagation();\r\n+    const item = shopData.items.find(i => i.id === itemId);\r\n+    if (item && item.images) {\r\n+      const validImages = item.images.filter(Boolean);\r\n+      if (validImages.length > 1) {\r\n+        const currentIndex = item.currentImageIndex || 0;\r\n+        const newIndex = (currentIndex + 1) % validImages.length;\r\n+        handleItemUpdate(itemId, { currentImageIndex: newIndex });\r\n+      }\r\n+    }\r\n+  };\r\n+\r\n+  const handleMobilePrevImage = (e, itemId) => {\r\n+    e.stopPropagation();\r\n+    const item = shopData.items.find(i => i.id === itemId);\r\n+    if (item && item.images) {\r\n+      const validImages = item.images.filter(Boolean);\r\n+      if (validImages.length > 1) {\r\n+        const currentIndex = item.currentImageIndex || 0;\r\n+        const newIndex = (currentIndex - 1 + validImages.length) % validImages.length;\r\n+        handleItemUpdate(itemId, { currentImageIndex: newIndex });\r\n+      }\r\n+    }\r\n+  };\r\n+\r\n+  // Theme management\r\n+  useEffect(() => {\r\n+    const pinnedStyleId = localStorage.getItem('pinnedStyleId');\r\n+    \r\n+    if (pinnedStyleId) {\r\n+      const pinnedStyle = Object.values(WELCOME_STYLES).find(\r\n+        style => style.id.toString() === pinnedStyleId\r\n+      );\r\n+\r\n+      if (pinnedStyle) {\r\n+        setSelectedTheme(pinnedStyle);\r\n+        setIsPinned(true);\r\n+        return;\r\n+      }\r\n+    }\r\n+\r\n+    const styles = Object.values(WELCOME_STYLES);\r\n+    const randomStyle = styles[Math.floor(Math.random() * styles.length)];\r\n+    setSelectedTheme(randomStyle);\r\n+  }, []);\r\n+\r\n+  const refreshTheme = () => {\r\n+    if (isRefreshing) return;\r\n+    \r\n+    setIsRefreshing(true);\r\n+    \r\n+    const styles = Object.values(WELCOME_STYLES);\r\n+    const otherStyles = styles.filter(style => style.id !== selectedTheme.id);\r\n+    \r\n+    if (otherStyles.length > 0) {\r\n+      const randomStyle = otherStyles[Math.floor(Math.random() * otherStyles.length)];\r\n+      setSelectedTheme(randomStyle);\r\n+\r\n+      if (isPinned) {\r\n+        localStorage.removeItem('pinnedStyleId');\r\n+        setIsPinned(false);\r\n+      }\r\n+    }\r\n+\r\n+    setTimeout(() => setIsRefreshing(false), 500);\r\n+  };\r\n+\r\n+  const togglePinStyle = () => {\r\n+    if (isPinned) {\r\n+      localStorage.removeItem('pinnedStyleId');\r\n+      setIsPinned(false);\r\n+\r\n+      const styles = Object.values(WELCOME_STYLES).filter(\r\n+        style => style.id !== selectedTheme.id\r\n+      );\r\n+\r\n+      if (styles.length > 0) {\r\n+        const randomStyle = styles[Math.floor(Math.random() * styles.length)];\r\n+        setSelectedTheme(randomStyle);\r\n+      }\r\n+    } else {\r\n+      localStorage.setItem('pinnedStyleId', selectedTheme.id.toString());\r\n+      setIsPinned(true);\r\n+    }\r\n+  };\r\n+\r\n+  const handleLogout = async () => {\r\n+    try {\r\n+      await signOut(auth);\r\n+      navigate('/');\r\n+    } catch (error) {\r\n+      console.error('Error signing out:', error);\r\n+    }\r\n+  };\r\n+\r\n+  // Item management\r\n+  const handleShopDataChange = (field, value) => {\r\n+    setShopData(prev => ({\r\n+      ...prev,\r\n+      [field]: value\r\n+    }));\r\n+  };\r\n+\r\n+  const handleItemAdd = () => {\r\n+    const newItem = {\r\n+      id: Date.now().toString(),\r\n+      name: 'MyItemName',\r\n+      price: '',\r\n+      description: '',\r\n+      category: 'Other',\r\n+      images: [null, null, null],\r\n+      currentImageIndex: 0,\r\n+      address: '',\r\n+      coordinates: null,\r\n+      tags: [],\r\n+      quantity: 1\r\n+    };\r\n+\r\n+    // Add to beginning instead of end\r\n+    setShopData(prev => ({\r\n+      ...prev,\r\n+      items: [newItem, ...prev.items]\r\n+    }));\r\n+\r\n+    // Auto-expand on desktop\r\n+    if (window.innerWidth >= 768) {\r\n+      setExpandedItems(new Set([newItem.id]));\r\n+    }\r\n+  };\r\n+\r\n+  const handleItemUpdate = (itemId, updates) => {\r\n+    setShopData(prev => ({\r\n+      ...prev,\r\n+      items: prev.items.map(item => \r\n+        item.id === itemId ? { ...item, ...updates } : item\r\n+      )\r\n+    }));\r\n+  };\r\n+\r\n+  const handleItemDelete = (itemId) => {\r\n+    setShopData(prev => ({\r\n+      ...prev,\r\n+      items: prev.items.filter(item => item.id !== itemId)\r\n+    }));\r\n+  };\r\n+\r\n+  const toggleItemExpansion = (itemId) => {\r\n+    setExpandedItems(prev => {\r\n+      const newSet = new Set(prev);\r\n+      if (newSet.has(itemId)) {\r\n+        newSet.delete(itemId);\r\n+      } else {\r\n+        newSet.add(itemId);\r\n+      }\r\n+      return newSet;\r\n+    });\r\n+  };\r\n+\r\n+  // Update handleSave function (around line 1200)\r\n+  // UPDATE handleSave function in LiveShopCreation.js (around line 1200)\r\n+const handleSave = async () => {\r\n+  // Check if shop name is still default or empty\r\n+  let finalShopName = shopData.name;\r\n+  \r\n+  if (!finalShopName || finalShopName === 'MyBrandName') {\r\n+    const adjectives = ['Cool', 'Great', 'Super', 'Amazing', 'Awesome', 'Epic', 'Prime', 'Elite'];\r\n+    const nouns = ['Shop', 'Store', 'Market', 'Bazaar', 'Outlet', 'Hub', 'Spot', 'Place'];\r\n+    const randomAdjective = adjectives[Math.floor(Math.random() * adjectives.length)];\r\n+    const randomNoun = nouns[Math.floor(Math.random() * nouns.length)];\r\n+    const randomNumber = Math.floor(Math.random() * 1000);\r\n+    \r\n+    finalShopName = `${randomAdjective}${randomNoun}${randomNumber}`;\r\n+  }\r\n+\r\n+  if (shopNameError || usernameAvailable === false) {\r\n+    alert('Please choose a different shop name - this one is already taken');\r\n+    return;\r\n+  }\r\n+\r\n+  const shopValidation = validateShopData({ ...shopData, name: finalShopName });\r\n+  const itemsValidation = validateAllItems(shopData.items);\r\n+\r\n+  if (!shopValidation.isValid || !itemsValidation.isValid) {\r\n+    setValidationErrors({\r\n+      shop: shopValidation.errors,\r\n+      items: itemsValidation.itemErrors\r\n+    });\r\n+\r\n+    window.scrollTo({ top: 0, behavior: 'smooth' });\r\n+    alert('Please fix validation errors before saving');\r\n+    return;\r\n+  }\r\n+\r\n+  // Prepare data with proper profile handling\r\n+  const dataToSave = {\r\n+    ...shopData,\r\n+    name: finalShopName,\r\n+    theme: selectedTheme,\r\n+    layout: {\r\n+      namePosition: shopData.layout.namePosition,\r\n+      tabPosition: 'top',\r\n+      nameSize: shopNameFontSize\r\n+    },\r\n+    createdAt: new Date().toISOString()\r\n+  };\r\n+\r\n+  // Handle profile image - ensure it's in the correct format\r\n+  if (shopData.profile) {\r\n+    if (typeof shopData.profile === 'string') {\r\n+      // Already a URL\r\n+      dataToSave.profile = shopData.profile;\r\n+    } else if (shopData.profile.file) {\r\n+      // File object with preview\r\n+      dataToSave.profile = {\r\n+        file: shopData.profile.file,\r\n+        preview: shopData.profile.preview,\r\n+        type: shopData.profile.type,\r\n+        name: shopData.profile.name\r\n+      };\r\n+    }\r\n+  }\r\n+\r\n+  // Generate username\r\n+  if (dataToSave.name) {\r\n+    try {\r\n+      const { generateUsername } = await import('../../firebase/firebaseService');\r\n+      dataToSave.username = await generateUsername(dataToSave.name);\r\n+    } catch (error) {\r\n+      console.error('Error generating username:', error);\r\n+      dataToSave.username = dataToSave.name\r\n+        .toLowerCase()\r\n+        .replace(/[^a-z0-9]/g, '')\r\n+        .substring(0, 20) || 'shop';\r\n+    }\r\n+  }\r\n+\r\n+  console.log('Saving data with profile:', dataToSave.profile); // Debug log\r\n+\r\n+  saveTempStore(dataToSave);\r\n+\r\n+  navigate('/auth', {\r\n+    state: { \r\n+      mode: 'signup', \r\n+      tempData: dataToSave \r\n+    }\r\n+  });\r\n+};\r\n+\r\n+  const renderShopView = () => (\r\n+    <MainContent>\r\n+      <ShopProfileSection fontSize={shopNameFontSize}>\r\n+        <div className=\"profile-image\">\r\n+          <EditableImage\r\n+            value={shopData.profile}\r\n+            onChange={(value) => handleShopDataChange('profile', value)}\r\n+            theme={selectedTheme}\r\n+            round\r\n+            width=\"100%\"\r\n+            height=\"100%\"\r\n+          />\r\n+        </div>\r\n+        <div className=\"shop-name-container\">\r\n+          <ShopNameInputContainer>\r\n+            <ShopNameInput\r\n+              value={shopData?.name || ''} // Add optional chaining and fallback\r\n+              onChange={(e) => {\r\n+                handleShopDataChange('name', e.target.value);\r\n+              }}\r\n+              placeholder=\"MyBrandName*\" // Show asterisk in placeholder\r\n+              fontSize={shopNameFontSize}\r\n+              theme={selectedTheme}\r\n+              isError={!!shopNameError}\r\n+            />\r\n+            {checkingUsername && (\r\n+              <ShopNameError theme={selectedTheme}>\r\n+                Checking availability...\r\n+              </ShopNameError>\r\n+            )}\r\n+            {shopNameError && (\r\n+              <ShopNameError theme={selectedTheme}>\r\n+                {shopNameError}\r\n+              </ShopNameError>\r\n+            )}\r\n+            {usernameAvailable && !checkingUsername && shopData.name !== 'MyBrandName' && (\r\n+              <ShopNameSuccess theme={selectedTheme}>\r\n+                âœ“ Shop name available\r\n+              </ShopNameSuccess>\r\n+            )}\r\n+          </ShopNameInputContainer>\r\n+        </div>\r\n+        <div className=\"shop-description-container\">\r\n+          <ValidatedEditableText\r\n+            value={shopData.description}\r\n+            onChange={(value) => handleShopDataChange('description', value)}\r\n+            placeholder=\"Shop Description\"\r\n+            multiline={false}\r\n+            validationRules={VALIDATION_RULES.shop.description}\r\n+            theme={selectedTheme}\r\n+          />\r\n+        </div>\r\n+      </ShopProfileSection>\r\n+\r\n+      <AddItemButton onClick={handleItemAdd} theme={selectedTheme}>\r\n+        <Plus size={20} />\r\n+        Add Item\r\n+      </AddItemButton>\r\n+\r\n+      <ItemsContainer>\r\n+        <ItemsGrid>\r\n+          {shopData.items.map(item => {\r\n+            const isExpanded = expandedItems.has(item.id);\r\n+                    \r\n+            // FIX: Get the item directly from shopData.items each time to ensure fresh data\r\n+            const currentItem = shopData.items.find(i => i.id === item.id);\r\n+            const validImages = currentItem.images.filter(Boolean);\r\n+            const currentImageIndex = currentItem.currentImageIndex || 0;\r\n+            const currentImage = validImages[currentImageIndex] || null;\r\n+                    \r\n+            return (\r\n+              <React.Fragment key={item.id}>\r\n+                {/* Mobile Template Card */}\r\n+                <MobileTemplateCard \r\n+                  theme={selectedTheme}\r\n+                  onClick={() => {\r\n+                    // Create a deep copy of the current item\r\n+                    const itemToEdit = shopData.items.find(i => i.id === item.id);\r\n+                    console.log('Opening item for edit:', itemToEdit);\r\n+                    setEditingItem({\r\n+                      ...itemToEdit,\r\n+                      // Ensure all arrays are properly copied\r\n+                      images: [...itemToEdit.images],\r\n+                      currentImageIndex: itemToEdit.currentImageIndex || 0\r\n+                    });\r\n+                  }}\r\n+                >\r\n+                  <MobileTemplateImageContainer theme={selectedTheme}>\r\n+                    {currentImage ? (\r\n+                      <img src={currentImage} alt={currentItem.name || 'Item'} />\r\n+                    ) : (\r\n+                      <div className=\"placeholder\">\r\n+                        <Package size={24} />\r\n+                        <span>Image</span>\r\n+                      </div>\r\n+                    )}\r\n+                \r\n+                    {/* Carousel arrows for mobile */}\r\n+                    {validImages.length > 1 && (\r\n+                      <>\r\n+                        <button \r\n+                          className=\"mobile-carousel-arrow left\"\r\n+                          onClick={(e) => handleMobilePrevImage(e, currentItem.id)}\r\n+                        >\r\n+                          <ChevronLeft size={12} />\r\n+                        </button>\r\n+                        <button \r\n+                          className=\"mobile-carousel-arrow right\"\r\n+                          onClick={(e) => handleMobileNextImage(e, currentItem.id)}\r\n+                        >\r\n+                          <ChevronRight size={12} />\r\n+                        </button>\r\n+                    \r\n+                        {/* Image dots */}\r\n+                        <div className=\"image-dots\">\r\n+                          {validImages.map((_, index) => (\r\n+                            <div \r\n+                              key={index}\r\n+                              className={`dot ${index === currentImageIndex ? 'active' : ''}`}\r\n+                            />\r\n+                          ))}\r\n+                        </div>\r\n+                      </>\r\n+                    )}\r\n+                \r\n+                    <MobileDeleteButton \r\n+                      onClick={(e) => {\r\n+                        e.stopPropagation();\r\n+                        handleItemDelete(currentItem.id);\r\n+                      }}\r\n+                    >\r\n+                      <X size={12} />\r\n+                    </MobileDeleteButton>\r\n+                  </MobileTemplateImageContainer>\r\n+                    \r\n+                  <MobileTemplateContent theme={selectedTheme}>\r\n+                    <div className=\"item-name\">\r\n+                      {currentItem.name && currentItem.name !== 'MyItemName' ? \r\n+                        currentItem.name : \r\n+                        <span style={{ opacity: 0.5 }}>MyItemName</span>\r\n+                      }\r\n+                    </div>\r\n+                    <div className=\"item-price\">\r\n+                      {currentItem.price ? `$${parseFloat(currentItem.price).toFixed(2)}` : \r\n+                        <span className=\"empty-text\">$0.00</span>}\r\n+                    </div>\r\n+                  </MobileTemplateContent>\r\n+                </MobileTemplateCard>\r\n+\r\n+                {/* Desktop Card - Original Design */}\r\n+                <DesktopItemCard theme={selectedTheme}>\r\n+                  <DeleteButton onClick={() => handleItemDelete(item.id)}>\r\n+                    <X size={16} />\r\n+                  </DeleteButton>\r\n+                    \r\n+                  <ItemImageContainer theme={selectedTheme}>\r\n+                    <div className=\"image-container\">\r\n+                      <EditableImage\r\n+                        value={item.images[item.currentImageIndex]}\r\n+                        onChange={(value) => {\r\n+                          const newImages = [...item.images];\r\n+                          newImages[item.currentImageIndex] = value;\r\n+                          handleItemUpdate(item.id, { images: newImages });\r\n+                        }}\r\n+                        theme={selectedTheme}\r\n+                        height=\"100%\"\r\n+                        width=\"100%\"\r\n+                      />\r\n+                    </div>\r\n+                      \r\n+                    {validImages.length > 0 && (\r\n+                      <>\r\n+                        <button \r\n+                          className=\"carousel-arrow left\"\r\n+                          onClick={() => {\r\n+                            const newIndex = ((item.currentImageIndex - 1) + 3) % 3;\r\n+                            handleItemUpdate(item.id, { currentImageIndex: newIndex });\r\n+                          }}\r\n+                        >\r\n+                          <ChevronLeft size={16} />\r\n+                        </button>\r\n+                        <button \r\n+                          className=\"carousel-arrow right\"\r\n+                          onClick={() => {\r\n+                            const newIndex = (item.currentImageIndex + 1) % 3;\r\n+                            handleItemUpdate(item.id, { currentImageIndex: newIndex });\r\n+                          }}\r\n+                        >\r\n+                          <ChevronRight size={16} />\r\n+                        </button>\r\n+                      </>\r\n+                    )}\r\n+                  </ItemImageContainer>\r\n+\r\n+                  <ItemContent>\r\n+                    <ItemHeader onClick={() => toggleItemExpansion(item.id)}>\r\n+                      <h4>\r\n+                        {item.name && item.name !== 'MyItemName' ? \r\n+                          item.name : \r\n+                          <span style={{ opacity: 0.5 }}>MyItemName</span>\r\n+                        }\r\n+                      </h4>\r\n+                      <ExpandButton>\r\n+                        {isExpanded ? <ChevronUp size={20} /> : <ChevronDown size={20} />}\r\n+                      </ExpandButton>\r\n+                    </ItemHeader>\r\n+\r\n+                    <ItemDetails expanded={isExpanded}>\r\n+                      <div className=\"details-content\">\r\n+                        <ValidatedEditableText\r\n+                          value={item.name}\r\n+                          onChange={(value) => handleItemUpdate(item.id, { name: value })}\r\n+                          placeholder=\"MyItemName\"\r\n+                          validationRules={VALIDATION_RULES.item.name}\r\n+                          theme={selectedTheme}\r\n+                        />\r\n+                        <ValidatedEditableText\r\n+                          value={item.price}\r\n+                          onChange={(value) => handleItemUpdate(item.id, { price: value })}\r\n+                          placeholder=\"Price\"\r\n+                          validationRules={VALIDATION_RULES.item.price}\r\n+                          theme={selectedTheme}\r\n+                        />\r\n+                        <ValidatedEditableText\r\n+                          value={item.description}\r\n+                          onChange={(value) => handleItemUpdate(item.id, { description: value })}\r\n+                          placeholder=\"Item Description\"\r\n+                          validationRules={VALIDATION_RULES.item.description}\r\n+                          multiline\r\n+                          theme={selectedTheme}\r\n+                        />\r\n+                        <CategorySelect\r\n+                          value={item.category || 'Other'}\r\n+                          onChange={(e) => handleItemUpdate(item.id, { category: e.target.value })}\r\n+                          theme={selectedTheme}\r\n+                        >\r\n+                          {ITEM_CATEGORIES.map(category => (\r\n+                            <option key={category} value={category}>\r\n+                              {category}\r\n+                            </option>\r\n+                          ))}\r\n+                        </CategorySelect>\r\n+                        <QuantitySelector \r\n+                          value={parseInt(item.quantity) || 1}\r\n+                          onChange={(value) => handleItemUpdate(item.id, { quantity: value })}\r\n+                          theme={selectedTheme}\r\n+                          min={0}\r\n+                          max={9999}\r\n+                        />\r\n+                        <AddressInput\r\n+                          address={item.address || ''}\r\n+                          onAddressChange={(value) => handleItemUpdate(item.id, { \r\n+                            address: value\r\n+                          })}\r\n+                          onLocationSelect={(location) => {\r\n+                            console.log('Location selected:', location);\r\n+                            if (location?.coordinates) {\r\n+                              handleItemUpdate(item.id, {\r\n+                                address: location.address,\r\n+                                coordinates: location.coordinates\r\n+                              });\r\n+                            } else if (!location?.address) {\r\n+                              handleItemUpdate(item.id, {\r\n+                                address: '',\r\n+                                coordinates: null\r\n+                              });\r\n+                            }\r\n+                          }}\r\n+                        />\r\n+                      </div>\r\n+                    </ItemDetails>\r\n+                  </ItemContent>\r\n+                </DesktopItemCard>\r\n+              </React.Fragment>\r\n+            );\r\n+          })}\r\n+        </ItemsGrid>\r\n+      </ItemsContainer>\r\n+\r\n+      {/* Mobile Edit Modal */}\r\n+      {editingItem && (\r\n+        <EditModal onClick={() => setEditingItem(null)}>\r\n+          <EditModalContent \r\n+            theme={selectedTheme}\r\n+            onClick={(e) => e.stopPropagation()}\r\n+          >\r\n+            {/* Image Section - 50% */}\r\n+      <EditModalImageSection>\r\n+              {/* Action Buttons on Image */}\r\n+              <ImageActionButtons>\r\n+                <ImageActionButton \r\n+                  className=\"check\"\r\n+                  onClick={async () => {\r\n+                    console.log('Saving item:', editingItem);\r\n+                    \r\n+                    // Process images - extract the preview URL or keep string URLs\r\n+                    const processedImages = editingItem.images.map((img) => {\r\n+                      // If it's already a string URL, keep it\r\n+                      if (typeof img === 'string') return img;\r\n+                      \r\n+                      // If it's null or undefined, keep it\r\n+                      if (!img) return null;\r\n+                      \r\n+                      // If it's the EditableImage format with preview, use the preview\r\n+                      if (img?.preview) return img.preview;\r\n+                      \r\n+                      // If it's a File object, create blob URL\r\n+                      if (img instanceof File) {\r\n+                        return URL.createObjectURL(img);\r\n+                      }\r\n+                      \r\n+                      return img;\r\n+                    });\r\n+                    \r\n+                    const updatedItem = {\r\n+                      ...editingItem,\r\n+                      images: processedImages\r\n+                    };\r\n+                    \r\n+                    console.log('Processed item with images:', updatedItem);\r\n+                    handleItemUpdate(editingItem.id, updatedItem);\r\n+                    setEditingItem(null);\r\n+                  }}\r\n+                  title=\"Save changes\"\r\n+                >\r\n+                  <Check size={20} />\r\n+                </ImageActionButton>\r\n+                <ImageActionButton \r\n+                  className=\"close\"\r\n+                  onClick={() => setEditingItem(null)}\r\n+                  title=\"Discard changes\"\r\n+                >\r\n+                  <X size={20} />\r\n+                </ImageActionButton>\r\n+              </ImageActionButtons>\r\n+                \r\n+              <ItemImageContainer theme={selectedTheme} style={{ height: '100%' }}>\r\n+                <div className=\"image-container\">\r\n+                  <EditableImage\r\n+                    value={editingItem.images[editingItem.currentImageIndex]}\r\n+              onChange={(value) => {\r\n+                const newImages = [...editingItem.images];\r\n+                newImages[editingItem.currentImageIndex] = value;\r\n+                setEditingItem({ ...editingItem, images: newImages });\r\n+              }}\r\n+              theme={selectedTheme}\r\n+              height=\"100%\"\r\n+              width=\"100%\"\r\n+                  />\r\n+                </div>\r\n+\r\n+                {editingItem.images.filter(Boolean).length > 1 && (\r\n+                  <>\r\n+              <button \r\n+                className=\"carousel-arrow left\"\r\n+                onClick={() => {\r\n+                  const newIndex = ((editingItem.currentImageIndex - 1) + 3) % 3;\r\n+                  setEditingItem({ ...editingItem, currentImageIndex: newIndex });\r\n+                }}\r\n+              >\r\n+                <ChevronLeft size={16} />\r\n+              </button>\r\n+              <button \r\n+                className=\"carousel-arrow right\"\r\n+                onClick={() => {\r\n+                  const newIndex = (editingItem.currentImageIndex + 1) % 3;\r\n+                  setEditingItem({ ...editingItem, currentImageIndex: newIndex });\r\n+                }}\r\n+              >\r\n+                <ChevronRight size={16} />\r\n+              </button>\r\n+                  </>\r\n+                )}\r\n+              </ItemImageContainer>\r\n+            </EditModalImageSection>\r\n+              \r\n+            {/* Scrollable Info Section - 50% */}\r\n+      <EditModalBody>\r\n+        <ValidatedEditableText\r\n+          value={editingItem.name}\r\n+          onChange={(value) => setEditingItem({ ...editingItem, name: value })}\r\n+          placeholder=\"MyItemName\"\r\n+                validationRules={VALIDATION_RULES.item.name}\r\n+                theme={selectedTheme}\r\n+              />\r\n+\r\n+              <ValidatedEditableText\r\n+          value={editingItem.price}\r\n+          onChange={(value) => setEditingItem({ ...editingItem, price: value })}\r\n+          placeholder=\"Price\"\r\n+          validationRules={VALIDATION_RULES.item.price}\r\n+          theme={selectedTheme}\r\n+              />\r\n+\r\n+              <ValidatedEditableText\r\n+                value={editingItem.description}\r\n+          onChange={(value) => setEditingItem({ ...editingItem, description: value })}\r\n+          placeholder=\"Item Description\"\r\n+          validationRules={VALIDATION_RULES.item.description}\r\n+          multiline\r\n+                theme={selectedTheme}\r\n+        />\r\n+\r\n+        <CategorySelect\r\n+          value={editingItem.category || 'Other'}\r\n+          onChange={(e) => setEditingItem({ ...editingItem, category: e.target.value })}\r\n+                theme={selectedTheme}\r\n+              >\r\n+                {ITEM_CATEGORIES.map(category => (\r\n+            <option key={category} value={category}>\r\n+              {category}\r\n+            </option>\r\n+                ))}\r\n+              </CategorySelect>\r\n+              \r\n+              <QuantitySelector \r\n+                value={parseInt(editingItem.quantity) || 1}\r\n+                onChange={(value) => setEditingItem({ ...editingItem, quantity: value })}\r\n+                theme={selectedTheme}\r\n+                min={0}\r\n+                max={9999}\r\n+              />\r\n+\r\n+              <AddressInput\r\n+                address={editingItem.address || ''}\r\n+                onAddressChange={(value) => setEditingItem({ \r\n+                  ...editingItem, \r\n+                  address: value\r\n+                })}\r\n+                onLocationSelect={(location) => {\r\n+                  console.log('Location selected:', location);\r\n+                  if (location?.coordinates) {\r\n+                    setEditingItem({\r\n+                      ...editingItem,\r\n+                      address: location.address,\r\n+                      coordinates: location.coordinates\r\n+                    });\r\n+                  } else if (!location?.address) {\r\n+                    setEditingItem({\r\n+                      ...editingItem,\r\n+                      address: '',\r\n+                      coordinates: null\r\n+                    });\r\n+                  }\r\n+                }}\r\n+              />\r\n+            </EditModalBody>\r\n+          </EditModalContent>\r\n+        </EditModal>\r\n+      )}\r\n+    </MainContent>\r\n+  );\r\n+\r\n+  const renderHomeView = () => (\r\n+    <MainContent>\r\n+      <div style={{ textAlign: 'center', maxWidth: '800px', margin: '0 auto', padding: '2rem 1rem' }}>\r\n+        <h2 style={{ \r\n+          color: selectedTheme?.colors?.accent || '#800000',\r\n+          fontFamily: selectedTheme?.fonts?.heading || 'inherit',\r\n+          marginBottom: '1.5rem',\r\n+          fontSize: '1.5rem'\r\n+        }}>\r\n+          Mission Statement\r\n+        </h2>\r\n+        <ValidatedEditableText\r\n+          value={shopData.mission}\r\n+          onChange={(value) => handleShopDataChange('mission', value)}\r\n+          placeholder=\"What's your shop's mission?\"\r\n+          multiline\r\n+          validationRules={VALIDATION_RULES.shop.mission}\r\n+          theme={selectedTheme}\r\n+        />\r\n+      </div>\r\n+    </MainContent>\r\n+  );\r\n+\r\n+  const renderCommunityView = () => (\r\n+    <MainContent>\r\n+      <div style={{ textAlign: 'center', padding: '4rem 1rem' }}>\r\n+        <h2 style={{ \r\n+          color: selectedTheme?.colors?.accent || '#800000',\r\n+          fontFamily: selectedTheme?.fonts?.heading || 'inherit',\r\n+          marginBottom: '1rem',\r\n+          fontSize: '1.5rem'\r\n+        }}>\r\n+          Community\r\n+        </h2>\r\n+        <p>Community features will be available after shop creation</p>\r\n+      </div>\r\n+    </MainContent>\r\n+  );\r\n+\r\n+  return (\r\n+    <ThemeProvider theme={selectedTheme}>\r\n+      <GlobalStyles />\r\n+      <PageContainer className=\"page-container\">\r\n+        <Header theme={selectedTheme}>\r\n+          <HeaderLeft>\r\n+            <Logo onClick={() => navigate('/')} theme={selectedTheme}>\r\n+              KALKODE\r\n+            </Logo>\r\n+          </HeaderLeft>\r\n+\r\n+          <HeaderRight>\r\n+            <HeaderTabButton\r\n+              theme={selectedTheme}\r\n+              active={activeTab === 'shop'}\r\n+              onClick={() => setActiveTab('shop')}\r\n+              title=\"Shop\"\r\n+            >\r\n+              <Store size={22} />\r\n+            </HeaderTabButton>\r\n+\r\n+            <HeaderTabButton\r\n+              theme={selectedTheme}\r\n+              active={activeTab === 'home'}\r\n+              onClick={() => setActiveTab('home')}\r\n+              title=\"Home\"\r\n+            >\r\n+              <Home size={22} />\r\n+            </HeaderTabButton>\r\n+\r\n+            <HeaderTabButton\r\n+              theme={selectedTheme}\r\n+              active={activeTab === 'community'}\r\n+              onClick={() => setActiveTab('community')}\r\n+              title=\"Community\"\r\n+            >\r\n+              <Users size={22} />\r\n+            </HeaderTabButton>\r\n+\r\n+            {isAuthenticated && (\r\n+              <HeaderTabButton\r\n+                onClick={handleLogout}\r\n+                theme={selectedTheme}\r\n+                title=\"Logout\"\r\n+              >\r\n+                <LogOut size={22} />\r\n+              </HeaderTabButton>\r\n+            )}\r\n+          </HeaderRight>\r\n+        </Header>\r\n+          \r\n+        {/* ADD Floating Controls before closing PageContainer */}\r\n+        <FloatingControls>\r\n+          <FloatingButton\r\n+            onClick={refreshTheme}\r\n+            theme={selectedTheme}\r\n+            className={isRefreshing ? \"spinning\" : \"\"}\r\n+            title=\"Random theme\"\r\n+          >\r\n+            <RefreshCw size={24} />\r\n+          </FloatingButton>\r\n+          \r\n+          <FloatingButton\r\n+            onClick={togglePinStyle}\r\n+            theme={selectedTheme}\r\n+            isPinned={isPinned}\r\n+            title={isPinned ? \"Unpin theme\" : \"Pin theme\"}\r\n+          >\r\n+            <Pin size={24} />\r\n+          </FloatingButton>\r\n+        </FloatingControls>\r\n+\r\n+        {activeTab === 'shop' && renderShopView()}\r\n+        {activeTab === 'home' && renderHomeView()}\r\n+        {activeTab === 'community' && renderCommunityView()}\r\n+\r\n+        {/* Save Button */}\r\n+        <SaveButtonContainer>\r\n+          <ActionButton\r\n+            onClick={handleSave}\r\n+            disabled={!shopData.name}\r\n+            theme={selectedTheme}\r\n+          >\r\n+            Save / LogIn\r\n+            <ChevronRight size={20} />\r\n+          </ActionButton>\r\n+        </SaveButtonContainer>\r\n+      </PageContainer>\r\n+    </ThemeProvider>\r\n+  );\r\n+};\r\n+\r\n+export default LiveShopCreation;\n\\ No newline at end of file\n"
                }
            ],
            "date": 1735712337787,
            "name": "Commit-0",
            "content": "// Save at: src/pages/shop/LiveShopCreation.js\n\nimport React, { useState, useEffect, useMemo } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport styled, { ThemeProvider, createGlobalStyle } from 'styled-components';\nimport { \n  ChevronLeft, \n  ChevronRight, \n  Settings, \n  Plus,\n  Heart,\n  MessageCircle,\n  Share2,\n  X\n} from 'lucide-react';\nimport { useTempStore } from '../../contexts/TempStoreContext';\nimport EditableText from './components/EditableComponents/EditableText';\nimport EditableImage from './components/EditableComponents/EditableImage';\nimport EditableItem from './components/EditableComponents/EditableItem';\nimport TabPositioner from './components/TabPositioner';\nimport { DEFAULT_THEME } from '../../theme/theme';\n\n// Theme Constants\nexport const ELEMENTAL_THEMES = {\n  WATER: {\n    id: 'water',\n    name: 'Ocean Depths',\n    description: 'Flowing and calm like the deep sea',\n    colors: {\n      background: '#1E3D59',\n      text: '#FFFFFF',\n      primary: '#2D6187',\n      secondary: '#41B3D3',\n      accent: '#41B3D3'\n    },\n    fonts: {\n      heading: \"'Quicksand', sans-serif\",\n      body: \"'Source Sans Pro', sans-serif\"\n    }\n  },\n  FIRE: {\n    id: 'fire',\n    name: 'Ember Forge',\n    description: 'Bold and energetic like flames',\n    colors: {\n      background: '#1A0F0F',\n      text: '#FFFFFF',\n      primary: '#CD2B2B',\n      secondary: '#FF6B4A',\n      accent: '#FFA07A'\n    },\n    fonts: {\n      heading: \"'Bebas Neue', sans-serif\",\n      body: \"'Montserrat', sans-serif\"\n    }\n  },\n  EARTH: {\n    id: 'earth',\n    name: 'Terra Firma',\n    description: 'Grounded and natural like earth',\n    colors: {\n      background: '#1A2213',\n      text: '#E8F3E8',\n      primary: '#2D4A22',\n      secondary: '#5C832F',\n      accent: '#98C379'\n    },\n    fonts: {\n      heading: \"'Playfair Display', serif\",\n      body: \"'Lora', serif\"\n    }\n  },\n  AIR: {\n    id: 'air',\n    name: 'Sky Whisper',\n    description: 'Light and ethereal like the wind',\n    colors: {\n      background: '#2B4865',\n      text: '#FFFFFF',\n      primary: '#6E85B7',\n      secondary: '#C4D7E0',\n      accent: '#F8F9FA'\n    },\n    fonts: {\n      heading: \"'Raleway', sans-serif\",\n      body: \"'Open Sans', sans-serif\"\n    }\n  }\n};\n\n// Navigation Constants\nexport const TAB_POSITIONS = {\n  TOP: 'top',\n  LEFT: 'left',\n  BOTTOM: 'bottom'\n};\n\nexport const SHOP_NAME_POSITIONS = {\n  LEFT: 'left',\n  CENTER: 'center'\n};\n\nconst HiddenInput = styled.input`\n  display: none;\n`;\n\n// Mock Data\nconst MOCK_POSTS = [\n  {\n    id: 1,\n    type: 'media',\n    author: 'ArtisanCrafts',\n    content: 'Just launched our new collection! Check out these handmade pieces. ðŸŽ¨',\n    likes: 42,\n    comments: 12,\n    timeAgo: '2h ago'\n  },\n  {\n    id: 2,\n    type: 'item',\n    author: 'VintageTreasures',\n    item: {\n      name: 'Antique Pocket Watch',\n      price: 299.99,\n      wants: 15\n    },\n    timeAgo: '4h ago'\n  }\n];\n\n// Base Styled Components\n// In LiveShopCreation.js, add these styled components\nconst SelectionBanner = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  height: 80px;\n  background: rgba(0, 0, 0, 0.9);\n  backdrop-filter: blur(10px);\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 0 2rem;\n  z-index: 100;\n  border-bottom: 1px solid rgba(160, 0, 0, 0.3);\n`;\n\n// Update your ThemeHeader styling\nconst ThemeHeader = styled.div`\n  text-align: center;\n  margin-bottom: 4rem;\n\n  h1 {\n    font-family: 'Impact', 'Arial Black', sans-serif;\n    font-size: 4.5rem;\n    margin-bottom: 1rem;\n    background: linear-gradient(45deg, #800000, #4A0404);\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent;\n    text-shadow: 0 0 30px rgba(128, 0, 0, 0.3);\n    letter-spacing: 2px;\n    transform: skew(-5deg);\n  }\n\n  p {\n    font-size: 1.2rem;\n    line-height: 1.6;\n    max-width: 800px;\n    margin: 0 auto;\n    color: rgba(255, 255, 255, 0.8);\n    font-weight: 300;\n  }\n`;\n\n// Update ThemeSelectorContainer to center content\nconst ThemeSelectorContainer = styled.div`\n  position: relative;\n  min-height: 100vh;\n  padding: 0;\n  overflow: hidden;\n  background: #000000;\n\n  &::before {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    background: \n      radial-gradient(circle at 20% 30%, rgba(160, 0, 0, 0.2) 0%, transparent 50%),\n      radial-gradient(circle at 80% 70%, rgba(160, 0, 0, 0.15) 0%, transparent 50%);\n    opacity: 0.8;\n    animation: galaxySwirl 30s linear infinite;\n  }\n\n  &::after {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    background-image: \n      radial-gradient(circle 1px, #FFF 1px, transparent 1px),\n      radial-gradient(circle 2px, #A00000 1px, transparent 2px);\n    background-size: 200px 200px, 300px 300px;\n    background-position: 0 0;\n    opacity: 0.1;\n    animation: twinkle 4s infinite alternate;\n  }\n\n  .content-wrapper {\n    position: relative;\n    z-index: 1;\n    max-width: ${props => props.theme?.styles?.containerWidth || DEFAULT_THEME.styles.containerWidth};\n    margin: 0 auto;\n    padding: 4rem 2rem;\n    min-height: 100vh;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n  }\n`;\n\n\nconst PageContainer = styled.div`\n  min-height: 100vh;\n  background: ${props => props.hasTheme ? props.theme?.colors?.background || DEFAULT_THEME.colors.background : 'transparent'};  // Changed this line\n  color: ${props => props.theme?.colors?.text || DEFAULT_THEME.colors.text};\n  padding-top: ${props => props.hasTheme ? '80px' : '0'};\n  position: relative;\n  overflow-x: hidden;\n`;\n\nconst ShopBanner = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  height: 80px;\n  background: ${props => `${props.theme?.colors?.background || DEFAULT_THEME.colors.background}CC`};\n  backdrop-filter: blur(10px);\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 0 2rem;\n  z-index: 100;\n  border-bottom: 1px solid ${props => `${props.theme?.colors?.accent || DEFAULT_THEME.colors.accent}30`};\n`;\n\nconst ShopName = styled.div`\n  flex: 1;\n  text-align: ${props => props.position};\n  font-family: ${props => props.theme?.fonts?.heading || DEFAULT_THEME.fonts.heading};\n  font-size: 1.8rem;\n  padding: ${props => props.position === 'center' ? '0 80px' : '0'};\n`;\n\nconst KalkodeLogo = styled.div`\n  color: #800000;\n  font-family: 'Impact', sans-serif;\n  font-size: 2rem;\n  letter-spacing: 2px;\n  transform: skew(-5deg);\n  cursor: pointer;\n  transition: transform 0.3s ease;\n\n  &:hover {\n    transform: skew(-5deg) translateY(-2px);\n  }\n`;\n\nconst KalKodeLogo = styled.div`\n  color: #A00000;\n  font-family: 'Impact', sans-serif;\n  font-size: 2rem;\n  letter-spacing: 2px;\n  transform: skew(-5deg);\n`;\n\nconst MainContent = styled.div`\n  max-width: ${props => props.theme?.styles?.containerWidth || DEFAULT_THEME.styles.containerWidth};\n  margin: 0 auto;\n  padding: 2rem;\n  position: relative;\n  z-index: 1;\n`;\n\nconst ThemeGrid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));\n  gap: 2rem;\n  margin-bottom: 4rem;\n`;\n\nconst ActionButtons = styled.div`\n  position: fixed;\n  bottom: 2rem;\n  right: 2rem;\n  display: flex;\n  gap: 1rem;\n  z-index: 100;\n`;\n\nconst ActionButton = styled.button`\n  background: ${props => props.theme?.colors?.accent || DEFAULT_THEME.colors.accent};\n  color: ${props => props.theme?.colors?.text || DEFAULT_THEME.colors.text};\n  border: none;\n  border-radius: 30px;\n  padding: 1rem 2rem;\n  font-family: ${props => props.theme?.fonts?.heading || DEFAULT_THEME.fonts.heading};\n  font-size: 1rem;\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  gap: 0.8rem;\n  transition: all 0.3s ease;\n\n  &:hover {\n    transform: translateY(-2px);\n    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);\n  }\n\n  &:disabled {\n    opacity: 0.5;\n    cursor: not-allowed;\n  }\n`;\n\nconst CategoryTabs = styled.div`\n  display: flex;\n  justify-content: center;\n  gap: 1rem;\n  margin-bottom: 3rem;\n`;\n\nconst CategoryTab = styled.button`\n  background: ${props => props.active ? props.theme?.colors?.surface : 'transparent'};\n  border: 1px solid ${props => props.active ? \n    props.theme?.colors?.accent || DEFAULT_THEME.colors.accent : \n    'rgba(255, 255, 255, 0.1)'};\n  color: ${props => props.active ? \n    props.theme?.colors?.text || DEFAULT_THEME.colors.text : \n    `${props.theme?.colors?.text || DEFAULT_THEME.colors.text}80`};\n  padding: 0.8rem 1.5rem;\n  border-radius: 30px;\n  font-family: ${props => props.theme?.fonts?.heading || DEFAULT_THEME.fonts.heading};\n  cursor: pointer;\n  transition: all 0.3s ease;\n\n  &:hover {\n    background: ${props => props.theme?.colors?.surface || 'rgba(255, 255, 255, 0.05)'};\n    border-color: ${props => props.theme?.colors?.accent || DEFAULT_THEME.colors.accent};\n  }\n`;\n\n// Shop View Styled Components\nconst ShopSection = styled.section`\n  display: flex;\n  flex-direction: column;\n  gap: 2rem;\n`;\n\nconst ShopHeader = styled.div`\n  display: flex;\n  gap: 2rem;\n  align-items: start;\n  margin-bottom: 2rem;\n\n  .profile-section {\n    flex-shrink: 0;\n  }\n\n  .info-section {\n    flex: 1;\n  }\n`;\n\n// Update the ItemsGrid styled component\n// Update ItemsGrid back to original size\nconst ItemsGrid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));\n  gap: 2rem;\n  margin-bottom: 2rem;\n`;\n\n// Update ItemCard\nconst ItemCard = styled.div`\n  background: rgba(255, 255, 255, 0.05);\n  border-radius: ${props => props.theme?.styles?.borderRadius || '12px'};\n  overflow: hidden;\n  transition: all 0.3s ease;\n  border: 1px solid rgba(255, 255, 255, 0.1);\n  width: 100%;\n  height: 500px; // Fixed height to ensure rectangular shape\n\n  &:hover {\n    transform: translateY(-5px);\n    border-color: ${props => props.theme?.colors?.accent};\n  }\n\n  .item-content {\n    padding: 1.5rem;\n  }\n`;\n\n// Update ItemImageCarousel\nconst ItemImageCarousel = styled.div`\n  position: relative;\n  height: 250px; // Half of ItemCard height\n  width: 100%;\n  display: flex;\n  overflow: hidden;\n  background: rgba(0, 0, 0, 0.1);\n\n  .image-container {\n    width: 100%;\n    height: 100%;\n    position: relative;\n  }\n\n  .carousel-arrow {\n    position: absolute;\n    top: 50%;\n    transform: translateY(-50%);\n    background: rgba(0, 0, 0, 0.5);\n    border: none;\n    border-radius: 50%;\n    width: 32px;\n    height: 32px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    color: white;\n    cursor: pointer;\n    z-index: 2;\n    transition: all 0.3s ease;\n\n    &:hover {\n      background: rgba(0, 0, 0, 0.8);\n    }\n\n    &.left {\n      left: 10px;\n    }\n\n    &.right {\n      right: 10px;\n    }\n  }\n\n  .add-image {\n    position: absolute;\n    top: 10px;\n    right: 10px;\n    background: rgba(0, 0, 0, 0.5);\n    border: none;\n    border-radius: 50%;\n    width: 32px;\n    height: 32px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    color: white;\n    cursor: pointer;\n    z-index: 2;\n\n    &:hover {\n      background: rgba(0, 0, 0, 0.8);\n    }\n  }\n`;\n\nconst AddItemButton = styled.button`\n  background: ${props => props.theme?.colors?.primary || DEFAULT_THEME.colors.primary};\n  color: ${props => props.theme?.colors?.text || DEFAULT_THEME.colors.text};\n  border: none;\n  border-radius: ${props => props.theme?.styles?.borderRadius || DEFAULT_THEME.styles.borderRadius};\n  padding: 1rem 2rem;\n  font-family: ${props => props.theme?.fonts?.heading || DEFAULT_THEME.fonts.heading};\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  gap: 0.8rem;\n  margin: 2rem auto;\n  transition: all 0.3s ease;\n\n  &:hover {\n    transform: translateY(-2px);\n    background: ${props => props.theme?.colors?.secondary || DEFAULT_THEME.colors.secondary};\n  }\n\n  svg {\n    transition: transform 0.3s ease;\n  }\n\n  &:hover svg {\n    transform: rotate(90deg);\n  }\n`;\n\n// Home View Styled Components\nconst HomeSection = styled.div`\n  max-width: 800px;\n  margin: 0 auto;\n  padding: 2rem;\n\n  .mission-statement {\n    text-align: center;\n    margin: 3rem 0;\n    \n    h3 {\n      font-family: ${props => props.theme?.fonts?.heading || DEFAULT_THEME.fonts.heading};\n      color: ${props => props.theme?.colors?.accent || DEFAULT_THEME.colors.accent};\n      margin-bottom: 1rem;\n    }\n  }\n`;\n\nconst GalleryGrid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  gap: 2rem;\n  margin-top: 3rem;\n`;\n\nconst GalleryCard = styled.div`\n  background: ${props => `${props.theme?.colors?.primary || DEFAULT_THEME.colors.primary}15`};\n  border-radius: ${props => props.theme?.styles?.borderRadius || DEFAULT_THEME.styles.borderRadius};\n  padding: 2rem;\n  text-align: center;\n  border: 1px solid ${props => `${props.theme?.colors?.accent || DEFAULT_THEME.colors.accent}20`};\n  transition: all 0.3s ease;\n\n  h3 {\n    font-family: ${props => props.theme?.fonts?.heading || DEFAULT_THEME.fonts.heading};\n    color: ${props => props.theme?.colors?.accent || DEFAULT_THEME.colors.accent};\n    margin-bottom: 1rem;\n  }\n\n  p {\n    color: ${props => `${props.theme?.colors?.text || DEFAULT_THEME.colors.text}CC`};\n    font-family: ${props => props.theme?.fonts?.body || DEFAULT_THEME.fonts.body};\n    line-height: 1.6;\n  }\n\n  &:hover {\n    transform: translateY(-5px);\n    border-color: ${props => props.theme?.colors?.accent || DEFAULT_THEME.colors.accent};\n    box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1);\n  }\n`;\n\n// Community View Styled Components\nconst CommunitySection = styled.div`\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  gap: 2rem;\n`;\n\nconst FeedColumn = styled.div`\n  h2 {\n    font-family: ${props => props.theme?.fonts?.heading || DEFAULT_THEME.fonts.heading};\n    color: ${props => props.theme?.colors?.accent || DEFAULT_THEME.colors.accent};\n    margin-bottom: 2rem;\n  }\n`;\n\nconst PostCard = styled.div`\n  background: ${props => `${props.theme?.colors?.primary || DEFAULT_THEME.colors.primary}15`};\n  border-radius: ${props => props.theme?.styles?.borderRadius || DEFAULT_THEME.styles.borderRadius};\n  overflow: hidden;\n  border: 1px solid ${props => `${props.theme?.colors?.accent || DEFAULT_THEME.colors.accent}20`};\n  margin-bottom: 2rem;\n  transition: all 0.3s ease;\n\n  &:hover {\n    transform: translateY(-5px);\n    border-color: ${props => props.theme?.colors?.accent || DEFAULT_THEME.colors.accent};\n  }\n`;\n\nconst PostContent = styled.div`\n  padding: 1.5rem;\n\n  h3 {\n    font-family: ${props => props.theme?.fonts?.heading || DEFAULT_THEME.fonts.heading};\n    color: ${props => props.theme?.colors?.text || DEFAULT_THEME.colors.text};\n    margin-bottom: 1rem;\n  }\n\n  p {\n    color: ${props => `${props.theme?.colors?.text || DEFAULT_THEME.colors.text}CC`};\n    line-height: 1.6;\n    margin-bottom: 1rem;\n  }\n\n  .timestamp {\n    font-size: 0.9rem;\n    color: ${props => `${props.theme?.colors?.text || DEFAULT_THEME.colors.text}80`};\n  }\n`;\n\nconst PostActions = styled.div`\n  display: flex;\n  gap: 1rem;\n  padding: 1rem 1.5rem;\n  border-top: 1px solid ${props => `${props.theme?.colors?.accent || DEFAULT_THEME.colors.accent}20`};\n\n  button {\n    background: transparent;\n    border: none;\n    color: ${props => `${props.theme?.colors?.text || DEFAULT_THEME.colors.text}CC`};\n    display: flex;\n    align-items: center;\n    gap: 0.5rem;\n    cursor: pointer;\n    transition: all 0.2s;\n    padding: 0.5rem;\n    border-radius: 4px;\n\n    &:hover {\n      color: ${props => props.theme?.colors?.accent || DEFAULT_THEME.colors.accent};\n      background: ${props => `${props.theme?.colors?.accent || DEFAULT_THEME.colors.accent}15`};\n    }\n  }\n`;\n\nconst GlobalStyles = createGlobalStyle`\n  .ping {\n    position: absolute;\n    width: 2px;\n    height: 2px;\n    border-radius: 50%;\n    background: #800000;\n    pointer-events: none;\n  }\n\n  .ping::before {\n    content: '';\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    width: 200px;\n    height: 200px;\n    transform: translate(-50%, -50%);\n    border-radius: 50%;\n    background: radial-gradient(circle, rgba(128, 0, 0, 0.4) 0%, transparent 70%);\n    animation: ping 2s ease-out forwards;\n  }\n\n  @keyframes ping {\n    0% {\n      width: 0px;\n      height: 0px;\n      opacity: 1;\n    }\n    100% {\n      width: 200px;\n      height: 200px;\n      opacity: 0;\n    }\n  }\n`;\n\n// Main Component\nconst LiveShopCreation = () => {\n  const navigate = useNavigate();\n  const { saveTempStore } = useTempStore();\n  \n  // State\n  const [currentStep, setCurrentStep] = useState(1);\n  const [selectedTheme, setSelectedTheme] = useState(DEFAULT_THEME);\n  const [hasSelectedTheme, setHasSelectedTheme] = useState(false);\n  const [shopNamePosition, setShopNamePosition] = useState(SHOP_NAME_POSITIONS.LEFT);\n  const [tabPosition, setTabPosition] = useState(TAB_POSITIONS.TOP);\n  const [activeTab, setActiveTab] = useState('shop');\n  const [isPurchasing, setIsPurchasing] = useState(false);\n  \n  const [shopData, setShopData] = useState({\n    name: '',\n    description: '',\n    profile: null,\n    mission: '',\n    location: '',\n    items: [{\n      id: 1,\n      name: 'New Item',\n      price: '',\n      description: 'Describe your item here',\n      images: [null, null, null], // Initialize with three empty slots\n      currentImageIndex: 0,\n      location: '',\n      tags: [],\n      wants: 0\n    }],\n    wants: {},\n    layout: {\n      namePosition: SHOP_NAME_POSITIONS.LEFT,\n      tabPosition: TAB_POSITIONS.TOP\n    }\n  });\n\n  // Theme Selection Handler\n  const handleThemeSelect = (themeId) => {\n    console.log('Theme selected:', themeId); // For debugging\n    \n    const themeData = ELEMENTAL_THEMES[themeId];\n    if (themeData) {\n      const newTheme = {\n        ...DEFAULT_THEME,\n        ...themeData,\n        id: themeId\n      };\n      setSelectedTheme(newTheme);\n      setHasSelectedTheme(true); // This should trigger the view change\n    }\n  };\n\n  // Shop Data Handlers\n  const handleShopDataChange = (field, value) => {\n    setShopData(prev => ({\n      ...prev,\n      [field]: value\n    }));\n  };\n\n  const handleItemAdd = () => {\n    setShopData(prev => ({\n      ...prev,\n      items: [...prev.items, {\n        id: Date.now(),\n        name: '',\n        price: '',\n        description: '',\n        images: [null, null, null], // Initialize with three empty slots\n        currentImageIndex: 0,\n        location: '',\n        tags: [],\n        wants: 0\n      }]\n    }));\n  };\n  const handleItemUpdate = (itemId, updatedItem) => {\n    setShopData(prev => ({\n      ...prev,\n      items: prev.items.map(item => \n        item.id === itemId ? { ...updatedItem } : item\n      )\n    }));\n  };\n\n  const handleItemDelete = (itemId) => {\n    setShopData(prev => ({\n      ...prev,\n      items: prev.items.filter(item => item.id !== itemId)\n    }));\n  };\n\n  // Render Methods\n  const renderThemeSelector = () => (\n    <ThemeSelectorContainer className=\"theme-selector-container\">\n      <SelectionBanner>\n        <KalkodeLogo onClick={() => navigate('/')}>KALKODE</KalkodeLogo>\n      </SelectionBanner>\n      <div className=\"content-wrapper\">\n        <ThemeHeader>\n          <h1>Choose Your Theme</h1>\n          <p>Select a theme that reflects your brand's personality.</p>\n        </ThemeHeader>\n        <ThemeGrid>\n          {Object.entries(ELEMENTAL_THEMES).map(([id, theme]) => (\n            <div\n              key={id}\n              onClick={() => handleThemeSelect(id)}\n              style={{\n                cursor: 'pointer',\n                padding: '20px',\n                border: `1px solid ${theme.colors.accent}`,\n                borderRadius: '8px',\n                background: theme.colors.background,\n                transition: 'all 0.3s ease',\n              }}\n            >\n              <h3 style={{ color: theme.colors.text }}>{theme.name}</h3>\n              <p style={{ color: theme.colors.text }}>{theme.description}</p>\n            </div>\n          ))}\n        </ThemeGrid>\n      </div>\n    </ThemeSelectorContainer>\n  );\n\n  const ShopProfileSection = styled.section`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  text-align: center;\n  max-width: 800px;\n  margin: 0 auto 3rem auto;\n  padding: 2rem;\n\n  .profile-image {\n    margin-bottom: 2rem;\n  }\n\n  .shop-name {\n    margin-bottom: 1.5rem;\n    width: 100%;\n    font-family: ${props => props.theme?.fonts?.heading};\n  }\n\n  .shop-description {\n    width: 100%;\n  }\n`;\nconst handleAddImage = (itemId, newImage) => {\n  setShopData(prev => ({\n    ...prev,\n    items: prev.items.map(item => {\n      if (item.id === itemId && item.images.length < 3) {\n        return {\n          ...item,\n          images: [...item.images, newImage]\n        };\n      }\n      return item;\n    })\n  }));\n};\n\n// Then update your renderShopView method\n\nconst renderShopView = () => (\n  <MainContent>\n    <ShopProfileSection>\n      <div className=\"profile-image\">\n        <EditableImage\n          value={shopData.profile}\n          onChange={(value) => handleShopDataChange('profile', value)}\n          theme={selectedTheme}\n          round\n          width=\"150px\"\n          height=\"150px\"\n        />\n      </div>\n      <div className=\"shop-name\">\n        <EditableText\n          value={shopData.name}\n          onChange={(value) => handleShopDataChange('name', value)}\n          placeholder=\"Enter Your Shop Name\"\n          theme={selectedTheme}\n          fontSize=\"2rem\"\n          fontWeight=\"bold\"\n        />\n      </div>\n      <div className=\"shop-description\">\n        <EditableText\n          value={shopData.description}\n          onChange={(value) => handleShopDataChange('description', value)}\n          placeholder=\"Tell people about your shop...\"\n          multiline\n          theme={selectedTheme}\n        />\n      </div>\n    </ShopProfileSection>\n\n    <ItemsGrid>\n      {shopData.items.map(item => (\n        <ItemCard key={item.id}>\n          <ItemImageCarousel>\n            <div className=\"image-container\">\n              <EditableImage\n                value={item.images[item.currentImageIndex]}\n                onChange={(value) => {\n                  const newImages = [...item.images];\n                  newImages[item.currentImageIndex] = value;\n                  handleItemUpdate(item.id, { \n                    ...item, \n                    images: newImages\n                  });\n                }}\n                theme={selectedTheme}\n                height=\"100%\"\n                width=\"100%\"\n                round={false}\n              />\n            </div>\n              \n            <button \n              className=\"carousel-arrow left\"\n              onClick={() => {\n                const newIndex = ((item.currentImageIndex - 1) + 3) % 3;\n                handleItemUpdate(item.id, { ...item, currentImageIndex: newIndex });\n              }}\n            >\n              <ChevronLeft size={16} />\n            </button>\n            <button \n              className=\"carousel-arrow right\"\n              onClick={() => {\n                const newIndex = (item.currentImageIndex + 1) % 3;\n                handleItemUpdate(item.id, { ...item, currentImageIndex: newIndex });\n              }}\n            >\n              <ChevronRight size={16} />\n            </button>\n\n            {item.images[item.currentImageIndex] ? (\n              <button \n                className=\"add-image\"\n                onClick={() => {\n                  const newImages = [...item.images];\n                  newImages[item.currentImageIndex] = null;\n                  handleItemUpdate(item.id, { \n                    ...item, \n                    images: newImages\n                  });\n                }}\n              >\n                <X size={16} />\n              </button>\n            ) : (\n              <button \n                className=\"add-image\"\n                onClick={() => {\n                  const input = document.getElementById(`image-input-${item.id}`);\n                  if (input) input.click();\n                }}\n              >\n                <Plus size={16} />\n              </button>\n            )}\n            \n            {!item.images[item.currentImageIndex] && (\n              <button \n                className=\"add-image\"\n                onClick={() => {\n                  const input = document.getElementById(`image-input-${item.id}`);\n                  if (input) input.click();\n                }}\n              >\n                <Plus size={16} />\n              </button>\n            )}\n\n            <HiddenInput\n              type=\"file\"\n              id={`image-input-${item.id}`}\n              accept=\"image/*\"\n              onChange={(e) => {\n                if (e.target.files?.[0]) {\n                  const newImages = [...item.images];\n                  newImages[item.currentImageIndex] = e.target.files[0];\n                  handleItemUpdate(item.id, { \n                    ...item, \n                    images: newImages\n                  });\n                }\n              }}\n            />\n          </ItemImageCarousel>\n          \n          <div className=\"item-content\">\n            <EditableText\n              value={item.name}\n              onChange={(value) => handleItemUpdate(item.id, { ...item, name: value })}\n              placeholder=\"Item Name\"\n              theme={selectedTheme}\n              fontSize=\"1.2rem\"\n              fontWeight=\"bold\"\n            />\n            <EditableText\n              value={item.price}\n              onChange={(value) => handleItemUpdate(item.id, { ...item, price: value })}\n              placeholder=\"Price\"\n              theme={selectedTheme}\n            />\n            <EditableText\n              value={item.description}\n              onChange={(value) => handleItemUpdate(item.id, { ...item, description: value })}\n              placeholder=\"Item Description\"\n              multiline\n              theme={selectedTheme}\n            />\n          </div>\n        </ItemCard>\n      ))}\n    </ItemsGrid>\n\n    <AddItemButton onClick={handleItemAdd} theme={selectedTheme}>\n      <Plus size={20} />\n      Add Item\n    </AddItemButton>\n    </MainContent>\n  );\n\n  const renderHomeView = () => (\n    <HomeSection>\n      <div className=\"mission-statement\">\n        <h3>Mission Statement</h3>\n        <EditableText\n          value={shopData.mission}\n          onChange={(value) => handleShopDataChange('mission', value)}\n          placeholder=\"What's your shop's mission?\"\n          multiline\n          maxLength={500}\n          theme={selectedTheme}\n        />\n      </div>\n\n      <GalleryGrid>\n        {['Events', 'Activities', 'Features', 'Updates'].map(section => (\n          <GalleryCard key={section}>\n            <h3>{section}</h3>\n            <p>Content will be editable after signup</p>\n          </GalleryCard>\n        ))}\n      </GalleryGrid>\n    </HomeSection>\n  );\n\n  const renderCommunityView = () => (\n    <CommunitySection>\n      <FeedColumn>\n        <h2>Media Posts</h2>\n        {MOCK_POSTS\n          .filter(post => post.type === 'media')\n          .map(post => (\n            <PostCard key={post.id}>\n              <PostContent>\n                <h3>{post.author}</h3>\n                <p>{post.content}</p>\n                <span className=\"timestamp\">{post.timeAgo}</span>\n              </PostContent>\n              <PostActions>\n                <button><Heart size={18} /> {post.likes}</button>\n                <button><MessageCircle size={18} /> {post.comments}</button>\n                <button><Share2 size={18} /></button>\n              </PostActions>\n            </PostCard>\n          ))}\n      </FeedColumn>\n\n      <FeedColumn>\n        <h2>Featured Items</h2>\n        {MOCK_POSTS\n          .filter(post => post.type === 'item')\n          .map(post => (\n            <PostCard key={post.id}>\n              <PostContent>\n                <h3>{post.author}</h3>\n                <div>\n                  <h4>{post.item.name}</h4>\n                  <p>${post.item.price}</p>\n                </div>\n              </PostContent>\n              <PostActions>\n                <button><Heart size={18} /> {post.item.wants}</button>\n                <button><Share2 size={18} /></button>\n              </PostActions>\n            </PostCard>\n          ))}\n      </FeedColumn>\n    </CommunitySection>\n  );\n\n  // Main Render\n  return (\n    <ThemeProvider theme={selectedTheme}>\n      <GlobalStyles />\n      <PageContainer hasTheme={hasSelectedTheme}>\n        {!hasSelectedTheme ? (\n          renderThemeSelector()\n        ) : (\n          <>\n            <ShopBanner>\n              <ShopName position={shopNamePosition}>\n                {shopData.name || \"Your Shop Name\"}\n              </ShopName>\n              <KalKodeLogo onClick={() => navigate('/')}>\n                KALKODE\n              </KalKodeLogo>\n            </ShopBanner>\n\n            <TabPositioner\n              position={tabPosition}\n              onPositionChange={setTabPosition}\n              activeTab={activeTab}\n              onTabChange={setActiveTab}\n              tabs={[\n                { id: 'shop', label: 'Shop' },\n                { id: 'home', label: 'Home' },\n                { id: 'community', label: 'Community' }\n              ]}\n              theme={selectedTheme}\n            />\n\n            <MainContent>\n              {activeTab === 'shop' && renderShopView()}\n              {activeTab === 'home' && renderHomeView()}\n              {activeTab === 'community' && renderCommunityView()}\n            </MainContent>\n\n            <ActionButtons>\n              <ActionButton onClick={() => setHasSelectedTheme(false)}>\n                <Settings size={20} />\n                Change Theme\n              </ActionButton>\n              <ActionButton\n                onClick={() => {\n                  const shopDataToSave = {\n                    ...shopData,\n                    theme: selectedTheme,\n                    layout: {\n                      namePosition: shopNamePosition,\n                      tabPosition: tabPosition\n                    },\n                    // Properly structure profile image\n                    profile: shopData.profile ? {\n                      file: shopData.profile.file,\n                      type: shopData.profile.type\n                    } : null,\n                    // Properly structure item images\n                    items: shopData.items.map(item => ({\n                      ...item,\n                      images: item.images.map(img => img ? {\n                        file: img.file,\n                        type: img.type\n                      } : null)\n                    }))\n                  };\n                  console.log('Shop data being passed:', shopDataToSave);\n                  navigate('/auth', {\n                    state: { \n                      mode: 'signup', \n                      tempData: shopDataToSave \n                    }\n                  });\n                }}\n                disabled={!shopData.name}\n              >\n                Continue to Signup\n                <ChevronRight size={20} />\n              </ActionButton>\n            </ActionButtons>\n          </>\n        )}\n      </PageContainer>\n    </ThemeProvider>\n  );\n};\n\nexport default LiveShopCreation;"
        }
    ]
}