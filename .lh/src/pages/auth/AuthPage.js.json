{
    "sourceFile": "src/pages/auth/AuthPage.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1735711046683,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1735711054259,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -155,8 +155,23 @@\n   margin-top: 1rem;\r\n   font-size: 0.9rem;\r\n `;\r\n \r\n+const LoadingSpinner = styled.div`\r\n+  width: 20px;\r\n+  height: 20px;\r\n+  border: 2px solid rgba(255, 255, 255, 0.3);\r\n+  border-radius: 50%;\r\n+  border-top-color: white;\r\n+  animation: spin 1s linear infinite;\r\n+\r\n+  @keyframes spin {\r\n+    to {\r\n+      transform: rotate(360deg);\r\n+    }\r\n+  }\r\n+`;\r\n+\r\n // Added password requirements component\r\n const PasswordRequirements = styled.div`\r\n   font-size: 0.8rem;\r\n   color: rgba(255, 255, 255, 0.6);\r\n"
                }
            ],
            "date": 1735711046683,
            "name": "Commit-0",
            "content": "import React, { useState, useEffect } from 'react';\r\nimport { useLocation, useNavigate } from 'react-router-dom';\r\nimport styled from 'styled-components';\r\nimport { auth, googleProvider } from '../../firebase/config';\r\nimport { \r\n  signInWithPopup, \r\n  signInWithRedirect, \r\n  getRedirectResult,\r\n  createUserWithEmailAndPassword,\r\n  sendEmailVerification \r\n} from 'firebase/auth';\r\nimport { saveShopData, uploadShopImages } from '../../firebase/firebaseService';\r\nimport { useAuth } from '../../contexts/AuthContext';\r\n\r\n\r\n// Styled Components\r\nconst PageContainer = styled.div`\r\n  min-height: 100vh;\r\n  background: linear-gradient(to bottom, #0B0B3B, #1A1A4C);\r\n  color: #FFFFFF;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  padding: 2rem;\r\n`;\r\n\r\nconst AuthForm = styled.div`\r\n  background: rgba(0, 0, 0, 0.6);\r\n  backdrop-filter: blur(10px);\r\n  padding: 2.5rem;\r\n  border-radius: 20px;\r\n  width: 100%;\r\n  max-width: 400px;\r\n  border: 1px solid rgba(128, 0, 0, 0.3);\r\n\r\n  h2 {\r\n    text-align: center;\r\n    font-size: 1.8rem;\r\n    margin-bottom: 2rem;\r\n    background: linear-gradient(45deg, #800000, #4A0404);\r\n    -webkit-background-clip: text;\r\n    -webkit-text-fill-color: transparent;\r\n  }\r\n`;\r\n\r\nconst GoogleButton = styled.button`\r\n  width: 100%;\r\n  padding: 1rem;\r\n  background: white;\r\n  color: #333;\r\n  border: none;\r\n  border-radius: 8px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  gap: 1rem;\r\n  font-weight: 500;\r\n  cursor: pointer;\r\n  transition: all 0.3s;\r\n\r\n  &:hover {\r\n    background: #f5f5f5;\r\n    transform: translateY(-2px);\r\n  }\r\n\r\n  &:disabled {\r\n    opacity: 0.7;\r\n    cursor: not-allowed;\r\n  }\r\n\r\n  img {\r\n    width: 20px;\r\n    height: 20px;\r\n  }\r\n`;\r\n\r\nconst Divider = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  text-align: center;\r\n  margin: 2rem 0;\r\n  color: rgba(255, 255, 255, 0.5);\r\n\r\n  &::before,\r\n  &::after {\r\n    content: '';\r\n    flex: 1;\r\n    border-bottom: 1px solid rgba(255, 255, 255, 0.2);\r\n  }\r\n\r\n  &::before {\r\n    margin-right: 1rem;\r\n  }\r\n\r\n  &::after {\r\n    margin-left: 1rem;\r\n  }\r\n`;\r\n\r\nconst Input = styled.input`\r\n  width: 100%;\r\n  padding: 1rem;\r\n  background: rgba(255, 255, 255, 0.05);\r\n  border: 1px solid rgba(255, 255, 255, 0.1);\r\n  border-radius: 8px;\r\n  color: white;\r\n  margin-bottom: 1rem;\r\n  transition: all 0.3s;\r\n\r\n  &:focus {\r\n    outline: none;\r\n    border-color: #800000;\r\n    background: rgba(255, 255, 255, 0.1);\r\n  }\r\n\r\n  &::placeholder {\r\n    color: rgba(255, 255, 255, 0.5);\r\n  }\r\n`;\r\n\r\nconst Button = styled.button`\r\n  width: 100%;\r\n  padding: 1rem;\r\n  background: linear-gradient(45deg, #800000, #4A0404);\r\n  color: white;\r\n  border: none;\r\n  border-radius: 8px;\r\n  font-weight: 500;\r\n  cursor: pointer;\r\n  transition: all 0.3s;\r\n\r\n  &:hover {\r\n    transform: translateY(-2px);\r\n  }\r\n\r\n  &:disabled {\r\n    opacity: 0.7;\r\n    cursor: not-allowed;\r\n  }\r\n`;\r\n\r\nconst ErrorMessage = styled.div`\r\n  color: #FF4444;\r\n  background: rgba(255, 68, 68, 0.1);\r\n  padding: 1rem;\r\n  border-radius: 8px;\r\n  margin-bottom: 1rem;\r\n  font-size: 0.9rem;\r\n  text-align: center;\r\n`;\r\n\r\nconst InfoText = styled.p`\r\n  text-align: center;\r\n  color: rgba(255, 255, 255, 0.7);\r\n  margin-top: 1rem;\r\n  font-size: 0.9rem;\r\n`;\r\n\r\n// Added password requirements component\r\nconst PasswordRequirements = styled.div`\r\n  font-size: 0.8rem;\r\n  color: rgba(255, 255, 255, 0.6);\r\n  margin-bottom: 1rem;\r\n  \r\n  ul {\r\n    list-style: none;\r\n    padding-left: 0;\r\n  }\r\n\r\n  li {\r\n    margin: 0.25rem 0;\r\n    display: flex;\r\n    align-items: center;\r\n    gap: 0.5rem;\r\n\r\n    &.met {\r\n      color: #4CAF50;\r\n    }\r\n  }\r\n`;\r\n\r\nconst AuthPage = () => {\r\n  const { signInWithGoogle } = useAuth();\r\n  const location = useLocation();\r\n  const navigate = useNavigate();\r\n  const tempData = location.state?.tempData;\r\n  \r\n  const [email, setEmail] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  const [passwordStrength, setPasswordStrength] = useState({\r\n    length: false,\r\n    number: false,\r\n    special: false,\r\n    uppercase: false\r\n  });\r\n\r\n  const from = location.state?.from?.pathname || '/shop/dashboard';\r\n  \r\n // Handle redirect result first\r\n // First effect: Handle redirect result\r\n useEffect(() => {\r\n  const handleRedirectResult = async () => {\r\n    try {\r\n      const { getRedirectResult } = await import('firebase/auth');\r\n      const result = await getRedirectResult(auth);\r\n      \r\n      if (result?.user) {\r\n        console.log('Redirect successful, user:', result.user.uid);\r\n        \r\n        const storedData = sessionStorage.getItem('tempShopData');\r\n        if (storedData) {\r\n          const tempData = JSON.parse(storedData);\r\n          await saveShopData(result.user.uid, tempData);\r\n          sessionStorage.removeItem('tempShopData');\r\n          navigate(`/shop/${result.user.uid}`, { replace: true });\r\n        } else {\r\n          navigate('/shop/dashboard', { replace: true });\r\n        }\r\n      }\r\n    } catch (err) {\r\n      console.error('Redirect error:', err);\r\n      setError('Authentication failed. Please try again.');\r\n    }\r\n  };\r\n\r\n  handleRedirectResult();\r\n}, []);\r\n\r\nuseEffect(() => {\r\n  return () => {\r\n    // Cleanup stored data when component unmounts\r\n    sessionStorage.removeItem('tempShopData');\r\n  };\r\n}, []);\r\n\r\n// Second effect: Handle existing auth state\r\nuseEffect(() => {\r\n  const unsubscribe = auth.onAuthStateChanged((user) => {\r\n    if (user && !tempData) {\r\n      navigate('/shop/dashboard');\r\n    }\r\n  });\r\n\r\n  return () => unsubscribe();\r\n}, [navigate, tempData]);\r\n\r\n// In AuthPage.js, modify handleGoogleSignup:\r\n\r\nconst handleGoogleSignup = async () => {\r\n  try {\r\n    setLoading(true);\r\n    setError(null);\r\n    console.log('Starting Google signup...');\r\n    \r\n    if (tempData) {\r\n      sessionStorage.setItem('tempShopData', JSON.stringify(tempData));\r\n    }\r\n\r\n    const { signInWithPopup } = await import('firebase/auth');\r\n    const result = await signInWithPopup(auth, googleProvider);\r\n    const user = result.user;\r\n    \r\n    console.log('Popup successful, user:', user.uid);\r\n    \r\n    if (tempData) {\r\n      try {\r\n        await saveShopData(user.uid, tempData);\r\n        console.log('Shop data saved');\r\n        // Use replace to avoid navigation history issues\r\n        navigate(`/shop/${user.uid}`, { replace: true });\r\n      } catch (saveError) {\r\n        console.error('Error saving shop data:', saveError);\r\n        setError('Failed to save shop data. Please try again.');\r\n      }\r\n    } else {\r\n      navigate('/shop/dashboard', { replace: true });\r\n    }\r\n  } catch (err) {\r\n    // Specifically handle popup blocked errors\r\n    if (err.code === 'auth/popup-blocked') {\r\n      setError('Popup was blocked. Please allow popups for this site and try again.');\r\n    } else {\r\n      console.error('Google signup error:', err);\r\n      setError(err.message || 'Failed to sign up with Google');\r\n    }\r\n  } finally {\r\n    setLoading(false);\r\n    // Clean up stored data if there was an error\r\n    if (tempData && error) {\r\n      sessionStorage.removeItem('tempShopData');\r\n    }\r\n  }\r\n};\r\n\r\n// Add this useEffect in AuthPage.js\r\nuseEffect(() => {\r\n  // Cleanup function\r\n  return () => {\r\n    sessionStorage.removeItem('tempShopData');\r\n  };\r\n}, []);\r\n\r\n  const handleSuccessfulSignIn = async (user) => {\r\n    if (tempData) {\r\n      try {\r\n        await saveShopData(user.uid, tempData);\r\n        navigate('/shop/dashboard');\r\n      } catch (saveError) {\r\n        console.error('Error saving shop data:', saveError);\r\n        setError('Failed to save shop data, but account was created.');\r\n      }\r\n    } else {\r\n      navigate('/shop/dashboard');\r\n    }\r\n  };\r\n\r\n// And update the handleEmailSignup similarly\r\n  const handleEmailSignup = async (e) => {\r\n    e.preventDefault();\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n      const result = await createUserWithEmailAndPassword(auth, email, password);\r\n      await sendEmailVerification(result.user);\r\n      \r\n      if (tempData) {\r\n        const structuredData = {\r\n          shopId: tempData.shopId || Date.now().toString(),\r\n          shopName: tempData.shopName || tempData.name || '',\r\n          template: tempData.template || 'default',\r\n          colors: tempData.colors || {},\r\n          profile: tempData.profile || null,\r\n          items: tempData.items?.map(item => ({\r\n            id: item.id || Date.now(),\r\n            name: item.name || '',\r\n            price: item.price || '',\r\n            description: item.description || '',\r\n            images: item.images || [null, null, null],\r\n            location: item.location || '',\r\n            tags: item.tags || [],\r\n            wants: item.wants || 0\r\n          })) || [],\r\n          createdAt: new Date().toISOString()\r\n        };\r\n        \r\n        await saveShopData(result.user.uid, structuredData);\r\n      }\r\n      \r\n      navigate('/verify-email');\r\n    } catch (err) {\r\n      console.error('Email signup error:', err);\r\n      setError(err.message);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n\r\n  // Password validation handler\r\n    const validatePassword = (pass) => {\r\n      setPasswordStrength({\r\n        length: pass.length >= 8,\r\n        number: /\\d/.test(pass),\r\n        special: /[!@#$%^&*]/.test(pass),\r\n        uppercase: /[A-Z]/.test(pass)\r\n      });\r\n    };\r\n  \r\n    const handlePasswordChange = (e) => {\r\n      const newPassword = e.target.value;\r\n      setPassword(newPassword);\r\n      validatePassword(newPassword);\r\n    };\r\n        \r\n    return (\r\n        <PageContainer>\r\n          <AuthForm>\r\n            <h2>Create Your Account</h2>\r\n            {error && <ErrorMessage>{error}</ErrorMessage>}\r\n            \r\n            <GoogleButton\r\n              onClick={handleGoogleSignup}\r\n              disabled={loading}\r\n            >\r\n              <img \r\n                src=\"https://cdn.cdnlogo.com/logos/g/35/google-icon.svg\" \r\n                alt=\"Google\"\r\n              />\r\n              Continue with Google\r\n            </GoogleButton>\r\n    \r\n            <Divider>or</Divider>\r\n    \r\n            <form onSubmit={handleEmailSignup}>\r\n              <Input\r\n                type=\"email\"\r\n                placeholder=\"Email\"\r\n                value={email}\r\n                onChange={(e) => setEmail(e.target.value)}\r\n                required\r\n              />\r\n              <Input\r\n                type=\"password\"\r\n                placeholder=\"Password\"\r\n                value={password}\r\n                onChange={handlePasswordChange}\r\n                required\r\n              />\r\n    \r\n              <PasswordRequirements>\r\n                <ul>\r\n                  <li className={passwordStrength.length ? 'met' : ''}>\r\n                    ✓ At least 8 characters\r\n                  </li>\r\n                  <li className={passwordStrength.number ? 'met' : ''}>\r\n                    ✓ Contains a number\r\n                  </li>\r\n                  <li className={passwordStrength.special ? 'met' : ''}>\r\n                    ✓ Contains a special character\r\n                  </li>\r\n                  <li className={passwordStrength.uppercase ? 'met' : ''}>\r\n                    ✓ Contains an uppercase letter\r\n                  </li>\r\n                </ul>\r\n              </PasswordRequirements>\r\n    \r\n              <Button type=\"submit\" disabled={loading}>\r\n                {loading ? (\r\n                  <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'center' }}>\r\n                    <LoadingSpinner />\r\n                    <span style={{ marginLeft: '0.5rem' }}>Loading...</span>\r\n                  </div>\r\n                ) : (\r\n                  'Create Account'\r\n                )}\r\n              </Button>\r\n            </form>\r\n    \r\n            {tempData && (\r\n              <InfoText>\r\n                Your shop will be saved after creating your account\r\n              </InfoText>\r\n            )}\r\n          </AuthForm>\r\n        </PageContainer>\r\n      );\r\n    };\r\n    \r\n    export default AuthPage;"
        }
    ]
}