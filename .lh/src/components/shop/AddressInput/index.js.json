{
    "sourceFile": "src/components/shop/AddressInput/index.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1759890394697,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1759890467818,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,200 @@\n+// src/components/shop/AddressInput/index.js\r\n+import React, { useState } from 'react';\r\n+import styled from 'styled-components';\r\n+import { Navigation, Search, X } from 'lucide-react';\r\n+\r\n+const AddressContainer = styled.div`\r\n+  margin-top: 0.5rem;\r\n+  width: 100%;\r\n+`;\r\n+\r\n+const InputWrapper = styled.div`\r\n+  display: flex;\r\n+  align-items: center;\r\n+  gap: 0.5rem;\r\n+  background: rgba(255, 255, 255, 0.05);\r\n+  border-radius: 4px;\r\n+  padding: 0.25rem 0.5rem;\r\n+  border: 1px solid rgba(255, 255, 255, 0.1);\r\n+\r\n+  &:focus-within {\r\n+    border-color: ${props => props.theme?.colors?.accent || '#800000'};\r\n+  }\r\n+`;\r\n+\r\n+const Input = styled.input`\r\n+  flex: 1;\r\n+  background: transparent;\r\n+  border: none;\r\n+  color: ${props => props.theme?.colors?.text || '#FFFFFF'};\r\n+  font-size: 0.9rem;\r\n+  padding: 0.25rem;\r\n+  outline: none;\r\n+\r\n+  &::placeholder {\r\n+    color: rgba(255, 255, 255, 0.5);\r\n+  }\r\n+`;\r\n+\r\n+const LocationButton = styled.button`\r\n+  background: transparent;\r\n+  border: none;\r\n+  color: ${props => props.theme?.colors?.accent || '#800000'};\r\n+  padding: 0.25rem;\r\n+  cursor: pointer;\r\n+  display: flex;\r\n+  align-items: center;\r\n+  opacity: 0.8;\r\n+  transition: opacity 0.3s;\r\n+\r\n+  &:hover {\r\n+    opacity: 1;\r\n+  }\r\n+\r\n+  &:disabled {\r\n+    opacity: 0.5;\r\n+    cursor: not-allowed;\r\n+  }\r\n+`;\r\n+\r\n+const LocationInfo = styled.div`\r\n+  font-size: 0.8rem;\r\n+  color: ${props => props.theme?.colors?.text || '#FFFFFF'};\r\n+  opacity: 0.7;\r\n+  margin-top: 0.25rem;\r\n+  display: flex;\r\n+  align-items: center;\r\n+  gap: 0.5rem;\r\n+\r\n+  .location-icon {\r\n+    color: ${props => props.theme?.colors?.accent || '#800000'};\r\n+  }\r\n+`;\r\n+\r\n+const standardizeCoordinates = (coordinates) => {\r\n+  if (!coordinates) return null;\r\n+  \r\n+  const lat = coordinates.lat || coordinates.latitude;\r\n+  const lng = coordinates.lng || coordinates.longitude;\r\n+  \r\n+  if (typeof lat !== 'number' || typeof lng !== 'number') {\r\n+    return null;\r\n+  }\r\n+\r\n+  return { lat, lng };\r\n+};\r\n+\r\n+const formatCoordinates = (coords) => {\r\n+  if (!coords) return '';\r\n+  return `${coords.lat.toFixed(6)}, ${coords.lng.toFixed(6)}`;\r\n+};\r\n+\r\n+\r\n+const AddressInput = ({ address, onAddressChange, onLocationSelect }) => {\r\n+  const [isLoading, setIsLoading] = useState(false);\r\n+\r\n+  const handleLiveLocation = () => {\r\n+    if (!navigator.geolocation) {\r\n+      console.error('Geolocation not supported');\r\n+      return;\r\n+    }\r\n+\r\n+    setIsLoading(true);\r\n+    navigator.geolocation.getCurrentPosition(\r\n+      (position) => {\r\n+        const coords = standardizeCoordinates({\r\n+          latitude: position.coords.latitude,\r\n+          longitude: position.coords.longitude\r\n+        });\r\n+\r\n+        if (coords) {\r\n+          const formattedAddress = formatCoordinates(coords);\r\n+          onAddressChange(formattedAddress);\r\n+          \r\n+          // Call onLocationSelect with proper structure\r\n+          onLocationSelect({\r\n+            address: formattedAddress,\r\n+            coordinates: coords\r\n+          });\r\n+        }\r\n+        setIsLoading(false);\r\n+      },\r\n+      (error) => {\r\n+        console.error('Error getting location:', error);\r\n+        alert('Failed to get location. Please enable location services.');\r\n+        setIsLoading(false);\r\n+      },\r\n+      {\r\n+        enableHighAccuracy: true,\r\n+        timeout: 10000,\r\n+        maximumAge: 0\r\n+      }\r\n+    );\r\n+  };\r\n+\r\n+  return (\r\n+    <AddressContainer>\r\n+      <InputWrapper>\r\n+        <Input\r\n+          type=\"text\"\r\n+          value={address}\r\n+          onChange={(e) => onAddressChange(e.target.value)}\r\n+          placeholder=\"Enter coordinates (lat, lng) or click location icon\"\r\n+          onKeyPress={(e) => {\r\n+            if (e.key === 'Enter') {\r\n+              // Handle manual coordinate entry\r\n+              const coordsMatch = address.match(/^(-?\\d+\\.?\\d*),\\s*(-?\\d+\\.?\\d*)$/);\r\n+              if (coordsMatch) {\r\n+                const coords = {\r\n+                  lat: parseFloat(coordsMatch[1]),\r\n+                  lng: parseFloat(coordsMatch[2])\r\n+                };\r\n+                onLocationSelect({\r\n+                  address: formatCoordinates(coords),\r\n+                  coordinates: coords\r\n+                });\r\n+              }\r\n+            }\r\n+          }}\r\n+        />\r\n+        {address && (\r\n+          <LocationButton \r\n+            onClick={() => {\r\n+              onAddressChange('');\r\n+              onLocationSelect({ address: '', coordinates: null });\r\n+            }}\r\n+            title=\"Clear\"\r\n+          >\r\n+            <X size={16} />\r\n+          </LocationButton>\r\n+        )}\r\n+        <LocationButton \r\n+          onClick={handleLiveLocation}\r\n+          disabled={isLoading}\r\n+          title=\"Use current location\"\r\n+        >\r\n+          {isLoading ? (\r\n+            <div style={{\r\n+              width: '16px',\r\n+              height: '16px',\r\n+              border: '2px solid rgba(128, 0, 0, 0.3)',\r\n+              borderRadius: '50%',\r\n+              borderTopColor: '#800000',\r\n+              animation: 'spin 1s linear infinite'\r\n+            }} />\r\n+          ) : (\r\n+            <Navigation size={16} />\r\n+          )}\r\n+        </LocationButton>\r\n+      </InputWrapper>\r\n+      {address && (\r\n+        <LocationInfo>\r\n+          <Navigation size={14} className=\"location-icon\" />\r\n+          {address}\r\n+        </LocationInfo>\r\n+      )}\r\n+    </AddressContainer>\r\n+  );\r\n+};\r\n+\r\n+export default AddressInput;\n\\ No newline at end of file\n"
                }
            ],
            "date": 1759890394697,
            "name": "Commit-0",
            "content": "// src/components/shop/AddressInput/index.js\r\nimport React, { useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport { Navigation, Search, X } from 'lucide-react';\r\n\r\nconst AddressContainer = styled.div`\r\n  margin-top: 0.5rem;\r\n  width: 100%;\r\n`;\r\n\r\nconst InputWrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 0.5rem;\r\n  background: rgba(255, 255, 255, 0.05);\r\n  border-radius: 4px;\r\n  padding: 0.25rem 0.5rem;\r\n  border: 1px solid rgba(255, 255, 255, 0.1);\r\n\r\n  &:focus-within {\r\n    border-color: ${props => props.theme?.colors?.accent || '#800000'};\r\n  }\r\n`;\r\n\r\nconst Input = styled.input`\r\n  flex: 1;\r\n  background: transparent;\r\n  border: none;\r\n  color: ${props => props.theme?.colors?.text || '#FFFFFF'};\r\n  font-size: 0.9rem;\r\n  padding: 0.25rem;\r\n  outline: none;\r\n\r\n  &::placeholder {\r\n    color: rgba(255, 255, 255, 0.5);\r\n  }\r\n`;\r\n\r\nconst LocationButton = styled.button`\r\n  background: transparent;\r\n  border: none;\r\n  color: ${props => props.theme?.colors?.accent || '#800000'};\r\n  padding: 0.25rem;\r\n  cursor: pointer;\r\n  display: flex;\r\n  align-items: center;\r\n  opacity: 0.8;\r\n  transition: opacity 0.3s;\r\n\r\n  &:hover {\r\n    opacity: 1;\r\n  }\r\n\r\n  &:disabled {\r\n    opacity: 0.5;\r\n    cursor: not-allowed;\r\n  }\r\n`;\r\n\r\nconst LocationInfo = styled.div`\r\n  font-size: 0.8rem;\r\n  color: ${props => props.theme?.colors?.text || '#FFFFFF'};\r\n  opacity: 0.7;\r\n  margin-top: 0.25rem;\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 0.5rem;\r\n\r\n  .location-icon {\r\n    color: ${props => props.theme?.colors?.accent || '#800000'};\r\n  }\r\n`;\r\n\r\nconst standardizeCoordinates = (coordinates) => {\r\n  if (!coordinates) return null;\r\n  \r\n  const lat = coordinates.lat || coordinates.latitude;\r\n  const lng = coordinates.lng || coordinates.longitude;\r\n  \r\n  if (typeof lat !== 'number' || typeof lng !== 'number') {\r\n    return null;\r\n  }\r\n\r\n  return { lat, lng };\r\n};\r\n\r\nconst formatCoordinates = (coords) => {\r\n  if (!coords) return '';\r\n  return `${coords.lat.toFixed(6)}, ${coords.lng.toFixed(6)}`;\r\n};\r\n\r\n\r\nconst AddressInput = ({ address, onAddressChange, onLocationSelect }) => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  const handleLiveLocation = () => {\r\n    if (!navigator.geolocation) {\r\n      console.error('Geolocation not supported');\r\n      return;\r\n    }\r\n\r\n    setIsLoading(true);\r\n    navigator.geolocation.getCurrentPosition(\r\n      (position) => {\r\n        const coords = standardizeCoordinates({\r\n          latitude: position.coords.latitude,\r\n          longitude: position.coords.longitude\r\n        });\r\n\r\n        if (coords) {\r\n          const formattedAddress = formatCoordinates(coords);\r\n          onAddressChange(formattedAddress);\r\n          \r\n          // Call onLocationSelect with proper structure\r\n          onLocationSelect({\r\n            address: formattedAddress,\r\n            coordinates: coords\r\n          });\r\n        }\r\n        setIsLoading(false);\r\n      },\r\n      (error) => {\r\n        console.error('Error getting location:', error);\r\n        alert('Failed to get location. Please enable location services.');\r\n        setIsLoading(false);\r\n      },\r\n      {\r\n        enableHighAccuracy: true,\r\n        timeout: 10000,\r\n        maximumAge: 0\r\n      }\r\n    );\r\n  };\r\n\r\n  return (\r\n    <AddressContainer>\r\n      <InputWrapper>\r\n        <Input\r\n          type=\"text\"\r\n          value={address}\r\n          onChange={(e) => onAddressChange(e.target.value)}\r\n          placeholder=\"Enter coordinates (lat, lng) or click location icon\"\r\n          onKeyPress={(e) => {\r\n            if (e.key === 'Enter') {\r\n              // Handle manual coordinate entry\r\n              const coordsMatch = address.match(/^(-?\\d+\\.?\\d*),\\s*(-?\\d+\\.?\\d*)$/);\r\n              if (coordsMatch) {\r\n                const coords = {\r\n                  lat: parseFloat(coordsMatch[1]),\r\n                  lng: parseFloat(coordsMatch[2])\r\n                };\r\n                onLocationSelect({\r\n                  address: formatCoordinates(coords),\r\n                  coordinates: coords\r\n                });\r\n              }\r\n            }\r\n          }}\r\n        />\r\n        \r\n        <LocationButton \r\n          onClick={handleLiveLocation}\r\n          disabled={isLoading}\r\n          title=\"Use current location\"\r\n        >\r\n          {isLoading ? (\r\n            <div style={{\r\n              width: '16px',\r\n              height: '16px',\r\n              border: '2px solid rgba(128, 0, 0, 0.3)',\r\n              borderRadius: '50%',\r\n              borderTopColor: '#800000',\r\n              animation: 'spin 1s linear infinite'\r\n            }} />\r\n          ) : (\r\n            <Navigation size={16} />\r\n          )}\r\n        </LocationButton>\r\n      </InputWrapper>\r\n      {address && (\r\n        <LocationInfo>\r\n          <Navigation size={14} className=\"location-icon\" />\r\n          {address}\r\n        </LocationInfo>\r\n      )}\r\n    </AddressContainer>\r\n  );\r\n};\r\n\r\nexport default AddressInput;"
        }
    ]
}